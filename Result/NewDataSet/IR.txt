assertEquals ( "property not set correctly" , 25 , bean . getIntProperty ( ) )
Assert . assertTrue ( IntSetTestUtility . equalSets ( IntSetTestUtility . getSetBits ( ) , bitSet ) )
assertThat ( unit . handleFault ( messageContext ) , is ( true ) )
assertFalse ( p1 . equals ( null ) )
assertThat ( result . isValid ( ) , is ( true ) )
assertThat ( minMax . iterativeSearchForBestMove ( board , 1 ) , anyOf ( containsString ( "2 2" ) , containsString ( "0 3" ) , containsString ( "4 0" ) , containsString ( "4 1" ) , containsString ( "4 2" ) , containsString ( "3 0" ) , containsString ( "3 2" ) ) )
assertEquals ( 2 , connPerRoute . getMaxPerRoute ( route ) )
Assert . assertEquals ( ( new Mean ( ) ) . evaluate ( scores ) , stats . getMean ( ) , 0 )
Assert . assertEquals ( Boolean . FALSE , JsfUtils . isNewMessage ( existingFacesMessage , messageToCheck ) )
XmlAssert . assertEquals ( EXPECTED_XML_RESPONSE , xmlResponse )
assertEquals ( "" , result )
Assert . assertEquals ( vector , new Vector ( 50 , 50 , 50 ) )
assertEquals ( "Triangle area is not correct" , 2 , a , epsilon )
assertLog ( Log . DEBUG , "test debug argument argument2 argument3" )
assertPaths ( asList ( component . group ( ) , component . name ( ) , component . version ( ) ) , paths , true )
assertEquals ( "INSERT INTO SimpleEntity(name) VALUES(?)" , Utils . singleLine ( sql ) )
assertThat ( isValid , is ( true ) )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( ctrl . getCell ( "A2" ) . getText ( ) , "" )
assertTrue ( "isLoaded should return true if only element not displayed is not required when " + "RequireAll annotation is used." , testView . isLoaded ( ) )
assertEquals ( "SRID=2908;POLYGON ((-1.7343137097220955 -0.7184643510054844, -1.7343137097220955 1.2815356489945156, 1.3174946969250207 1.2815356489945156, 1.3174946969250207 -0.7184643510054844, -1.7343137097220955 -0.7184643510054844))" , ClobType . getString ( ( ClobType ) Evaluator . evaluate ( ex ) ) )
Assert . assertTrue ( this . manager . connect ( this . person1 , this . family1 ) )
assertClients ( registryAdapterService , REGISTRY_PROXY_NULL_VALUE , REGISTRY_PROXY_NULL_VALUE )
assertThat ( actualBrowser , CoreMatchers . not ( isEmptyOrNullString ( ) ) )
assertEquals ( Arrays . asList ( aa , ab , ac ) , kittens )
assertEquals ( "shouldn't contain links" , 0 , db . getAllLinks ( ) . size ( ) )
assertTrue ( ! result )
assertEquals ( "text/html" , requestImpl . accepts ( "test/test" , "text/html" ) )
assertEquals ( 5 , result )
assertEquals ( List . of ( new Text ( "line1" ) , new Text ( "line2" ) ) , output )
assertEquals ( "Date parsing is wrong" , expectedDate , mapper . readBitemporalDate ( columns , "vt_from" ) . toDate ( ) )
assertThat ( target . getFlowId ( ) , is ( "FlowId" ) )
assertEquals ( 81 , webFlags . port )
Assert . assertNull ( cGroupsBlkioResourceHandlerImpl . reacquireContainer ( containerIdMock ) )
Assert . assertEquals ( cmpRgb , resultRgb )
assertEquals ( l . size ( ) , 18 )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigCaller ( ) ) . isErrorEnabled ( ) )
assertTrue ( groupsManager . isGroupMember ( sess , group3 , member ) )
Assert . assertEquals ( "1" , result )
assertEquals ( set ( FlagsWithZero . V0 , FlagsWithZero . V1 , FlagsWithZero . V2 , FlagsWithZero . V4 , FlagsWithZero . V8 ) , set ( positionValues ) )
assertTrue ( brutalAds . shouldShowAds ( ) )
assertEquals ( true , m . matches ( ) )
assertThat ( updateSuccessful , equalTo ( false ) )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
assertTrue ( Arrays . equals ( data1024 , decompressed ) )
assertEquals ( result , result2 )
paths . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( 1 , rer . getArchetypeReferences ( ) . size ( ) )
Assert . assertSame ( this . privateVisibility , this . component . getDefaultVisibility ( ) )
assertEquals ( expected , real )
assertTrue ( "Following application items are missing: " + Arrays . toString ( missing . toArray ( ) ) , missing . isEmpty ( ) )
Assert . assertTrue ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertArrayEquals ( new String [ ] { "55555" , "4444" , "333" , "22" , "1" } , strings )
assertEquals ( "The resource you are attempting to access cannot be found" , error . getString ( "reason" ) )
assertEquals ( "probability" , 0.01313 , probability , 0.00001 )
assertEquals ( group . getUsers ( ) , userlist )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><test/>" , stringifiedTestObject )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff36_" ) )
assertEquals ( expected , actual )
assertEquals ( "_cat/aliases/testIndex" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertNull ( user )
assertEquals ( 404 , response . getStatus ( ) )
assertTrue ( getTaint ( bc . imei ) != 0 )
assertFalse ( new NopolExample ( ) . isEmpty ( list ) )
assertEquals ( System . getProperty ( "user.name" ) , changeLogParameters . getValue ( "user.name" , null ) )
assertEquals ( expected , result )
assertThat ( PlainDate . of ( 2000 , 12 , 1 ) . with ( element . atFloor ( ) ) , is ( PlainDate . of ( 2000 , 11 , 26 ) ) )
assertThat ( job . getDuedate ( ) , is ( addSeconds ( removalTime , START_DELAY ) ) )
assertEquals ( "A cast was found when none expected" , 0 , java5 . parse ( code ) . findDescendantsOfType ( ASTCastExpression . class ) . size ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( NodeUtilities . NodeFromJSON ( "foo" ) , compoundWrite . apply ( EmptyNode . Empty ( ) ) )
assertEquals ( 0 , serverStatus . getBitrate ( ) )
assertEquals ( tropo . text ( ) , "{\"tropo\":[{\"answer\":{\"headers\":{\"P-Header\":\"value goes here\",\"Remote-Party-ID\":\"\\\"John Doe\\\"<sip:jdoe@foo.com>;party=calling;id-type=subscriber;privacy=full;screen=yes\"}}},{\"say\":[{\"value\":\"Hello, you were the first to answer.\",\"name\":\"say\"}]}]}" )
assertEquals ( expected , actual )
Assert . assertEquals ( uri . stringValue ( ) , "http://apache.org/example" )
assertEquals ( AdWordsSession . UNKNOWN_USER_AGENT , adWordsSession . getUserAgent ( ) )
assertEquals ( ">a >b >c <c <b >d <d <a " , rec . buffer . toString ( ) )
assertEquals ( "x/y{@c}(@g = '987')" , SelectorStepBuilder . toString ( steps ) )
assertEquals ( 0 , target . getFilters ( ) . size ( ) )
Assert . assertTrue ( true )
assertEquals ( "�尖�尖�尖�尖�尖�尖��\n" + "��     ��\n" + "��     ��\n" + "��     ��\n" + "��     ��\n" + "��     ��\n" + "�尖�尖�尖�尖�尖�尖��\n" , printer . print ( ) )
assertEquals ( i - 1 , ret )
assertEquals ( "Translation failed" , UnavailableException . class , pelopsException . getClass ( ) )
assertEquals ( 4 , messages . size ( ) )
assertEquals ( expected , result )
Assert . assertEquals ( expectedResponse , proxy . sayHello ( message ) )
assertEquals ( val . getPeriods ( ) , 3654 )
TestUtils . assertEquals ( new double [ ] { 1 , 2 , - 1.66666666666667 , 1.0 } , b . toArray ( ) , 1.0e-12 )
assertEquals ( "the NBSP must survive" , "test " , property . getValue ( ) )
assertEquals ( BigInteger . ZERO , wallet . getBalance ( ) )
assertIdentical ( "/simple_parts.owl" , merged )
assertResultSet ( res )
assertTrue ( GenotypeDataCompareTool . same ( genotypeData , genotypeDataWritten ) )
assertTrue ( Configurator . compareFs ( fs1 , fs2 ) )
assertThat ( f , is ( notNullValue ( ) ) )
assertNull ( map )
response . then ( ) . log ( ) . ifValidationFails ( ) . assertThat ( )
assertEquals ( expected , actualQuery )
Assert . assertNotNull ( zoo )
assertEquals ( 17 , interfaces . size ( ) )
context . assertIsSatisfied ( )
assertTrue ( matcher . doCredentialsMatch ( token , account ) )
Assert . assertEquals ( "Fail get Count" , 2L , service . getCount ( ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertTrue ( verifyResult ( result ) )
assertNotNull ( fixture )
assertThat ( getProcessingError ( ) , emptyString ( ) )
assertEquals ( future , underTest . collectAndDiscard ( futures ) )
assertEquals ( expected , settings . getProperties ( ) )
PSLTest . assertRule ( dataStore , input [ i ] , expected [ i ] )
UnitTestUtils . assertChiSquareAccept ( new String [ ] { "0" , "1" , "2" } , expected , observed , 0.01 )
assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.simplefileio.runtime.SimpleFileIODatastoreRuntime" ) )
assertThat ( log . getLastEntry ( ) , is ( nullValue ( ) ) )
assertEquals ( expected , actual )
assertFalse ( waitingPacketsQueue . isEmpty ( ) )
assertEquals ( "bound changed, event must be fired" , 1 , report . getEventCount ( EventType . UPPER_BOUND_CHANGED ) )
assertNotNull ( AuthorizedConnectApp . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( trustStorePassword , System . getProperty ( "javax.net.ssl.trustStorePassword" ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFLoteEnvioRetornoRecebimentoInfo ( ) . toString ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( "The records number is correct " + clusterName . getName ( ) , 2 , resultIterator . size ( ) )
assertFalse ( "Escaping not performed: \"" + output + '\"' , output . contains ( "<script>alert(" ) )
assertEquals ( 768 , ipAddresses . size ( ) )
Assert . isTrue ( c . getTitle ( ) . equals ( title ) )
assertSelect ( tq , binding ( vars , "\"Alice\"" , "\"Smith\"" ) , binding ( vars , "\"Bob\"" , "\"Cook\"" ) )
Assert . assertEquals ( 0 , PacketUtils . readInt ( buf , 4 ) )
assertTrue ( true )
assertEquals ( "192.168.1.0/24" , configuration . getNetworkMask ( ) )
assertTrue ( uvp . getFirstValue ( ) == 24.0 )
assertEquals ( "Failed to generate switch block chained on invocation" , SWITCH_BLOCK_CHAINED_INVOCATION , s )
assertEquals ( "{codes:'100-200',exceptions:'Foo*',debugOnly:true,level:'WARNING',req:'LONG',res:'LONG'}" , r . toString ( ) )
assertEquals ( BPResultType . FAIL , result . getResultType ( ) )
assertEquals ( 0.123 , empty . getProbability ( ) , 0.001 )
assertEquals ( 0 , listener . updatedInjectedFilters . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertTrue ( equals )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Valid cid with dash test failed." , CID_VALID , AdWordsSessionUtil . getClientCustomerId ( session ) )
assertEquals ( Integer [ ] . class , command . getProjectedSymbols ( ) . get ( 0 ) . getType ( ) )
result . assertIsSatisfied ( 1000 )
Assert . assertEquals ( 1 , ret )
assertTrue ( ( preValidationFailedEx . getMessage ( ) != null ) && ( preValidationFailedEx . getCause ( ) != null ) )
assertEquals ( m1 , m2 )
assertNotNull ( descuento . getId ( ) )
context . assertEquals ( "Hello!" , body . toString ( ) )
Assert . assertEquals ( 7 , roles . size ( ) )
Assert . assertEquals ( "Values must be equal" , 0 , emitter . getTotalNumOfMessages ( ) )
assertTrue ( futureDigest . digest ( ) . keyDigest ( ) . isEmpty ( ) )
assertTrue ( evaluator . shouldProxyHost ( "" ) )
assertThat ( path . isNormalized ( ) , is ( false ) )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( childProject1 . getCustomWorkspace ( ) , parentWorkspace )
assertEquals ( 0. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertNotNull ( result )
assertMultilinesEquals ( "Number of values:       6     5      4\n" + "Minimum value:       3.00 -9.00 -12.00\n" + "Maximum value:      22.00  7.00   2.00\n" + "Mean value:         13.17 -1.40  -3.50\n" + "Root Mean Square:   14.44  6.40   6.40\n" + "Standard deviation:  6.49  6.99   6.19\n" , text )
assertEquals ( "tpc/bi-hourly/year=2014/month=februari/day=01/hour=2" , path )
assertThat ( actualExceptionCode , is ( "throwable001" ) )
assertThat ( ContractClass . privateNestedInstanceVariable , is ( true ) )
assertEquals ( "Test            " , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertAnnotatedIgnored ( tables . at ( 0 , 2 , 0 ) )
assertTrue ( baos . toString ( ) . equalsIgnoreCase ( "<tpa:Compression xmlns:tpa=\"http://types.talend.com/policy/assertion/1.0\" threshold=\"" + CompressionConstants . TRESHOLD_ATTRIBUTE_DEFAULT + "\"/>" ) )
assertNull ( expression )
assertEquals ( mvjs . size ( ) , 1 )
assertGenerators ( result , AnInt . class , ZilchGenerator . class )
assertFalse ( it . hasNext ( ) )
assertEquals ( Sets . newHashSet ( BuiltInAnalysisTypes . DEFAULT , BuiltInAnalysisTypes . PHYLOGENOMICS ) , workflowTypes )
assertEquals ( "ST" , loop . getName ( ) )
assertEquals ( new Coordinate ( 48.5 , 11.5 ) , l . center )
assertEquals ( in . toString ( ) , out . toString ( ) )
assertFalse ( b )
assertNotNull ( result )
assertFalse ( prozessor . isNodeEnabled ( ) )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertEquals ( "success" , result )
assertThat ( out . toString ( ) , is ( String . format ( "Wrong move of Rook%s" , sep ) ) )
assertEquals ( "ChuckNorris" , victim . readLine ( ) )
assertEquals ( "" , result )
assertThat ( eventListener . wasCalled , IsEqual . equalTo ( false ) )
assertMockEndpointsSatisfied ( )
assertEquals ( new Customer ( "Person" , new BigDecimal ( 70 ) ) , customer )
Assert . assertEquals ( 0 , encryCredentialManager . encrypt ( null ) . length ( ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( 0 , analyser . getNumberOfPickupsAtBeginning ( route ) , 0.01 )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "testUsingMapHamcrestMatchers.json" , result )
assertEquals ( "foo" , instance )
assertThat ( stringWriter . toString ( ) , containsString ( "thePostData" ) )
assertEquals ( "finally" , getValue ( ) )
assertEquals ( 29 , file . length ( ) )
Assert . assertTrue ( m . matches ( ) )
Assert . assertTrue ( result )
assertEquals ( "CSS link tag should be bypassed" , VisitStatus . BYPASS , getVisitStatus ( cssLink ) )
assertEquals ( "URI is not built correctly" , new URI ( "http://foo/books/bar" ) , newUri )
Assert . assertEquals ( indexStructureBuilder , tested . getIndexStructureBuilder ( ) )
assertTrue ( "Task duration is suspect: " + task . getDuration ( ) , ( task . getDuration ( ) >= 1000L ) && ( task . getDuration ( ) <= 20000L ) )
assertEquals ( "{\"a\":null}" , n )
assertEquals ( "Bob" , CollQueryFactory . from ( cat , data ) . where ( cat . name . eq ( name ) ) . set ( name , "Bob" ) . select ( cat . name ) . fetchOne ( ) )
Assert . assertEquals ( "password" , result . trim ( ) )
assertEquals ( "T>Info messages do not apply color codes when debug is enabled" , testLog . getMessage ( ) )
Assert . assertEquals ( "No lead 'Mr. Itai Agmon' was found" , "Lead 'Mr. Itai Agmon' was found" )
assertFalse ( validator . isValid ( new Object ( ) , null ) )
assertArrayEquals ( refar , d . getResult ( ) )
assertThat ( new InsertOperation ( doc ) . toString ( ) , is ( "Insert[{ '_id' : 1 }]" ) )
assertEquals ( "x -> (x* 2)" , CodeModelTestsHelper . toString ( aLambda ) )
assertEquals ( "indexvaluesdesc:myIndex" , t . toString ( ) )
assertEquals ( "SELECT field * 2 + 1 FROM Class" , q . toString ( ) )
assertSame ( fieldVar , result )
assertArrayEquals ( new long [ ] { 2 , 2 , 1 , 11 , 111 , 2 , 22 , 222 , - 1 , - 1 , - 1 , 3 , 33 , 333 , ReplicaState . RBW . getValue ( ) , 4 , 44 , 444 , ReplicaState . RWR . getValue ( ) } , blocks . getBlockListAsLongs ( ) )
assertTrue ( wrapper . isRunInTx ( ) )
assertEquals ( expected , ievent . getEventObj ( ) . getPayload ( ) )
assertTrue ( constraint . fulfilled ( iContext ) )
assertEquals ( HttpStatusCode . NO_CONTENT_204 , response . getStatus ( ) )
assertColumnHeaderOrder ( 0 , 1 , 2 , 6 , 7 )
sensei . assertWriteText ( property )
assertEquals ( "Unexpected queries executed -" , finalQueryList , dataManager . getQueries ( ) )
assertEquals ( null , result )
assertEquals ( 42 , impl . getPercentile ( 50 , now + 1 ) )
Assert . assertEquals ( NormalizeUtils . isSimpleField ( list ) , true )
assertTrue ( "Jdbc realm should be created" , ops . exists ( TEST_JDBC_REALM_ADDRESS ) )
assertEquals ( expected , stats )
assertEquals ( 1 , call . numCloses )
assertFalse ( classPathResource . exists ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( "IRight.m()" , new A ( ) . m ( ) )
assertTrue ( httpResponseExceptionThrown )
assertEquals ( Arrays . asList ( new ImmutablePair < String , String > ( "bar" , null ) , new ImmutablePair < String , String > ( "foo" , "foo" ) , new ImmutablePair < String , String > ( "foo" , null ) , new ImmutablePair < String , String > ( null , "quux" ) ) , outputs )
assertEquals ( "The object is to heavy" , message )
assertEqualsAndHash ( one , two )
assertThat ( isPositive , accepts ( TestMatcher . Instance , theMatch ) )
assertEquals ( "[10, 8, 6, 4, 2]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertTrue ( "Should throw NoSuchColumnFamilyException" , caughtNSCFE )
assertObjectEquals ( "{'in':'header',name:'If-Match',type:'string'}" , pi )
assertEquals ( deserialized , obj )
Assert . assertFalse ( ( session . load ( Patient . class , 2 ) ) . equals ( ( session . load ( Concept . class , 11 ) ) ) )
assertExpectedInitResult ( harness . intialize ( workspaceRoot ) )
assertArrayEquals ( new String [ ] { "-vws" , "unix/viewTag.vws" } , instance . getCommandArguments ( true , "viewTag" ) )
assertions . isNotInstanceOfAny ( null , null )
assertEquals ( 0 , this . queue . size ( ) )
assertEquals ( 2 , Iterators . size ( iter ) )
Assert . assertEquals ( "testBufferPinCount failed" , buffer . isPinned ( ) , false )
assertNotNull ( result )
assertThat ( new DOMSource ( expected ) , isEquivalentTo ( new DOMSource ( xrdsDocument ) ) )
assertEquals ( 1.0 , result , 0.1 )
assertEquals ( Arrays . asList ( "115200000" , "0" , "115200000" , "asdf" ) , getOutputStrings ( ) )
assertEquals ( "user1" , response )
assertEquals ( new SchemaAndValue ( schema , struct ) , avroData . toConnectData ( avroSchema , avroRecord ) )
assertEquals ( customer , responseImpl . getContent ( ) )
assertNotNull ( tg )
assertFalse ( "Should have failed to create a MapReduce command without a output ono-inline." , built )
assertNotEquals ( Movie . UNKNOWN , result )
assertTrue ( aggregator . getTableName ( ) != null )
assertSame ( privchat , testUser . getPrivchat ( ) )
assertEquals ( "34 abc\n" , found )
given ( ) . get ( url ) . then ( ) . assertThat ( )
assertThat ( mapSet . keys ( value ) , is ( keys ) )
Assert . assertEquals ( "sub" , s )
assertEqualsIgnoreLineEnding ( output , "{\n" + "  \"id\" : 42,\n" + "  \"name\" : \"Arthur Dent\"\n" + "}" )
Assert . assertFalse ( drugs . get ( 0 ) . getRetired ( ) )
assertPerson ( person )
assertTrue ( filter . shouldInclude ( source , "some.property" ) )
assertThat ( query , is ( notNullValue ( ) ) )
assertThat ( DoubleUtil . toDouble ( i ) . doubleValue ( ) , is ( 1d ) )
Assert . assertTrue ( data . isToTest ( "foo.Bar" , 3 ) )
assertNotNull ( "converter must not be null" , s )
assertEquals ( "data to outstream" , MockOutStreamResource . outputStream . toString ( ) )
assertEquals ( "some id" , withId . getStatementId ( ) )
assertThat ( "No IllegalStateException not thrown or unexpected Exception thrown when PushBuilder.push() without setting a path." , iseException . get ( ) , is ( true ) )
assertEquals ( expResult , result )
assertEquals ( HttpStatusCode . NO_CONTENT . code , response . getStatus ( ) )
assertThat ( node . run ( ImmutableList . < Object > of ( "hi" , "there" ) ) . get ( ) , equalTo ( result ) )
assertThat ( service . getInstanceId ( ) , is ( connectorId . toString ( ) ) )
Assert . assertNotNull ( funcionario )
assertEquals ( "TTGGGGCCTCTAAACGGGGTCTT" + System . lineSeparator ( ) + "TTGGGGCCTCTAAACGGG-TCTT" + System . lineSeparator ( ) + "TTGGGGC-TCTAA-CGGG-TCTT" + System . lineSeparator ( ) , msa . toString ( ) )
assertEquals ( 4 , objs . size ( ) )
assertEquals ( 1000 , cnt . getCount ( ) )
assertTrue ( fields . length >= 1 )
assertMatchersEqual ( expectedBuilder . build ( ) , actualMatcher )
assertFalse ( "permission was not granted." , readAnalysisSubmissionPermission . isAllowed ( auth , 1L ) )
assertTrue ( routeSpecification . isSatisfiedBy ( itinerary ) )
assertTrue ( framework . isPresent ( ) )
Assert . assertNotNull ( cu )
assertEquals ( crisisCode , result . get ( 0 ) . getCode ( ) )
assertThat ( args , contains ( "images" ) )
assertTypeParameterIs ( ReflectionUtilTest . class )
assertEquals ( p1 , p2 )
assertTrue ( closeLatch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( - 1 , certificate . getCertificate ( ) . getBasicConstraints ( ) )
assertThat ( name + " has no description" , description , is ( notNullValue ( ) ) )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( 0 , latch . getCount ( ) )
assertThat ( getCompiledResult ( ) , is ( true ) )
assertThat ( u . toString ( ) , containsString ( name ) )
assertEquals ( false , result )
assertEquals ( ch , buf . getChar ( 0 ) )
assertEqualsIgnoreLineEnding ( xmlString , "<?xml version='1.1' encoding='UTF-8'?><integer>0</integer>" )
assertFalse ( status )
YamlJsonAssert . assertEquals ( expected , actual , DocumentType . JSON )
assertThat ( ConnectionStrategy . backwardsCompatible ( usePrivateDnsName , connectUsingPublicIp , associatePublicIp ) , equalTo ( ConnectionStrategy . PUBLIC_IP ) )
assertTrue ( ( Boolean ) result )
assertEquals ( "hello" , new String ( serverHandler . data ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
Assert . assertFalse ( accept )
assertNull ( node . getModifiedDate ( ) )
Assert . assertTrue ( response . getCommandOutput ( ) . contains ( "LastWriteTime" ) )
assertEquals ( expected , actual )
Assert . assertNotNull ( lfs )
assertEquals ( "\"schemaName\".\"tableName\"" , database . escapeTableName ( "catalogName" , "schemaName" , "tableName" ) )
assertThat ( result , is ( expected ) )
Assert . assertFalse ( iterator . hasNext ( ) )
assertEquals ( SimpleBigDecimalScore . of ( new BigDecimal ( "1.2" ) ) , scoreDirector . calculateScore ( ) )
assertEquals ( 10 , classUnderTest . getObjectTabPlacement ( ) )
assertTrue ( Arrays . equals ( bytes , buff . array ( ) ) )
assertTrue ( sink . invalidConfiguration )
assertTrue ( "Expected the test to generate a grid" , checkGrid ( "Social_Profiles_Controls_My_Colleagues" ) )
assertEquals ( XAdESForm . BES , f )
assertEquals ( expectedResult , entityParser . parseDatastream ( json ) )
assertNotNull ( res )
assertEquals ( C_EXPLICIT_CHARACTERSET , result )
assertTrue ( "User's password updated successfully" , success )
assertThat ( body , containsString ( "unauthorized_client" ) )
assertContainsRegex ( WHERE + OPEN_CURLY + ":S" + SPACE + ":P" + SPACE + var ( "o" ) + OPT_SPACE + CLOSE_CURLY , query )
Assert . assertEquals ( "SELECT 3 * 5;" , text )
assertNotNull ( result )
assertEquals ( Integer . class . getDeclaredConstructor ( int . class ) , constructor )
assertAuthenticationFailsPlusRequired ( )
assertNotNull ( result )
checker . assertEquals ( "[" + r + "][" + c + "]" , exp , act )
assertExpectedIpv4 ( endpoint )
assertTrue ( BitsInt . test ( v , true , 31 ) )
assertNull ( XmlReader . getXmlProlog ( input , guessedEncoding ) )
assertExec ( "Gives the same value" , Numbers . class , "stringToLong__ILjava_lang_String_2" , res , "255" )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
assertThat ( IntervalParser . of ( DateIntervalFactory . INSTANCE , formatter , BracketPolicy . SHOW_NEVER ) . parse ( "20140227/20140514" ) , is ( interval ) )
assertThat ( LoggerFactory . getILoggerFactory ( ) , is ( expected ) )
assertArrayEquals ( new long [ ] { 1 , 2 } , array . slice ( 0 , 0 ) . shape ( ) )
assertThat ( "Checking 6 frame translation" , protein . toString ( ) , is ( expected ) )
assertThat ( value , equalTo ( "set_VALUE_get" ) )
assertNotEquals ( "" , version . toString ( ) )
Assert . assertNull ( result . getSimpleString ( ) )
Assert . assertEquals ( "type=" + type , extected , test ( extected , type ) )
assertTodo ( expected , actual )
assertTrue ( verified )
assertTrue ( senderLinkAddress . equals ( "xxx" ) )
assertTrue ( entity . equals ( loadedEntity ) )
Assert . assertEquals ( getFullClassName ( fqdnName ) , udf . getClassName ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "<http://example.org>" ) )
assertCounterCount ( "Chronozoa" , CounterType . TIME , 1 )
assertEquals ( expected , document )
assertThat ( result , is ( false ) )
assertTrue ( true )
assertEquals ( assertion , outputs [ outputs . length - 1 ] )
assertTrue ( identifier . equals ( group . getIdentifier ( ) ) )
assertThat ( mentions , hasItem ( mentionedEntity ( 1 , 1 + mention . length ( ) , EntityType . CLASS , iri ) ) )
assertThat ( sourceUri , is ( "https://code.google.com/p/test-for-agit/" ) )
assertEquals ( m ( "_" , "T" , "method" , 10L , "tstart" , 1L , "tstop" , 11L , "calls" , 3L , "begin" , m ( "_" , "B" , "clock" , 11 ) , "children" , l ( m ( "_" , "T" , "method" , 12L , "tstart" , 3L , "tstop" , 10L , "calls" , 2L , "children" , l ( m ( "_" , "T" , "method" , 14L , "tstart" , 4L , "tstop" , 9L , "calls" , 1L , "error" , errorToMap ( e ) ) ) ) ) ) , decodeTrace ( o . getChunks ( ) ) )
assertThat ( resources , contains ( orgId , parentOrgId , parentParentOrgId ) )
Assert . assertTrue ( translation . isEmpty ( ) )
assertMockEndpointsSatisfied ( )
assertNull ( ch )
assertNull ( presenter . getValue ( ) )
assertEquals ( 21 , target . getWidth ( ) )
assertTrue ( latch . await ( 1 , TimeUnit . SECONDS ) )
assertNotNull ( reader )
Assert . assertEquals ( "Microsoft.Devices" , matcher . group ( 1 ) )
Assert . assertNotNull ( exchange . getMessage ( ) . getContext ( ) . getProperty ( Exchange . MESSAGE_ID ) )
assertNotNull ( pcrManifest )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertThat ( extractMonitorables ( histogramAdapter ) . get ( STDDEV ) . get ( ) , Matchers . < Object > is ( newStdDev ) )
Assert . assertThat ( bytes , IsEqual . equalTo ( BinarySerializer . serializeToBytes ( originalEntity ) ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( expected , actualQuery )
assertEquals ( "Expected 1 results!" , 1 , n )
assertEquals ( "[a,1,2,b,java.lang.Throwable: TEST]" , buff . toString ( ) )
Assert . fail ( "Didn't get expected HPackException!" )
assertTrue ( factory instanceof TextConfigFactory )
Assert . assertTrue ( Files . size ( tmfile . toPath ( ) ) > 0 )
assertEquals ( null , actual )
assertNotNull ( PropertyUtils . getProperty ( result , "auditInfo" ) )
Assert . assertEquals ( dataHoraEvento , infoEventoCancelamento . getDataHoraEvento ( ) )
assertSame ( expected , actual )
Assert . fail ( "Caught unexpected ResourceHandlerException!" )
assertEquals ( "windows" , platform . getName ( ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoPISQuantidade ( ) . toString ( ) )
assertEquals ( expected , x )
Assert . assertTrue ( jaegerConfig . isEnabled ( ) )
listsWithCaseInsensitiveComparisonStrategy . assertIsSorted ( someInfo ( ) , actual )
assertThat ( transferSuccessful , is ( false ) )
Assert . assertTrue ( "Incorrect file types returned" , CollectionUtils . isEqualCollection ( types1 , widget . getFileTypes ( ) ) )
Assert . assertEquals ( "(nt_change_insertion (nt_range (nt_point_location (nt_base_location (nt_number 123))) _ (nt_point_location (nt_base_location (nt_number 124)))) ins (nt_string AT))" , nt_change_insertion . toStringTree ( parser ) )
assertThat ( anyTS . isValid ( SECOND_OF_DAY , null ) , is ( false ) )
assertEquals ( "Mismatched message at line #" + i , message , line )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*component01.jsp\\s*</title>\\s*</head>\\s*<body>\\s*<input\\s*id=\"username\"\\s*type=\"text\"\\s*name=\"username\"\\s*maxlength=\"32\"\\s*onkeypress=\"attrValue\"\\s*size=\"20\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
Assert . assertEquals ( fallbackOutput , got )
assertEquals ( expResult , result )
assertThat ( result , is ( 0 ) )
Assert . assertEquals ( hostFamily , generated )
assertTrue ( ! result )
assertEquals ( "Base value is not properly parsed" , "00000.0000" , parsed )
assertThat ( buffer . isReadOnly ( ) , is ( true ) )
Assert . assertEquals ( 2 , result . getEntities ( ) . size ( ) )
assertEquals ( preprocessed [ i ] , result )
Assert . fail ( )
editor . assertNoHover ( "ggggg.kkkk" )
Assert . assertEquals ( false , errors . hasErrors ( ) )
Assert . assertEquals ( 2 , p . get ( "shortUrl" ) . size ( ) )
assertEquals ( 2 , filteredTodos . size ( ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . COMMENT , this . doc ) )
assertTrue ( Arrays . equals ( etalon , array ) )
assertEquals ( previous + 2 , list . size ( ) )
assertEquals ( s , padded )
assertEquals ( "some id" , withId . getStatementId ( ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "admin" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertThat ( windows . minus ( later ) , is ( windows ) )
assertEquals ( new BigInteger ( 1 , a ) , c )
assertSame ( base , base . offset ( 0 , TimeUnit . SECONDS ) )
assertThat ( rm . matches ( null ) , is ( false ) )
assertThat ( formatter . withTimezone ( "UTC+2" ) . format ( PlainTimestamp . of ( 2015 , 3 , 29 , 2 , 30 ) ) , is ( "2015-03-29T02:30+02:00" ) )
assertTrue ( IsEqualInternally . areEqualInternally ( expectedResult , sut . extract ( content , 0 ) ) )
assertEquals ( 3 , versionEntities . size ( ) )
assertTrue ( features . size ( ) > 0 )
assertNotNull ( solver )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( individual ) )
assertEquals ( pos . getIndex ( ) , 0 )
assertEqualLines ( "invalid renaming in Enumbered" , getFileContents ( getOutputTestFileName ( "Enumbered" ) ) , enumbered . getSource ( ) )
Assert . assertNull ( "Internal subject indicator ref affected by base URI" , tm . getReifier ( ) )
assertEquals ( 700 , scorer . scorePosition ( board , context ) )
Assert . assertNotNull ( file . toString ( ) )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 800: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 800 )
assertEquals ( "Unsatisfied qualifier: 'unmatched'" , e . getMessage ( ) )
Assert . assertNull ( "There can't be active transaction here" , tm . getTransaction ( ) )
Assert . assertEquals ( versao . toString ( ) , eventoCancelamento . getVersao ( ) )
assertTrue ( executor instanceof FatGammaTxnExecutor )
context . assertEquals ( "Invalid cronspec */2 GOAT * ?" , fault . getMessage ( ) )
assertEquals ( 9L , value . get ( ) )
assertEquals ( TEAM_CITY_URL + "/app/rest/buildTypes/id:bt297/builds" , buildListUrl )
Assert . fail ( )
assertThat ( result , is ( tables ) )
assertEquals ( "BAZ" , this . fooStateFSM . getCurrentState ( fooState ) . getName ( ) )
assertTrue ( charsetPattern . matches ( "A" ) )
assertEquals ( 1 , runtimeBundles . length )
assertNull ( resource )
Assert . assertEquals ( 2 , character . getUnderlineThickness ( ) )
assertEquals ( "((dependencyBuilder.input(\"A\").build() || dependencyBuilder.input(\"B\").build()) && " + "(dependencyBuilder.input(\"C\").build() || dependencyBuilder.input(\"D\").build()))" , inputLogicParser . parse ( root ) )
assertEquals ( date , entity . getLastLogoutTime ( ) )
assertEquals ( "BeOS" , Const . getOS ( ) )
assertEquals ( externalUrl , detail . get ( "external_url" ) )
Assert . assertFalse ( this . manager . disconnectAll ( this . family1 ) )
Assert . assertTrue ( getSubject ( ) . hasRole ( "programmer" ) )
Assert . assertEquals ( "Hub should be able to fulfill request" , HttpServletResponse . SC_CREATED , response . getStatusCode ( ) )
Assert . assertEquals ( "\\u2013" , buf . toString ( ) )
assertAlias ( sql , columnParam , "nor" , param )
assertTrue ( err . length ( ) == 0 )
assertEquals ( Integer . valueOf ( 2 ) , Integer . valueOf ( list . size ( ) ) )
assertions . isLessThan ( expected )
assertOrder ( order , DATA_LENGTH , comparator )
assertArrayEquals ( "array equals" , byteArray , output . toByteArray ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( 1.5 , ed . getRealEigenvalue ( 0 ) , 1.0e-15 )
assertEquals ( Location . LOCATION_LHS_FROM_ACCUMULATE_ACTION_INSIDE , getLastIntegerValue ( parser . getEditorInterface ( ) . get ( 0 ) . getContent ( ) ) )
assertThat ( children , is ( testMethods ) )
assertEquals ( removeLeadingAndTrailingSpacesOnEveryLine ( expectedLocalizedXLIFF ) , removeLeadingAndTrailingSpacesOnEveryLine ( localizedAsset ) )
assertEquals ( Arrays . asList ( parser1 , parser2 ) , parsers )
assertTrue ( result )
assertThat ( analyzer , is ( KeywordAnalyzer . class ) )
assertThat ( target . getBody ( String . class ) , is ( notNullValue ( ) ) )
Assert . assertEquals ( CloseReason . CloseCodes . CLOSED_ABNORMALLY , TimeoutEndpoint . getReason ( ) . getCloseCode ( ) )
objects . assertIsEqualToIgnoringGivenFields ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( b1 , b2 )
assertNull ( "Expected an empty list" , result )
assertThat ( Builder . fromStream ( is ) , IsNot . not ( ( Builder ) null ) )
Assert . fail ( e . getMessage ( ) )
assertTrue ( m . nextInt ( ) > - 1 )
assertTrue ( getNoErrorMsg ( ) , result )
assertNotNull ( instance . getMappainter ( ) )
Assert . assertEquals ( 1002 , sprintService . getCurrentSprint ( ) . getId ( ) )
assertEquals ( 1000 , res )
assertEquals ( 0 , sorter . convertRowIndexToModel ( rows - 1 ) )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . has ( T . label , "friendXXX" ) . count ( ) . next ( ) , 0 )
assertThat ( result , is ( newTable ( ) ) )
assertTrue ( client . getRoles ( ) . size ( ) > 0 )
assertTrue ( TClass . areEqual ( value , bindings . getValue ( 1 ) ) )
Assert . assertEquals ( 32 , msg . hashCode ( ) )
context . assertTrue ( ex instanceof IllegalArgumentException )
assertTrue ( medias . size ( ) == 1 )
assertEquals ( exepcted_individual , returned_individual )
Assert . assertFalse ( "Requests with different order of URI path options must not equal!" , coapRequest1 . equals ( coapRequest2 ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "ttFrom" ) )
assertThat ( Math . abs ( clock . currentTime ( ) . until ( SystemClock . INSTANCE . currentTime ( ) , TimeUnit . SECONDS ) ) < 1 , is ( true ) )
assertEquals ( "" , result )
assertThat ( actual , is ( equalTo ( next ) ) )
Assert . assertNotNull ( json . getString ( "uid" ) )
Assert . assertEquals ( referencedConfig , config . getList ( ) . get ( 0 ) . getReferencedConfig ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertNull ( "Expected no output message" , outMessage )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertEquals ( "2007-05-02T15:12:52.421+02:00" , r )
assertions . isSorted ( )
Assert . assertFalse ( dl . doAction ( reqNotPost , mock ( HttpServletResponse . class ) ) )
assertTrue ( list . size ( ) >= rows )
Assert . assertEquals ( getElement ( "OBR.15" , "CM_SPS.3" ) , result )
assertEquals ( "See you!" , bean . getGoodbyeValue ( ) . fetch ( in ( Locale . US ) ) . asIs ( ) )
assertEquals ( moveableUnitsOfPlayerOne , result . size ( ) )
assertFalse ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertKernel ( kernel , ANNULUS , e )
assertEquals ( "�谢械写 3 屑械�械�邪" , t . format ( new Date ( 2629743830L * 3L ) ) )
assertEquals ( "Hello {there} John Doe" , ResponseBodyInterpolator . interpolate ( "Hello {there} {firstName} {lastName}" , req ) )
Assert . assertTrue ( stringToEncrypt . equals ( new String ( decrypted , "UTF-8" ) ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( jsonEqual ( expResult , EntityFormatter . writeEntity ( entity ) ) )
assertEquals ( emptyHeaders , decodedHeaders )
Assert . assertNotNull ( "null result returned" , execResult )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertEquals ( DataStatus . ACTIVE , empty . getStatus ( Side . PORT ) )
assertThat ( databaseMapping . getDatabasePrefix ( ) , is ( "" ) )
Assert . assertEquals ( 1 , countryList . size ( ) )
assertNull ( channel . basicGet ( q , false ) )
assertThat ( getTargetFile ( ) . exists ( ) , is ( true ) )
Assert . assertEquals ( test , expected )
Assert . assertNotNull ( rb )
assertEquals ( fieldsBuilder . build ( ) . toString ( ) , result . build ( ) . toString ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( actDate . getTime ( ) , expDate . getTime ( ) )
assertEquals ( ImmutableMap . of ( "foo" , "bar" , "bar" , "baz" ) , out )
assertThat ( result , equalTo ( expected ) )
assertNotNull ( result )
assertEquals ( "http://example.com?foo=foo&hoge=fuga&piyo=1" , got . toString ( ) )
UnitTestUtils . assertEquals ( "Spearman's correlation matrix" , createRealMatrix ( rData , 5 , 5 ) , correlationMatrix , 10E-15 )
Assert . assertEquals ( result . getResultSize ( ) , 10 )
assertEquals ( result , result2 )
Assert . assertNull ( t . thread ( messages ) )
Assert . assertNull ( result )
Assert . assertNull ( actualDate )
assertNull ( APMSpan . findPrimaryReference ( Arrays . asList ( ref1 , ref2 ) ) )
assertEquals ( "e5bld32ce9pe5ln81rjhe0d0e1vao1ba" , generator . getLockedDomainPrefix ( uri ) )
Assert . assertNotNull ( controllerResponse )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( date ) , mapper . readBitemporalDate ( columns , "vtTo" ) )
assertEquals ( valueIn , valueOut )
assertEquals ( testUriManagerMap , Whitebox . invokeMethod ( ovsdbManagersUpdateCommand , "getUriManagerMap" , uuidManagerMap ) )
assertThat ( arguments . getReadTimeoutMillis ( ) , equalTo ( 123 ) )
assertThat ( result , not ( containsString ( "<link" ) ) )
assertEquals ( now , post . getCreatedOn ( ) )
Assert . assertEquals ( points . length * val , s , 0d )
assertNotNull ( getRealm ( ) )
assertEquals ( 15 , reasoned . getAxiomCount ( ) )
assertEquals ( "Registration failed. Reason: TestReason" , translated )
Assert . assertEquals ( Alert . TEXT_MAX_LENGTH , lastAlert . getText ( ) . length ( ) )
assertEquals ( ifStr , "if (!(org.uberfire.security.client.authz.AuthorizationManagerHelper.authorize(\"myfeature\"))) {\n" + "  return;\n" + "}" )
assertTrue ( "" , expectedMessagesCountDown . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "EntitySingletonSample" , resultQuery )
assertThat ( q , is ( TermQuery . class ) )
assertSame ( thing , bound . thing ( ) )
assertNull ( millis )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 6 , warnings . size ( ) )
assertFalse ( session . from ( $ ( noteVar ) ) . where ( builder . getValue ( ) ) . list ( $ ( noteVar ) ) . isEmpty ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertThat ( actual , is ( elResolver ) )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-managed:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertEquals ( "/a.txt" , path . toString ( ) )
assertEquals ( Integer . valueOf ( 2 ) , Integer . valueOf ( list . size ( ) ) )
assertTrue ( emptyList . isEmpty ( ) )
assertTrue ( metaGrandparent . isAssignableFrom ( metaChild ) )
assertNsObject ( basicTypeDesc , record )
Assert . assertEquals ( PROP_VAL , _context . getProperty ( PROP_NAME ) . getValue ( ) )
assertEquals ( action . getOldValue ( ) , CipherSuite . TLS_DHE_DSS_WITH_AES_128_CBC_SHA )
assertNotNull ( patient )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( expectedList , sut . fetchPage ( 6 , bigPageSize ) )
assertFalse ( map . isEmpty ( ) )
Assert . assertTrue ( cc >= 2 )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( report )
Assert . assertTrue ( fc1 != fc )
Assert . assertTrue ( isEqual ( distance , 0.6 ) )
assertEquals ( CellComparatorHelper . getSanitizedStaticValue ( cell ) , "needle" )
assertEquals ( environment . bootstrapCarrierDirectPort ( ) , loader . port ( ) )
assertEquals ( "Value {test" , result )
assertSame ( input , output )
Assert . assertEquals ( tag . type ( ) , TagType . LONG )
assertEquals ( expResult , result )
assertTrue ( victim . isEnabled ( ) )
Assert . assertEquals ( desiredOutput , output )
assertNull ( teamExternalGroup )
assertNotNull ( "addon must load lf-specific icon" , UIManager . getInsets ( ColumnControlButton . COLUMN_CONTROL_BUTTON_MARGIN_KEY ) )
assertEquals ( EX_44_EXPECTED , hexadecimalHash )
assertEquals ( expected , value . intValue ( ) )
assertNotEquals ( collectorManager1 , collectorManager2 )
assertThat ( serialize ( writable ) . length , is ( 0 ) )
Assert . assertEquals ( 0 , a . getMaxNestedBlocks ( ) )
assertThat ( formatter . format ( "--> %a <--" ) , equalTo ( "--> docker.maven.plugin <--" ) )
assertEquals ( testAlgorithm , tlsCertificateAuthorityClientCommandLine . getKeyAlgorithm ( ) )
assertContextOk ( ctx , "O1:doc:doc" , "Hello from Context!" , "Source" )
assertTrue ( new File ( "target/export6" ) . exists ( ) )
assertResultSet ( res )
assertEquals ( 3f , rv [ 1 ] , 1e-5 )
Assert . assertNull ( RequestObjectHelper . getReturnKeys ( jsonWithWildcard ) )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response body is: <xml />" ) ) )
Assert . assertEquals ( "test2" , testScopePath . getLastScope ( ) . getName ( ) )
assertEquals ( 1 , c1 . compareTo ( c2 , messageTo ( "/foo" ) ) )
assertEquals ( new BigInteger ( "1234" ) , bigI )
assertThat ( info . getClusterService ( CLUSTER ) , nullValue ( ) )
Assert . assertNotNull ( new Bean80ABindMap ( ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "JSLint found 1 problems in 1 files" , e . getMessage ( ) )
assertNotNull ( MESSAGE_NULL_ENTITY , loadedEntity )
assertTrue ( aclDao . hasEntry ( principal , secureObject ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "http://foo/" , uri )
assertThat ( TestI18n . testMessage . text ( Locale . CHINESE ) , is ( "Test Message" ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 4 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntry" + " oxm_class: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow.oxm.rev150225" + ".OpenflowBasicClass oxm_field: org.opendaylight.yang.gen.v1.urn.opendaylight.openflow" + ".oxm.rev150225.InPort experimenterID: null" , key1 . toString ( ) )
assertThat ( unhandledException . getMessage ( ) , allOf ( containsString ( "sorry" ) , containsString ( "An unhandled error occurred" ) , containsString ( "https://github.com/MutabilityDetector/MutabilityDetector/issues/" ) ) )
assertEquals ( new BlockStoreLocation ( tier . getTierAlias ( ) , mDir . getDirIndex ( ) , mDir . getDirMedium ( ) ) , mDir . toBlockStoreLocation ( ) )
assertSame ( "Wrong result" , look , ConfigurationInterpolator . nullSafeLookup ( look ) )
assertTrue ( survey . isFinished ( ) )
assertTrue ( ! cs . isLast ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( field ) instanceof WPasswordFieldRenderer )
assertEquals ( parseCalendar ( "20131104-00:00:00" , TimeZone . getTimeZone ( "US/Eastern" ) ) , dh . getCalendarAfter ( testingClock . getCurrentCalendar ( ) ) )
assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( "1234/1234567" ) )
assertArrayEquals ( new byte [ ] { - 122 , - 13 , - 23 , - 33 , - 37 , - 9 , 107 , - 124 , 48 , 124 , - 24 , 116 , - 126 , 8 , 16 , - 12 , 44 , 114 , 66 , - 96 , - 128 , 82 , - 65 , - 71 , 110 , - 74 , - 41 , 15 , 68 , 51 , - 11 , 24 } , new Algorithm2B ( ) . computeHash ( concatenate ( userBytes , userValidationSalt ) , userBytes ) )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertThat ( lineSeparatorUtil . toString ( ) , is ( equalTo ( "\r" ) ) )
assertEquals ( t , engine . get ( testIndex ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 4 , 8 , 4 ) )
assertEquals ( 23 , articles . size ( ) )
assertEquals ( expResult , result )
assertFalse ( ex . isPrime ( 225 ) )
runner . assertNotValid ( )
assertTrue ( vrpBuilder . getLocationMap ( ) . containsKey ( "start" ) )
assertEquals ( 1 , walEdit . size ( ) )
assertEquals ( "db_0__init.cql" , cqlMigrationResolver . extractScriptName ( new ClassPathResource ( "db/migration/db_0__init.cql" , Thread . currentThread ( ) . getContextClassLoader ( ) ) ) )
assertFalse ( classifier . classify ( new IllegalStateException ( "Foo" ) ) )
assertFalse ( CheckDetector . isPlayerJustMovedInCheck ( bitBoard ) )
assertFalse ( exists . get ( ) . isOk ( ) )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\n\tvar self = this;\n\tif (a)\n\t\tRoyaleTest_A.base(this, 'foo');\n}" )
assertThat ( m . matches ( ) , hasItems ( Tuple . of ( 1 , 2 ) , Tuple . of ( 3 , 4 ) ) )
assertEquals ( null , CollectionUtils . getByPath ( input , "3" ) )
assertEquals ( result , "Monday, December 3, 2007 - 10:15:30 AM UTC" )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertThat ( annos . size ( ) , equalTo ( 1 ) )
assertNull ( tr . findCertInfo ( createCert ( true , "BISCUITS" ) ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertThat ( f2 , sameInstance ( f1 ) )
assertEquals ( "clone=true" , getLastRequestQuery ( ) )
assertEquals ( 1 , request . getOauthParameters ( ) . size ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( boundary , BatchParserCommon . getBoundary ( contentType , 0 ) )
assertEquals ( value . getType ( ) , SelectorType . ALL )
assertTrue ( cv . supports ( Date . class ) )
assertNameAndQualifiedName ( tree , "fn" , "mod.fn" )
Assert . assertEquals ( 20 , countries . size ( ) )
assertEquals ( 123L , book . getId ( ) )
Assert . assertEquals ( PrettyHomepageImpl . class , homepage . getClass ( ) )
assertEquals ( "abcdf 35,abcde 23,abgkl 47,abghi 10," , target . toString ( ) )
assertEquals ( "YYY" , html )
assertThat ( historicJobLogExceptionStacktrace , notNullValue ( ) )
assertEquals ( i , db . getLastValue ( "TestMetric" ) )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertThat ( publicJobLink , not ( containsString ( "eu-central-1" ) ) )
Assert . assertArrayEquals ( expected , left . toByteArray ( ) )
assertFalse ( sut . isTooOld ( new File ( "invalid format" ) ) )
Assert . assertThat ( allCategories , Matchers . contains ( "categoryA" , "categoryD" , "categoryB" , "categoryC" , "categoryE" ) )
assertThat ( unit . handleFault ( messageContext ) , is ( true ) )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertThatReassembledMessageEqualsOriginalMessage ( result )
assertEquals ( propContName , resourceEditProperty . getPropContName ( ) )
Assert . assertEquals ( 1 , clusters . size ( ) )
assertTrue ( reference instanceof WeakReference )
assertThat ( url , is ( PAGE_URL ) )
assertTrue ( "" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) )
assertEquals ( "Hello < There <&>" , doc . select ( "div" ) . first ( ) . text ( ) )
assertEquals ( "Trimmed result should exclude ending mutate if isFirst and !isLast" , testPair . get ( 1 ) , postProcessed )
assertThat ( response . getPersonInformationStructure ( ) . getRegularCPRPerson ( ) . getSimpleCPRPerson ( ) . getPersonNameStructure ( ) . getPersonGivenName ( ) , is ( person . getFornavn ( ) ) )
assertTrue ( schemaRegistry . getHostnameVerifier ( ) . verify ( "" , null ) )
assertFalse ( isServiceReady )
this . tester . assertContains ( "<p class=\"empty\">foo &amp; bar</p>" )
assertEquals ( "vasya" , getPlayers ( ) . get ( 0 ) . getName ( ) )
assertEquals ( LogSeverity . FINER . toString ( ) , severity . toString ( ) )
Assert . assertNotNull ( conceptService . getConcepts ( "VOIDED" , Collections . singletonList ( Locale . ENGLISH ) , false , null , null , null , null , null , null , null ) )
assertOut ( "var /** @type {number} */ a = 42" )
Assert . hasText ( "" , "has text" )
assertions . isNull ( )
assertNotSame ( vendor . getFormatFor ( customFormatID , Locale . ENGLISH , DateFormat . LONG ) , vendor . getFormatFor ( customFormatID , Locale . ENGLISH , DateFormat . LONG ) )
assertNotNull ( client )
assertEquals ( "a,b,c,d,e" , Joiner . on ( ',' ) . join ( foundOrder ) )
Assert . assertTrue ( select . execute ( ) . size ( ) == Constant . SIX )
Assert . assertFalse ( newPointAvailable )
assertEquals ( "d" , result . toString ( ) )
assertTrue ( container . getItemIds ( ) . contains ( id ) )
Assert . assertEquals ( 21 , data . length )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertNull ( "An empty byte array should be translated to null" , ser . fromByteBuffer ( ByteBuffer . wrap ( new byte [ 0 ] ) ) )
Assert . assertEquals ( xmlEsperado , lacre . toString ( ) )
assertEquals ( 100.0 , s . getDeliveryServiceTime ( ) , 0.01 )
assertEquals ( OpenShiftAPIVersion . v1beta3 , registry . getMaxSupportedOpenShiftVersion ( serverVersions ) )
Assert . assertNotNull ( "Resource Directory is null" , facet . getResourceDirectory ( ) )
assertObject ( args )
Assert . assertTrue ( errors . hasGlobalErrors ( ) && errors . getGlobalError ( ) . getCode ( ) . equals ( TenantPermissionValidator . ERROR_CODE_EMPTY_SELECTED_IDS ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( expectedSqlForMathOperations1 ( ) , result )
assertEquals ( 2L , actual )
assertEquals ( "\"a.j.\"^^xsd:string" , name )
assertThat ( matrix , IsEqual . equalTo ( expectedMatrix ) )
assertEquals ( "852a_Location_location_nlm" , indexEntries . keySet ( ) . toArray ( ) [ 0 ] )
assertEquals ( 0.0 , accessEgressCalc . getCosts ( iContex ) , 0.01 )
assertThat ( capturedEvents , hasItem ( mdcFormat ( "testMDCInvokeOrdered" , "foobar" ) ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertFalse ( authorizationManager . authorize ( perspective1 , user1 ) )
assertThat ( html , is ( "<select id=\"w1\" name=\"w1\"><option value=\"value1\">label1</option><option value=\"value2\" selected=\"true\">label2</option><option value=\"value3\">label3</option><option value=\"value4\">label4</option><option value=\"value5\">label5</option></select>" ) )
assertEquals ( fromObj , fromStr )
assertThat ( deserialize ( output . toByteArray ( ) ) , is ( data ) )
assertEquals ( methodVariableBindings . size ( ) , 1 )
assertEquals ( RESOURCE_MANAGER , action . getResourceManager ( ) )
assertNull ( wrapper . getYear ( ) )
Assert . assertTrue ( newSql . equals ( "SELECT t.name, sum(t.price) FROM cpcplan" + suffix + " t WHERE t.id IN (1, 2, 3, 4)" ) )
assertArrayEquals ( expectedBytes , actualBytes )
Assert . assertEquals ( "TEST1234" , text )
assertTrue ( converter . canConvert ( AccountActivity . class ) )
assertNotNull ( deltaClient . get ( dsRef ) )
assertThat ( axioms , hasItem ( axiom ) )
assertThat ( "No tags should have been returned." , actualParseResult , is ( equalTo ( expectedParseResult ) ) )
assertEquals ( properties , H2JdbcUrlFactory . filterInitProperties ( properties ) )
Assert . assertEquals ( "Invalid csv line" , "1,DEVICE0,METRIC0,0,20150203235809-0500,UNDEFINED,1,13.31" , line )
assertTrue ( hasname )
assertEquals ( "urn:oid:0.1.2.3" , parsed . getEntry ( ) . get ( 0 ) . getResource ( ) . getIdElement ( ) . getValue ( ) )
assertThat ( itr . hasNext ( ) , is ( true ) )
assertEquals ( 2 , list2 . size ( ) )
assertEquals ( 5 , css . getSeverity ( ) )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertThat ( xml , containsString ( "<recipients>" + USER0 . getEmail ( ) + "</recipients>" ) )
assertEquals ( Money . of ( BigDecimal . valueOf ( 0.036d ) , "CHF" ) , BasisPoint . of ( BigDecimal . valueOf ( 30 ) ) . apply ( m ) )
assertNull ( "Wrong result" , config . get ( Integer [ ] . class , KEY_PREFIX ) )
assertThatStepsInstancesAre ( annotated . buildCandidateSteps ( ) , MyOtherOtherSteps . class , MySteps . class , MyOtherSteps . class )
assertThat ( matcher . matches ( literal ) , is ( false ) )
assertThat ( url . toUri ( ) , is ( equalTo ( "http://localhost:3000/products?pw=1" ) ) )
Assert . assertEquals ( buff . toString ( ) , result . getContext ( ) )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertFalse ( rs . next ( ) )
Assert . assertEquals ( "SimpleEntity" , name )
assertEquals ( expected , output . trim ( ) )
assertEquals ( expected , found )
assertSame ( toTest , toTest . setMethodsDeserializer ( Deserializer . class ) )
assertNotNull ( subSub1 . get ( 0 ) )
assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( expected , actual )
assertTrue ( "Expected null result" , result == null )
assertTrue ( checker . isDetected ( ) )
assertTrue ( "Row should be wider than tree" , tree . getTableWrapper ( ) . getSize ( ) . getWidth ( ) < tree . getRow ( 0 ) . getSize ( ) . getWidth ( ) )
assertTrue ( b )
assertThat ( json , equalTo ( "null" ) )
assertEquals ( "Expected 250 results!" , 250 , rows . size ( ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertNotNull ( "no topic found with a topic name after reload" , topic )
assertEquals ( rootFunction . getName ( ) , overwriteFunction . getName ( ) )
Assert . assertThat ( packagePath , CoreMatchers . is ( "/zemian/servlet3example/service" ) )
Assert . assertEquals ( true , expectInterrupt . get ( ) )
assertEquals ( expectedResult , cut . getAliadaClassFrom ( aClassThatIsInCache ) )
assertEquals ( PaxDate . of ( 2012 , 7 , 27 ) , test )
assertThat ( findFeature ( featureList , "SendLocalList" ) , is ( instanceOf ( SendLocalListFeature . class ) ) )
assertTrue ( news . checkVisibilityFor ( loggedUser ( author ) ) )
assertEquals ( assertion , getTest )
Assert . assertNull ( r . getRequest ( ) . getSession ( ) . getAttribute ( SEC_CONTEXT_ATTR ) )
Assert . assertArrayEquals ( new String [ ] { "bow=it" , "bow=is" , "bow=12.345" , "bow=feet" , "bow=long" } , generator . extractFeatures ( new String [ ] { "it" , "is" , "12.345" , "feet" , "long" } , Collections . emptyMap ( ) ) . toArray ( ) )
assertEquals ( 1.0 , median , 0.0000001 )
assertThat ( mismatches . discover ( actual , matchers ) , is ( true ) )
assertTrue ( errorsContainer . equals ( errors ) )
assertTrue ( stack2 . isEmpty ( ) )
assertEquals ( "" , result )
assertSame ( expected , result )
assertEquals ( ".__-_=.pem" , result )
assertTrue ( em instanceof WebApplicationExceptionMapper )
assertThat ( environmentVariables . getProperty ( "webdriver.driver" ) , is ( "safari" ) )
assertThat ( reason , not ( assumingFields ( "myPrivateMapNOTCALLEDTHIS" ) . areNotModifiedAndDoNotEscape ( ) ) )
assertThat ( dur . with ( Duration . approximateHours ( 24 ) ) , is ( Duration . ofPositive ( ) . years ( 3 ) . months ( 2 ) . days ( 4 ) . build ( ) ) )
assertEquals ( 0.5d , e . evaluate ( ) , 0.0 )
assertEquals ( "processTask" , activityType )
assertTrue ( "Editor must work when it is enabled!" , isElementPresent ( TextFieldElement . class ) )
assertEquals ( expectedCredential , credential )
assertThat ( "VAL3 == val3" , obj , equalTo ( true ) )
assertEquals ( getLabel ( ) , 0.0 , eye . minus ( m3 ) . getEuklideanValue ( ) , TOLERANCE )
Assert . assertEquals ( 2 , s . x )
assertFalse ( obs . getVoided ( ) )
assertEquals ( expected , built )
Truth . assertThat ( gson . toJson ( treeMessage ) )
assertEquals ( cp , point )
assertFalse ( "Added empty set is discarded" , map . containsKey ( 1 ) )
assertTrue ( doc . getLabels ( ) . isEmpty ( ) )
assertTrue ( seen . add ( UUIDGenerator . nextString ( UUIDGenerator . TYPE1 ) ) )
assertEquals ( "" , result )
assertEquals ( 5 , interpreter . i )
Assert . assertEquals ( expectedOutput , output )
assertThat ( excludeSkippedAndIgnored ( outcomes ) . size ( ) , is ( 4 ) )
Assert . assertTrue ( repeatableTask . execute ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 6 , warnings . size ( ) )
assertEquals ( request . getCriteriasByTable ( ) . size ( ) , 2 )
assertThat ( request . getEncodedParameter ( "foo" ) , equalTo ( "bar" ) )
Assert . assertEquals ( read , data )
Assert . assertTrue ( isValid , "PollItems have correct names length, so they must be valid" )
assertTrue ( fs . deleteOnExit ( path ) )
arrays . assertStartsWith ( description , new short [ 1 ] , new short [ 0 ] )
Assert . assertEquals ( "curl -X GET -L -H \"X-Access-Token: __API_EXPLORER_AUTH_KEY__\" 'https://eatstreet.com/publicapi/v1/restaurant/358/menu'" , curl )
assertArrayEquals ( testContent , out . toByteArray ( ) )
assertTrue ( sqlString . contains ( "sqlname.name" ) )
assertFalse ( state . isTriggerScanStarted ( ) )
assertThat ( result . endsWith ( expectedString ) , is ( true ) )
assertNotNull ( slf4jInfoWriter )
Assert . assertEquals ( new HashSet < > ( Arrays . asList ( new DataTypeDefinition ( "TABLE1" , "NAME" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE1" , "FIRST_NAME" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE1" , "PROFESSION" , "VARCHAR(50)" ) , new DataTypeDefinition ( "TABLE2" , "PROFESSION" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE2" , "RECOGNITION" , "VARCHAR(255)" ) , new DataTypeDefinition ( "TABLE2" , "COMMENTS" , "TEXT" ) ) ) , new HashSet < > ( dataTypeDefinitions ) )
assertArrayEquals ( a , dbr . query ( "SELECT INTA FROM CA_TEST WHERE INTA = $1" , List . of ( new Object [ ] { a } ) ) . at ( 0 ) . getArray ( "inta" , Integer [ ] . class ) )
assertTrue ( r1 instanceof PublicCloneable )
assertRequest ( "DELETE" , "Call/%s/Record/" , callId )
assertLoadBalanced ( two . loadBalanced )
assertEquals ( expected , subject . intersection ( other ) )
Assert . assertEquals ( expected , actual )
assertTrue ( ex . isOddNumber ( 3 ) )
assertFalse ( arr . some ( callbackfn ) )
Assert . assertNotNull ( products )
Assert . assertEquals ( "GET" , s )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertTrue ( Arrays . equals ( pktSerialized , pktSerialized1 ) )
assertThat ( webConfig . isGWTServiceServletDefined ( ) , is ( true ) )
assertEquals ( 7 , b . length )
assertEquals ( 0 , entities . size ( ) )
assertTrue ( entityVersion . toString ( ) . contains ( entity ) )
assertTrue ( thisMetaPage . hasProperty ( RDF . type , API . ListEndpoint ) )
assertTrue ( batteryInfos . size ( ) == 0 )
assertOutputSameTextFile ( gen , "DefineConstructor_PM.java.txt" )
assertEquals ( "567890" , actual )
assertEquals ( false , typeUsage . isInterface ( new InFileSymbolResolver ( JdkTypeResolver . getInstance ( ) ) ) )
Assert . assertFalse ( "No configs were found" , configs . isEmpty ( ) )
assertNotNull ( claims )
Assert . assertEquals ( HttpServletResponse . SC_FORBIDDEN , response . getStatus ( ) )
Assert . assertEquals ( "sensor/sensor_new" , view )
Assert . assertNotNull ( result )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , "12.3" ) )
assertThat ( ts . with ( PlainTime . COMPONENT . setToNextFullHour ( ) ) , is ( PlainTimestamp . of ( 2015 , 1 , 1 , 0 , 0 ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , cmpFilename , destinationFolder , "diff_" ) )
assertTrue ( items . size ( ) > 0 )
assertEquals ( 0 , array . length )
assertTrue ( 0.5 == distance )
assertInstanceOf ( "Expected y = -f(-x)" , ConcatenatedTransformDirect1D . class , transform )
Assert . assertFalse ( isUsable ( server . getPort ( ) ) )
Assert . assertEquals ( "" , WebUtil . getContextPath ( ) )
assertThat ( javaTypeFinder . isTypeOf ( primitiveSubType , primitiveType ) , is ( true ) )
assertEquals ( expect , DateUtils . addTime ( start , Calendar . DAY_OF_MONTH , 1 ) )
assertTrue ( response . contains ( "2" ) )
assertEquals ( size * ( size - 1 ) / 2 , edges . size ( ) )
assertPurge ( "check all of reservation-2 is removed" , expectedSummary . newChild ( "by-description" ) . newChild ( resv2Desc ) )
assertThat ( this . url , is ( equalTo ( "/context/dispatcher/type/method" ) ) )
assertNull ( json . get ( "x" ) )
Truth . assertThat ( counter . count ( batch ) )
assertEquals ( expectedTriggerTime , actualValue )
assertEquals ( new Dimension ( 50 , 50 ) , ac . getValue ( ) . getSize ( ) )
assertKernel ( kernel , ANNULUS , e )
assertTrue ( c . testMe ( 42 ) )
assertParseTree ( rootNode ( "@123" , node ( "id" , "123" , "@123" , node ( "?" , null , "@" ) , stringNode ( "tel" , "123" ) ) ) , tree )
assertEquals ( expected , actual )
assertEquals ( "Your cookies: a=b c=d e=f" , contents ( urlConnection ) )
assertEquals ( asList ( "I" , "love" , "New York" , "." ) , toText ( select ( jcas , Token . class ) ) )
assertEmptyHotspots ( samplingProfiler )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertEquals ( result , "2007" )
assertOut ( "break" )
assertThat ( result , is ( jsonNull ( ) ) )
assertThat ( name . getSegments ( ) , contains ( "type" , "name" ) )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertTrue ( rpbh instanceof RewriteParameterizedBatchHandler )
Assert . assertEquals ( AbstractRemoveBean . RETURN_STRING , result )
assertOut ( "/**\n * @constructor\n */\norg.apache.royale.A = function() {\n};" )
Assert . assertEquals ( 7 , ( ( VersionMessageWrapper ) list . get ( 0 ) ) . getMessageBuffer ( ) . readableBytes ( ) )
assertTrue ( ValidationUtils . hasValidationFailures ( vrs ) )
Assert . assertTrue ( "Mock is configured to return a valid date, return should be equally valid." , isValid )
assertEquals ( "before;inside;after;finally;" , sb . toString ( ) )
Assert . assertEquals ( "comp itself should have the focus" , comp , uic . getFocussed ( ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1_WITH_INFIX_AND_SUFFIX , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1_WITH_INFIX_AND_SUFFIX , CORRECT_PASSWORD , SC_OK ) )
assertTrue ( logger . isDebugEnabled ( ) )
Assert . assertFalse ( t . hasComparedTemplate ( ) )
assertEquals ( exp , res )
assertNotNull ( result )
assertEquals ( 42 , l1 . i )
assertEquals ( FileUtils . readFileToString ( new File ( "./src/test/resources/examples/spoon.json" ) ) . trim ( ) , jsoNasString )
assertEquals ( "" , pictogram . getTitle ( ) )
assertThat ( graphManager . getGraph ( ) . traversal ( ) . V ( ) . has ( "tim_id" , createEntity . getId ( ) . toString ( ) ) . count ( ) . next ( ) , is ( 2L ) )
assertThat ( selected . entrySet ( ) , is ( empty ( ) ) )
assertTrue ( response . contains ( "2" ) )
assertEquals ( this . q2Y1900 , next )
assertEquals ( header , ContentSummary . getHeader ( true ) )
assertEquals ( 7 , countFiles ( iter ) )
Assert . assertEquals ( block . getBlockLines ( ) . size ( ) , 3 )
Assert . assertNull ( proxiedObject )
assertThat ( result , Matchers . equalTo ( "test1=blah1&test2=blah2" ) )
assertEquals ( "From: Homer Simpson\n" + "To: Support\n" + "\n" + "En–dash coming through~\n" + "\n" + "Thank you very much for your email!" , email . getVisibleText ( ) )
assertEquals ( 2 , s . detect ( list ) . val )
assertEquals ( IllegalArgumentException . class , e . getClass ( ) )
assertEquals ( EntityNameCharType . LETTER , type )
assertThat ( result , is ( sameInstance ( database ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
shorts . assertNotLessThan ( description , actual , expected )
assertTrue ( classifier . classify ( new IllegalStateException ( "Foo" ) ) )
Assert . assertEquals ( "--xxxxxxxxxxxxxxxxxxxxxxxx\r\n" + "Content-Disposition: multipart/form-data; name=\"test\"; filename=\"hello%20%CE%BA%CF%8C%CF%83%CE%BC%CE%B5!%25\"\r\n" + "Content-Type: text/plain; charset=ISO-8859-1\r\n" + "\r\n" + "hello world\r\n" + "--xxxxxxxxxxxxxxxxxxxxxxxx--\r\n" , out . toString ( StandardCharsets . US_ASCII . name ( ) ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "say:hello" , hello )
assertThat ( reader , is ( instanceOf ( JiraProjectsReader . class ) ) )
assertEquals ( mockResponse , testResult )
assertEquals ( "aField" , expr . toString ( ) )
assertEquals ( "{\"@context\":" + "{\"@vocab\":\"http://schema.org/\"," + "\"gr\":\"http://purl.org/goodrelations/v1#\"," + "\"businessFunction\":{\"@type\":\"@vocab\"}," + "\"RENT\":\"gr:LeaseOut\"," + "\"availableDeliveryMethod\":{\"@type\":\"@vocab\"}," + "\"DOWNLOAD\":\"gr:DeliveryModeDirectDownload\"}," + "\"@type\":\"Offer\"," + "\"businessFunction\":\"RENT\"," + "\"priceSpecification\":{\"@type\":\"UnitPriceSpecification\"," + "\"price\":3.99," + "\"priceCurrency\":\"USD\"," + "\"datetime\":\"2012-12-31T23:59:59Z\"}," + "\"availableDeliveryMethod\":\"DOWNLOAD\"," + "\"eligibleDuration\":{\"@type\":\"QuantitativeValue\",\"value\":\"30\",\"unitCode\":\"DAY\"}}" , w . toString ( ) )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertEquals ( GOLD_RESULT_ARRAY , root . getTree ( ) )
Assert . assertTrue ( methods . contains ( HttpMethod . POST ) )
Assert . assertTrue ( this . component . setCollaborators ( this . entity , collaborators ) )
Assert . assertTrue ( true )
assertSame ( GBP_2_34 , test )
assertEquals ( DecodeQualification . INTENDED , plugIn . getDecodeQualification ( path ) )
Assert . assertNotNull ( addressResultsDto )
assertThat ( model . getChildCount ( model . getRoot ( ) ) , equalTo ( 0 ) )
assertEquals ( BIG_DECIMAL_VAL_7 , p . getBigDecimal ( ) )
assertThat ( response . getStatus ( ) , equalTo ( 403 ) )
assertEquals ( dt . intValue ( ) , 5 )
assertThat ( target . getOtherArchives ( ) , contains ( "first" , "second" , "third" ) )
assertNotNull ( result )
Assert . assertEquals ( expectedExceptionMessage , thrownExceptionMessage )
assertEquals ( 14 , availableProperties . size ( ) )
assertEquals ( "1" , parameters . get ( "key" ) )
assertTrue ( newYearsEve . isBefore ( newYearsDay ) )
assertEquals ( "Hello World" , body . getText ( ) )
assertThat ( params . isMonochrome ( ) , equalTo ( false ) )
assertEquals ( pdfboxValues , acrobatValues )
assertThat ( CryptoUtils . HEX . encode ( Sha256Hash . of ( signedTransaction . toByteArray ( ) ) . getBytes ( ) ) , equalTo ( EXPECTED_HASH ) )
assertThat ( intOrString1 , not ( equalTo ( intOrString2 ) ) )
assertNotNull ( actual )
assertEquals ( expectedBalance , customer . getBalance ( ) , 0.001f )
assertEquals ( "bar" , rs . getString ( 1 ) )
assertArrayEquals ( new long [ ] { 0 , 0 , - 1 , - 1 , - 1 } , blocks . getBlockListAsLongs ( ) )
assertEquals ( 0 , actual . size ( ) )
assertThat ( result , equalTo ( v ) )
assertEquals ( canonicalPath , actualPath )
assertThat ( result , is ( outbound ) )
Assert . assertEquals ( "true" , tree . getLabel ( data ) . getName ( ) )
assertThat ( order , is ( equalTo ( expected ) ) )
assertEquals ( true , result )
assertEquals ( 400 , res )
assertTrue ( BCrypt . checkpw ( plain , expected ) )
assertNotNull ( "users should not be null" , users )
assertTrue ( rulesThatHadErrors . remove ( "Incoherent restrictions 8" ) )
assertEquals ( expResult , result )
assertEquals ( target , actual )
assertEquals ( "a<V>\n" , found )
assertEquals ( object , result . get ( 0 ) )
assertEquals ( "Validation message text not correct" , "App Error found for {0}" , messageText )
assertThat ( uri , is ( "http://acme.org/path1/path2?foo=bar" ) )
assertThat ( mapOutput . size ( ) , is ( 0 ) )
assertTrue ( "ip=hello.wav ri=recording.wav" . equals ( result ) )
assertEquals ( null , decryption )
assertEquals ( "OK" , reply . get ( ) . data ( ) )
assertNotEquals ( otherHashCode , foreignableFieldHashCode )
assertEquals ( expected , actual )
assertEquals ( "test" , echo . echo ( "test" ) )
testRunner . assertAllFlowFilesTransferred ( EncodeContent . REL_FAILURE , 1 )
assertThat ( body , containsString ( "(c) Trimou Team" ) )
Assert . assertTrue ( statement . isReferenceToClassSameCompilationUnit ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "key1:value1,key2:value2" , s )
assertThat ( javaDocComment , containsString ( "(Required)" ) )
Assert . assertEquals ( "User name doesn't match" , USER_NAME_WITH_DELIMITER , info . getUser ( ) )
assertEquals ( 10 , filter . getSize ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE UPPER(NAME(nodes)) <= 'literal'" ) )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
Assert . assertEquals ( 400 , response . getStatus ( ) )
Assert . assertEquals ( SIMPLE_RETURN_CODE . FAIL , check . getErrorType ( ) )
Assert . fail ( "Expected ConfigurationException" )
assertEquals ( "{\"val\":\"someJSON\"}" , resp . getResponseBody ( ) . trim ( ) )
Assert . assertArrayEquals ( new int [ ] { 3 , 2 , 0 , 1 } , argrank ( a ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertHealthCheck ( client . execute ( get ) )
Assert . assertFalse ( res . isEmpty ( ) )
assertResponseContainsModel ( "<img class=\"componentIcon\" src=\"modelregistry/api/componenticon\"/> nt:unstructured" , Model . class , 123L , "modelName" )
assertThat ( result . getAccessTime ( ) , is ( equalTo ( 42L ) ) )
assertEquals ( "Hello World!" , ResponseBodyInterpolator . interpolate ( "Hello World!" , req ) )
Assert . assertTrue ( maxError < 0.0005 )
assertEquals ( "prop like \"abc\"" , e . toString ( ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response6 . getResponseObject ( ) )
Assert . assertTrue ( counts . containsKey ( Jsprit . Strategy . RADIAL_BEST . toString ( ) ) )
assertEquals ( "Shouldn't change the variable" , var , result )
assertMockEndpointsSatisfied ( )
assertFalse ( connectFuture . isConnected ( ) )
assertEquals ( 0 , result )
assertTrue ( "null values sent is not null" , testLongNull == null )
Assert . assertNotNull ( list )
assertNotNull ( newSet )
JSONAssert . assertEquals ( "Message" , "[1,2,3]" , actual , false )
Assert . assertEquals ( b , a . insertRow ( 1 , row ) )
assertEquals ( "[start:a:nsa, end:a]" , handler . history . toString ( ) )
assertTrue ( aclDao . hasEntry ( principal , secureObject ) )
Assert . assertTrue ( mpVideo . getMediaId ( ) != null )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
Assert . assertFalse ( policy . isResponseCacheable ( "HEAD" , response ) )
assertNull ( simple )
assertEquals ( "foobar" , cfg . someValue ( ) )
assertEquals ( d1 , d2 )
assertEquals ( ContentType . APPLICATION_JSON , transport . getUncompressedContentType ( ) )
assertEqualsIgnoreMetadata ( targetCS , actualCS )
assertThat ( underTest . getDispatched ( ) . toString ( ) , containsString ( String . format ( "[%s, %s, %s]" , REPOSITORY_1 , REPOSITORY_2 , REPOSITORY_3 ) ) )
assertNotNull ( arrayPath . get ( ConstantImpl . create ( 0 ) ) )
assertTrue ( "Dir context should be created" , ops . exists ( TEST_DIR_CONTEXT_ADDRESS ) )
assertEquals ( 5 + 2 , cnt . getCount ( ) )
assertEquals ( "http://advertised.listener:2000/foo/bar" , url )
assertEquals ( "ReverseEngineering: \n" + "  Catalog: null\n" + "    Schema: null\n" + "      IncludeTable: table1\n" + "        IncludeColumn: includeColumn\n" + "      IncludeTable: table2\n" + "        IncludeColumn: includeColumn\n" + "      IncludeTable: table3\n" + "        IncludeColumn: includeColumn\n\n" + "  Use primitives" , engineering . toString ( ) )
assertNotNull ( result )
assertArrayEquals ( d . toString ( ) . getBytes ( ) , d . asTextBytes ( ) )
assertFalse ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , NOT_STARTING_BYTE ) )
assertModifyACLset ( )
Assert . assertNull ( created )
assertFalse ( OutlineUtils . toPageDestination ( victim , null ) . isPresent ( ) )
Assert . assertTrue ( jobCounts . get ( 2 ) . jobCount == 1 )
assertEquals ( expectedContinuationToken , actualContinuationToken )
assertEquals ( "foo" , proxy . interfaceMethod ( ) )
assertSample ( sample , x , y , band )
assertFalse ( mailSenderStub . anyMoreMessages ( ) )
Assert . assertEquals ( "John" , employees . get ( 0 ) . getFirstName ( ) )
FixtureAsserts . assertStringMatchesJsonFixture ( "UpdateCart by admin response render to HAL+JSON" , actualResponse , "/fixtures/hal/cart/expected-admin-update-cart.json" )
assertNotNull ( token )
assertThat ( response . hasNotExpired ( ) , is ( false ) )
assertEquals ( 0 , hits . totalHits )
assertEquals ( expectedQuery , actualQuery )
Assert . assertNotNull ( out . getD1 ( ) )
assertEquals ( "deleteCacheOnRestart timeout" , latch . getCount ( ) , 0 )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Siprec>" + "before" + "<Child>content</Child>" + "after" + "</Siprec>" , builder . build ( ) . toXml ( ) )
Assert . assertTrue ( semaphore . tryAcquire ( 2 , 2000 , TimeUnit . MILLISECONDS ) )
Assert . assertEquals ( cap - i , dbq . remainingCapacity ( ) )
Assert . assertEquals ( "�驻�� 3 ���砖��" , t . format ( new Date ( 0 ) ) )
Assert . assertNotNull ( user )
assertNull ( p2 )
GAssert . assertEquals ( articles , result )
assertEquals ( rootPath , p . getRoot ( ) )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertEquals ( "Bar Chart Title" , barChart . getTitle ( ) )
assertTrue ( "i=" + i + " d=" + d , ! nnList . isEmpty ( ) )
assertThat ( orderElement . getAdvancePercentage ( ) , sameValueAs ( division . divide ( 20 , 100 ) ) )
assertNotEquals ( Movie . UNKNOWN , result )
mockery . assertIsSatisfied ( )
assertContains ( "This is the main table" , content )
assertEquals ( s , ps )
assertMockEndpointsSatisfied ( )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
Assert . assertTrue ( Precision . equals ( 5.0 , MathArrays . distance ( p1 , p2 ) , 1 ) )
Assert . assertNull ( removed )
assertNull ( query )
mock . assertIsSatisfied ( )
assertTrue ( response . getErrors ( ) . isEmpty ( ) )
Assert . fail ( validator . getErrors ( ) . toString ( ) )
assertSnake ( "       \n" + "       \n" + "   ����  \n" + "   ��   \n" + "       \n" + "       \n" + "       \n" )
assertEquals ( 1 , constraints . size ( ) )
Assert . assertTrue ( body . contains ( "this is b.txt" ) )
assertNullOrEmpty ( taint )
assertSame ( entityTag , response . getEntityTag ( ) )
assertParseOneDoc ( editor , "DOC(0): " , "  KEY(0): hello:" , "    KEY(2): world:" , "      RAW(4): message" , "      RAW(-1): " )
Assert . assertEquals ( sendCountBefore + 1 , AlertSender . getSendCount ( ) )
assertThat ( resultCommand , is ( expectedCommand ) )
assertEquals ( "b" , grid . getCell ( 0 , 0 ) . getText ( ) )
assertEquals ( 25. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertEquals ( 0 , IterableUtils . count ( IncludeNoNodes . getInstance ( ) . getAll ( database ) ) )
assertWktEquals ( Convention . WKT2_SIMPLIFIED , "EngineeringCRS[��A spherical CRS��,\n" + "  EngineeringDatum[��Centre��],\n" + "  CS[spherical, 3],\n" + "    Axis[��Spherical latitude (U)��, north, Unit[��degree��, 0.017453292519943295]],\n" + "    Axis[��Spherical longitude (V)��, east, Unit[��degree��, 0.017453292519943295]],\n" + "    Axis[��Geocentric radius (r)��, up, Unit[��metre��, 1]]]" , crs )
assertTrue ( failedAsExpected )
Assert . assertEquals ( 2 , response . getEntityData ( ) . size ( ) )
assertEquals ( "Test Page" , page . asString ( ) )
assertEquals ( "bar" , expression . getValue ( elContext ) )
Assert . assertFalse ( "Invalid for " + dunnable , source . isEligible ( dunningContext , dunnable ) )
assertThat ( addressResolver . get ( ) , allOf ( notNullValue ( ) , instanceOf ( ListAddressResolver . class ) ) )
Assert . assertEquals ( 9 , lics2 . getValue ( ) )
assertThat ( splits , is ( correctSplits ) )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertThat ( noOfSolutions , is ( 2401 ) )
assertEquals ( 7 , testResult . size ( ) )
assertions . doesNotContain ( false )
Assert . assertEquals ( LogLevel . INFO , testedStore . readProperty ( "log" ) . getValue ( ) )
assertThat ( controller , is ( equalTo ( method ) ) )
assertEquals ( expecting , result )
assertEquals ( true , saved . isActive ( ) )
assertTrue ( peterRank <= 2 )
assertEquals ( 1 , daysToWorkday )
assertThat ( client . search ( QUERY , INDEX , TYPE ) , is ( equalTo ( queryResult ) ) )
assertTrue ( "Should match entry URI with a context root - regex is: " + targetRegex . pattern ( ) , targetRegex . matcher ( addContextRoot ( ENTRY ) ) . matches ( ) )
Assert . assertTrue ( fr2 . element0 ( ) . isSuccess ( ) )
Assert . assertTrue ( importer . isAdmMode ( ) )
assertTrue ( gga . toString ( ) . contains ( "GPGGA,010203.456,6011" ) )
Assert . assertEquals ( change , updatedChange )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertNull ( "Wrong data" , builtByFactory . getData ( ) )
assertFalse ( DialectFactory . isProgress ( mockSqlDatabaseMetaData ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( "(c (34 a))\n" , found )
assertEquals ( "Method #toString is wrong" , "InetMapper{field=field, indexed=false, sorted=true, validated=true, column=field}" , mapper . toString ( ) )
assertEquals ( msg , text . getMessage ( ) )
assertTrue ( "Something wrong. Returned wadl length is not > 0" , applicationWadl . length ( ) > 0 )
assertEquals ( 4 , ptos . bytesWritten )
assertTrue ( lastSeenTokens . get ( ) . isEmpty ( ) )
assertTrue ( ! result )
assertFalse ( strings . hasNext ( ) )
assertThat ( found , is ( true ) )
Assert . assertThat ( result , is ( 5 ) )
assertEquals ( Lists . newArrayList ( "1" , "3" , "5" ) , getStringsFromElements ( elements ) )
assertThat ( crudKitHandler , is ( not ( nullValue ( ) ) ) )
assertions . contains ( null , index )
assertEquals ( db . get ( "foo" ) , "v1" )
Assert . assertEquals ( WebUtilities . CLOSE_BRACKET_ESCAPE , HtmlSanitizerUtil . sanitize ( testString ) )
assertEquals ( "Should get expected result" , result , filter . toString ( ) )
assertNotNull ( convert )
assertThat ( spiLoader , hasItem ( isA ( SimpleFileIOComponentFamilyDefinition . class ) ) )
assertTrue ( isSorted )
assertFalse ( validator . isValid ( resource , MetadataSection . PARTIES_SECTION ) )
assertEquals ( "P 1" , s . getPDBHeader ( ) . getCrystallographicInfo ( ) . getSpaceGroup ( ) . getShortSymbol ( ) )
assertEquals ( "The records number is correct " + clusterName . getName ( ) , 1 , resultIterator . size ( ) )
assertEquals ( handler . parseString ( testTime ) , test )
assertEquals ( 1L , id . getVersionIdPartAsLong ( ) . longValue ( ) )
assertEquals ( "GRMZ" , s )
assertEquals ( "CFBundleShortVersion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_SHORT_VERSION_STRING ) )
assertEquals ( 2 , hitCount )
Assert . assertEquals ( "[[1, bar, 2.0], [1, baz, 2.0], [2, bar, 2.0], [2, baz, 2.0], [3, bar, 2.0], [3, baz, 2.0]]" , permutations . toString ( ) )
assertThat ( lists . serial ( ) , is ( set ( 1 , 2 , 3 , 4 ) ) )
assertEquals ( expected , actual )
assertEquals ( expResult , result )
assertEquals ( event , item . getEvent ( ) )
assertEquals ( mockJob , testJob )
Assert . assertFalse ( allClassNamesMapInClassPath . isEmpty ( ) )
assertTrue ( result )
assertFalse ( dsc . isEmpty ( ) )
assertThat ( mismatches . discover ( actual , matchers ) , is ( false ) )
assertEquals ( 4 , navigation . size ( ) )
assertEquals ( 3 , res . getBody ( ) . length )
assertArrayEquals ( expected , actual )
assertEquals ( AdWordsSession . UNKNOWN_USER_AGENT , adWordsSession . getUserAgent ( ) )
assertEquals ( "Substitution was not correctly applied" , "This is a lunch lunch." , result . get ( ) )
assertEquals ( expResult , result )
assertDecimalEquals ( ema . getValue ( 9999 ) , 9994.5 )
assertEquals ( lineString , dump ( ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "wkt" ) )
assertEquals ( "WHERE id = 12345" , statement . getQuery ( ) )
assertFalse ( op . isArchivalGroup ( ) )
assertTrue ( expectedAsc . containsAll ( list ) )
assertEquals ( "select entity_0 from Entity entity_0 where ( ( entity_0.code = :code_1 ) or ( entity_0.code = :code_2 ) )" , select . getQuery ( ) )
assertEquals ( "baz" , v1 . toString ( ) )
Assert . assertNull ( pom )
assertInstancesOf ( java . sql . Date . class , rv )
assertEquals ( presenter . isFilterOn ( ) , true )
assertEquals ( "getId() doesn't return the same value as the previous setId()" , id , domainEntity . getId ( ) )
Assert . assertEquals ( "[0, 1, 2, 3]" , s . toString ( ) )
assertEquals ( fn1 , fn2 )
assertRequest ( "POST" , "Verification/Address/" )
assertTrue ( ( ( NgMinProcessor ) victim ) . isSupported ( ) )
assertThatPersonIsProtected ( mapper ( FOR_NON_AUTORITY_CLIENT ) . map ( person , CensorProtectedDataForNonAuthorities , CPRProtectionLevel . DoNotCensorCPR ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "one" , firstElement )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
assertEquals ( 2 , ( int ) formField . getFormFieldId ( ) )
assertEqualsJFigletFullWidth ( asciiArt )
assertResultSet ( res )
assertEquals ( expected , actual )
assertEquals ( "Hello Camel in action" , reply )
assertEquals ( Double . valueOf ( 5 ) , Double . valueOf ( value . asDouble ( 10 ) ) )
assertEquals ( "GBP -1.22" , test . toString ( ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( expected , result )
assertThat ( timeline , is ( notNullValue ( ) ) )
Assert . assertNotNull ( picture )
assertEquals ( "mm" , s )
assertTrue ( contents . contains ( "only-one" ) )
assertEquals ( "entry-" + j , new String ( entry . getEntry ( ) ) )
assertEquals ( markup , rewrite ( gadget , markup , set ( "a" ) , set ( "href" , "target" ) ) )
assertTrue ( r . isResourceType ( DefaultResourceTypeDefinition . APPLICATIONSERVER ) )
assertTrue ( _comp . isEquals ( json , expected ) )
Assert . assertEquals ( 1 , ( int ) retVal )
spliterators . assertHasOnlyCharacteristics ( INFO , actual , DISTINCT , SORTED )
Assert . assertEquals ( 21 , lambda . testAddInt ( 15 , 5 ) )
assertEquals ( DispatcherType . FORWARD , dispatcherType )
assertEquals ( "NoViableAltException('!'@[1:1: Tokens : ( T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 |" + " T__41 | LT | LTE | EQ | GT | GTE | BOOLEAN | AND | OR | NOT | ASC | DESC | CONTAINS | WITHIN | OF | DIRECT |" + " UUID | ID | LONG | FLOAT | STRING | WS );])" , error )
assertOut ( "/**\n * @interface\n * @extends {foo.bar.IB}\n * @extends {baz.goo.IC}\n * @extends {foo.ID}\n */\nIA = function() {\n};\n\n\n/**\n * Prevent renaming of class. Needed for reflection.\n */\ngoog.exportSymbol('IA', IA);" )
assertEquals ( g1 , g2 )
Assert . assertNull ( this . component . readJSON ( json ) )
assertArrayEquals ( new long [ ] { 1 , 2 , 3 } , result )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
Assert . assertNotNull ( bean . getDataSource ( ) )
assertFalse ( "Class is concrete." , analyser . isAbstract ( ) )
assertFalse ( parsed )
assertEquals ( 0 , dao . updateId ( null , null ) )
assertThat ( strPrev , is ( "prev" ) )
assertThat ( target . validate ( ) , is ( true ) )
Assert . assertNotNull ( out . getD2 ( ) )
assertEquals ( 4 , exceptions )
assertEquals ( 1 , event . getMetricSint64 ( ) )
assertEquals ( "Expected 5 results!" , 5 , count )
assertEquals ( expected , result )
assertTrue ( sb . length ( ) > 0 )
assertEquals ( "Number of scanned records" , 10 , i )
assertEquals ( "Failed to filter query string" , expectedResult , normalizedUrl )
Assert . fail ( "Should not have been allowed to set registry after pool started" )
assertEquals ( expected , actual )
assertNotNull ( result )
assertTrue ( account . isValid ( ) )
assertThat ( root , equalTo ( expected ) )
assertEquals ( TestParameters . VP_CHM_ENTITIES_NUMBER , chmEntries . size ( ) )
assertEquals ( userListWrapper , userRoleResource . getUsers ( ) )
assertEquals ( "Table name is not equal to actual value." , "testAddIndexWithIndexNameLengthGreaterThanMaxLength" , iHtd . getNameAsString ( ) )
assertEquals ( 0 , filesList . size ( ) )
assertEquals ( "array_3" , sql )
assertThat ( allEvents . stream ( ) . skip ( index ) . limit ( events . size ( ) ) . collect ( toList ( ) ) , containsInOrder ( events ) )
assertNotNull ( result )
assertEquals ( "mystream.flibble" , sn . getSourceDestinationNode ( ) . getDestinationName ( ) )
assertEquals ( conceptSets , Collections . emptyList ( ) )
assertThat ( underTest . getZip ( SOME_PATH ) , is ( nullValue ( ) ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
assertThat ( command . accept ( state ) , is ( true ) )
assertTrue ( ax . toString ( ) , ax instanceof OWLObjectPropertyDomainAxiom )
assertTrue ( "Models are not isomorphic" , isomorphic ( m0 , m ) )
assertTrue ( ! testing . hasNext ( ) )
assertEquals ( 1 , unassigned . size ( ) )
assertEquals ( "/topic" , m_callback . getTopic ( ) )
arrays . assertEndsWith ( description , null , newArray ( true ) )
assertionHelper . assertIrodsFileMatchesLocalFileChecksum ( destFile . getAbsolutePath ( ) , localFile . getAbsolutePath ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
assertFalse ( serviceFacade . isAnyProcessGroupUnderVersionControl ( groupId ) )
assertEquals ( "samedi, janvier 01" , DateUtils . formatFriendlyDate ( DateUtils . nowUtc ( ) , Locale . FRANCE ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED_BREAK , status )
assertEquals ( mockHandler , m . getProperty ( "com.sun.xml.bind.characterEscapeHandler" ) )
assertEquals ( expected , buffer . get ( ) )
Assert . assertEquals ( "Failure for click=" + clickType + ", slot=" + slot + ", cursor=" + testCase [ 2 ] + ", slotItem=" + testCase [ 3 ] , expected , actual )
assertOut ( "b = b + 1" )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( "selected+song=hey+jude&bar=foo" , payload . getValue ( ) )
assertAnnotationCompletions ( "@Value(value=\"${data.prop2}\"<*>)" , "@Value(value=\"${else.prop3}\"<*>)" , "@Value(value=\"${spring.prop1}\"<*>)" )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD1 == 'enrichValue1') OR (SOURCEFIELD2 == 'sourceValue' AND TARGETFIELD2 == 'targetValue' AND ENRICHFIELD2 == 'enrichValue2')" , transformed )
assertEquals ( "20161130-L8-137035-Elbe_Tideelbe" , output )
assertColumnHeaderOrder ( 0 , 1 , 2 , 6 , 7 )
assertTrue ( ContextUtils . isRequestor ( message ) )
assertThat ( resolver . replace ( "${message-MISSING}" , true ) , is ( "MISSING" ) )
assertEquals ( "void main(String[] args) {}" , actualContent )
assertNotNull ( "Text not translated" , transText )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
Assert . assertNotNull ( xstreamMap )
Assert . assertTrue ( exceptionText )
assertEquals ( "xaxbx" , ex . getUnlabeledMessage ( ) )
assertSame ( objects [ i ] , o )
assertTrue ( transactionHelper . isTransactionAvailable ( ) )
assertEquals ( sb . toString ( ) , whereSb . toString ( ) )
assertThat ( ( Integer ) ms . get ( "aaa" ) , is ( 1 ) )
assertEquals ( "DBPointer( 'bar', 'baz', ObjectId('50d615d28544eba9a10004e8') )" , element . getValueAsString ( ) )
assertTrue ( Ideal . create ( eliminate ( ideal , 0 ) ) . isPrincipal ( ) )
Assert . assertNull ( "school type should be null" , result )
assertEquals ( "http://localhost/things?id=101" , affordance . expand ( 101 ) . getHref ( ) )
assertEquals ( 127 , objectTypes . size ( ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
Assert . assertTrue ( irodsFileForSecondaryUser . canWrite ( ) )
assertTrue ( "User could not subscribe to the list." , response )
assertEquals ( mockResponse , response )
assertEquals ( "Unsupported parameter test for pwd." , result )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> strings . get ( - 3 ) )
Assert . assertFalse ( "Method supported" , adapter . supports ( endpoint ) )
assertThat ( generated . length ( ) , is ( equalTo ( length ) ) )
assertThat ( JdbcUtils . getColumnNames ( getConnectionProperties ( ) , "SOMETABLE" ) , containsInAnyOrder ( "PID" , "TEXTCOL" ) )
assertThat ( testOutcome . getSuccessCount ( ) , is ( 3 ) )
Assert . assertEquals ( 1 , ahelper . getFailedRecords ( ) . size ( ) )
assertSame ( part , listBar . parts . getFirst ( ) )
assertThat ( ( StringList ) target . getBodyAsStringList ( ) , is ( ret ) )
assertEquals ( target . field , check . send ( ) )
Assert . assertEquals ( 4 , result . fieldNames ( ) . size ( ) )
assertEquals ( expectedQuery , actualQuery )
assertFalse ( token . expired ( ) )
assertArrayEquals ( plaintext , roundTripPlaintext )
Assert . assertEquals ( 0 , to . getRules ( ) . size ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( 0 , type . getCapacityDimensions ( ) . get ( 0 ) )
assertEquals ( Collections . < String , Object > emptyMap ( ) , result )
assertTrue ( ! branch_conditions . isEmpty ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Hi commons!" , StrSubstitutor . replace ( "Hi ${name}!" , map ) )
assertTrue ( results . getAttribute ( ValidationActionTypeService . VALIDATIONS_ACTION_ATTRIBUTE ) == null )
assertEquals ( jedisCluster . get ( "foo" ) , "bar" )
assertEquals ( expected , emptyGraph . getImmediateDominators ( ) )
Assert . assertEquals ( Collections . emptyMap ( ) , actual )
assertIntValues ( array , 1 , 2 , 3 , 4 , 5 , 6 )
Assert . assertNotNull ( authentication )
assertThat ( converter , is ( instanceOf ( ConverterInTheClasspath . class ) ) )
assertEquals ( "123涓���浜烘��卞����" , deserialize . readUTF ( ) )
assertFalse ( entity . isValid ( ) )
assertHighlighting ( 2 , 6 , 8 , STRING )
assertNull ( "Not null type is returned for property ''" , container . getType ( "" ) )
assertEquals ( expected , actual )
assertTrue ( result . toString ( ) . contains ( "rdf:nodeID" ) )
assertThat ( subject . reverseGet ( value ) , is ( key ) )
assertTrue ( object . isWeak ( ) )
assertEquals ( 2 , ektorp . getSeatedPeople ( ) . size ( ) )
assertEquals ( sb . toString ( ) , qb . prepareStatementString ( ) )
assertEquals ( 1 , repositoryService . createProcessDefinitionQuery ( ) . count ( ) )
assertEquals ( "34 abc\n" , found )
Assert . assertEquals ( 1 , stocks . size ( ) )
assertEquals ( expectedSubsequenceLength , count )
assertEquals ( value , postComment . getAttributes ( ) . get ( name ) )
assertEquals ( "2:4:6:8:10" , app . asStringJoin ( a1 ) )
assertEquals ( "Unknown name" , i . toString ( ) )
assertFalse ( isValidDirectory ( file ) )
assertThat ( specificResourceAllocation . getAssignments ( ) , consecutiveDays ( 2 ) )
assertEquals ( BPResultType . PASS , testResult . getResultType ( ) )
assertNull ( "Conversation was found after being deleted" , checkConversation )
assertPostCodegenRules ( mojo )
Assert . assertEquals ( person . getId ( ) , ( ( Person ) beanConverter . convert ( null , person . getId ( ) , Person . class , null ) ) . getId ( ) )
assertThat ( tuple . getCollectionOrDefault ( "field" , Collections . emptyList ( ) ) , equalTo ( value ) )
assertEquals ( expected , actual )
assertNotSame ( "Calendar.equals: " , v0 . getDateTime ( ) , v1 . getDateTime ( ) )
assertFalse ( channel . isOpen ( ) )
assertEquals ( 6 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( expected , actual )
Assert . assertEquals ( 0.0 , score , 0.0 )
assertEquals ( null , DocumentUtils . getDocumentUri ( cas ) )
assertEquals ( "IDX1" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertFalse ( "Deleted object must not exist" , ocflRepository . containsObject ( OBJ_ID ) )
assertThat ( formatter . format ( PlainDate . of ( 2015 , 11 , 19 ) ) , is ( "Nobyembre" ) )
Assert . assertFalse ( "'withouttests' should not contain any tests." , result )
Assert . assertTrue ( FastMath . abs ( error ) < 1.0e-10 )
assertEquals ( "ereref" , Bytes . toString ( res ) )
assertThat ( target . getTime ( ) , is ( target . getTime ( ) ) )
Assert . assertEquals ( StringUtil . EMPTY , content )
assertEquals ( 1 , o . importsDeclarations ( ) . count ( ) )
assertEquals ( TestParameters . VP_CHM_ENTITIES_NUMBER , chmEntries . size ( ) )
assertThat ( result , is ( false ) )
assertEquals ( expected , ColumnRanges . rangeAtNode ( either ) )
assertFalse ( family1 . hashCode ( ) == family2 . hashCode ( ) )
assertAgentString ( optionsByType , "-agentpath:mylib=" , "port=8849" , "stack=1234" )
Assert . assertEquals ( "ssd" , tableName )
Assert . assertEquals ( accounts . get ( "US-Prod-Sandbox" ) . locationId , response . getLocations ( ) . get ( 0 ) . getId ( ) )
assertEquals ( "Row count should match" , rsMismatches . size ( ) , result )
assertTrue ( updatedTopic . userSubscribed ( user ) , SUBSCRIBED )
assertThat ( System . getProperty ( key ) , is ( nullValue ( ) ) )
assertFalse ( detector . canProcessEvent ( buildEventWith ( delta ) ) )
assertEquals ( 1 , ctd . getOrder ( ) )
assertTrue ( this . getMimeMailBody ( ) . contains ( "http://coolsite.com:1234/forum/branches/" + branchId ) )
Assert . assertEquals ( 0 , count )
assertEquals ( 1.2345 , rtcpReceivedEvent . getDlSr ( ) , 0.00001 )
assertEquals ( expected , t )
assertEquals ( 2 , ( ( Number ) result ) . intValue ( ) )
assertEquals ( errorMessage , callback . getErrorMessage ( ) )
assertEquals ( "http://ci.visuwall.awired.net/job/struts/api/xml" , testUrl )
assertThat ( sql , equalTo ( "update UserInfo set name = case id when 77 then name when 88 then name when 99 then name else name end,age = case id when 77 then age when 88 then age when 99 then '16' else age end where id in(77,88,99)" ) )
assertEquals ( p , fromSparseRecursiveForm ( recursiveRep , p . nVariables , MonomialOrder . DEFAULT ) )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( output1 . getId ( ) . getIdPart ( ) , output2 . getId ( ) . getIdPart ( ) )
assertTrue ( daemon . start ( "src/test/resources/test_configurations/basic-configuration.xml" ) )
assertTrue ( Integer . valueOf ( lowestTitle . compareTo ( summary . getTitle ( ) . getTitle ( ) . getContent ( ) ) ) < 0 )
assertTreesAreEqual ( tree4_spatial_leaves , roundTripped )
assertThat ( uri , is ( "/path/expectedUrl" ) )
Assert . assertNotNull ( result . getBookList ( ) )
assertEquals ( 1 , tags . size ( ) )
assertEquals ( 3 , packages . size ( ) )
assertThat ( relationEditor . isMatchingRelationName ( relation , name ) , is ( true ) )
Assert . assertTrue ( EqualsBuilder . reflectionEquals ( resourceJobManager , savedJobManager , "__isset_bitfield" ) )
assertEquals ( o . getOntologyID ( ) , df . getOWLOntologyID ( df . getIRI ( "urn:test:Ontology1" ) , df . getIRI ( "urn:test:Ontology1Version1" ) ) )
assertThat ( excludeProgressLogsFilter . decide ( event ) , equalTo ( DENY ) )
assertThat ( thrown , instanceOf ( CursorNotFoundException . class ) )
Assert . assertEquals ( 10 , counter . getCount ( ) )
Assert . assertEquals ( "some one" , mailbox . getAddress ( ) )
assertNoCause ( "Service is not implemented" , exchange )
assertEquals ( expected , e . setVariable ( "x" , x ) . evaluate ( ) , 0.0 )
assertEquals ( edmType , returnedType )
assertVectorEquals ( add ( alpha , yd ) , x . add ( alpha , y ) )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
Assert . assertTrue ( rep . containsKey ( "Test view 1" ) )
assertNull ( s )
Assert . assertEquals ( config . getSet ( ) . iterator ( ) . next ( ) + "12" , config2 . getSet ( ) . iterator ( ) . next ( ) )
assertTrue ( result )
assertTrue ( valid )
assertThat ( cursor . proceedTo ( 'b' ) , is ( true ) )
assertArrayEquals ( expected , bos . toByteArray ( ) )
assertEquals ( 6. * 3600. , sec , 0.01 )
assertThat ( result , empty ( ) )
assertTrue ( sql , sql . endsWith ( "WHERE t0.ESTIMATED_PRICE " + "NOT BETWEEN #bind($id0 'INTEGER') AND #bind($id1 'INTEGER')" ) )
assertThat ( "missing owner shall be detected" , validation . hasErrorAbout ( "no" , "owner" ) )
assertEquals ( vars , variablesTyped )
assertions . doesNotContain ( actual . toArray ( ) )
assertThat ( initialized , is ( true ) )
Assert . assertEquals ( 2 , analyser . getLoadJustBeforeActivity ( route . getActivities ( ) . get ( 1 ) , route ) . get ( 0 ) )
assertFalse ( authorizer . isAuthorized ( context , profiles ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertNull ( conversationIdHeader )
Assert . assertTrue ( futures . size ( ) == 1 )
assertEquals ( "Name" , resource . getConnectionIDs ( ) . getList ( ) . get ( 0 ) )
assertEquals ( comp , nnf )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getStatus ( ) )
Assert . assertThat ( dump , equalTo ( "ErrorNode: \"Invalid type expression syntax: \"" + invalidExpression + "\". Caused by : Parenthesis are not correctly balanced. at character : 13\" (Start: -1 , End: -1)" ) )
assertMappedFieldValueIsEmptyCollection ( )
assertEquals ( 0 , youngFriends . size ( ) )
assertEquals ( true , result [ 0 ] )
assertPlanMatches ( access )
assertEquals ( 2 , deltas . size ( ) )
assertThat ( result , empty ( ) )
assertFS ( url )
Assert . assertEquals ( "I cleaned the parents' car" , this . realiser . realise ( sent ) . getRealisation ( ) )
Assert . assertEquals ( expect , actual , EPSILON )
assertEqualDoubleArrays ( pymin , min , epsilon )
assertThat ( event . check ( newGitHubBranchDecisionContext ( ) . withLocalBranch ( localBranch ) . withBranchTrigger ( trigger ) . withLocalRepo ( localRepo ) . withListener ( listener ) . build ( ) ) , notNullValue ( ) )
assertThat ( branches , is ( empty ( ) ) )
assertLookup ( breaks , values , srcImg , ImageDataType . SHORT )
arraysWithCustomComparisonStrategy . assertIsSorted ( someInfo ( ) , actual )
assertEquals ( NUM_TABLES * NUM_TOKENS , result . size ( ) )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertEqualsJson ( expected , actual )
assertEquals ( "aA" , mat . group ( ) )
assertEquals ( "V1 Track" , wrapper . getTrack ( ) )
assertEquals ( expected , actual , delta )
assertEquals ( biggestWidget ( ) . getX ( ) , gridLienzoScrollBounds . minBoundX ( ) , 0 )
assertEquals ( witnessList , tokenList )
assertTrue ( errors . hasFieldErrors ( "stopDatetime" ) )
assertTrue ( map . isEmpty ( ) )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( expected , actual )
assertFalse ( foundDataTransferPolicy )
assertThat ( elementFacade . isVisible ( ) , is ( false ) )
assertEquals ( from ( 0 ) . toByteBuffer ( ) , db . getFieldValue ( 0 , FIELD_NAME ) )
assertValidationConstraint ( validator , obj , "EndBeforeStart" , "end" )
assertThrows ( AvaliaveisIncompativeis . class , ( ) -> new Observacao ( o , d , "tentativa deve falhar" ) )
Assert . assertEquals ( Object . class , t . getType ( ) )
assertThat ( seqTerminals , containsInAnyOrder ( term1 , term2 ) )
assertEquals ( messageIterator , this . consumer . get ( topic , partition , offset , maxSize ) )
assertThat ( result . toBase64Encode ( ) , is ( "bnVsbDpudWxs" ) )
assertEquals ( 1 , branch_conditions . size ( ) )
Assert . assertEquals ( 2 , status . getRepositoryChangedRevision ( ) )
assertEquals ( "FATAL" , level . toString ( ) )
assertions . isNotLessThan ( expected )
assertEquals ( "[[1, a], [3, a], [1, b], [3, b], [2, c], [3, c], [1, d], [2, d], [2, e]]" , Arrays . deepToString ( testData ) )
assertEquals ( 3 , count )
assertEquals ( BOLD , style )
assertThat ( ret . isSuccess ( ) , is ( true ) )
Assert . assertNull ( result )
assertPermanentCount ( playerA , "Serra Avenger" , 1 )
assertEquals ( PropUtil . getIntProperty ( props , "test" , 1 ) , 2 )
assertTrue ( now - timeStamp - timeSpan < 2 )
Assert . assertEquals ( "443/MyProject" , connectionString )
assertEquals ( "d6f18efa527f1bd22b4a67fc621cfbe7" , hash )
Assert . assertEquals ( expected . toString ( ) , serializer . serialize ( testMessage ) . toString ( ) )
assertEquals ( "code" , chargedPreApproval . getTransactionCode ( ) )
assertEquals ( propertyValue , value )
context . assertIsSatisfied ( )
assertEquals ( PropUtil . getIntProperty ( props , "test" , 1 ) , 2 )
DelegationTestUtil . assertDelegationToSpy ( messageProducer )
assertEquals ( "value" , o . get ( "p" ) )
assertThat ( description . toString ( ) , is ( "sheet(s) \"Yet Another Sheet\" was missing" ) )
Assert . assertEquals ( 2 , test . merge ( ) . intValue ( ) )
assertEquals ( reference , toTest )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFProtocolo ( ) . toString ( ) )
Assert . assertEquals ( message , _echo . echo ( message ) )
assertThat ( config , hasEntry ( CubeDockerConfiguration . DOCKER_URI , OperatingSystemFamily . DIND . getServerUri ( ) ) )
assertFalse ( "No cast information!" , result . isEmpty ( ) )
assertNotNull ( fixture )
assertEquals ( "hello" , CompletableFuturesExtra . getCompleted ( future ) )
assertProjectOut ( compiledFileNames , testDirPath )
assertEquals ( expect , result )
assertNull ( classUnderTest . getDifferenceVal1 ( ) )
runner . assertAllFlowFilesTransferred ( ListenRELP . REL_SUCCESS , 2 )
Assert . assertTrue ( result . next ( ) )
assertEquals ( testNamespace , testProfileData . getNamespace ( ) )
assertEquals ( "something == x && something == y" , result )
assertEquals ( true , attributes . isDirectory ( ) )
assertTrue ( Files . exists ( dir ) )
assertThat ( subs , contains ( subProperty ) )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertEquals ( json , rc . getBodyAsJson ( ) )
assertTrue ( "" + mse , mse <= desiredError )
given ( ) . spec ( specs . get ( 0 ) ) . when ( ) . get ( "events/test/subscribers/" + id ) . then ( ) . statusCode ( 200 ) . assertThat ( )
assertStatusIs ( noTestsRun ( ) )
assertThat ( supplier . authForSwarm ( ) , matchesAccessToken ( accessToken ) )
Assert . assertTrue ( "No file generated" , new File ( ( output + "A.hpp" ) . replace ( '/' , File . separatorChar ) ) . exists ( ) )
assertEquals ( expected , actualQuery )
assertFalse ( "Expected only FIRST_STATE to be enabled" , SentryStateBank . hasStatesEnabled ( TestState . COMPONENT , new HashSet < SentryState > ( Arrays . asList ( TestState . FIRST_STATE , TestState . SECOND_STATE ) ) ) )
Assert . assertTrue ( result . equals ( "10 minutes" ) )
assertEquals ( value , stat . toLong ( ) )
assertEquals ( 0 , latch . getCount ( ) )
Assert . assertEquals ( effective . getSpacing ( ) . getAfter ( ) . intValue ( ) , 0 )
assertEquals ( "Unknown name" , i . toString ( ) )
Assert . assertEquals ( 1 , o )
Assert . assertEquals ( "Invalid HUs retrieved" , Arrays . asList ( hu_bp03loc01_wh01_active ) , huSelectModel . createHUQueryBuilder ( ) . list ( ) )
assertNotNull ( scriptStatement )
assertNotNull ( result )
assertTrue ( originalMap . isEmpty ( ) )
TestHelpers . assertDeepEquals ( expected , result )
assertEquals ( 97 , jumpingOnTheCloud . getEnergyBalance ( 19 , 19 , clouds ) )
assertTrue ( expectedAsc . containsAll ( list ) )
assertThat ( updatedItem . getQuantity ( ) , is ( existingItem . getQuantity ( ) - increment ) )
assertEquals ( "com.github.javaparser.ast.CompilationUnit" , typeDefinition . get ( ) . getQualifiedName ( ) )
assertThat ( metadataFieldService . find ( context , id ) , nullValue ( ) )
assertFalse ( vrp . getJobs ( ) . containsKey ( "4" ) )
assertEquals ( cls . getNNF ( ) , cls )
assertThat ( cc . plus ( 38 , ChineseCalendar . Unit . DAYS ) , is ( ChineseCalendar . of ( EastAsianYear . forGregorian ( 2017 ) , EastAsianMonth . valueOf ( 7 ) , 7 ) ) )
assertEquals ( test . fourSumCount ( input [ 0 ] , input [ 1 ] , input [ 2 ] , input [ 3 ] ) , 132 )
Assert . assertEquals ( false , retval )
Assert . assertEquals ( Integer . class , clazz )
assertEquals ( "okay" , getDecisionResult ( processInstance ) )
assertTrue ( committed )
assertGyldigeNavn ( kvinner )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
assertMapped ( ( Integer x ) -> x + 2 , asList ( 1 , 2 , 3 ) , asList ( 3 , 4 , 5 ) )
assertNotEquals ( "${project.version}" , appProperties . getVersion ( ) )
assertEquals ( Integer . valueOf ( 200007 ) , query . select ( employee . datefield . yearWeek ( ) ) . fetchFirst ( ) )
assertEquals ( 2 , numberOfElephants )
assertSame ( expected , actual )
assertEquals ( DecodeException . class , err . getClass ( ) )
assertEquals ( "BGP Error code 2 and subcode 170 not recognized." , e . getMessage ( ) )
assertTrue ( "Temporary table" , captor . getValue ( ) . isTemporary ( ) )
assertThat ( getCompiledResult ( ) , is ( false ) )
assertEquals ( expectedValue , result )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertEquals ( "showDeveloperTools timeout" , latch . getCount ( ) , 0 )
assertThat ( ProviderAnnotations . getInterfaceName ( fixture ) , equalTo ( "tests/test" ) )
Assert . assertEquals ( "SELECT s1\nFROM t1\nWHERE s1 = ANY (SELECT s1\n\tFROM t2);" , text )
assertNull ( retMap )
assertEquals ( spyQueue . size ( ) , 3 )
Assert . assertEquals ( map ( Jsr310NullKeySerializer . NULL_KEY , "test" ) , value )
assertEquals ( 204 , resp . getStatus ( ) )
assertEquals ( "TestFindRightPlaceByRightItem 0" , relationshipDAO . findNextRightPlaceByRightItem ( context , item ) , relationshipService . findNextRightPlaceByRightItem ( context , item ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertExec ( "Should be the same" , Numbers . class , "deserInt__I" , Double . valueOf ( exp ) )
assertPostFails ( "3" , role , OntopiaRestErrors . MANDATORY_OBJECT_IS_NULL )
context . assertIsSatisfied ( )
Assert . assertEquals ( "mapped property value" , data . myMappedProperty )
Helpers . assertJson ( Deencapsulation . invoke ( twinState , "toJsonElement" ) . toString ( ) , json )
Assert . assertEquals ( 42 , font . getHmtx ( ) . getAdvanceWidths ( ) . length )
assertHasMethod ( model , "com.artemis.E group(java.lang.String group)" )
assertEquals ( "Unexpected primary style name" , state . primaryStyleName , grid . getPrimaryStyleName ( ) )
assertNotNull ( myTestFactory )
editor . assertContextualCompletions ( "<*>" , "default<*>" , "windoze<*>" )
Assert . assertFalse ( ModuleUtil . isOpenmrsVersionInVersions ( "1.11.*" , "2.1.0" ) )
assertEquals ( "wrong text" , "<Symbol1> ::= <Symbol2> 'Symbol3'" , production . toString ( ) )
assertMissing ( "referenceOne" , 1L )
assertTrue ( true )
assertTrue ( "sin() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( "{\"messageInfo\":{\"from\":\"Miguel Arlandy\",\"to\":\"Cristiano Ronaldo\",\"message\":\"Hala Madrid!\"}}" , jsonMessage )
assertEquals ( 0x5678 , hash . getShort ( ) )
Assert . assertTrue ( true )
assertNull ( recursiveType . getArrayElementType ( ) )
assertThat ( ReflectionTestUtils . getFieldValue ( ConsoleLogger . class , null , "fileWriter" ) , nullValue ( ) )
assertEquals ( "Test message ab c\\\\" , result )
assertTrue ( res . isEmpty ( ) )
assertThat ( context , is ( notNullValue ( ) ) )
assertArrayEquals ( exp , out , 1e-4 )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( TagUtils . getTaggedCommit ( "source_tag" , repo ) , BranchUtils . getHeadCommit ( "test_branch" , repo ) )
assertOut ( "var /** @type {XMLList} */ b = a.child('child')" )
assertEquals ( "SQL to select all records" , "SELECT * FROM " + tableName ( TEST_TABLE ) , testDialect . convertStatementToSQL ( stmt ) )
assertTrue ( graphEmpty ( gStore . getDefaultGraph ( ) ) )
assertEquals ( "53" , victim . readIntegerNumber ( ) )
assertEquals ( - 1 , store . read ( 0 , new byte [ 1 ] , 0 , 1 ) )
assertTrue ( spied . call ( ) )
assertEquals ( "/../../.." , xmldbURI . resolveCollectionPath ( uri ) . toString ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( true , classUnderTest . isFileOpenInSpecifiedDir ( ) )
assertTrue ( GenericTypeReflector . equals ( expected , ClassUtils . getCommonSuperType ( Arrays . asList ( t1 , t2 ) ) ) )
assertThat ( api . getResponseReadTimeout ( ) , is ( 0 ) )
Assert . assertEquals ( ProvisioningIdentityCertificateBuilderTest . TEST_IDENTITY_CERT , subject . getCertificate ( ) )
Assert . assertFalse ( allowedCRUDL )
assertThat ( cls , is ( owlThing ( ) ) )
assertTrue ( ( ( PerunBl ) perun ) . getServicesManagerBl ( ) . isServiceBlockedOnDestination ( testService1 , testDestinationId1 ) )
assertEquals ( 0 , failures . get ( ) )
assertEquals ( response . asString ( ) , CANCELLED , response . get ( OUTCOME ) . asString ( ) )
assertOut ( "var /** @type {number} */ a = 2147483648" )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertEquals ( comoFaz . getLastTouchedBy ( ) . getId ( ) , leo . getId ( ) )
assertEquals ( expResult , result )
assertEquals ( "24.6" , result )
assertTrue ( envVars . size ( ) == 0 )
assertEquals ( "Hello ^^ John" , ResponseBodyInterpolator . interpolate ( "Hello ^^ :name" , req ) )
assertUndeployed ( COMPONENT_NAME )
assertEquals ( 400 , response . getStatus ( ) )
assertNotNull ( Workflow . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "" , result )
assertEquals ( "CLIENT PARALLEL 1-WAY RANGE SCAN OVER EH ['111111111111111','foo            ','2012-11-01 00:00:00.000'] - ['111111111111111','fop            ','2012-11-30 00:00:00.000']\n" + "    SERVER FILTER BY FIRST KEY ONLY AND (CREATED_DATE >= DATE '2012-11-01 00:00:00.000' AND CREATED_DATE < DATE '2012-11-30 00:00:00.000')\n" + "    SERVER TOP 100 ROWS SORTED BY [ORGANIZATION_ID, PARENT_ID, CREATED_DATE DESC, ENTITY_HISTORY_ID]\n" + "CLIENT MERGE SORT\nCLIENT LIMIT 100" , QueryUtil . getExplainPlan ( rs ) )
assertEquals ( "www.giantbomb.ru" , doc . getContentField ( "out" ) . toString ( ) )
assertSame ( 0 , searchHistory . getLength ( ) )
assertTrue ( compressedLogFile . exists ( ) )
Assert . assertTrue ( "duplicate association was not removed" , topicmap . getAssociations ( ) . size ( ) == 1 )
checker . assertEquals ( "[" + index + "]" , exp , act )
assertEquals ( body . toString ( ) , "No handlers for address hello1" )
assertEquals ( "48656C6C6F20576F726C64" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertThat ( taskService . createTaskQuery ( ) . taskCandidateGroup ( "demo" ) . count ( ) , is ( 1L ) )
assertKey ( new StringKey ( "#" ) , index . searchIndex ( new EqualsCondition ( new StringKey ( "#" ) ) , Index . NO_SEARCH_LIMIT ) )
Assert . assertTrue ( "This is a Docx file, DocxReport implementation should have been resolved...." , report instanceof DocxReport )
assertEquals ( list ( "C" , "B" , "A" ) , redis . sort ( key , alpha ( ) . desc ( ) ) )
assertPostCodegenRules ( mojo )
assertEquals ( expected , actual )
assertNull ( retrievedValue )
assertEquals ( "3 kuu p盲rast" , t . format ( new Date ( 1000L * 60 * 60 * 24 * 30 * 3 ) ) )
assertEquals ( "jdbc:phoenix:myzkclient:2181" , jdbcUrl )
assertEquals ( 0 , result . getRequiredPlugins ( ) . size ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( null , result )
assertTrue ( bos . toString ( ) . contains ( "\"name\":\"http://cxf\"" ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertEquals ( asList ( foo1 , foo2 ) , results )
assertTrue ( parseResults . isEmpty ( ) )
Assert . assertEquals ( columnSubset . length , 0 )
Assert . assertTrue ( isValid , "PollItems have correct names length, so they must be valid" )
assertNull ( item . getList ( ) )
Assert . fail ( )
assertFalse ( roles . contains ( "RESOURCESELFSERVICE" ) )
assertTrue ( shouldVote )
assertThat ( listSorter . toListView ( ) , equalTo ( containers ( "B" , "C" ) ) )
assertEquals ( "2010-01-10T11:24:36-08:00" , string )
assertEquals ( AnalysisState . ERROR , analysisSubmission . getAnalysisState ( ) )
assertNotNull ( result )
assertEquals ( expected , result )
assertCredits ( credits )
assertEquals ( "value" , "quoted value\\nwith \"quotes\"" , config . getString ( "section4.var2" ) )
assertThat ( target . getInPort ( ) , is ( "port01" ) )
assertTrue ( vw == ret )
assertTrue ( checker . isDetected ( ) )
assertThat ( c . toString ( ) , is ( "myString <= aaa" ) )
Assert . assertNotNull ( browser . findElement ( By . id ( "form" ) ) )
assertEquals ( expected , actual )
assertThat ( logger . output ( ) , containsInOrder ( "BUILD STEP DURATIONS" , goalStatsLine ( "goal-A1" , 0.1 , 100 ) , goalStatsLine ( "goal-B1" , 2.0 , 86 ) , goalStatsLine ( "goal-B2" , 0.3 , 13 ) , goalStatsLine ( "goal-C1" , 0.02 , 6 ) , goalStatsLine ( "goal-C2" , 0.3 , 90 ) , goalStatsLine ( "goal-C3" , 0.01 , 3 ) ) )
assertThat ( Whitebox . invokeMethod ( target , "getDestinationPath" , path ) , is ( nullValue ( ) ) )
assertThat ( encryptedPassword , is ( "n3fE9/7XOmgD3BkeJlC+JLyb/Qg=" ) )
assertEquals ( 0 , JedisURIHelper . getDBIndex ( uri ) )
assertEquals ( sent , received )
assertThat ( kvStore . getOrDefault ( "field" , "value2" ) , equalTo ( "value" ) )
assertArrayEquals ( new char [ ] { 4 , 15 , 12 , 8 , 18 } , array )
assertEquals ( "wangwei" , handler . parse ( test ) )
assertEquals ( 0 , getFilesCreated ( a ) )
Assert . assertEquals ( "Model should contain default RDF type" , rdfTypes . size ( ) , 1 )
assertEquals ( null , id . getValue ( ) )
Assert . assertTrue ( sut . compare ( pmv1 , pmv2 ) < 0 )
assertEquals ( mockResponse . getStatus ( ) , response . getStatus ( ) )
context . assertIsSatisfied ( )
assertEquals ( "Method #toString is wrong" , "StringMapper{field=field, indexed=false, sorted=true, validated=true, column=field, " + "caseSensitive=true}" , mapper . toString ( ) )
assertTrue ( c . testMe ( 42 ) )
assertEquals ( GeometryEngine . geometryToJson ( null , result ) , "{\"paths\":[[[0,5],[-2,5]]]}" )
assertTrue ( adb == null )
assertEquals ( ImmutableList . of ( ) , evaluate ( "${iter}" , Iterable . class ) )
assertEquals ( "Patch with sparql update created direct container from basic container!" , CONFLICT . getStatusCode ( ) , getStatus ( patch ) )
assertArrayEquals ( new String [ ] { "foo" , "b\"a\"r" } , command )
assertEquals ( new IndexDesc ( TestCatalog . desc2 . getProto ( ) ) , new IndexDesc ( store . getIndex ( TestCatalog . desc2 . getName ( ) ) ) )
assertTrue ( isValid )
assertTrue ( verify )
assertNull ( array )
assertNotNull ( ctx . getBean ( ExampleBean . class ) . getInjectedDate ( ) )
assertTrue ( getTestChargingStationFromRepository ( ) . isConfigured ( ) )
assertTrue ( "New pause should be within [9,11], but was " + newPause , withinTenPercent ( 10L , newPause ) )
assertEquals ( 2 , result . size ( ) )
Assert . assertEquals ( Status . FORBIDDEN . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( output , containsString ( "Redacted image written" ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertTrue ( "elapsed (" + elapsed + " millis) was not short enough" , shortEnough )
Assert . assertNull ( registry . getProtocol ( ProtocolDescription . DEFAULT ) )
assertEquals ( song1 , song2 )
assertTrue ( messageLatch . await ( 3 , TimeUnit . SECONDS ) )
Assert . assertNull ( caixa )
assertEquals ( expectedString , DpdClientLogEvent . cleanupPdfData ( originalString ) )
assertEquals ( 0 , comparator . compare ( user , user ) )
Assert . assertEquals ( list . size ( ) , 1 )
assertNull ( subject . matchOperation ( ) )
assertArrayEquals ( rqMessage . getSerializedMessage ( ) , captor . getValue ( ) . getSerializedMessage ( ) )
Assert . assertEquals ( sum , 20 )
assertEquals ( TestUtil . HTTPS_TEST_PROXY , result . get ( 0 ) )
assertTrue ( violated )
assertThat ( toString ( people ) , is ( equalTo ( "[Jon Doe]" ) ) )
Assert . assertNull ( result )
assertEquals ( LSP_DB_VERSION , this . tlvsBuilder . augmentation ( Tlvs3 . class ) . getLspDbVersion ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( "refName" , op . refSpec )
assertFalse ( rawClient . isConnected ( ) )
assertEquals ( ldt . format ( DateTimeFormatter . ofPattern ( "yyyy-MM-dd HH:mm:ss.SSS" ) ) , date )
assertions . isEqualTo ( expected )
assertEquals ( "incorrect connected value" , false , connected )
Assert . assertEquals ( request . getResponseParser ( ) . parse ( responseJson ) , responseParser . parse ( responseJson ) )
Assert . assertNotNull ( filter )
assertEquals ( "com.github.javaparser.ast.CompilationUnit" , typeDefinition . get ( ) . getQualifiedName ( ) )
assertThat ( sub , is ( graph ) )
assertEquals ( 0 , runTool ( "-failover" , "nn1" , "nn2" , "--forcefence" ) )
assertFormat ( number , 5 )
Assert . assertEquals ( expected , fixture . mapper ( OPTION_USE_ID , true ) . valueToTree ( resource ) )
assertEquals ( Lists . newArrayList ( e ( 1 ) ) , tree . entries ( ) . toList ( ) . toBlocking ( ) . single ( ) )
Assert . assertEquals ( expected , actual )
assertTrue ( stmt instanceof DropSchemaNode )
assertEquals ( 1 , ( int ) diagnosis . getId ( ) )
assertEquals ( "theoneandonly@schland.de" , em . createNativeQuery ( "select email from address where id=1" ) . getResultList ( ) . get ( 0 ) . toString ( ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( ex . isOddNumber ( 5 ) )
assertThat ( results , is ( Collections . singletonMap ( ( Object ) "id" , Collections . singletonList ( "MD5 sums do not match. File document contains " + "'null' and the filemd5 command produced 'md5 : 'abcdef''." ) ) ) )
assertThat ( sheet . getRow ( 0 ) . getLastCellNum ( ) , is ( ( short ) 300 ) )
assertEquals ( autoCommitMode , serverEntityContext . getAutocommit ( ) )
assertTrue ( "namespace value in annoataion @XmlElement is not correct: " + str , str . indexOf ( "helloString/Name" ) > - 1 )
assertNotNull ( result )
assertEquals ( "/profile=default/subsystem=web:read-resource" , ModelNodeOperationToCliString . convert ( op ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertTrue ( success . get ( ) )
assertSame ( mock , mock . append ( "test" ) )
assertEquals ( expResult , result )
assertEquals ( "this.andThen(test.Person::getFirstName)::apply" , CodeModelTestsHelper . toString ( aLambda ) )
assertFalse ( "object method must not be passed to next handler in chain" , dummyHandler . invokeCalled )
assertEquals ( 0 , cs . size ( ) )
assertEquals ( poly , parsed )
assertEquals ( 0 , sut . computeSearchGoalBonus ( current ) )
assertEquals ( "My comments" , eval ( "cmd.comment" ) )
assertEquals ( "Release" , conf . getName ( ) )
assertThat ( roundtrip ( cp ) , is ( cp ) )
assertThat ( f . parse ( "Amete Mihret, 2008-03-09 09:45 pm +03:00" ) , is ( PlainTimestamp . of ( 2015 , 11 , 19 , 21 , 45 ) . at ( offset ) ) )
Assert . assertArrayEquals ( "Wrong data" , data , builtByFactory . getData ( ) )
assertNull ( result )
Assert . assertTrue ( isVisible ( "$_formatNumberDialog" ) )
assertThat ( taskService . getIdentityLinksForTask ( task . getId ( ) ) . get ( 0 ) . getType ( ) , is ( "owner" ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( tuple . getIntegerOrDefault ( "field" , 2 ) , equalTo ( 2 ) )
assertAllCodesOfIterator ( entitySelector . endingIterator ( ) , "e1" , "e2" )
assertEquals ( ( Integer ) 9 , other . maxRecoveryTime ( ) )
assertEquals ( "bla" . hashCode ( ) + 31 , ( new ProjectCouch ( "1" , "1-234" , "bla" ) ) . hashCode ( ) )
assertEquals ( config . getMinReadBufferSize ( ) , acceptedConfig . getMinReadBufferSize ( ) )
Assert . assertTrue ( intersection . size ( ) >= minIntersection )
assertEquals ( "test" , msg . getText ( ) )
assertEquals ( "their" , selector . selectVersion ( "id" , VersionFieldType . PARENT , "our" , "their" ) )
assertXpathExists ( "/a:entry/m:properties" , xmlString )
assertTrue ( "service should be not null and not empty" , service != null && ! service . equals ( "" ) )
assertEquals ( 2 , alternativeRoutes . size ( ) )
assertThat ( new String ( result ) , equalTo ( "testing\0" ) )
assertDegenerate ( scan )
assertEquals ( expected , actual )
assertCamundaInputOutputParameter ( task )
assertTrue ( ! result )
assertEquals ( "field.keys()" , p . toString ( ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertTrue ( tippyTop . getItem ( ) < 3 )
assertTrue ( XmiReader . getIdRef ( mockReader ) . toString ( ) . equals ( id ) )
assertFalse ( allUsers . isEmpty ( ) )
Assert . assertEquals ( IOUtil . toString ( new FileInputStream ( new File ( "src/test/resources/versionInfoFileRewritten-beta-3.xml" ) . getAbsoluteFile ( ) ) , "UTF-8" ) , IOUtil . toString ( os . toByteArray ( ) , "UTF-8" ) )
Assert . assertEquals ( "callback_value" , o )
assertCard ( expectedCard , "http://magiccards.info/m14/en/230.html" , expectedCard . getRarity ( ) . toDisplayName ( ) , expectedCard . getName ( ) )
assertEquals ( count , node1 . clusterCountKeysInSlot ( slot ) . intValue ( ) )
assertNotNull ( Build . reader ( "ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "{\"" + escaped + "\":\"escapeSimpleValue\"}" , obj . toString ( ) )
assertTrue ( Expr . CMP_GREATER == x )
assertThat ( encodingHandler . getEncoding ( ) , is ( defaultCharset ( ) . name ( ) ) )
assertTrue ( "Oh no! No mapped object! " , store . size ( ) > 0 )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( composer . getScript ( ) , expectedScript ) )
assertThat ( evaluator . evaluate ( corc ) , is ( TruthValue . NO ) )
Assert . assertEquals ( true , fcmAuthenticationExceptionThrown )
Assert . assertTrue ( EagleExceptionWrapper . wrap ( exception ) . startsWith ( "java.lang.Exception" ) )
assertTrue ( equals )
Assert . assertEquals ( "Value" , valueAnalytic , value , 1E-2 )
Assert . assertEquals ( "who is eating the pie" , this . realiser . realise ( p ) . getRealisation ( ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertTrue ( icms . isSelecionado ( ) )
assertNull ( victim . getValue ( KEY ) )
Assert . assertNull ( ModuleUtil . getModuleForPath ( path ) )
assertEquals ( "" , result )
Assert . assertEquals ( HttpVersion . HTTP_1_1 , result . getVersion ( ) )
assertEquals ( y , result , 0.01 )
CustomAsserts . assertEquals ( definition , expected , actual )
assertTrue ( deleteStudent )
assertNotNull ( CacheUtils . getEntry ( "test_file.txt" , cache ) )
assertScoreAndParse ( content , null , 1 )
assertThat ( options . getOption ( "name1" ) , is ( "value1" ) )
assertEquals ( "IDX" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "appName should  be updated" , format ( "%s-%s" , configuredAppName , ENVVAR_VALUE_GIT_BRANCH ) , expandedAppName )
assertEquals ( TestClass . class . getName ( ) , service . injectedLogger . getName ( ) )
Assert . assertEquals ( 1 , ac . getFileCount ( "cfg.xml" ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertEquals ( new BigDecimal ( 100.0 ) , fromJson )
Assert . assertEquals ( expected , actual )
assertEquals ( "snowball analyzer serialization is wrong" , expected , actual )
assertEquals ( 10 , result . getInt ( COSName . R ) )
assertNull ( reader . overflowAtoms ( ) )
assertServletWasInvokedWith ( entity )
Assert . assertEquals ( "3 dekade dari sekarang" , t . format ( new Date ( 315569259747L * 3L ) ) )
assertEquals ( "Bazinga{foo}" , instance . toString ( ) )
assertEquals ( 123 , b . getId ( ) )
assertEquals ( "0" , fixedPointNumber . toString ( ) )
assertNotNull ( ids )
arrays . assertDoesNotContain ( description , actual , value , null )
assertThat ( actual , is ( type ) )
assertEquals ( 77. , violation , 0.01 )
assertEquals ( set . size ( ) , unequalInstances . size ( ) )
assertTrue ( output , output . matches ( "(?s).*Usage: dolines.*" ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( "Base value is not properly parsed" , "09998.9999" , parsed )
assertEquals ( Collections . emptyList ( ) , extractor . extract ( result ) )
assertEqualDoubleArrays ( pydiv , div , epsilon )
assertThat ( resolver . resolveString ( "${foo}" ) , equalTo ( "bar" ) )
assertSame ( NULL_PLACEHOLDER , ois . readObject ( ) )
assertEquals ( "[1, 3, 4, 5, 8, 9, 3, 989]" , res . toString ( ) )
assertThat ( mockContext . getOptimizationLevel ( ) , is ( - 1 ) )
assertEquals ( datetime , actual )
assertThat ( ( TraceeBackend ) FieldAccessUtil . getFieldVal ( listener , "backend" ) , is ( Tracee . getBackend ( ) ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( 4 , results . getPagedSet ( ) . size ( ) )
assertTrue ( gotException )
assertFlowState ( ACCEPTED_FAILED )
assertEquals ( hex , new Hex64TypeNode ( testBinaryReaderBuilder . putQWord ( value ) . build ( ) , chunkHeader , parent , - 1 ) . getValue ( ) . substring ( 2 ) )
Assert . assertFalse ( match )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( medias . size ( ) == 1 )
assertTrue ( result . size ( ) > 0 )
Assert . assertFalse ( syncAlertsIsRunning )
assertEquals ( "11.1.10" , result )
assertEquals ( "test" , param . getValue ( ) )
assertEquals ( 1 , col . count ( ) )
assertThat ( codes , containsInAnyOrder ( "43343-4" , "47239-9" ) )
assertArrayEquals ( new MenuEntry [ ] { menu ( "Cancel" , "" , MenuAction . CANCEL ) , menu ( "Examine" , "Gnome banker" , MenuAction . EXAMINE_NPC ) , menu ( "Examine" , "Gnome banker" , MenuAction . EXAMINE_NPC ) , menu ( "Walk here" , "" , MenuAction . WALK ) , menu ( "Collect" , "Gnome banker" , MenuAction . NPC_FOURTH_OPTION ) , menu ( "Talk-to" , "Gnome banker" , MenuAction . NPC_FIRST_OPTION ) , menu ( "Bank" , "Gnome banker" , MenuAction . NPC_THIRD_OPTION ) , menu ( "Collect" , "Gnome banker" , MenuAction . NPC_FOURTH_OPTION ) , menu ( "Talk-to" , "Gnome banker" , MenuAction . NPC_FIRST_OPTION ) , menu ( "Bank" , "Gnome banker" , MenuAction . NPC_THIRD_OPTION ) } , argumentCaptor . getValue ( ) )
assertEquals ( "1, 2, 3" , tree . toString ( ) )
assertThat ( isValid , is ( true ) )
Assert . assertFalse ( _constraint . isAssignmentValid ( _testNode , _testReplica , _clusterContext ) )
assertEquals ( "" , retrievedValue )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
Assert . assertNotNull ( "time bucket assigner" , deserialized )
Assert . fail ( "Should have Assert.failed on the second parameter to 'contains' not " + "being bound." )
assertEquals ( unused , h . getUnused ( ) )
assertEquals ( exp , toString ( wa ) )
Assert . assertEquals ( SecurityUtil . getAuthenticationType ( ) , "kerberos" )
Assert . assertFalse ( properties . isEmpty ( ) )
assertThat ( converter . toJavaObject ( new TimestampWritable ( new Timestamp ( 0L ) ) ) , is ( ( Object ) new Timestamp ( 0L ) ) )
assertAuthenticationFailsPlusRequired ( )
assertEquals ( "setTestfield" , result )
Assert . assertTrue ( "Should be displaying an error page" , driver . getPageSource ( ) . contains ( ERROR_STRING ) )
assertThat ( comparator . compare ( projectChange1 , projectChange2 ) , is ( 0 ) )
assertThat ( builder . getPatches ( ) , hasItemInArray ( "REMOVE /status/replicas" ) )
assertEquals ( "Camel rocks" , reply )
assertEquals ( "[test,whatever]" , joinedStrings )
Assert . assertEquals ( "RAND" , actual )
Assert . assertNotEquals ( i . hashCode ( ) , ii . hashCode ( ) )
assertThat ( MoreMapUtils . getHadoopPath ( map , KEY , null ) , is ( nullValue ( ) ) )
assertEquals ( "validating the bean" , obj , new TestBean ( "testVal" ) )
Assert . assertEquals ( testInput . expectedOutput , output . toString ( ) )
assertEquals ( "<div><p>Hello</p></div><div><p>There</p></div>" , TextUtil . stripNewlines ( divs . outerHtml ( ) ) )
assertThat ( subclassOf , equalTo ( true ) )
BeanAssert . assertBeanEquals ( new FlexiBean ( ) , parsed )
assertEquals ( 0 , ranking . getNumberOfSubFronts ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( expected , actual )
assertTrue ( true )
Assert . assertTrue ( appTableColumnsMeta . indexOf ( "natural" ) != - 1 )
Assert . fail ( )
Assert . assertEquals ( 0 , scores . getScore ( ) )
assertEquals ( LogLevel . TRACE , sub . getLevel ( ) )
assertEquals ( ApiStatus . SUCCESS , response . getMeta ( ) . getStatus ( ) )
assertNotNull ( result )
Assert . assertNotNull ( conf . get ( "logger.dir.walog" ) )
assertThat ( result , is ( expected ) )
Assert . assertEquals ( "á â\tã ä " , s )
assertEquals ( V8Value . INTEGER , intsArray . getType ( ) )
assertTrue ( "Result should be empty object" , result . length ( ) == 0 )
Assert . assertEquals ( ( Integer ) 1 , sync ( queue1 . poll ( 10 , TimeUnit . SECONDS ) ) )
assertEquals ( encoder . encode ( textMessage ) , message )
Assert . areEqual ( true , countA == 0 && countB == 10 , "验证优先级的写" )
assertThat ( spec , is ( lessThan ( 0 ) ) )
assertFalse ( p . apply ( tree ) )
Assert . assertTrue ( "MetadataTableConfigHelper.setup threw the expected exception, but the message was not the expected message." , msg . startsWith ( "No Such Table: " ) )
assertNotNull ( result )
assertNotNull ( informe . getId ( ) )
assertEqualRevisionLists ( revisionsAll , tmrpAll . revisions , "all-incomplete" )
assertTrue ( "Files should be the same" , duplicateFinder . isSame ( a , b ) )
assertEquals ( PredefinedActivity . FOLLOW_UP . toString ( ) , pm1 . getNameModel ( ) . getValue ( ) )
assertThat ( tsp . toString ( ) + " => " + Double . toString ( delta ) , delta < 1.0 , is ( true ) )
Assert . fail ( "Expection expected" )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Pay>" + "Hey no tags!" + "</Pay>" , elem . toXml ( ) )
assertEquals ( 1 , message . getMessageId ( ) )
assertEquals ( incomingMessage , responderContext . getOriginalMessage ( ) )
assertTrue ( composite . canShrink ( 9 ) )
assertFalse ( command . valid ( options , optionParser ) )
Assert . assertEquals ( "V6uoqOm7esGRqm20VvMz" , entries . get ( 0 ) . getPassword ( ) )
assertEquals ( 2 , notes . size ( ) )
runner . assertAllFlowFilesTransferred ( FetchHDFS . REL_SUCCESS , 1 )
Assert . assertNull ( oembedService . executeRequest ( request ) )
assertEquals ( k , f . getClass ( ) )
assertConsoleOutputContains ( "clear screen." )
assertThat ( Dsn . dsnFrom ( lookup ) , is ( Dsn . DEFAULT_DSN ) )
this . assertLoadBlob ( departments , true , true )
assertEqualsIgnoreWhitespace ( "\n\t\n\tdrools.update( myObject );" , result )
assertEquals ( 0 , v )
assertEquals ( exepcted_individual , returned_individual )
assertEquals ( "Analyzer must be keyword" , Mapper . KEYWORD_ANALYZER , mapper . analyzer )
assertFalse ( lfs . util ( ) . exists ( p ) )
assertEquals ( 1234 , value )
assertEquals ( 3 , filterStrings . size ( ) )
assertThat ( children . size ( ) , is ( 2 ) )
Assert . assertTrue ( Arrays . equals ( expected , actual ) )
assertTrue ( result instanceof DbMonCollector )
assertNotNull ( error )
assertEquals ( r1 , r2 )
TestHelpers . assertDeepEquals ( expected , result )
assertEquals ( "calling: fooMethod(2 arguments: second=v2)" , message )
assertNotNull ( s )
Assert . assertEquals ( expected , MustacheTemplatePrefixExpander . expand ( input ) )
this . assertIndices ( im ( 0 , 0 ) , im ( 1 , 1 ) , im ( - 1 , 2 ) , im ( 2 , 3 ) , im ( 3 , 4 ) )
assertEquals ( gfs . getRootPath ( ) , a . getRoot ( ) )
assertEquals ( "numhits is wrong" , 15000 , res . getNumhits ( ) . intValue ( ) )
assertEquals ( string , StreamHelper . toString ( rafis ) )
assertThat ( tuple . getListOrDefault ( "field" , value ) , equalTo ( value ) )
assertNotNull ( target )
assertTrue ( ref != null )
assertEquals ( "baz" , v8 . getString ( "foo" ) )
assertFalse ( ipMatcher . match ( "172.15.255.255" ) )
assertFalse ( sut . failed ( ) )
assertTrue ( ! ( ( String ) proxy . getAttribute ( "firstName" ) ) . equals ( dto . getFirstName ( ) ) )
Assert . assertEquals ( "NOT FOUND FROM READER" , result )
Assert . assertEquals ( 2 * repetitions , res )
assertEquals ( true , result )
assertEquals ( 0 , attribs . size ( ) )
assertTrue ( Pattern . matches ( "(?s).*<frame .* src=\"http://domain.com/frame.html\"/>.*$" , result ) )
Assert . assertTrue ( Math . abs ( now . getTime ( ) - n . getTime ( ) ) < 500 * 1000 )
Assert . assertEquals ( ref , f . taylor ( dx , dy , dz ) , 2.0e-15 )
Assert . assertTrue ( servlet . isDebugMode ( ) )
assertThat ( ( ( ProviderRole ) providerRole ) . getName ( ) , is ( "Binome supervisor" ) )
assertJson ( "{'value2': 'foo'}" , serialize ( bean ) )
assertEquals ( ServiceEntry . Method . DELETE , entity . getMethod ( ) )
assertDecorate ( serviceProps , EMPTY , RES_SD0 )
assertEquals ( metadata . getClass ( ) , memoryCopyResultSet . getMetaData ( ) . getClass ( ) )
assertEquals ( "public static final StringProperty<String> TEST = PropertyFactory.createString(\"test\", String.class);" , definition )
assertEquals ( diameter , 0.0 )
assertEquals ( 48 , size )
Assert . assertEquals ( 3.0 , svd . getConditionNumber ( ) , 1.5e-15 )
assertThat ( tableCount , is ( 11 ) )
assertEquals ( "x\n" , found )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
Assert . assertEquals ( address . getCity ( ) , person2 . getWorkAddress ( ) . getCity ( ) )
assertThat ( handler , is ( instanceOf ( FederatedHMSHandler . class ) ) )
assertions . startsWith ( sequence )
assertEquals ( expected , result )
assertEquals ( ExchangeKeys . TYPE . FILES_BUCKET , BsonRequest . selectRequestType ( pathTokens ) )
assertThatBuildSucceeded ( )
assertEquals ( 1 , result )
assertEquals ( 4 , numberOfFriends )
assertEquals ( 3 , fromBase64 . size ( 0 ) )
assertEquals ( in , out )
Assert . fail ( "Deberia haber saltado un AOFormatFileException" )
assertEquals ( "searchQuery must not be empty" , e . getMessage ( ) )
assertEquals ( "" , result )
assertTrue ( doTest ( dynamicQuery , query ) )
Assert . assertTrue ( ! counts . containsKey ( Jsprit . Strategy . RADIAL_BEST ) )
assertEquals ( expectedColumnCombination , actualUniqueColumnCombination . getColumnCombination ( ) )
assertFalse ( "Expected ListSchema boolean validation failure did not succeed" , schema . validate ( booleanEntity ) )
assertions . doesNotContain ( values )
Assert . assertEquals ( icmsSetado , icms . getIcms60 ( ) )
assertTrue ( String . format ( "Wrong message:\n%s" , helper . getOutputAsString ( ) ) , helper . getOutputAsString ( ) . contains ( "xyz" ) )
assertThat ( track . getName ( ) , is ( "The Saint" ) )
assertEquals ( "{\"nested\":[true,4,\"foo\"]}" , obj . toString ( ) )
assertThat ( expression . getExpression ( ) , is ( "g.V().has('type', 42)" ) )
assertThat ( get , isAllowed ( ) )
assertFalse ( filter . isDetected ( ) )
Assertions . assertFalse ( result )
assertTrue ( calculatorPanel . getTextBox ( ) . textEquals ( "23" ) )
assertEquals ( "" , expression . getValue ( context ) )
assertThat ( stack . pop ( ) , nullValue ( ) )
Assert . assertEquals ( Servlet . SUCCESS , res )
assertNotNull ( AvailableAddOnExtension . fetcher ( "XBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "XFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( getContents ( root , "multipleextensions.txt" ) , sw . toString ( ) )
assertEquals ( expected , actual )
assertTrue ( result )
d . get ( "/uuid/" + uuid ) . execute ( ) . assertBody ( uuid . toString ( ) )
assertSearchYields ( index , "" , "fooaaa" , "foobbb" )
assertEquals ( "0" , subject . getOutput ( ) . get ( 0 ) )
assertEquals ( 1 , observation . getCode ( ) . getCoding ( ) . get ( 0 ) . getExtension ( ) . size ( ) )
assertTrue ( condition . accept ( null , null , attribs ) )
assertTrue ( actionItems . size ( ) == 1 )
assertThat ( confirmation . getCurrentTime ( ) , equalTo ( now ) )
assertThat ( JdbcUtils . getColumnNames ( getConnectionProperties ( ) , "SOMETABLE" ) , containsInAnyOrder ( "PID" , "TEXTCOL" , "NEWCOL" ) )
assertEquals ( 3 , dataManager . getCommandHistory ( ) . size ( ) )
assertEquals ( expected , result )
assertEquals ( expected , actual )
Assert . assertNotNull ( metadataDescriptor . createMetadata ( ) )
assertTrue ( AcceptanceTestUtil . isInterested ( component , dscTestStub . getDeploymentID ( ) . getServiceID ( ) , dsAcceptanceUtil . getDiscoveryServiceDeployment ( component ) . getDeploymentID ( ) ) )
assertThat ( "Method with null String argument is processed incorrectly" , title , equalTo ( MessageFormat . format ( TITLE_STRING_WITH_ONE_ARG , args ) ) )
Assert . assertEquals ( infoEventoRetorno , retorno . getInfoEventoRetorno ( ) )
assertNumEquals ( numOf ( Math . log ( 90d / 104 ) ) , varCriterion . calculate ( series , tradingRecord ) )
assertEquals ( "secret" , twoFactorAuthenticationManager . getSecret ( "orcid" ) )
assertFalse ( result . passedValidation ( ) )
Assert . assertNotNull ( addressResultsDto )
assertActivityRequiresPermission ( packageName , className , permission )
XMLAssert . assertXMLEqual ( loadXML ( ORDER_ACK_XML ) , result . getOwnerDocument ( ) )
assertTrue ( resultMessage ( result , HttpRequestType . POST ) , result . passedValidation ( ) )
assertEquals ( "two septillion" , actual )
Assert . assertEquals ( "[AND,field:selector][posFilter: filter(true, AND, field, fn(xxx,yyy))]" , luceneParser . parse ( "field:selector AND #include(field, fn\\(xxx\\,yyy\\))" ) . getContents ( ) )
assertEquals ( expected , pointOfFailure . toString ( ) )
Assert . assertArrayEquals ( expectedResults , results )
assertFormat ( number , 5 )
assertEquals ( expResult , result )
TestUtil . assertFuzzyContains ( "concept1" , html )
Assert . assertTrue ( expected == shardTbl )
assertEquals ( degree , 0 )
Assert . assertArrayEquals ( expected , actual )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� �� ��" + "��   ��" + "�尖�尖�尖�尖��" )
Assert . assertEquals ( "Failure expected the name to be the same" , "MessageDTO" , MHRDTO . getDTOName ( ) )
assertEquals ( Float . valueOf ( 1234 ) , result )
assertTrue ( result )
assertGenerators ( result , AnInt . class , ZilchGenerator . class )
assertNotNull ( output . list ( ) )
assertThat ( locomotive . getExitCode ( ) , is ( - 2 ) )
assertEquals ( "" , result )
assertThat ( embedder . poll ( ) , is ( wrappedBuffer ( b ) ) )
assertThat ( Template . parse ( "{{ var2 }}{% capture var2 %}{{ var }} foo {% endcapture %}{{ var2 }}{{ var2 }}" ) . render ( assigns ) , is ( "content foo content foo " ) )
assertThat ( "missing owner not detected" , validation . hasErrorAbout ( "no" , "owner" ) )
Assert . assertEquals ( simpleJson , roundTripJson )
assertEquals ( "pippo" , string )
assertNotEquals ( deleteMapping1 , deleteMapping2 )
assertEquals ( Operation . STATUS_CODE_OK , start . getStatusCode ( ) )
Assert . assertEquals ( "Graph not of the exepected size" , 12 , graph . size ( ) )
assertEquals ( expected , query . export ( ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
Assert . assertFalse ( "No Tags found" , jsonList . isEmpty ( ) )
Assert . assertNotNull ( evt )
controller . assertTransferCount ( org . apache . nifi . processors . standard . GetHTTP . REL_SUCCESS , 1 )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertFalse ( accessor . declaresEquals ( ) )
assertEquals ( 2 , factory . getDstu1Bundle ( ) . getEntries ( ) . size ( ) )
assertNotNull ( childBoss )
assertTrue ( parent . isPrefixOf ( fixture ) )
assertEquals ( true , getAddLayerToAnimationAction ( ) . isEnabled ( ) )
assertEquals ( "The stock symbol hasn't been updated." , acme . getSymbol ( ) , stocks . get ( 0 ) . getSymbol ( ) )
assertEquals ( RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "StatementRankTripleBest.rdf" ) ) , model )
assertThat ( result , is ( "" ) )
assertTrue ( BeanPredicates . hasAttribute ( "metakey" , "foo" ) . apply ( specification ) )
assertThat ( callback . toString ( ) , callback . isSent ( ) , is ( true ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "long" ) )
Assert . assertEquals ( "<div class=\"htmlform\"></div>" , session . getHtmlToDisplay ( ) )
Assert . assertTrue ( message , expected . equals ( actually ) )
assertThat ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , res , greaterThan ( 0 ) )
Assert . assertEquals ( 0 , filteredPaths . length )
assertTrue ( isNew ( "/dir" ) )
assertNotNull ( TaskChannel . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "TCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( count , is ( equalTo ( 1L ) ) )
assertEquals ( 1 , proxy . getPriority ( ) )
mock . assertIsSatisfied ( )
assertNotNull ( result . getOpenAPI ( ) . getComponents ( ) . getExamples ( ) . get ( "ex1" ) )
assertThat ( result . getSingleResult ( ) . getA ( ) , equalTo ( a ) )
assertThat ( resp , stringContainsInOrder ( "<code value=\"11378-7\"/>" , "<display value=\"Systolic blood pressure at First encounter\"/>" ) )
assertEquals ( ret , "todo" )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( expectedResult , entityParser . parseThing ( json ) )
assertEquals ( 1 , count )
assertEquals ( 20 , devices . size ( ) )
assertEquals ( expecting , found )
Assert . assertEquals ( 3 , EntityUtil . getInstanceSequence ( start , frequency , tz , instance ) )
assertEquals ( expected , map )
Assert . assertEquals ( str , result )
assertEquals ( "Test message ab cText" , result )
Assert . fail ( e . getMessage ( ) )
assertEquals ( "FooException" , t . getFirstClassOrInterfaceTypeImage ( ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( "abc\n" , found )
assertTrue ( AvroMultipleOutputs . getCountersEnabled ( job ) )
assertEquals ( expected , deserialized )
Assert . assertEquals ( "closeMessageFromOwnerProcessor,closeFromOwnerChatSocketImpl" , slip )
Assert . assertArrayEquals ( new byte [ ] { ( byte ) 0xc2 , 0x49 , 0x01 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 } , byteArrayOutputStream . toByteArray ( ) )
assertThat ( target . matchExactly ( flow ) , is ( false ) )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
assertEquals ( 4 , len ( letters ) )
assertTrue ( isApplicable )
assertThatTestAppHasBeenSuccessfullyRegistered ( driver )
assertThat ( token . getType ( ) , is ( PCRELexer . OneDataUnit ) )
Assert . assertEquals ( "[3, 2, 6, 4, 7, 1, 5]" , result . toString ( ) )
JSONAssert . assertEquals ( "{a:[[9]]}" , ARRAY_OF_JSONARRAYS , new CustomComparator ( JSONCompareMode . LENIENT , customization ) )
assertTrue ( bos . toString ( ) . contains ( "\"name\":\"http://cxf\"" ) )
assertEquals ( this . emptyCom , result . getAttributes ( ) )
assertEquals ( 111 , asynchronousJobPool . getThreadPoolSize ( ) )
assertNull ( DateUtil . parseRfc1123Date ( expires ) )
assertHead ( input , 0 , expectedOutput )
Assert . assertTrue ( policy . isResponseCacheable ( request , response ) )
assertThat ( existingGridSet , hasProperty ( "name" , equalTo ( GWCConfigIntegrationTestData . GRIDSET_EPSG2163 ) ) )
assertEquals ( 0 , p . size ( ) )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 0f ) )
assertThat ( Functions . url ( input ) , is ( input ) )
checker . assertContainsMatch ( Status . WARN , "Failed to find valid" )
assertTrue ( "Failed at " + i , called )
Assert . assertEquals ( 1 , events . size ( ) )
assertNull ( res . getHeader ( "X-woop" ) )
assertThat ( ApplicationMessage . delegate , instanceOf ( MyDelegate . class ) )
Assert . assertEquals ( "{\"alice\":{\"bob\":[null]}}" , result . toString ( ) )
assertFalse ( Compare . areIdentical ( imageToTest , referenceImage ) )
Assert . assertNotNull ( trainer . train ( eventStream ) )
assertTrue ( mbr instanceof CustomBooleanReader2 )
assertNull ( domain )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertThat ( properties . size ( ) , is ( 0 ) )
assertThat ( url , is ( "http://localhost:8080/test" ) )
Assert . assertFalse ( item . matches ( divNode ) )
assertEquals ( expectedDbPrefix , sink . dbPrefix )
Assert . assertEquals ( - 1 , Array . firstOccurrence ( input , integerComparator , 0 ) )
assertEquals ( 2 , this . crossword . size ( ) )
assertThat ( configuration . getSrcFile ( ) , equalTo ( new File ( "doc/example/script.js" ) ) )
assertEquals ( storeMock , store )
Assert . assertEquals ( "nun" , t . format ( new Date ( 600 ) ) )
Assert . assertEquals ( expected , actual )
assertTrue ( population . size ( ) >= 90 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( "Test" , user . getName ( ) . getGivenName ( ) )
assertThat ( cursor . hasNext ( ) , equalTo ( false ) )
assertSeq ( new String [ ] { "<a/>" , "<a/>" , "<b/>" , "<b/>" , "c" } , "insert-before((/top/x/*, 'c'), 2, /top/x/*)" )
assertEquals ( expecteds , actuals )
assertNotNull ( pgeTask . getWorkflowManagerClient ( ) )
assertTrue ( Tools . versionBeforePacemaker ( host ) )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : from the rule command link" ) )
Assert . assertNotNull ( result )
assertFalse ( "valid input but exceeds bounds " + field . getText ( ) , cellEditorStrict . stopCellEditing ( ) )
Assert . assertNotNull ( tested . newRequest ( ) )
assertEquals ( "Hello World!" , result )
assertEquals ( 1 , branch_conditions . size ( ) )
assertTrue ( previewElement . getColorFieldContainsErrors ( ) )
assertTrue ( readOnlyProp . isReadOnly ( ) )
Assert . assertTrue ( ctx . getResult ( ) )
assertEquals ( mockList , testList )
Assert . assertTrue ( charset . equals ( CharsetUtil . getCharset ( charsetIndex ) ) )
assertThat ( "group name" , sut . getGroupName ( ) , is ( equalTo ( groupName ) ) )
assertArrayEquals ( basicAssertion , Indices . shape ( shape , basicTest ) )
assertThat ( module . getExtensions ( ) , is ( equalTo ( Collections . EMPTY_LIST ) ) )
assertEquals ( PRECONDITION_FAILED . getStatusCode ( ) , getStatus ( request ) )
Assert . assertEquals ( "Incorrect condition" , "(WTextField=\"1\" or (WTextArea=\"2\" and WDropdown=\"3\"))" , builder . build ( ) . toString ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE ((DEPTH(nodes) + DEPTH(nodes)) + DEPTH(nodes)) = 3" ) )
Assert . assertEquals ( 0 , loadAllObjects . size ( ) )
Assert . assertTrue ( 2 <= ( ( ControllableRedisMasterReplication ) armr ) . getConnectTimes ( ) )
assertEquals ( amount , all . size ( ) )
assertNextRequestIsCreateWorkspace ( "something" , CreateConflictBehavior . CREATE_WITH_ADJUSTED_NAME )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( "" , result )
assertEquals ( members [ 0 ] , CollectionUtils . firstElementOf ( Arrays . asList ( members ) ) )
assertExtractedTextHasBeenIndexed ( "select [jcr:path] from [nt:resource] as res where contains(res.*, 'ModeShape supports')" )
Assert . assertTrue ( infEx . isType ( DummyObject . class ) )
assertEquals ( "" , result )
assertEquals ( 0 , result . getTotalHits ( ) )
Assert . assertEquals ( 3635 , nodeCount )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( ValidationUtilities . validateRegExp ( regex , "abc\n def" ) )
assertNotNull ( deviceGroupRegistry )
Assert . assertEquals ( "did not get the preset number of threads" , 8000 , jargonProperties . getMaxParallelThreads ( ) )
Assert . assertNotNull ( userBean )
assertEquals ( ImmutableVariantScore . of ( ReadType . MISSING , 0 ) , SamRecordScoring . getVariantScore ( deleted , SNV ) )
assertEquals ( testData . length - 2 , cfis . available ( ) )
assertEquals ( generateOutput ( "    5 [----->----------------------]" ) , output . getBuffer ( ) . toString ( ) )
assertEquals ( "i(3,9)" , s . getPickupLocation ( ) . getId ( ) )
assertTrue ( folder . getProgressState ( ) == ProgressState . IN_PROGRESS )
assertEquals ( 0 , filterA . filter ( aciContext , OperationScope . ATTRIBUTE_TYPE_AND_VALUE , null ) . size ( ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( "in the room and a car" , this . realiser . realise ( this . inTheRoom ) . getRealisation ( ) )
assertEquals ( sourceTexts . length , results . length )
assertContainsRegex ( WHERE + OPEN_CURLY + var ( "s" ) + SPACE + ":P" + SPACE + ":O" + OPT_SPACE + CLOSE_CURLY , query )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertThat ( propertyCreated , instanceOf ( DataSetDependencyProperty . class ) )
Assert . assertEquals ( copyFrom , builder . offset ( 11 , 10 ) . build ( ) )
Assert . assertEquals ( expected , pass . concretizeCell ( term ) )
assertNull ( instance . nullableStringList ( ) )
assertEquals ( new Statistics ( 2 , 1 , 1 , 0 ) , spec . stats ( ) )
assertEquals ( URI . create ( expected ) , uri )
assertEquals ( "" , server . getFullyQualifiedName ( ) )
assertEquals ( "foo" , s )
assertEquals ( "[[?��??�� ?��? > [RIGHT]]]" , rules . toString ( ) )
Assert . assertNull ( actualEventBo )
AsserterWithLazyInitialisationAlgorithm . ASSERTER . assertImmutable ( klasse )
Assert . assertTrue ( "provideRoamingNumber message (opCode 4, TCAP Begin) should be blocked by Cat2" , ! sigfw . unitTestingFlags_sendSccpMessage )
assertEquals ( "" , result )
assertEquals ( "" + i + " " + codec . lineLength , b [ 1 ] . length , codec . getEncodedLength ( b [ 0 ] ) )
Assert . fail ( )
Assert . assertEquals ( "a" , stringAppender . toString ( ) )
assertEquals ( "There should be 0 chart data results" , 0 , chartDataList . size ( ) )
Assert . assertEquals ( "Should retrieve type set" , int . class . getName ( ) , node . getType ( ) )
Assert . assertEquals ( expected , XMLUtils . compactXML ( customerXML ) )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . BEGIN )
assertThat ( builder . toString ( ) , is ( "listIndexes[batchSize=0, limit=0, maxTime=0 ms, readPreference=null]" ) )
Assert . assertEquals ( EMPTY_FINGERPRINT , managedRangerAuthorizer . getFingerprint ( ) )
result . assertIsSatisfied ( )
assertEquals ( "File to string example" , fileContents . toString ( ) )
Assert . assertEquals ( "inElse" , o )
Assert . assertTrue ( result . getSomeIntValue1 ( ) == 4 )
assertArrayEquals ( plaintext , cipher . decrypt ( cipher . encrypt ( plaintext , key ) , key ) )
assertThat ( runtimeOptions . getGlue ( ) , contains ( uri ( "classpath:/app/features/user/registration" ) , uri ( "classpath:/app/features/hooks" ) ) )
assertThat ( roundtrippedRecord , nullValue ( ) )
assertThat ( mockMetrics . getLastLatencyNanos ( ) , is ( 12345L ) )
assertEquals ( "select entity_0.name from Entity entity_0 group by entity_0.name having sum(entity_0.integerField) > :function_1 and ( entity_0.name = :name_2 or entity_0.name = :name_3 )" , query )
assertEquals ( "<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>" , doc . html ( ) )
assertSame ( offered . get ( ) , request )
assertEquals ( "do some work" , outputVal )
assertScoreAndParse ( content , null , 1 )
assertNotNull ( manager )
assertEquals ( expected , error . toString ( ) )
assertThat ( serverHello . getServerCertificateType ( ) , is ( CertificateType . RAW_PUBLIC_KEY ) )
assertThat ( execreport , is ( not ( nullValue ( ) ) ) )
assertNull ( presenter . getValue ( ) )
Assert . assertFalse ( errors . hasFieldErrors ( ) )
assertTrue ( doc . getAliases ( ) . isEmpty ( ) )
assertEquals ( "class1 interface1 interface2" , c . print ( ) )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertEquals ( "Should respond with 500" , 500 , responseContext . getStatus ( ) )
assertSet ( queryReturns ( october15Entity , november1Entity ) , whenFilteringBy ( IN , Arrays . asList ( october15 , november1 ) ) )
Assert . assertEquals ( jsonString , "[{\"name\":\"涓���\",\"id\":1,\"brithDate\":null,\"money\":1.1},{\"name\":\"涓���1\",\"id\":2,\"brithDate\":null,\"money\":2.1}]" )
Assert . assertEquals ( 10L , wrapped . call ( ) . longValue ( ) )
assertEquals ( expectedKey , bucketKeyWithFileName )
assertEquals ( expected , IbUtils . getDefaultTagList ( ) )
assertEquals ( " WHERE ((\"NAME\" LIKE ? AND (\"AGE\" < ? OR \"AGE\" > ?)) OR \"NAME\" = ?)" , QueryBuilder . getWhereStringForFilters ( filters , sh ) )
assertTrue ( imageUtils . isBase64EncodedImage ( imageString ) )
assertNotNull ( security )
assertThat ( toUnqualifiedVersionlessIds ( myPatientDao . search ( params ) ) , containsInAnyOrder ( id1 ) )
assertThat ( query . count ( ) , is ( 0L ) )
assertTrue ( 1.28 == deserialize . readDouble ( ) )
assertThat ( str , not ( endsWith ( "\0" ) ) )
Assert . assertTrue ( retValue . intValue ( ) == 2 )
assertEquals ( 1 , v8Int32Array . length ( ) )
assertObject ( args )
assertions . containsKey ( key )
assertNotNull ( arrayPath . get ( ConstantImpl . create ( 0 ) ) )
Assert . assertSame ( bitmap , ic . getBitmap ( ) )
assertThat ( anyTS . isValid ( SECOND_OF_DAY , null ) , is ( false ) )
assertTrue ( isEqual )
Assert . assertTrue ( "odd, user 7 didn't get user 8's address" , found )
assertFalse ( parser . gotAnyHeader ( ) )
assertIterator ( root . iterator ( ) , "child0" , "child1" , "child2" )
assertEquals ( 89 , x . value )
assertEquals ( ( short ) Byte . MAX_VALUE , to )
assertOut ( "public class A extends B implements IA {\n}" )
assertEquals ( TargetType . PILLAR_PCRE , target . getType ( ) )
assertEquals ( PRECONDITION_FAILED , response . getStatusInfo ( ) )
assertNoProblems ( )
Assert . assertEquals ( 4 * 3 , result , 0 )
assertEquals ( set ( "a" , "b" , "c" , "d" , "e" ) , redis . sunion ( "key1" , "key2" , "key3" ) )
assertTrue ( match )
assertNotNull ( cf )
assertEquals ( 16 , islandPerimeter . islandPerimeter ( grid ) )
assertEquals ( "Cardenality of cartesian product is wrong" , 2 , cartesianResult . size ( ) )
assertTrue ( true )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" + "456" ) . getValue ( ) )
assertEquals ( 0xffffffffL , getUnsignedInt ( v1 , 0 ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( 1 , violations . size ( ) )
assertExpectedProtectedPorts ( dai )
assertHasFooFieldAndConstructor ( dst . toClass ( ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertResultSet ( res )
assertEquals ( "testDesc" , trace . getDescription ( ) )
assertEquals ( "fast" , value . asIs ( ) )
assertTrue ( "Negative owner not allowed to create a new directory in a parent with mode 0077" , pdp . canCreateSubDir ( subject_owner , attr ) == AccessType . ACCESS_DENIED )
assertThat ( CalendarPeriod . onMonths ( ) . parse ( "11/2017 �� 02/2020" , f ) , is ( expected ) )
Assert . assertEquals ( "The <word content='fox'>jumps over</word>" , hl . makeWellFormed ( xmlContent ) )
Assert . assertEquals ( 1 , vertices . size ( ) )
Assert . assertEquals ( "result" , testBean . getResult ( ) )
Assert . assertEquals ( b1 , b2 )
assertEquals ( new Long ( 5 ) , workflowInstance . getVariableValue ( "v" , Long . class ) )
assertEquals ( expected , reference . get ( ) )
Assert . assertEquals ( expectedResult , result )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
assertThat ( result . toString ( ) , is ( equalTo ( " HELLO" ) ) )
assertEquals ( "LastIndexOf Test1 is 4" , 4 , _fastTable . lastIndexOf ( "Test1" ) )
assertNotNull ( person )
assertNotNull ( context )
assertThat ( dest . aaa , is ( "" ) )
assertTrue ( lockHeld )
assertNotNull ( processInstance . getId ( ) )
assertTrue ( book . getIsbn ( ) . startsWith ( "132" ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( "CFBundleVErsion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_VERSION ) )
assertTrue ( noError )
assertNull ( result )
Assert . assertFalse ( "ticket delete unsuccessful expected" , result )
assertThat ( eventListener . captured ( actor , type ) )
Assert . assertTrue ( "Failed to logout with pcClient" , pcClient . logout ( ) )
assertEquals ( "Analyzer must be keyword" , Mapper . KEYWORD_ANALYZER , mapper . analyzer )
assertNotNull ( galaxyHistory . getDatasetForFileInHistory ( FILENAME , HISTORY_ID ) )
assertEquals ( defaultSourceCodeTypesList , result )
assertBulkInsert ( data , expected )
Assert . assertEquals ( "<input type=\"checkbox\" id=\"w1\" name=\"w1\" value=\"true\" toggleDim=\"hatColors\"/><label for=\"w1\">Has a hat?</label><input type=\"hidden\" name=\"_w1\"/>" , cw . generateHtml ( context ) )
Assert . assertEquals ( RoleOperation . SHOW_ROLES , roleDDLDesc . getOperation ( ) )
assertThat ( type . matching ( Other . class ) , equalTo ( converted ( Other . class , Example . class ) ) )
assertEquals ( "getSynopsis() returns the synopsis" , "namespace:name [--foo] [foo]" , command . getSynopsis ( ) )
assertThat ( actual , is ( notNullValue ( ) ) )
assertThat ( query . asSingleEntity ( ) , is ( not ( nullValue ( ) ) ) )
assertFalse ( "There should be no ledger" , iterable . iterator ( ) . hasNext ( ) )
assertFeatureValues ( expected , testQuery , testText , getChain ( new OrderedSequentialPairsFeatureExtractor ( 1 ) ) )
assertTrue ( evaluator . evaluatePerm ( indices , null , InetAddress . getByName ( "127.0.0.1" ) , null ) == PermLevel . ALL )
assertTrue ( Collections . nonNullElementsIn ( c ) . isEmpty ( ) )
assertEquals ( gelfSender . getLastMessage ( ) . getAdditonalFields ( ) . get ( "logger" ) , CLASS_NAME )
assertEquals ( "xpto" , parsedObject . getLazyIdRefMapPojo ( ) . get ( id ( BasicObject . class , 1l ) ) . getStringValue ( ) )
Assert . assertNotNull ( victim . create ( ) )
assertTrue ( false )
assertTrue ( result )
assertEquals ( response , actualResponse )
this . context . assertIsSatisfied ( )
assertNull ( emailer . getProperties ( ) . getProperty ( "to" ) )
assertThat ( result , is ( response ) )
assertFalse ( Maps . isNullOrEmpty ( map ) )
assertEquals ( "TestPassword" , envVars . get ( "COVERITY_PASSPHRASE" ) )
assertTrue ( result . isResultOK ( ) )
assertNotNull ( svc . getCredential ( ) )
assertThat ( result , is ( true ) )
assertParseFileOk ( fileName )
assertEquals ( it . next ( ) . getName ( ) , "h枚chstBetrag" )
Assert . assertEquals ( contextX , test . context )
assertEquals ( ComparatorStepResult . Status . FAILED , result . getStatus ( ) )
Assert . assertEquals ( "freed bucket" , Sets . newHashSet ( 1L , 2L ) , testMeta . managedState . freedBuckets )
result . assertIsSatisfied ( )
assertEquals ( expected , actual )
assertEquals ( second . getSqlType ( ) , "int" )
assertEquals ( expected , expression . toString ( ) )
Assert . fail ( )
assertFalse ( AutnumUtil . isValidAutnum ( validAutnum ) )
assertEquals ( "should contain bob" , "bob" , users . get ( 0 ) . getText ( ) )
assertEquals ( expectedProfile . getSid ( ) , resultantProfile . getSid ( ) )
assertTrue ( tb . isBooleanProp ( ) )
Assert . fail ( "expected exception for null query string." )
assertEquals ( expected , actual )
assertEquals ( json , actual )
Assert . assertEquals ( eventCount , event . getTouchCount ( ) )
assertEquals ( true , check . isRequired ( ) )
assertEquals ( "The numeric value " + encodeValue + " should be encoded to '" + expected + "'" , expected , alphaNumericCodec . encode ( encodeValue ++ ) )
Assert . assertEquals ( t1 , t2 )
assertEquals ( "[{\"value\":\"A test summary\",\"lang\":\"EN\"},{\"value\":\"A second test summary\",\"lang\":\"JA\"}]" , toJson ( summaries ) )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
Assert . assertTrue ( cursor . atEnd ( ) )
assertNotNull ( op )
Assert . assertNull ( irodsFile . getParentFile ( ) )
assertEquals ( 15 , map . size ( ) )
assertThat ( inds , contains ( indA ) )
assertEquals ( 4 , buffer . length ( ) )
assertThat ( initiativeInfo . isVotingStarted ( TODAY ) , is ( true ) )
assertThat ( ChronoHistory . from ( history . getVariant ( ) ) , is ( history ) )
arrays . assertStartsWith ( description , actual , null )
assertTrue ( action )
assertEquals ( "showDeveloperTools timeout" , latch . getCount ( ) , 0 )
assertThat ( args , contains ( "network" , "rm" , "foo" , "bar" ) )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( ns , obs . getFormFieldNamespace ( ) )
assertEquals ( expected , calls . toString ( ) )
assertThat ( results , samePaths ( new File ( root , "a.txt" ) , new File ( root , "b.txt" ) , new File ( root , "c.txt" ) ) )
Assert . assertEquals ( expected , outValue )
assertEquals ( "An :grinning:awesome :smiley:string with a few :wink:emojis!" , result )
Assert . assertNull ( ec . getValue ( ) )
assertNotNull ( processInstanceId )
assertTrue ( Arrays . equals ( expectedResult , encoded . array ( ) ) )
assertThat ( expected , equalTo ( leastOf ) )
assertEquals ( PREVIOUS_RESPONSE , argumentCaptor . getValue ( ) )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertEquals ( xmlEsperado , referenciada . toString ( ) )
assertEquals ( ids , session . from ( var ) . list ( var . id ) )
assertTrue ( ( ( BooleanType ) eval . get ( 0 ) ) . getValue ( ) )
assertEquals ( vr . getValidity ( ) , Validity . VALID )
Assert . isTrue ( results . size ( ) > 0 )
assertEquals ( expected , actual )
Assert . assertNotNull ( facet )
assertEquals ( - PASSED_PAWN_BOOST + DOUBLED_PAWN_HANDICAP , score )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( BGPError . CEASE , e . getError ( ) )
assertThat ( event . getRecipients ( ) , empty ( ) )
assertNotNull ( car )
assertNotNull ( result )
assertResponse ( "method withoutParameters was invoked" , response )
assertTrue ( population . size ( ) >= 98 )
assertTrue ( sut . isLineBreak ( ) )
assertTrue ( stmt instanceof CreateTableNode )
assertThat ( resolver . replace ( "${m1}, ${m2}, ${m3}!" , true ) , is ( "Hello1, Hello2, Hello3!" ) )
assertFalse ( "Schemas" , schemaHomology . schemasMatch ( schema1 , schema2 , exclusionRegex ) )
Assert . assertThat ( ! matchingArtifacts . isEmpty ( ) , Matchers . is ( false ) )
assertNotSame ( 0 , results . size ( ) )
Assert . assertEquals ( sum , 20 )
assertCollectionSerialization ( "{\"collection\":{" + "\"href\":\"http://writeToStringExample.com\"," + "\"version\":\"1.0\"," + "\"items\":[" + "{\"href\":\"http://writeToStringExample.com/items/1\"," + "\"data\":[" + "{\"name\":\"foo\", \"value\":\"bar\"}" + "]" + "}" + "]" + "}" + "}" , collection )
assertEquals ( map . size ( ) , n * nThreads )
assertArrayEquals ( expected , actual )
assertEquals ( crisisTypeName , result . getName ( ) )
assertEquals ( "string" , status )
assertSame ( someObject , immediateValue . getValue ( ) )
assertions . isEqualTo ( true )
assertThat ( getMessage ( ) , is ( TEST_MESSAGE ) )
Assert . assertFalse ( errors . hasErrors ( ) )
Assert . assertEquals ( jdkHand , ggHand )
assertEquals ( true , start )
assertEquals ( content , 200 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertNull ( RepoAndTableUtil . getOwningRepository ( tableDescriptor ) )
assertEquals ( "http://test.com/1?a=&b=" , HttpRequest . append ( "http://test.com/1" , params ) )
assertThat ( actual , is ( notNullValue ( ) ) )
assertThat ( Functions . bondBasedDBStereo ( g ) . toSmiles ( ) , is ( "CC=[C@]=CC" ) )
assertEquals ( sb . toString ( ) , stmtb . prepareStatementString ( ) )
assertEquals ( 0 , hits . totalHits )
context . assertIsSatisfied ( )
assertEquals ( atomicInteger . get ( ) , 10 )
assertNotNull ( Message . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "IMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 2 , finder . getApple ( "Fuji" ) . size ( ) )
assertEquals ( expected , actual )
assertThat ( result , is ( false ) )
assertSame ( "Wrong parameter" , param , cd . getBeanFactoryParameter ( ) )
assertTrue ( "Row should be wider than tree" , tree . getTableWrapper ( ) . getSize ( ) . getWidth ( ) < tree . getRow ( 0 ) . getSize ( ) . getWidth ( ) )
assertEquals ( "XAU_USD" , currencyPair )
Assert . assertFalse ( "Error report should not contain errors" , reportStats . hasErrors ( ) )
assertThat ( offset . canonical ( ) , is ( "UTC+02:00" ) )
assertEquals ( "[1,6]" , i1 . toString ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "[\"foo\",\"bar\"]" , o )
assertEquals ( Long . valueOf ( - 1L ) , myTestInstance . updateAsync ( doc , update ) . get ( ) )
assertEquals ( SC_FORBIDDEN , response . getStatus ( ) )
assertTrue ( result . equals ( Arrays . asList ( "d" , "c" , "b" , "a" ) ) || result . equals ( Arrays . asList ( "d" , "b" , "c" , "a" ) ) )
assertThat ( referencableDaoService . get ( ConfigRefEnum . ACHIEVEMENTS_REFRESH_RATE ) . getValue ( ) , is ( "1" ) )
assertEquals ( 86 , Colors . rgbColor ( "aquamarine1" ) . longValue ( ) )
assertThat ( connection2 , not ( is ( connection ) ) )
assertEquals ( 400 , cr . getStatus ( ) )
assertTrue ( builder instanceof NettyChannelBuilder )
assertEquals ( "((?:\\Qabc\\E)*)" , p . toString ( ) )
assertNotNull ( mapping )
assertTrue ( dm . isIriInOntology ( iri ) )
assertEquals ( mockServerConfig , result )
assertEquals ( p . toString ( ) , perOS ( "org/raml/jaxrs/parser/source/LocalClass.java" ) )
assertEquals ( "Output order: " + outputOrder , exp , out )
assertEquals ( ResultCodeEnum . INVALID_CREDENTIALS , resp . getLdapResult ( ) . getResultCode ( ) )
assertEquals ( "0" , sb . toString ( ) )
assertEquals ( "DZUL ESCOBAR JORGE LUIS" , instance . getNombre ( ) )
assertEquals ( expected , target . data ( ) )
assertEquals ( "Wrong number of URI references found" , 1 , result . size ( ) )
assertEquals ( "xxxxê" , result )
assertIsSemver ( semver , version , 1 , null , null , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
assertThat ( driver . findElement ( By . id ( "userIdMDC" ) ) . getText ( ) , is ( "user1" ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 0 , actual )
assertFalse ( fixture . eof ( ) )
assertTrue ( toolSpec . getOutstreamIds ( ) . size ( ) == 1 )
assertArrayEquals ( sourceBytes , cloneBytes )
Assert . assertTrue ( out . contains ( "simple call" ) )
assertFalse ( testResult )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
assertThat ( cargo . getCommandsRun ( ) , contains ( "cargo test dirmod:: --jobs 1 --verbose -- --nocapture" ) )
assertTrue ( game2 . isGameOver ( ) )
assertTrue ( isThrown )
Assert . assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del 3)" , aa_change_deletion . toStringTree ( parser ) )
assertEquals ( ( byte ) 34 , s . m0_0 ( ) )
assertEquals ( expResult , result )
Assert . fail ( "RuntimeException should be thrown!" )
assertTrue ( "socket path pattern matches " + RE , a . path ( ) . matches ( RE ) )
assertThat ( getClientConnectionPoolStats ( sut ) . getLeased ( ) , equalTo ( 0 ) )
assertEquals ( "jsp" , Strings . trim ( content ) )
Assert . assertTrue ( containerResolver . isContainer ( ) )
assertEquals ( "description" , test . info . getDescriptions ( ) . get ( 0 ) )
assertTrue ( result )
assertMockEndpointsSatisfied ( )
assertProperty ( "explicitMethod" , true , false , String . class , false , property )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 0f ) )
assertNotNull ( getUser ( identityManager , loginName ) )
assertTrue ( splitBrainProtectionFunction . apply ( members ) )
assertEquals ( expected , actual )
assertEquals ( "Expected response not seen." , "Hi There!" , response )
assertNull ( new RandomNodeSelector ( ) . selectNode ( database ) )
assertEquals ( "val1" , value )
assertEquals ( "redis://127.0.0.1:6379" , config . getAddress ( ) )
assertEquals ( description , field . getDescription ( ) )
assertEquals ( TypeInfoFactory . getMapTypeInfo ( TypeInfoCreator . createString ( ) , TypeInfoCreator . createDouble ( ) ) , orcType )
assertEquals ( context , cache . get ( "foo" ) )
assertValue ( Long . valueOf ( 946677600000l + ( d . getTimezoneOffset ( ) + 120 ) * 60 * 1000L ) , getConverter ( ) . convertToModel ( d , new ValueContext ( ) ) )
Assert . assertEquals ( 1 , value . intValue ( ) )
assertEquals ( expect , response . toString ( Charset . defaultCharset ( ) ) )
assertHasModifier ( JMod . PUBLIC , constructor . getModifiers ( ) , "public" )
Assert . assertEquals ( url . toExternalForm ( ) , filterResult )
assertNotNull ( result )
assertTrue ( MVEL . evalToBoolean ( "d.age == val" , m ) )
this . assertEditPostFormMavIsCorrect ( mav )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  ok " ) )
assertEquals ( asList ( debug ( mdcValues , marker , message , arg1 , arg2 ) ) , testLogger . getLoggingEvents ( ) )
assertTrue ( getTaint ( bc . imei ) != 0 )
assertThat ( u . toString ( ) , containsString ( nick ) )
Assert . assertEquals ( "unexpected url composed for fetching scheduler info" , EXPECTED_SCHEDULER_INFO_URL , resolvedUrl )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( testPlatforms . size ( ) , pValues . size ( ) )
assertThat ( requestXml , equalTo ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n" + "\n" + "<wps:Execute service=\"WPS\"\n" + "             version=\"1.0.0\"\n" + "             xmlns:wps=\"http://www.opengis.net/wps/1.0.0\"\n" + "             xmlns:ows=\"http://www.opengis.net/ows/1.1\"\n" + "             xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n" + "             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n" + "             xsi:schemaLocation=\"http://www.opengis.net/wps/1.0.0 ogc/wps/1.0.0/wpsExecute_request.xsd\">\n  <ows:Identifier>L2Plus</ows:Identifier>\n" + "  <wps:DataInputs>\n" + "    <wps:Input>\n" + "      <ows:Identifier>calvalus.processor.package</ows:Identifier>\n" + "      <ows:Title/>\n" + "      <wps:Data>\n" + "        <wps:LiteralData>beam-meris-radiometry</wps:LiteralData>\n" + "      </wps:Data>\n" + "    </wps:Input>\n" + "    <wps:Input>\n" + "      <ows:Identifier>calvalus.output.dir</ows:Identifier>\n" + "      <ows:Title/>\n" + "      <wps:Data>\n" + "        <wps:LiteralData>hdfs://master00:9000/calvalus/outputs/meris-l2beam-99</wps:LiteralData>\n" + "      </wps:Data>\n" + "    </wps:Input>\n" + "    <wps:Input>\n" + "      <ows:Identifier>calvalus.processor.version</ows:Identifier>\n" + "      <ows:Title/>\n" + "      <wps:Data>\n" + "        <wps:LiteralData>1.0-SNAPSHOT</wps:LiteralData>\n" + "      </wps:Data>\n" + "    </wps:Input>\n" + "    <wps:Input>\n" + "      <ows:Identifier>calvalus.input</ows:Identifier>\n" + "      <ows:Title/>\n" + "      <wps:Data>\n" + "        <wps:LiteralData>hdfs://master00:9000/calvalus/eodata/MER_RR__1P/r03/2004/07/15/MER_RR__1PRACR20040715_011806_000026382028_00332_12410_0000.N1,hdfs://master00:9000/calvalus/eodata/MER_RR__1P/r03/2004/07/15/MER_RR__1PRACR20040715_021806_000026382028_00332_12410_0000.N1</wps:LiteralData>\n" + "      </wps:Data>\n" + "    </wps:Input>\n" + "    <wps:Input>\n" + "      <ows:Identifier>calvalus.input.format</ows:Identifier>\n" + "      <ows:Title/>\n" + "      <wps:Data>\n" + "        <wps:LiteralData>BEAM-DIMAP</wps:LiteralData>\n" + "      </wps:Data>\n" + "    </wps:Input>\n" + "    <wps:Input>\n" + "      <ows:Identifier>calvalus.l2.operator</ows:Identifier>\n" + "      <ows:Title/>\n" + "      <wps:Data>\n" + "        <wps:LiteralData>Meris.CorrectRadiometry</wps:LiteralData>\n" + "      </wps:Data>\n" + "    </wps:Input>\n" + "    <wps:Input>\n" + "      <ows:Identifier>calvalus.l2.parameters</ows:Identifier>\n" + "      <ows:Title/>\n" + "      <wps:Data>\n" + "        <wps:LiteralData>&lt;parameters&gt;\n" + "   &lt;doSmile&gt;true&lt;/doSmile&gt;\n" + "    &lt;reproVersion&gt;AUTO_DETECT&lt;/reproVersion&gt;\n&lt;/parameters&gt;</wps:LiteralData>\n" + "      </wps:Data>\n" + "    </wps:Input>\n" + "    <wps:Input>\n" + "      <ows:Identifier>calvalus.plainText.parameter</ows:Identifier>\n" + "      <ows:Title/>\n" + "      <wps:Data>\n" + "        <wps:LiteralData>&lt;parameters&gt;\n" + "This is a multiline\n" + "Textfield\n" + "&lt;/parameters&gt;</wps:LiteralData>\n" + "      </wps:Data>\n" + "    </wps:Input>\n" + "  </wps:DataInputs>\n" + "</wps:Execute>" ) )
Assert . assertNotNull ( url )
Assert . assertTrue ( "Expected zero but it was: " + actualValue , actualValue == 0 )
assertEquals ( "Betty Ford" , u . getName ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . fail ( )
assertTrue ( "Should match" , query1 . equals ( query ) )
assertEquals ( ( short ) 0x0009 , s . m0_0 ( ) )
assertThat ( errors , not ( hasFieldErrors ( "prefix" ) ) )
assertThat ( TestI18n . testMessage2 . text ( "Test" , "Message" ) , is ( "Message Test" ) )
assertInjectsCollectionsOfMocks ( exampleTest )
assertThat ( attribute , is ( notNullValue ( ) ) )
assertThat ( sb . toString ( ) , is ( "alp://ppin/" + pin + "/" + value + new String ( proto . getSeparator ( ) ) ) )
assertEquals ( count , manager . list ( metaStore ) . size ( ) )
assertThat ( r . reduce ( Arrays . asList ( null , 5.0 , 1.0 , 4.0 ) ) , equalTo ( 5.0 ) )
assertEquals ( expectedArg , parsedArg )
assertThat ( FailoverNode . getFailoverTaskNodePath ( jobNodePath ) , is ( "/state/failover/test_job/" + jobNodePath ) )
assertThat ( executorBasedInvoker , instanceOf ( ExecutorBasedMessageHandlerInvoker . class ) )
rule . assertScenarioEnded ( )
assertEquals ( "Hello World Extra" , EntityUtils . toString ( httpResponse . getEntity ( ) ) )
assertFalse ( result . hasErrors ( ) )
Assert . assertEquals ( toArray ( "json" , "aaa" ) , merged )
assertEquals ( "Data::datatype::String" , results . get ( 0 ) )
assertThat ( profileBuilder . getId ( ) , is ( profile . getId ( ) ) )
Assert . assertNotNull ( setter )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" ) . getValue ( ) )
assertNotNull ( openAPI . getComponents ( ) . getSchemas ( ) . get ( "Pet" ) )
assertEquals ( localDate , CONVERTER . convert ( date ) )
NVAssert . assertEquals ( EXPECTED_NV_RESPONSE , nvResponse )
Assert . assertEquals ( "1" , cardLabelRepository . findListValueById ( llv . getId ( ) ) . getValue ( ) )
assertEquals ( "Matched code set" , UTF8_ID , CodeSet . getMatchingCodeSet ( local , remote , false ) . getId ( ) )
assertNull ( result )
assertTrue ( millis == null )
assertTrue ( converter . canConvert ( AccountActivity . class ) )
assertTrue ( result . intValue ( ) == 10 )
assertEquals ( "Received " + length + " bytes" , bytesToSend , length )
assertTrue ( Arrays . equals ( key . getPubKey ( ) , keyOnion ) )
assertEquals ( "Task in subprocess" , task . getName ( ) )
assertTrue ( latch . getCount ( ) == 0 )
assertTrue ( ( boolean ) AviatorEvaluator . execute ( "date1>date2" , env ) )
assertEquals ( Integer . valueOf ( 10 ) , testVal )
assertEquals ( "fra 1 secolo" , t . format ( new Date ( 1000L * 60 * 60 * 24 * 365 * 101 ) ) )
assertEquals ( "TRACE" , trace . toString ( ) )
Assert . assertEquals ( "E,D,F,A,B,C" , result )
Assert . assertEquals ( filter . filter ( spanEventBo ) , SpanEventFilter . REJECT )
assertMockEndpointsSatisfied ( )
assertArrayEquals ( expected , Proto . build_filler ( 1 ) )
MatcherAssert . assertThat ( PodHelper . getPodServerName ( pod ) , equalTo ( "myserver" ) )
Assert . assertTrue ( "exception must thrown" , exceptionThrow )
assertThat ( new JSONObject ( actual ) , sameJsonAs ( rawSchemaJson ) )
Assert . assertEquals ( 0 , ret )
assertEquals ( filterResult , result )
assertFalse ( classifier . classify ( new RuntimeException ( new RuntimeException ( new IllegalStateException ( "Foo" ) ) ) ) )
assertEquals ( message . serialize ( ) , jsonFixture ( "fixtures/message-minimal.json" ) )
Assert . assertNull ( janus . getServer ( ) )
Assert . assertEquals ( "{\"a\":\"b\",\"c\":\"d\"}" , sw . toString ( ) )
assertEquals ( expected , actualQuery )
assertThat ( target , is ( notNullValue ( ) ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response5 . getResponseObject ( ) )
assertFalse ( "Calendar popup should not be opened for disabled date field" , isElementPresent ( By . className ( "v-datefield-popup" ) ) )
assertThat ( actualInputs , IsIterableContainingInAnyOrder . containsInAnyOrder ( expectedInput ) )
assertThat ( attack . getRequestContent ( ) , notNullValue ( ) )
assertNotEquals ( frameData1 , frameData2 )
assertEquals ( "[[Sarah], [Rocky], [Total]]" , results . toString ( ) )
Assert . assertEquals ( 123 , form . getFormId ( ) . intValue ( ) )
Assert . assertNull ( st )
assertThat ( reportProperties . getShouldDisplayResultLink ( ) , is ( false ) )
assertEquals ( "localhost" , serializeAndDeserialize ( session ) . getHost ( ) )
Assert . assertNull ( "should not be a description" , actual )
Assert . fail ( "An empty String shouldn't be allowed" )
assertThat ( StubWatchFactory . getRequestParameters ( ) . get ( 0 ) , both ( hasEntry ( "resourceVersion" , Integer . toString ( INITIAL_RESOURCE_VERSION ) ) ) . and ( hasEntry ( "labelSelector" , asList ( DOMAINUID_LABEL , CREATEDBYOPERATOR_LABEL ) ) ) )
assertTrue ( "Custom content model " + customContentModelQName . toString ( ) + " is not present" , allContentModels . contains ( customContentModelQName ) )
assertTrue ( "Expected HostCapacityReports" , obj instanceof Host )
assertThat ( buf . toString ( ) , is ( equalTo ( "\t\tfoo;\r\n" ) ) )
assertEquals ( expected , out )
assertTrue ( "Expected bytes array not found after convert" , bytes . length > 0 )
Assert . assertEquals ( sql , expected . replaceAll ( "#ALIAS#" , EntityMetaDataCache . getMetaData ( EntityJoined . class ) . getAlias ( ) ) )
assertEquals ( "ID = userId" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertThat ( result , is ( 2 ) )
assertTrue ( filter . allow ( event , listener ) )
assertEquals ( "custom " , html )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertTrue ( appender . getEvents ( ) . size ( ) == 0 )
assertEquals ( actualJSON , expectedJSON )
assertOut ( "/**\n * @param {number} bar\n * @param {string} baz\n * @param {Array} goo\n */\n" + "foo.bar.RoyaleTest_A.prototype.method1 = function(bar, baz, goo) {\n}" )
assertThat ( client . isUsingHttps ( ) , is ( false ) )
assertEquals ( new BigDecimal ( "6.60" ) , sum )
assertThat ( page . iframe . getSourcePath ( ) , is ( expectedSourcePath ) )
assertThat ( a , equalTo ( a1 ) )
assertEquals ( ( Integer ) 3 , i )
Assert . assertEquals ( "EXECUTE ERROR:" , sqltrue , sqlnew )
Assert . assertEquals ( font , cache . getFont ( ) )
assertEquals ( "{0=11, 1=11, 2=11, 3=11, 4=11, 5=11, 6=11, 7=11, 8=11, 9=2}" , map . toString ( ) )
assertEquals ( "* :123: Arthur Dent\n" + "    @alias http://example.org/ArthurDent\n" , toWikiText ( note ) )
assertTrue ( newYearsEve . before ( newYearsDay ) )
Assert . assertEquals ( "http://localhost:8080/services" , url )
assertThat ( parser . getParserMethods ( ) . size ( ) , is ( 1 ) )
assertEquals ( expected , actual )
connection . assertBufferEndsWith ( "OVERRIDDEN" + Config . getLineSeparator ( ) )
assertTrue ( entity . equals ( entity2 ) )
visitor . assertSatisfiedTransition ( "checking state contains two branches" , _rootComposite , transition )
assertTrue ( dao . isSecretAnswer ( userJoe , SECRET_ANSWER ) )
assertThat ( true , is ( equalTo ( false ) ) )
assertTrue ( result . isEmpty ( ) )
assertTrue ( "Column did not expand as expected" , headerCell . getSize ( ) . getWidth ( ) > 400 )
assertEquals ( "Unexpected state class" , TableState . class , state . getClass ( ) )
assertThat ( query . hasOption ( QueryFlag . FILTER_TAG_EXCLUDE ) , is ( true ) )
Assert . assertTrue ( "claims topics should merge when they have same BN in unconstrained scope" , ! MergeUtils . shouldMerge ( t1 , t2 ) )
assertEquals ( "" , html )
assertEquals ( "dois reais" , actual )
assertSurplus ( ref , 3 )
assertNotNull ( at . getTokenKey ( ) )
Assert . assertTrue ( s . contains ( "Request config key:" ) )
assertNotNull ( result )
assertThat ( instance1 . hashCode ( ) , equalTo ( instance2 . hashCode ( ) ) )
JSONAssert . assertEquals ( expected , bucketFieldsJson , false )
assertEquals ( cs , dto2 . toString ( ) )
Assert . assertNotNull ( result )
assertTrue ( "No ontology roots found for " + testOntologySource , ontologyRoots . size ( ) > 0 )
assertThat ( domain . isIncludeServerOutInPodLog ( ) , is ( false ) )
assertFactorization ( poly , UnivariateSquareFreeFactorization . SquareFreeFactorization ( poly ) )
Assert . assertTrue ( actual . equals ( expected ) )
Assert . fail ( )
assertEquals ( expectedType , TalendType . convertFromAvro ( fieldSchema ) )
Assert . assertEquals ( "languages" , title )
Assert . assertEquals ( "test2" , testScopePath . getLastScope ( ) . getName ( ) )
assertNoViolations ( constraintViolations )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
Assert . noNullElements ( results )
assertThat ( query . isAllSources ( ) , is ( true ) )
assertOut ( "var a:ArgumentError = new ArgumentError()" )
assertThat ( wrapper . getOpenEngSBModelTail ( ) . size ( ) , is ( 0 ) )
Assert . assertTrue ( zero . isZero ( ) )
assertOperation ( ( ) -> roleClient . deleteProject ( SPACE_NAME , name ) )
assertThat ( query . getParameters ( ) . size ( ) , is ( 2 ) )
assertNull ( StringCompressionUtil . unpackAndDecompress ( testChars ) )
Assert . assertNotNull ( record )
assertTrue ( hasReset )
assertEquals ( expected , actual )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( 0 , result . size ( ) )
assertTrue ( true )
assertEquals ( "<text>" , label )
Assert . assertEquals ( "" , unmap ( "Gen.1.1" ) )
assertEquals ( 23583599999L , q . getLastMillisecond ( ) )
assertEquals ( "         \n" + "         \n" + "1.       \n" , textTableFormatter . format ( ) )
assertEquals ( null , handleResponse )
Assert . assertNotNull ( dbRangerServiceDef )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 299.0 , 299.0 )
assertEquals ( strList , StringArrayUtils . toList ( "1" , "2" ) )
Assert . assertEquals ( "test case " + testCase . getKey ( ) + " failed." , testCase . getValue ( ) . intValue ( ) , magnitudeResult )
assertNotNull ( RatePlan . fetcher ( "WPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( "Link: <http://example.com/things>; rel=\"next\"" , affordance . toString ( ) )
assertEquals ( o1 , o2 )
Assert . assertNotNull ( ks )
assertSuccess ( result )
assertions . isEqualTo ( expected )
assertEquals ( "xxxxê" , result )
assertSame ( expected , result )
assertEquals ( "(x INT)\n" , found )
assertEquals ( "my event is here" , observeEvent . toBlocking ( ) . first ( ) . value )
Assert . fail ( "Invalid input" )
Assert . assertEquals ( Integer . class , clazz )
assertThat ( value , instanceOf ( Document . class ) )
assertTrue ( latch . await ( 15000 , TimeUnit . SECONDS ) )
assertEquals ( "incorrect size" , SIZE , Struct . size ( new LongPadding ( ) ) )
Assert . assertEquals ( 1 , s , Math . ulp ( 1d ) )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertThat ( editor . getValue ( ) , is ( ( Object ) Credential . builder ( ) . userName ( "user" ) . setPassword ( "password" . toCharArray ( ) ) . database ( "db" ) . plainSasl ( ) . build ( ) ) )
assertFalse ( game . isGameOver ( ) )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertEquals ( "TextBuilder String Is 1.0" , _textBuilder . toString ( ) , "1.0" )
assertEquals ( "Count of customer" , 2 , res )
assertEquals ( r4 , mostRelevantResource )
assertEquals ( 2 , repo . findAll ( ) . size ( ) )
assertThat ( result . fullName ( ) , is ( "long" ) )
Assert . assertEquals ( totalLen - 100 , sizeControllableFile . size ( ) )
assertTrue ( this . containsAll ( expectedResult , actualResult ) )
assertEquals ( str , triple . getValue1 ( ) )
Assert . assertEquals ( createObjectNode ( "name" , "testperson" , "age" , 30 , "birthday" , "01.01.2000" ) , result )
assertEquals ( "2013-02-07T02:29:08.123Z" , formatted )
assertEquals ( "Request for config key config1 is incorrect" , "Value of config1" , store . getNodeConfValue ( TEST_SERVER1_NODE1_ID , "config1" ) )
assertTrue ( violation )
assertEquals ( "http://localhost:8080/" , value )
assertEquals ( "failure: " + translated , ExpressionFactory . exp ( "db:toArtist.artistExhibitArray.toExhibit" ) , translated )
assertSame ( sampleCompany , company )
assertNotNull ( sut . hashCode ( ) )
assertEquals ( expected , actual )
assertAttribute ( lv )
assertEquals ( "Wrong number of warnings detected." , 2 , warnings . size ( ) )
assertEquals ( exist , true )
assertArrayEquals ( coeffs , actual )
assertEquals ( 0 , entries . size ( ) )
assertEquals ( Arrays . asList ( ExampleData . buildNetworkMetaAnalysisCgi ( ) , null ) , pm . getSelectedMetaAnalyses ( ) )
assertFalse ( map . containsValue ( null ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertTrue ( "try is now containing 'hello' string" , "hello" . equals ( hello . getValue ( ) ) )
assertEquals ( "/anything/ok/vrap" , refererResult . getReferer ( ) )
assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "Parameter role must not be null or empty." , e . getMessage ( ) )
assertEquals ( myType , entry . getType ( ) )
assertResultSet ( res )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff31_" ) )
assertEquals ( "John Doe" , RecordPath . compile ( "/name[contains(substringAfter(., 'o'), 'h')]" ) . evaluate ( record ) . getSelectedFields ( ) . findFirst ( ) . get ( ) . getValue ( ) )
assertThat ( mergedPredicate . getOwner ( ) . getName ( ) , Matchers . is ( "testOwner" ) )
assertThat ( spy . getPropertyChangedCount ( ) , is ( 2 ) )
Assert . assertEquals ( expect_sql , sql )
assertEquals ( String . format ( TextHelper . LOCALE_ROOT , "usage: argparse4j install [-h] [--foo FOO]%n" + "%n" + "This is sub-command of argparse4j.%n" + "%n" + "named arguments:%n" + "  -h, --help             show this help message and exit%n" + "  --foo FOO%n" + "%n" + "This is epilog of sub-command.%n" ) , parser . formatHelp ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertFalse ( lockAquired )
assertions . isNull ( )
assertTrue ( outAny . equal ( inAny ) )
assertEquals ( "reallocation should have partly replaced second allocation and merged with first allocation" , Lists . newArrayList ( new Allocation ( control , 0 , 8 ) , new Allocation ( withLogin , 8 , 2 ) ) , allocations . getAllocations ( ) )
Assert . assertTrue ( topic instanceof ChannelTopic )
assertEquals ( item . getType ( ) , result )
assertEquals ( "Index deleted: oss" , response )
runner . assertAllFlowFilesTransferred ( AbstractBigQueryProcessor . REL_SUCCESS , 1 )
assertEquals ( NodeConstants . Types . NULL , originatingNode . getType ( ) )
assertThat ( domain . isIncludeServerOutInPodLog ( ) , is ( false ) )
assertEquals ( "" , bestMessage )
Assert . assertEquals ( 9 , woffFont . getTables ( ) . size ( ) )
Assert . fail ( e . getMessage ( ) )
Assert . assertEquals ( query , interpretedQuery )
assertEquals ( expected , transformed )
assertTrue ( true )
assertTrue ( latch . await ( 5 , TimeUnit . SECONDS ) )
Assert . assertFalse ( pss . getEligiblePositionalParameters ( ) . hasNext ( ) )
Assert . assertEquals ( sql . getSql ( ) , "delete from PUBLIC.test where \"ID\" = ? and \"NAME\" not null" )
assertNoMoreTokens ( )
assertThat ( "Reversed Complemented sequence not as expected" , s , is ( "GCAT" ) )
assertEquals ( TargetType . GLOB , target . getType ( ) )
assertNotNull ( "can instantiate" , component )
assertNotNull ( features )
assertEquals ( 12 , list . size ( ) )
Assert . assertEquals ( 1.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
paths . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertTrue ( "Invalid Java version" , FileUtil . findPatternInFile ( new File ( resultFilename ) , "Using Java version: Java 1.5" ) )
assertTrue ( lines . size ( ) == 28 )
Assert . assertTrue ( repeatableTask . execute ( ) )
assertFalse ( smsSettings . isConfigured ( ) )
Assert . assertEquals ( ByteArrayNodeLeafVoidValue . class , node . getClass ( ) )
assertEquals ( "one dollar and sixty-five cents" , actual )
assertEquals ( "robert" , retrievedEntity . getProperty ( "name" ) )
assertEquals ( node , parsedNode )
assertThat ( DataenumUtils . checkNotNull ( expected ) , is ( expected ) )
assertFalse ( "List size mismatch across lists" , words1 . equals ( words2 ) )
Assert . assertEquals ( "{" + "\"@odata.context\":\"../$metadata#ESAllPrim(32767)/PropertyString\"," + "\"@odata.metadataEtag\":\"W/\\\"metadataETag\\\"\"," + "\"value\":\"First Resource - positive values\"}" , resultString )
assertTrue ( getTestChargingStationFromRepository ( ) . isReservable ( ) )
assertOrder ( Complete . class , ConfirmCompleted . class , Close . class )
assertEquals ( 37 , tokens . size ( ) )
Assert . assertTrue ( "Generated template does not match expected XML." , XmlHelper . compareXMLStrings ( expectedXML , message ) )
assertEquals ( TargetType . GLOB , target . getType ( ) )
assertEquals ( body . toString ( ) , "operation _timeout" )
assertEquals ( 1360204148123L , date . getTime ( ) )
assertTrue ( "Failed to fill Object array correctly" , d [ i ] == val )
assertTrue ( psa . getLegend ( ) instanceof ProportionalPoint )
assertEquals ( Long . valueOf ( 0 ) , account . getEntityId ( ) )
mockEndpoint . assertIsSatisfied ( )
Assert . assertEquals ( - 1 , sFsShell . run ( "updateMount" , "/" , ufsPath ) )
assertEquals ( "2015-08-20" , formatted )
assertTrue ( sut . writeList ( new int [ ] { 1 , 2 } ) )
assertThat ( response . getBody ( ) , equalTo ( "Hello World" ) )
assertEquals ( expected , actual )
assertEquals ( expected , output )
assertEquals ( "status" , HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( Profiling . isEnabled ( ) )
assertTrue ( allStateCapitals . length == 50 )
assertEquals ( "" , result )
assertResultSet ( res )
assertEquals ( expResult , result )
assertEquals ( "(25,twenty-five)" , pair . toString ( ) )
assertThat ( target . parse ( ) , is ( false ) )
GAssert . assertEquals ( ImmutableMultimap . of ( "a" , "5" ) , postWithDouble )
assertThat ( offset . canonical ( ) , is ( "UTC+02:00" ) )
assertTrue ( validator . validate ( connectionLimits , PUT ) . passedValidation ( ) )
assertNotNull ( thr )
assertEquals ( "AudioIssueNumber" , code . getBibframeTag ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt , false , parser -> parser . withSquareBracketQuotation ( true ) )
assertThat ( toml . entrySet ( ) , empty ( ) )
assertEquals ( expected , actual )
Assert . fail ( "No such class exist" )
assertThat ( "Initator methionine wrong" , initMet . toString ( ) , is ( "M" ) )
assertTrue ( size == 100 )
assertNull ( user . getFullName ( ) )
assertSame ( "Root is not detected: " + select . getExpression ( ) , resolver . getClassDescriptor ( "Artist" ) , select . getRootDescriptor ( ) )
assertThat ( height , equalTo ( 2f ) )
assertEquals ( 0xF1F2F3F4F5F6F7F8L , i )
assertEquals ( SuppliedNameSuffixKit . getId ( ) , settings . getKitId ( ) )
assertThat ( deletedDeveloperEntity , equalTo ( positionEntityArgumentCaptor . getValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( authenticate , is ( not ( present ( ) ) ) )
Assert . assertTrue ( dictionary . createSynset ( POS . ADJECTIVE ) instanceof AdjectiveSynset )
assertEquals ( token . serialise ( ) , result . serialise ( ) )
Assert . assertTrue ( union . isEmpty ( ) )
assertEquals ( sampledDeadlockList , deadlockChartGroup )
assertNull ( list )
assertNull ( "Could remove configuration by unknown name" , config . removeConfiguration ( "unknownName" ) )
assertEquals ( "formatSection() formats a message in a section" , "<info>[cli]</info> Some text to display" , formatter . formatSection ( "cli" , "Some text to display" ) )
assertEquals ( 1 , executor . run ( AdultUnit . class ) )
assertTrue ( fileSizeAfter < fileSizeBefore )
assertNotNull ( user )
Assert . assertFalse ( "Invalid result [" + result + "]" , StringUtils . hasText ( result ) )
assertFalse ( filter . passesFilter ( null , item1 ) )
assertThat ( string , is ( nullValue ( ) ) )
assertTrue ( ! valid )
assertEquals ( cal . getTime ( ) , y . getStart ( ) )
assertThat ( options . getMaxCopyAttempts ( ) , is ( 3 ) )
assertNotNull ( AuthorizationDocument . reader ( ) . read ( ) )
assertEquals ( buch , mod )
assertFalse ( victim . isIncrementalBuild ( ) )
assertActive ( player1 , player2 , player3 , player4 )
assertEquals ( NO_CONTENT_204 , response . getStatus ( ) )
Assert . assertEquals ( status , protocoloInfo . getStatus ( ) )
assertEquals ( expResult , result )
assertEquals ( 1 , parts )
assertEquals ( 0 , dbHandler . getDataElementCount ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( item . getType ( ) , result )
assertThat ( ioUtils . getNewLineIndex ( post . getBytes ( charset ) , charset ) , Matchers . equalTo ( 19 ) )
Assert . assertTrue ( errors . hasFieldErrors ( "encounter" ) )
assertThat ( getCollection ( ) . count ( ) , is ( 2L ) )
Assert . assertTrue ( new LogAdapter ( "N/A" , mockConfigDefault ( ) ) . isWarnEnabled ( ) )
assertEquals ( expected , api . getAPIUrl ( "" ) )
assertEquals ( account . getType ( ) , AccountProvider . ALIYUN )
assertOut ( "(s.toLowerCase() == 'foo')" )
assertEquals ( expResult , result )
assertEquals ( nextDate , DateUtils . getNextDay ( theDate ) )
assertEquals ( array . getBaseTypeName ( ) , baseType )
Helpers . assertJson ( Deencapsulation . invoke ( twinMetadata , "toJsonElement" ) . toString ( ) , expectedJson )
assertEquals ( "Framework profile" , "runner" , config . getFrameworkProfile ( ) )
assertOut ( "target.foo = target.foo && foo" )
assertEquals ( 0.0 , prod . minus ( aperm ) . getRMS ( ) , TOLERANCE )
Assert . assertTrue ( TrainerFactory . isValid ( mlParams ) )
assertEquals ( 1 , executor . getNoTimesExecuted ( ) )
assertEquals ( "Tree is incorrect" , this . goldTree2 . toString ( ) , root . toString ( ) )
assertEquals ( expectedArg , parsedArg )
assertEquals ( address , fromString ( address . toString ( ) ) )
assertTrue ( sut . isCredentialsNonExpired ( ) )
assertNull ( metricsFactory )
Assert . assertEquals ( "Resent-Sender: JD <john.doe@acme.org>" , decode ( field ) )
assertThatPersonIsProtected ( mapper ( FOR_NON_AUTORITY_CLIENT ) . map ( person , CensorProtectedDataForNonAuthorities , CPRProtectionLevel . DoNotCensorCPR ) )
assertEquals ( 9 , purged )
Assert . assertEquals ( "Status code should be the same." , 200 , conn . getResponseCode ( ) )
Assert . assertEquals ( expected , actual )
assertNull ( service . getCurrentAuthString ( mockUser ) )
assertTrue ( getStdErr ( ) . indexOf ( "The ftp URI scheme is not allowed" ) != - 1 )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( "Params:\n" + "foo: bar" , response )
assertNull ( repository . getModuleMetadata ( "TEST-FOLLOW" ) )
assertTrue ( check ( "a" , input , output ) )
assertEquals ( expResult , result )
assertThat ( xml ( stream . toString ( ) ) , hasXPath ( "//soapwms:ExtendedCapabilities/soapwms:SOAP/wms:OnlineResource/@xlink:href" , nsBindings ( ) , equalTo ( postUrl ) ) )
assertEquals ( " 33 297\n" , found )
assertTrue ( channelFuture . isDone ( ) )
assertEquals ( STREAMING . ZK_EPHEMERAL_NODE_STATUS_INITIALIZED , status )
assertEquals ( ExpressionFactory . exp ( "path in (1, 2, 3)" ) , exp )
assertEquals ( 2 , springBeansConfig . getTargets ( ) . size ( ) )
assertEquals ( "S.a\n" , found )
assertArrayEquals ( new long [ ] { 1 , 2 } , finalReshape . getShape ( ) )
assertEquals ( 1 , report . getEventCount ( EventType . CALENDAR_CHANGED ) )
assertNotNull ( "ID should not be null" , book . getId ( ) )
assertEquals ( expected , actual )
assertTrue ( kieBuilder . getResults ( ) . hasMessages ( Level . ERROR ) )
assertEquals ( true , check . isRequired ( ) )
assertEquals ( "[1,6]" , i1 . toString ( ) )
assertEquals ( "Failed applied BufferTransformation WithPositiveDistances" , desiredGeometry , transformedGeometry )
assertEquals ( true , threadPriority != null )
assertEquals ( length + 1 , permMissingElem . solution ( array ) )
assertEquals ( null , result . getId ( ) )
assertEquals ( "Value {test" , result )
assertEquals ( "<p>Hello</p>\n<p>There</p>" , divs . html ( ) )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( true ) )
assertEquals ( expResult , result )
Assert . assertEquals ( ki3 . toString ( ) , "0x" + s1 )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertTrue ( list . isEmpty ( ) )
assertTrue ( testString . equals ( convertedString ) )
assertTrue ( matcher . find ( ) )
assertEquals ( "public static final SetProperty<TargetEntity> SET_REL = PropertyFactory.createSet(\"set_rel\", TargetEntity.class);" , definition )
assertThat ( DateInterval . parseISO ( "P775D/2014-02-14" ) , is ( expected ) )
rule . assertScenarioEnded ( )
assertEquals ( 3 , addedAudioSSRCs . size ( ) )
assertEquals ( 0 , array . length )
assertTrue ( cluster . getClient ( ) instanceof LocalJobRunner )
assertEquals ( "V1 Comment" , wrapper . getComment ( ) )
assertEquals ( expected , successors )
assertThat ( outcomes . get ( 0 ) , havingTag ( TestTag . withName ( "a domain" ) . andType ( "domain" ) ) )
assertTrue ( output , output . matches ( "(?s).*Could not load script.*" ) )
assertEquals ( entrySize , entries . size ( ) )
assertThat ( processor . getTables ( ) , is ( Arrays . asList ( DATABASE + "." + TABLE ) ) )
assertThat ( System . getProperty ( SYSTEM_PROPERTY ) , is ( nullValue ( ) ) )
Assert . assertFalse ( this . manager . set ( this . person1 , this . job1 ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa is not a number(####)." ) )
assertEquals ( buf . toString ( ) , "[\"a\"]" )
assertThat ( writer . toString ( ) , is ( "[{\"i\":1},{\"i\":2}]" ) )
assertTrue ( "DataPoints list is non-null on initialization" , null != subject . getDataPoints ( ) )
assertFalse ( c . isValidForSqlQuery ( ) )
assertTrue ( "Constant permission mapper should be created" , ops . exists ( TEST_CONSTANT_PERMISSION_MAPPER_ADDRESS ) )
assertThat ( tester . count ( Lock . KIND ) , is ( 0 ) )
assertTrue ( xmlResult . contains ( ":string2>cord</ns" ) )
assertThat ( target . checkConnectivity ( ) , is ( true ) )
assertThat ( builder . getPatches ( ) , hasItemInArray ( "REMOVE /status/replicas" ) )
assertEquals ( "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head>\n<body>\n</body>\n</html>\n" , result )
Assert . assertEquals ( 11 , patients . size ( ) )
assertEquals ( result1 , result2 )
assertEquals ( 1 , x . size ( ) )
assertTrue ( result . containsKey ( "solr.jvm" ) )
Assert . assertEquals ( 10000 , list . size ( ) )
assertTrue ( seen . add ( UUIDGenerator . nextString ( UUIDGenerator . TYPE1 ) ) )
assertEquals ( future . get ( ) , "hello world" )
assertEquals ( "sajand tagasi" , t . format ( new Date ( 0 ) ) )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue')" , transformed )
ActionResultAssert . assertThat ( result )
Assert . assertTrue ( "result had wrong width" , result . getWidth ( ) == 2 )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertEquals ( "test" , empty . getMessageType ( ) )
assertEquals ( Collections . singleton ( TestEnum . TWO ) , select . getSelectedItems ( ) )
assertEquals ( 1 , packetIn . getCount ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( array ) , equalTo ( new double [ ] { 5 , 1 , 2 , 3 , 4 , 0 } ) )
assertTrue ( noElementEqualTo5 )
assertThat ( TestI18n . testMessage2 . text ( "Test" , "Message" ) , is ( "Message Test" ) )
assertEquals ( expected , destination . toString ( ) )
assertEquals ( c , other )
Assert . assertNotNull ( "did not find collection" , entry )
Assert . assertEquals ( fastInvSqrt , computedInvSqrt , 0.000000001f )
assertTrue ( v . focused ( ) . get ( ) )
assertEquals ( "Local repository" , new URL ( "file:somewhere/localrepository/" ) , config . getLocalRepository ( ) . getURL ( ) )
Assert . assertEquals ( 0 , solution . getValue ( ) , .0000001 )
assertEquals ( "no-cache" , wrapper . getFirstHeader ( "Cache-Control" ) . getValue ( ) )
assertEquals ( "English" , newSubtitles )
assertEquals ( "patient/" , path )
assertEquals ( json , gson . toJson ( value ) )
assertEquals ( 1 , result . length )
assertEquals ( ROUTE , route )
assertEquals ( ncTestName , result . get ( "namedCluster" ) )
Assert . assertEquals ( ambiente , eventoRetorno . getAmbiente ( ) )
assertTrue ( hasNoProjects )
assertEquals ( "BLOB" , sb . toString ( ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertProcessInstanceFinished ( processInstance , ksession )
Assert . assertEquals ( "did not set computechecksum" , true , transferOptions . isComputeChecksumAfterTransfer ( ) )
assertEquals ( 404 , res . getStatusCode ( ) )
assertEquals ( AuthStatus . SEND_FAILURE , module . validateRequest ( messageInfo , client , null ) )
Assert . assertEquals ( "true" , result )
Assert . assertNotNull ( rb )
assertEquals ( 15 , routeState . get ( 0 ) )
assertTrue ( "atan() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( true , a . getEnableForwardHeaders ( ) )
assertEquals ( "{}" , optionsBuilder . build ( options ) )
assertE ( "����������" + "��   ��" + "��   ��" + "����  ��" + "����������" )
Assert . assertTrue ( "Type1 font expected" , FontProgramFactory . createType1Font ( afm , pfb ) instanceof Type1Font )
assertEquals ( BuilderFactory . start ( ) . addMinKey ( "a" ) . build ( ) , doc )
assertTrue ( c1 . getSourceId ( ) . equalsIgnoreCase ( c2 . getSourceId ( ) ) )
Assert . assertEquals ( 1 , countResult ( query ) )
assertFalse ( test . isPresent ( ) )
assertOnResponseAttachment ( f2 , MAX_SIZE1 , "Client3mbAttachment.txt" )
GAssert . assertEquals ( expected , actual )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertTrue ( ! key . prefixOf ( itemKey ) )
assertEquals ( "Testing toString output " , " source=" + source + " year=" + nineties + " lastSeenMessage=1 Jan 1991 00:00:00(662688000000)" , actual )
assertFalse ( SetStatementValidator . validate ( setters ) )
assertTrue ( map . equals ( refMap ) )
assertEquals ( "bar" , result )
Assert . assertEquals ( 249.84d , result1 . get ( ) , 0.1d )
assertFalse ( loggerContext . isPackagingDataEnabled ( ) )
Assert . assertEquals ( RheemCollections . asSet ( "op1Property" , "op2Property" ) , RheemCollections . asSet ( estimationContextProperties ) )
assertEquals ( "" , relativizeSubpath ( rootObjectId , resourceId ) )
assertEquals ( asList ( START , BID , BID_2 , END ) , events . collect ( ) )
assertThat ( testIsValidAppProperty , is ( expectedIsValidAppProperty ) )
assertEquals ( sql , query . getSql ( ) )
assertEquals ( "123" , rendered )
assertTrue ( 1024 * 1024 * 100 == mappedPageFactory . getBackPageFileSize ( ) )
assertEquals ( true , result )
result . assertErrorFreeLog ( )
assertPermanentCount ( playerA , "Myr Enforcer" , 3 )
assertTrue ( result instanceof GenericEnumSymbol )
assertEquals ( "PONG" , status )
assertCapturedMessage ( eventMessage ( "sess2" , "/topic" , "publishMessage1" ) )
assertNotNull ( xmlString )
assertThat ( iconCaptor . getValue ( ) , is ( "http://github.com/i/am/sorry.png" ) )
assertEquals ( 50 , cap . get ( 0 ) )
assertTrue ( res . equals ( expected ) )
assertEquals ( "1.17549E-38" , sb . toString ( ) )
Assert . assertEquals ( "Incorrect duration" , duration , res . getDuration ( ) )
Assert . assertTrue ( dsDao . getDSInfo ( remoteDSAddress ) . isUp ( ) )
assertRoundtrip ( input )
assertError ( ( ) -> target . getServices ( ) , ConnectionException . class , expectedMessages . getConnectionError ( ) )
assertEquals ( pp . getValue ( ) , "No handlers for address hello1" )
assertFalse ( skillConstraint . fulfilled ( insertionContext ) )
assertEquals ( "/pentaho-di" , biServerContextPath )
arrays . assertContainsNull ( someInfo ( ) , actual )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "/macro/edit" , result )
Assert . assertEquals ( "rm/localhost@EXAMPLE.COM" , client . timelineDTRenewer )
assertEquals ( "linux" , process . platform ( ) )
assertNotNull ( context . getUsernameCache ( ) )
assertEquals ( "<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertNotNull ( "Social Groups (JSON STRING)" , groups )
assertExpectedProtectedPorts ( dai )
assertThat ( lists . oxen ( ) , is ( asList ( 17 , 4711 ) ) )
assertEquals ( "error message" , ex . getMessage ( ) )
assertThat ( term , is ( "���炽�裤����" ) )
assertArrayEquals ( data , ( float [ ] ) deserialize . readObject ( float [ ] . class ) , 0.0001F )
assertTrue ( ! baseCalendarDAO . exists ( calendar . getId ( ) ) )
assertTrue ( t . verify ( t . getEndorsers ( ) . get ( 0 ) , key . getPublic ( ) ) )
assertKernel ( kernel , ANNULUS , e )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( 0 , numberOfReceivedEventsForClass )
assertEquals ( 0 , a . applyThenCompare ( ( Throwable ) null , ( Throwable ) null ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsCollection , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
assertNotEquals ( null , o1 )
Assert . assertEquals ( 1 , errors . size ( ) )
assertEquals ( 1 , views . size ( ) )
assertEquals ( expected , actual , delta )
Assert . assertTrue ( resultString . startsWith ( expected ) )
assertEquals ( 1 , ( ( ExampleClass ) gateway . getObject ( obj2 . getName ( ) ) ) . getField1 ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( "failed to post rating" , 12 , result . getCode ( ) )
Assert . assertEquals ( THIRTEEN_SHORT , pi . getThirteenShort ( ) )
assertEquals ( v21Fundings1 , v21Fundings2 )
assertTrue ( stackTrace . contains ( getClass ( ) . getName ( ) ) )
Assert . fail ( )
assertEquals ( Integer . valueOf ( 3 ) , result )
assertEquals ( "?hello=world#foo" , builder . toString ( ) )
result . assertIsNotSatisfied ( 1000 )
assertNotEquals ( one , differentClass )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertThat ( underTest . isFrozen ( ) , is ( false ) )
Assert . assertEquals ( "The file is packaged as test-deps-c-1.0.0.jar" , "test-deps-c-1.0.0.jar" , file . getName ( ) )
assertArrayEquals ( expected , list . toArray ( ) )
Assert . assertEquals ( 1 , q . getResultList ( ) . size ( ) )
Assert . assertTrue ( 2 + 2 == 4 )
assertEquals ( 10 , classUnderTest . getGeneralCompletionConfig ( ) )
assertThat ( result , equalTo ( countryName ) )
assertNotNull ( action )
assertThat ( values , containsInAnyOrder ( "other" , "value" ) )
assertEquals ( 1 , partition . size ( ) )
assertTrue ( expectedRemainderExistingAveragePoolingActivation . compare ( poolingActivation , TOLERANCE ) )
Assert . assertEquals ( "java.lang.Byte" , provider . getCanonicalDataTypeName ( Mockito . mock ( Column . class ) ) )
assertEquals ( HttpStatusCode . OK . code , response . getStatus ( ) )
assertPutAndGet ( map )
assertTrue ( Arrays . equals ( readBytes , message2 . getBytes ( ) ) )
Assert . assertTrue ( isEqual ( distance , 1.0 ) )
Assert . assertEquals ( output , outcome )
Assert . assertEquals ( "(124_125invCGA)" , inv . toHGVSString ( ) )
assertEquals ( getFailureMessage ( ) , 0.0025851 , distance , 1e-7 )
Assert . assertEquals ( "abc" , html )
assertEquals ( expected , actual )
assertThat ( backend . isEmpty ( ) , is ( true ) )
assertNotSame ( v1 , v2 )
Assert . assertTrue ( "Expected unmarshaled patient to be equal" , result . equalsDeep ( createPatient ( ) ) )
assertEquals ( null , DateUtil . parse ( dateString , formatString ) )
Assert . assertEquals ( element . getText ( ) , "Open new window" )
Assert . assertNotNull ( Files . getOwner ( path ) )
Assert . assertEquals ( null , retrievedState )
assertTrue ( e . getMessage ( ) . contains ( badCell ) )
assertEquals ( "Task from a password protected file" , project . getTaskByID ( Integer . valueOf ( 1 ) ) . getName ( ) )
assertEquals ( "Hello" , TYPE_HANDLER . getResult ( rs , 1 ) )
assertThat ( event . getLevel ( ) , is ( nullValue ( ) ) )
assertEquals ( Arrays . asList ( PropertiesMappingConfiguration . DEFAULT_STATIC_RESOURCE_MAPPING_LOCATION ) , mappingFiles )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( LabeledUnicastRoute . class ) )
assertObjectEquals ( "[{f:'a'},{f:'b'},{f:'c'},{f:'d'},{f:'e'}]" , p . run ( bs , in , sa ) )
Assert . assertEquals ( - 1 , compareResult )
assertEquals ( 5 , diff . getValue ( ) . get ( ) )
Assert . fail ( "Expected ConfigurationException" )
assertEquals ( descriptor , descriptor2 )
assertEquals ( "Count of customer" , 2 , res )
Assert . assertEquals ( 8080 , WebServer . getValidPortParam ( args ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertNotNull ( result )
assertEquals ( "87030-020" , String . format ( "%s" , cep ) )
Assert . assertArrayEquals ( expected , actual )
assertTrue ( result . size ( ) >= 1 )
assertKernel ( kernel , ANNULUS , e )
assertTrue ( post . canBeVotedBy ( ObjectsFactory . getDefaultUser ( ) , true ) )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( key + " " + expectedResult , result )
assertEquals ( "Found old events to scrub when none were supposed to be found" , 0 , controller . scrubOldEvents ( now + 2000 ) )
Assert . assertEquals ( "did not reconstitute path correctly" , "/a/path/in" , actual )
Assert . assertEquals ( 3 , vertices . size ( ) )
assertEquals ( "fileName-" + HASH + ".js" , result )
assertEquals ( "Test            " , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
Assert . fail ( e . getMessage ( ) )
assertEquals ( "host3 has been added to group1" , result )
assertTrue ( dao . selectAll ( ) . size ( ) == 1 )
assertEquals ( Result . FAIL , user . apply ( item ) )
assertEquals ( 1 , hits . size ( ) )
assertThat ( result , is ( true ) )
assertFalse ( validator . validate ( EntityNames . ATTENDANCE , attendances ) . size ( ) == attendance1 . size ( ) )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
assertThat ( exists , is ( true ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertSame ( resultMessages , flashMap . get ( ResultMessages . DEFAULT_MESSAGES_ATTRIBUTE_NAME ) )
assertEquals ( "jdbc:h2:mem:test" , embeddedDatabaseRule . getConnectionJdbcUrl ( ) )
assertEquals ( "GBP 3.57" , test . toString ( ) )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( true ) )
assertNotNull ( entryRelationship )
assertThat ( result . asMap ( ) , hasKey ( "mycount" ) )
assertEquals ( "local" , sf1 . getYetAnotherField ( ) )
Assert . assertEquals ( 0 , scores . getScore ( ) )
assertEquals ( 0 , query ( ) . from ( employee ) . where ( sq1 . exists ( ) . not ( ) ) . fetchCount ( ) )
assertEquals ( INTEGER , v8Object . getType ( "key" ) )
assertEquals ( "MMMM d, yyyy" , I . preferredDateFormat ( DateFormat . LONG ) )
assertTrue ( rsp . toString ( ) , rsp . get ( FAILURE_DESCRIPTION ) . asString ( ) . contains ( ControllerLogger . MGMT_OP_LOGGER . managementResourceNotFound ( CHILD_B_ADDRESS ) . getMessage ( ) ) )
assertTrue ( verifier . isValid ( interceptor , controllerMethod , controllerInstance , constraints ) )
Assert . assertEquals ( new URI ( "./mypath" ) , uri )
PositionCollectorTestUtil . assertEmpty ( collector )
assertEquals ( "Revision null ()" , nullRevision . toString ( ) )
assertEquals ( models , actual )
assertEquals ( "Erreur g茅n茅rale." , message )
assertThat ( response . getEntity ( ) , CoreMatchers . < Object > equalTo ( userRoleList ) )
out . assertIsSatisfied ( )
Assert . assertArrayEquals ( Base64 . decodeBase64 ( value ) , ( byte [ ] ) f . func ( value ) )
ctx . assertEquals ( 1 , result . size ( ) )
assertEquals ( transactionCompletion , senderSupplier . get ( ) . sendFiles ( ) )
assertFalse ( order . isExpired ( DateUtils . parseDate ( "2014-11-01 11:11:13" , DATE_FORMAT ) ) )
assertEquals ( expected , elements )
assertEquals ( "Serialised data set" , SourceXML . FULL_SAMPLE , dummyXmlOutputStreamProvider . getXmlString ( ) . trim ( ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( "!ys1\n" , sWriter . toString ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff21_" ) )
assertEquals ( StringTools . trimToLength ( "Agent wydzia�u do walki z przemytem narkotyk贸w i oficer wywiadu marynarki s� w sytuacji bez wyj�cia. Kradn� pieni�dze gangster贸w i zamierzaj� je przekaza� na dobre cele. Okazuje si� jednak, 偶e w rzeczywisto�ci ukradli pieni�dze CIA, a zleceniodawcami s� mafiosi." , plotLength ) , movie . getPlot ( ) )
assertEquals ( false , wizard . canComplete ( ) )
assertEquals ( "XXX" , person . getHomeAddress ( ) . getCity ( ) )
assertFalse ( "our host shouldn't have set our attribute" , retAttr . contains ( attributes . get ( 0 ) ) )
assertEquals ( ResetContent . MESSAGE , ri . getDescription ( ) )
assertTrue ( "string should contain number of chars" , iut . toString ( ) . contains ( String . valueOf ( array . length ) ) )
assertEquals ( 1 , nodeUnits . size ( ) )
assertEquals ( goodTasks [ i ] , md . getTaskId ( ) )
assertTrue ( kafkaStore . getKafkaStoreReaderThread ( ) . getConsumerProperty ( org . apache . kafka . clients . consumer . ConsumerConfig . GROUP_ID_CONFIG ) . startsWith ( "schema-registry-" ) )
assertTrue ( handler . test ( null , null , Direction . In , null , null ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . assertEquals ( "OK" , reference . get ( ) . getAttachment ( Http2Client . RESPONSE_BODY ) )
assertEquals ( "{\"id\":123,\"name\":\"CXF in Action\"}" , response )
assertFalse ( ncPropertiesNotNullOrEmpty )
assertTrue ( problem )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getNodeSelector ( ) , hasEntry ( "os_arch" , "x86_64" ) )
Assert . assertNull ( listener . getMessage ( 100 ) )
Assert . assertEquals ( pullRequestActivity , parsedPullRequestActivity )
assertEquals ( first . hashCode ( ) , second . hashCode ( ) )
assertTrue ( FutureUtils . result ( writer . truncate ( dlsn ) ) )
assertTrue ( converter . canConvert ( AccountActivity . class ) )
assertEquals ( "Mark is 37" , result . getValue ( ) )
assertThat ( f . toString ( ) , is ( "function fred()" ) )
Assert . assertTrue ( corbaBadParam )
assertSame ( clientCall , forward . newCall ( method , callOptions ) )
assertTrue ( MultipartUtils . shouldUseMultipart ( configuration , TOO_LARGE_FOR_MULTIPART - 1L ) )
assertSame ( TreePermission . EMPTY , pp . getTreePermission ( t , TreePermission . EMPTY ) )
assertEquals ( newFirstname , customer . getFirstName ( ) )
assertDelete ( )
Assert . assertEquals ( 1 , operation . operations . size )
assertThat ( mdcValueStr , is ( userName ) )
assertOut ( "var /** @type {RegExp} */ a = /^\\s*counter\\s*\\(\\s*ordered\\s*,\\s*/g" )
assertFalse ( "should not run other methods" , exactFilter . shouldRun ( otherMethod ) )
this . assertEdgesOkResponseJsonStructure ( 0 , 0 , response )
assertEquals ( "hello" , hello )
assertEquals ( of ( Closed . INSTANCE ) , listener . getEventLog ( ) )
assertFalse ( "Login succeed for alias not in roles.properties" , success )
assertThat ( inputStream , nullValue ( ) )
assertThat ( out , containsString ( "<birthDate value=\"2012-01-02\"/>" ) )
assertEquals ( "Expected 10 results!" , 10 , n )
assertThat ( pattern , specificPart ( is ( ",\"type\":\"log\",\"logger\":\"%replace{%logger}{\"}{\\\\\"}\",\"thread\":\"%replace{%thread}{\"}{\\\\\"}\",\"level\":\"%p\",\"categories\":%categories,\"msg\":%jsonmsg{escape},%ctxp{excluded-field},\"custom_fields\":{%cf{custom-field}}%ex{0} " ) ) )
assertEquals ( c . length , 0 )
assertLazyFieldIsJavaUtilOptionalWithValue ( this . resourceTargetedByMapping )
assertTrue ( population . size ( ) == 100 )
assertIterationsEqual ( expected , Views . iterable ( shuffled ) )
Assert . assertNotNull ( FeedLocationStore . get ( ) . store . find ( "/falcon/test/input/2014/12/12/23" , new FalconRadixUtils . FeedRegexAlgorithm ( ) ) )
assertEquals ( 2 , i . get ( ) )
Assert . areEqual ( 1 , se . getInt ( 1 ) , "数据验证" )
Assert . assertFalse ( errors . hasErrors ( ) )
assertTrue ( result )
assertNotEquals ( index1 , index2 )
JSONAssert . assertNotEquals ( "Message" , "{id:1234}" , actual , false )
assertFalse ( query ( func . args ( ) ) . isEmpty ( ) )
assertEquals ( 6 , dataMgr . getCommandHistory ( ) . size ( ) )
assertThat ( "isSame must not return true for locations created with different paths and the same properties" , locationA1 . isSame ( locationA2 ) , is ( false ) )
assertTrue ( set . contains ( m_libraryName ) )
assertEquals ( "one" , actual )
assertFocusedCell ( 4 , 1 )
assertNotNull ( result )
assertArrayEquals ( new long [ ] { 2 , 2 , 1 , 3 } , slice . getArr ( ) . shape ( ) )
assertNotNull ( Participant . reader ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( baos . toString ( ) , startsWith ( String . format ( "0 Scenarios%n" + "0 Steps%n" ) ) )
assertEquals ( 0 , v )
assertTrue ( normalizedProbability > 0 && normalizedProbability <= 1 )
Assert . assertEquals ( expResult , result )
Assert . assertEquals ( "�注�� 12 �拽�转" , t . format ( new Date ( System . currentTimeMillis ( ) + 1000 * 60 * 12 ) ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
assertTrue ( res . hasMessages ( Message . Level . ERROR ) )
assertTrue ( timestamp > 0 )
assertEquals ( "the url should be http://localhost/api/rest/v1/staffEducationOrgAssignmentAssociations" , "http://localhost/" + PathConstants . API_SERVER_PATH + "/staffEducationOrgAssignmentAssociations" , url . toString ( ) )
assertNotEmptyAndClear ( writer )
assertNotNull ( resolver )
Assert . assertEquals ( actual , "yy-mm-dd" )
assertTrue ( impl . proxyRevalidate ( entry ) )
assertEquals ( response . get ( 0 ) , testResponse . get ( 0 ) )
assertEquals ( 22 , methods . size ( ) )
assertEquals ( elements . size ( ) , urls . length )
assertEquals ( "xsd:NMTOKEN" , prefixedName )
Assert . assertNull ( ArrayUtils . get ( array , 1 ) )
assertEquals ( xmlString , captureString . getValue ( ) )
assertTrue ( IsoMatcher . isomorphic ( dsgData , dataset . asDatasetGraph ( ) ) )
Assert . assertEquals ( clazz , converter . convertFrom ( clazz . getCanonicalName ( ) ) )
Assert . assertEquals ( setA . hashCode ( ) , setB . hashCode ( ) )
assertNotNull ( "ID should not be null" , id )
assertEquals ( 1 , expectedLinks . size ( ) )
Assert . assertEquals ( ADParagraphStreamTest . NUM_SENTENCES , count )
assertNotNull ( result )
assertThat ( watchers . of ( question ) , empty ( ) )
test . assertOutput ( "data" , input , "data2" , output )
runner . assertAllFlowFilesTransferred ( SelectHive_1_1QL . REL_FAILURE , 1 )
assertEquals ( match , matcheCounts [ 0 ] - matcheCounts [ 2 ] )
assertTrue ( topLevel == MongoTopLevel . INCONSISTENT )
Assert . assertEquals ( "width=340 height=200\r\n" , readText ( decoder ) )
Assert . assertFalse ( verifyTest ( crlBuilder ) )
assertTokens ( Tokens . ID , Tokens . PLUS , integer ( 10 ) )
assertEquals ( 4000. , Time . parseTimeToSeconds ( time ) , 0.01 )
Assert . assertNull ( "List is not null" , list )
Assert . assertEquals ( 2 , instance . get ( 1 ) . intValue ( ) )
assertThat ( intervals , is ( expected ) )
Assert . assertEquals ( config , result )
Assert . assertFalse ( result )
assertEquals ( 10 , sqlTemplate . getMetaData ( context . getEntityResolver ( ) ) . getQueryTimeout ( ) )
assertThat ( target2 . getSubscriberId ( ) , is ( "subscriber_id" ) )
assertEquals ( "Select with exists check" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertEqualHQL ( "allen love dandan" , sb . toString ( ) )
assertEquals ( resp . getCode ( ) , 204 )
assertEquals ( "< 1.0" , r1 . toString ( ) )
Assert . assertNotNull ( "Languages are null." , languages )
Assert . assertEquals ( "ITEM 001Product             00005\n" , result )
assertTrue ( BooleanIndexing . or ( array , Conditions . greaterThan ( 1e-6f ) ) )
assertEquals ( "Columns size is wrong" , 2 , columns . size ( ) )
assertEquals ( "/_snapshot/kangsungjeon/leeseohoo,kangsungjeon" , getSnapshotRepository . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertTrue ( listChesse . getTotalAmount ( ) == 1005 )
assertEquals ( expectedResult , OSValidator . isSolaris ( ) )
Assert . assertEquals ( 8.5 , doc2 . getContentField ( "out" ) )
Assert . assertTrue ( true )
assertEquals ( Status . ERROR , status )
assertTrue ( arrayBuffer . isAvailable ( ) )
assertNull ( res )
assertEquals ( 30 , ( int ) new AcceptsLambda < Integer > ( ) . accept ( x :: addInts ) )
assertNotNull ( result )
Assert . assertEquals ( expect_sql , sql )
assertTrue ( obj . containsKey ( "foo" ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
Assert . assertEquals ( 1 , an . analyze ( new CandidateNode ( new CandidateRule ( "test" , rule ) , nnode ) , results ) . size ( ) )
assertNotNull ( result )
assertTrue ( "message should be authenticated" , verifyMAC ( message , mac ) )
assertThat ( getTemplateLabel ( jobSpec , LabelConstants . CREATEDBYOPERATOR_LABEL ) , equalTo ( "true" ) )
Assert . assertTrue ( provider . isKeyword ( "SELECT" ) )
Assert . assertTrue ( fs . exists ( target ) )
Assert . assertEquals ( "Rule computation was called " + n + " times" , 1 , n )
assertTrue ( queryResponse . getMatchingResults ( ) > 0 )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertTrue ( clientWrapper . add ( "test" , 1000 , "value" , transcoder ) )
assertEqualIntVectors ( expct , v3 )
Assert . assertEquals ( 27. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 3 ) , route ) , 0.01 )
Assert . assertFalse ( encounter . equals ( order ) )
assertNull ( result )
assertEquals ( id . getLexicalForm ( ) , "A" )
Assert . assertEquals ( TxStatus . TransactionHeuristicRollback . name ( ) , participantInformation . getStatus ( ) )
assertNull ( presenter . identifier )
arrays . assertHasSize ( description , null , 8 )
assertEquals ( 7 , smsd1 . getQuery ( ) . getAtomCount ( ) )
Assert . assertEquals ( 12 , p . i ( 4 , new C2 ( ) ) )
assertTrue ( users . stream ( ) . anyMatch ( v -> u . equals ( v ) ) )
assertHtml ( childrenHtml , "children=1" )
Assert . assertEquals ( count , chronicle . getNumEvents ( 0 , count * period ) )
Assert . assertNull ( part )
assertNotNull ( Key . fetcher ( "FLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "KYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "GBP12.50 charged" , sub . replace ( "${code}${amount} charged" ) )
assertNotNull ( date )
Assert . assertEquals ( 1 , updates . getOperations ( ) . size ( ) )
assertEquals ( latch . getCount ( ) , 0 )
assertThat ( actual , is ( "server1.mycompany.com" ) )
assertThat ( drawingMotion . average ( ) , equalTo ( drawingMotion . getStart ( ) ) )
assertEquals ( "John Doe" , RecordPath . compile ( "/name[contains(substringAfter(., 'o'), 'h')]" ) . evaluate ( record ) . getSelectedFields ( ) . findFirst ( ) . get ( ) . getValue ( ) )
assertEquals ( 2 , mongoStore . size ( ) )
assertEquals ( 1 , listener . updatedInjectedFilters . size ( ) )
assertThat ( "getValue" , node . getValue ( ) , is ( false ) )
assertEquals ( "2 + 3" , expr . getParameterValue ( ) )
Assert . fail ( "Missing required input" )
assertTrue ( ContextDataFactory . createContextData ( ) instanceof FactoryTestStringMap )
assertEquals ( 3 , map . size ( ) )
assertEquals ( expResult , result , 1 )
assertEquals ( asSet ( "nonExistentId" , "xForm:nonExistentId" , "ySubview:nonExistentId" ) , resolvedIds )
assertEquals ( g1 , g2 )
Assert . assertNotNull ( node )
assertFalse ( TeiidURL . isValidServerURL ( SERVER_URL ) )
assertEquals ( false , CollectionUtils . isNotEmpty ( coll ) )
assertEquals ( 1024 , testInt )
assertEquals ( null , sut . transform ( null ) )
assertEquals ( "Config" , caller . getResponseBody ( ) )
assertSame ( System . getProperty ( "user.name" ) , value . getValue ( ) )
assertNotNull ( Files . getFileAttributeView ( gfs . getPath ( "/file.txt" ) , PosixFileAttributeView . class ) )
assertEquals ( criterion2 , instance . not ( criterion1 ) . getQueryCriterion ( ) )
assertTrue ( events . size ( ) == 5 )
assertThat ( "��瑷�" + i + "瑕�涔���3,瑕�涔���6" , i , either ( is ( 3 ) ) . or ( is ( 6 ) ) )
Assert . assertEquals ( "abc" , html )
assertNotNull ( result )
assertEquals ( "Revision null ()" , nullRevision . toString ( ) )
assertTrue ( "IllegalArgumentException expected" , ex . getCause ( ) instanceof IllegalArgumentException )
assertOut ( "/**\n * @constructor\n */\norg.apache.royale.A = function() {\n};" )
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/view-hardcoded-params" ) )
assertEquals ( testValueCanonical , rval )
assertEquals ( new Success ( 2 ) , fn . apply ( 1 ) )
assertEquals ( PCEPErrors . UNKNOWN_PLSP_ID , this . errorsSession1 . get ( 0 ) )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
Assert . assertTrue ( Arrays . equals ( valResult , Bytes . toBytes ( "val1" ) ) )
assertEquals ( "The numeric value " + encodeValue + " should be encoded to '" + expected + "'" , expected , alphaNumericCodec . encode ( encodeValue ++ ) )
assertToken ( profile , token )
Assert . assertEquals ( getExpectedDelegationTokenCount ( ) , delTokens . size ( ) )
assertThat ( result , Matchers . equalTo ( "test=blah" ) )
assertEquals ( "from ((select SURVEY.NAME, SURVEY.NAME2, SURVEY.ID\n" + "from SURVEY SURVEY)\n" + "union\n" + "(select SURVEY.NAME, SURVEY.NAME2, SURVEY.ID\n" + "from SURVEY SURVEY)) as SURVEY" , q . toString ( ) )
assertThat ( getMatchingContainerEnv ( domainPresenceInfo , jobSpec ) , allOf ( hasItem ( configMapKeyRefEnvVar ) , hasItem ( secretKeyRefEnvVar ) , hasItem ( fieldRefEnvVar ) ) )
assertEquals ( h , TextUtil . stripNewlines ( out ) )
assertNull ( event )
Assert . assertEquals ( 1.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
assertTrue ( entrySet . isEmpty ( ) )
assertTrue ( jsonValue . isNull ( ) )
assertArrayEquals ( new byte [ ] { 1 } , Files . readAllBytes ( symLink3 ) )
assertNotNull ( "pre 1.8 storageInfo should return non null access latency" , accessLatency )
assertTrue ( getStdErr ( ) . indexOf ( "The ftp URI scheme is not allowed" ) != - 1 )
assertEquals ( "{" + newLine ( ) + "    modify ($p) { setAge($p.getAge() + 1) };" + newLine ( ) + "}" , printConstraint ( expression ) )
assertEquals ( expectedJson , message . toJson ( ) )
assertSerializable ( new ArtifactDescriptorException ( result ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( err , "File, 'EasyMock for class java.io.File' is not a directory." )
assertEquals ( StatusCode . INVALID_STREAM_NAME , response . getCode ( ) )
this . assertGet ( "servicetemplates/" , BAOBAB_JSON_PATH )
assertEquals ( insertNum , count )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "18 months" , 18 , "month" , 0 , null , "time" ) )
assertTrue ( entity . getId ( ) > 0L && entity . getSex ( ) == null )
assertEquals ( "Johny, Smithy" , value )
Assert . fail ( )
assertFalse ( voter . voteMatch ( affiliation , organization ) )
assertNoneEqual ( otherGroupFqans )
assertConstraintViolationPropertyValidation ( constraintViolations )
assertTrue ( false )
assertEquals ( HttpServletResponse . SC_OK , resp . getStatus ( ) )
assertEquals ( "checker should return 'disabledStatus' string" , "disabledStatus" , checker . run ( ) )
assertNull ( dao . read ( nonce . getNonce ( ) ) )
Assert . assertEquals ( inputCardinality , subplanCtx . getOutputCardinality ( 0 ) )
observer . assertObservations ( "7" , PhaseId . PROCESS_VALIDATIONS )
Assert . assertTrue ( ( ( LocatorTargetSelector ) client . getConduitSelector ( ) ) . getStrategy ( ) instanceof RandomSelectionStrategy )
assertEquals ( 84 , id3tag . getBPM ( ) )
assertTrue ( thePosition . getClassInformation ( ) instanceof PositionClassInformation )
assertFalse ( handled )
assertThat ( p . type , is ( Packet . UPGRADE ) )
assertEquals ( "0 days, 00:05:12" , howLongFromNow )
assertTrue ( valid )
Assert . assertNull ( pattern )
assertNotNull ( new Patterns ( ) . getPattern ( entityId ) )
assertEquals ( "The first state on last page is not correct" , FIRST_STATE_LAST_PAGE , actual )
assertEquals ( "/genPath" , path )
assertThat ( stepListener . getCurrentTestOutcome ( ) . getTestSteps ( ) . get ( 0 ) . getDescription ( ) , is ( "final title" ) )
CustomAsserts . assertEquals ( definition , expected , actual )
assertEquals ( 5500 , safe . get ( ) )
Assert . assertEquals ( "2013-01-24T06:35:00.000Z" , DateTimeConverters . JodaDateTimeConverter . INSTANCE . convert ( dateTime ) )
assertEquals ( LocalDateTime . of ( 2012 , 6 , 4 , 0 , 0 ) , test )
assertThat ( matcher1 . equals ( matcher2 ) , is ( true ) )
assertEquals ( 0 , records . size ( ) )
assertEquals ( field . getLabel ( ) , "name" )
assertProcessInstanceCompleted ( processInstance )
Assert . assertEquals ( message . name ( ) + " (" + language + ")" , source . getFormatsByArgumentIndex ( ) . length , translated . getFormatsByArgumentIndex ( ) . length )
assertThat ( description . toString ( ) , is ( "<3> cell(s) on row <1> sheet \"Sheet1\"" ) )
assertTrue ( isFocusInsideElement ( checkBoxGroup ) )
assertEquals ( taskService . createTaskQuery ( ) . singleResult ( ) . getTaskDefinitionKey ( ) , "afterBpmnError" )
Assert . assertEquals ( "Expected number of initial entries not found" , 2 , response . getLoadBalancers ( ) . size ( ) )
assertEquals ( expecting , result )
assertThat ( value . isPresent ( ) , is ( equalTo ( false ) ) )
assertThat ( result , is ( Collections . singletonList ( "setMyField" ) ) )
assertThat ( testValues , is ( expectedValues ) )
assertThat ( response , containsString ( "invalid range: Not within 1-1" ) )
Assert . assertEquals ( 1 , children . size ( ) )
assertEquals ( "" , result )
assertEquals ( null , result )
assertThat ( ( String ) Whitebox . invokeMethod ( target , "getConvNetworkId" , nwId ) , is ( "network01" ) )
assertFalse ( connection . connect ( ) )
assertEquals ( mappedEntityID + "_" + mappedEntityType , event . getEntityForNaming ( false , true , false ) )
assertEquals ( 1 , count )
Assert . assertTrue ( bpInfo1 . equals ( bpInfo2 ) )
Assert . assertEquals ( Syntax . XWIKI_2_1 . toIdString ( ) , syntaxId )
assertEquals ( HttpURLConnection . HTTP_NOT_FOUND , code )
Assert . assertFalse ( ctx . getResult ( ) )
assertEquals ( expectedMessage , result )
assertEquals ( r1 , r2 )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( expected , actual )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2008 , 2 , 15 ) , OFFSET_PONE ) , t )
assertThat ( unlocked . getInteger ( ) , equalTo ( 2 ) )
assertNotNull ( entity . getId ( ) )
assertNull ( result )
Assert . assertTrue ( result )
assertCoordinates ( 1 , HEIGHT - 1 )
Assert . assertTrue ( authorizeInteraction )
assertEquals ( Arrays . asList ( "aa" , "bb" ) , list )
assertTrue ( me . isNewMsg ( ) )
assertEquals ( "" , result )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
assertTrue ( gridLienzoScrollBounds . hasVisibleBounds ( ) )
Assert . assertEquals ( 150 , terminatedAfter )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertBoard ( "�尖�尖�尖�尖��\n" + "��***��\n" + "��*�衡�尖��\n" + "��***��\n" + "�尖�尖�尖�尖��\n" )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , "12.3" ) )
assertEquals ( "Parser error: DeviceProvisioningServiceName mismatch!" , expected , actual )
assertEquals ( mockRootPom , converter . convertFromText ( ROOT_MODULE_SYMBOL , null , null ) )
AssertAnnotations . assertSentence ( sentences , select ( jcas , Sentence . class ) )
Assert . assertTrue ( "CheckBox should be selected" , toggle . isSelected ( ) )
Assert . assertEquals ( path , "dir" + File . separatorChar + "dir2" )
Assert . assertTrue ( result . get ( result . firstKey ( ) ) instanceof TombstoneValue )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertAxisEquals ( timeInterval , new ArrayDouble ( 1.0 / 18.0 , 6.0 / 18.0 , 11.0 / 18.0 , 16.0 / 18.0 ) , Arrays . asList ( TimeScalesTest . create ( 2014 , 12 , 24 , 23 , 59 , 59 , 990 ) , TimeScalesTest . create ( 2014 , 12 , 24 , 23 , 59 , 59 , 995 ) , TimeScalesTest . create ( 2014 , 12 , 25 , 0 , 0 , 0 , 0 ) , TimeScalesTest . create ( 2014 , 12 , 25 , 0 , 0 , 0 , 5 ) ) , Arrays . asList ( "2014/12/24 23:59:59.990" , ".995" , "2014/12/25 00:00:00.000" , ".005" ) , timeAxis )
Assert . assertEquals ( 6.0 , calc . evaluate ( "- this is a test,ref2,*" ) , 0.0 )
assertThat ( path . getString ( NO_OP_ENCODER ) , is ( "/{http://www.modeshape.org/1.0}a/{}b/{http://www.modeshape.org/1.0}c/../{}d/./{http://www.modeshape.org/1.0}e/../.." ) )
Truth . assertThat ( outputStream . toString ( ) )
assertEquals ( "en" , i18nRewriter . getLocaleNameForLoadingI18NConstants ( localeAtRendering ) )
assertTrue ( "Accepts a method that returns a Page" , interceptor . accepts ( resourceMethodThatReturnsPage ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( 80 , uniqueWords )
Assert . assertFalse ( new ProcessorDecorator ( processor ) . isMinimize ( ) )
assertThat ( replaced , is ( existingEditRelation ) )
assertTrue ( HttpTestUtils . semanticallyTransparent ( resp2 , result ) )
assertEquals ( "Got wrong answer for supports" , false , actual )
Assert . assertEquals ( "{\"@charlie\":\"david\",\"$\":\"bob\"}" , result . toString ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Script" , result )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( "Hello World" . substring ( 2 , 7 ) , bytes . parseUtf8 ( CONTROL_STOP ) )
assertArrayEquals ( CAFEBABE_MD5 , md5 )
Assert . assertFalse ( "Expected tuples to be different" , Utils . equals ( t1 , t2 ) )
assertLife ( playerB , 3 )
Assert . assertEquals ( 0 , patients . size ( ) )
assertTrue ( splitByColon . size ( ) == 6 )
assertEquals ( "Did not get expected parameter count" , 3 , params . size ( ) )
assertEquals ( "Pertty" , request . getSession ( ) . getAttribute ( UsernamePasswordCheckcodeAuthenticationFilter . SPRING_SECURITY_FORM_USERNAME_KEY ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( FILE_BASE ) ) )
assertEquals ( "HARD" , fileEntry . getLockType ( ) )
assertEquals ( "<html><head></head><body></body></html>" , rewritten )
assertNull ( sut . execute ( new DeleteActivityRequest ( smithersId , bogusId ) ) )
assertThat ( environmentVariables . getProperty ( "webdriver.driver" ) , is ( "safari" ) )
Assert . assertEquals ( configuration . getDubboBootstrapMains ( ) . size ( ) , 0 )
assertSame ( context . unwrap ( HibernateMessageInterpolatorContext . class ) . getRootBeanType ( ) , rootBeanType )
assertInvocations ( invocations , "prepare" , "commit" )
assertTrue ( "Coercing to VARBINARY failed for PDataType " + p , obj instanceof byte [ ] )
assertThat ( constant ( Descriptions . valueOf ( array ) ) , equalTo ( ( Object ) array ) )
assertEquals ( "World" , source . name ( ) )
assertThat ( PrettyTime . of ( Locale . FRANCE ) . print ( dur , TextWidth . WIDE , true , 8 ) , is ( "1 jour, 0 heure, 4 minutes, 0 seconde et 123 microsecondes" ) )
assertTrue ( ! result )
assertFalse ( IQSyntacticEquivalenceChecker . areEquivalent ( query , query1 ) )
assertThat ( c . resolve ( schema ) , is ( nullValue ( ) ) )
assertEquals ( "Expected 100 results!" , 100 , n )
assertEquals ( result , expected , 0.0000001 )
Assert . assertTrue ( 1 == _c . convert ( "1" ) )
assertThat ( Template . parse ( source ) . render ( ) , is ( "" ) )
assertEquals ( "Wrong # of objects found" , 1 , count )
Assert . assertTrue ( inBlackList )
assertEquals ( 0 , dao . create ( ( Foo ) null ) )
assertEquals ( "Expected 5 results!" , 5 , n )
Assert . assertTrue ( "The expected values were not send. The missing values are " + expectedValueMap , expectedValueMap . isEmpty ( ) )
assertFalse ( target . exists ( ) )
Assert . assertThat ( builder . toString ( ) , Matchers . startsWith ( "ConcurrentlyModifiedDuringToString" ) )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigThreadCompact ( ) ) . isTraceEnabled ( ) )
assertThat ( element . getAttribute ( "testattribute" ) , is ( equalTo ( "123" ) ) )
this . assertHeadersSet ( CONTEXT + "/topics/25044" )
assertThat ( house . getMouse ( ) . getName ( ) , is ( equalTo ( "James" ) ) )
assertTrue ( text . compareTo ( "POLYGON ((-10 -10, 10 -10, 10 10, -10 10, -10 -10))" ) == 0 )
assertEquals ( outputExpect , output )
Assert . assertNull ( u )
assertFix ( "8=FIX.4.4|9=64|35=2|34=1|49=CLIENT|52=20140101-10:10:10.100|56=SERVER|7=1|16=1|10=199|" )
assertThat ( encodedValue , equalTo ( GLOBAL_ENCODED_SHA_256_VALUE ) )
editor . assertProblems ( "z-bogus|unknown 'AvailabilityZone'. Valid values are: [z1, z2, z3]" )
assertEquals ( "{ a : [ { a : 1 } ] }" , doc )
Assert . assertEquals ( 2844047 , rows )
assertNotNull ( Participant . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( subject . hasValidCredential ( preparedUpdate , updateContext , Sets . newHashSet ( offeredCredential ) , knownCredential ) , is ( true ) )
assertThat ( options . isStrict ( ) , is ( false ) )
assertHierarchyIsEmpty ( )
assertEquals ( 2 , services . size ( ) )
assertThat ( mySignalHandler . wasCalled , IsEqual . equalTo ( true ) )
assertEquals ( Arrays . asList ( filter2 , filter1 ) , returned )
assertEquals ( "" , result )
Assert . assertEquals ( msg , expected , actual , delta )
assertFalse ( emptySecurityHelper . isPentahoAdministrator ( any ( ) ) )
assertEquals ( 2 , calculator . add ( 1 , 1 ) , "1 + 1 should equal 2" )
Assert . assertNotNull ( get )
assertEquals ( "abc" , buf . getTail ( ) )
Assert . assertTrue ( fitResidualSum < noisyResidualSum )
Assert . assertEquals ( "Text should be the same" , text , toggle . getText ( ) )
assertions . isSorted ( )
assertEquals ( 20 , results . size ( ) )
assertEquals ( 2 , collectorStore . length ( ) )
Assert . assertEquals ( SearchAction . POPUP_VIEW , streetSearchAction . searchpopup ( ) )
assertEquals ( 100 , ( int ) tree . entries ( ) . count ( ) . toBlocking ( ) . single ( ) )
assertEquals ( "Wrong visited nodes" , expected , visitor . getVisitedNodes ( ) )
assertResultSet ( res )
assertNull ( "No AlarmCallbackConfiguration should have been returned" , config )
assertEquals ( expected , out )
assertTrue ( newYearsDay . isAfter ( newYearsEve ) )
assertThat ( result . size ( ) , is ( 1 ) )
assertEquals ( "Expected 100 results!" , 100 , n )
assertNotNull ( result )
Assert . assertTrue ( aux . contains ( "TRANSFORMATION CHAIN SUCCESS" ) )
Assert . assertTrue ( contentType , contentType . contains ( "text/plain" ) )
assertRequest ( "DELETE" , "Call/%s/Speak/" , callId )
assertEquals ( uuid1 , uuid2 )
Assert . assertEquals ( "oldId" , newActualId )
assertEquals ( msg , i , curVal )
assertEquals ( 1 , inverses . size ( ) )
assertTrue ( "File audit log should be created" , ops . exists ( TEST_FILE_AUDIT_LOG_ADDRESS ) )
assertFalse ( matchResult )
assertNull ( getWithTimeout ( abort ) )
assertEquals ( "��丿 �丨馗� 丿�诏乇" , t . format ( new Date ( ) ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertEquals ( 1 , count )
assertEquals ( JavaMailJMSStatistics . NOTIFICATION_TYPE_SUCCESS , result . toString ( ) )
assertResultSet ( res )
assertEquals ( "org.talend.components.kinesis.runtime.KinesisDatastoreRuntime" , runtimeInfo . getRuntimeClassName ( ) )
assertThat ( query . getQuery ( ) , is ( expectedToString ) )
assertEquals ( false , options . isRecursive ( ) )
assertTrue ( message . contains ( "CheckedArrayList<String>" ) )
assertEquals ( ScenarioSimulationModel . Type . DMN , retrieved . getSettings ( ) . getType ( ) )
Assert . assertEquals ( expected , actuals )
assertNotNull ( alumnoPaquete . getId ( ) )
assertAxisEquals ( 0.00001 , 0.0004 , new double [ ] { 0.0001 , 0.0002 , 0.0003 , 0.0004 } , new String [ ] { "1e-4" , "2e-4" , "3e-4" , "4e-4" } , axis )
assertEquals ( 3 , arr . reduce ( callbackfn ) . intValue ( ) )
assertEquals ( getMessage ( MessageKeys . E_TR_FW_0006 ) , driver . findElement ( By . cssSelector ( "p" ) ) . getText ( ) )
assertThat ( validDockerContainer , is ( notNullValue ( ) ) )
assertEquals ( expResult , result )
assertFalse ( result )
assertParse ( "productline PL; features FM;" + "product P();" + "root FM { Int attr; }" )
assertThatSliderValueIs ( maximumOf ( slider ) )
assertEquals ( "" , cellRenderer . getText ( ) )
Assert . assertTrue ( terminated )
Assert . fail ( "LoggingServlet messages should be presented only in files specified in profiles, but found: " + line )
assertSame ( mockIs , IdentityInputStreamMarshaller . of ( ) . stream ( mockIs ) )
assertThat ( request . getTimeLoaded ( ) , is ( notNullValue ( ) ) )
assertNull ( OpenShiftContext . get ( ) . get ( "foo" ) )
Assert . fail ( "ServletExtension should not accept staleWhileRevalidate" )
Assert . assertEquals ( 128 , bytes . length )
assertThat ( messages . getList ( ) , is ( Arrays . asList ( msg1 , msg2 ) ) )
assertContextOk ( ctx , "O1:doc:doc,O2:doc:ref,O1:ref:doc" , "Hello 1!,Hello 2!,Hello 3!" , "Source,Source,Source" )
assertEquals ( 1 , request . nodes ( ) . size ( ) )
assertTrue ( _wardenService . isWardenServiceEnabled ( ) )
assertThat ( out . toString ( ) , containsString ( "Using timeout for story a_short.story of 300" ) )
assertThat ( isEquals , is ( true ) )
assertEquals ( 3 , query . count ( ) )
assertSingleIssue ( issues , 5 , "Function expression." , "5min" )
assertEquals ( ts , t . exec ( newTuple ( input ) ) )
assertEquals ( 10.0 , Solutions . bestOf ( solutions ) . getRoutes ( ) . iterator ( ) . next ( ) . getStart ( ) . getEndTime ( ) , 0.1 )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
assert_ambiguous ( "box_varargs" , i )
Assert . assertTrue ( executor . awaitTermination ( 120 , TimeUnit . SECONDS ) )
Assert . assertEquals ( expResult , result )
assertThat ( history . selectLast ( - 4 ) , contains ( exit ( ) , dumpTo ( "C:\\Users\\franckc" ) , history ( ) , version ( ) ) )
Assert . assertNull ( actual )
assertTrue ( exceptionThrown )
assertEquals ( "<div> jsoup </div>" , doc . body ( ) . html ( ) )
Assert . assertNull ( job )
assertThat ( families , arrayContaining ( "Cloud/Snowflake" ) )
assertThat ( schema , allOf ( hasEntry ( is ( TYPE_2 ) , hasProperty ( "predicates" , allOf ( hasItem ( predicate ( ) . withName ( PROP_I ) . withDirection ( OUT ) . withReferenceType ( TYPE_3 ) ) ) ) ) , hasEntry ( is ( TYPE_3 ) , hasProperty ( "predicates" , allOf ( hasItem ( predicate ( ) . withName ( PROP_I ) . withDirection ( Direction . IN ) . withReferenceType ( TYPE_2 ) ) ) ) ) ) )
assertEquals ( "valueA" , pc . getString ( "keyA" ) )
assertFalse ( mainIsHidden )
assertEquals ( "3 millennia from now" , "浠�����3000骞村�" , t . format ( new Date ( 3155692597470L * 10L * 3L ) ) )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
assertNotNull ( transitiveAnnotation )
assertEquals ( ace , parsed )
assertNullOrEmpty ( MultiTainter . getMergedTaint ( arr ) )
Assert . assertTrue ( error != null && info != null )
assertFalse ( iter . hasNext ( ) )
assertTrue ( String . format ( "geoPos at <%d> is invalid" , i ) , geoPos . isValid ( ) )
assertEquals ( 3l , session . from ( $ ( emp ) ) . where ( $ ( emp ) . in ( emp1 , emp2 , emp3 ) ) . count ( ) )
Assert . assertEquals ( "max value" , Double . valueOf ( 857.0 ) , maximumTotalOrderValue )
Assert . assertEquals ( "Frankie" , u . getUserName ( ) )
assertThat ( tester . getMessages ( FeedbackMessage . ERROR ) . size ( ) , is ( 1 ) )
assertThat ( range1 . isFinite ( ) , equalTo ( false ) )
assertTrue ( valid )
assertTrue ( false )
assertEquals ( "{\"error\":{\"code\":null,\"message\":null}}" , jsonString )
assertEquals ( "Serialised data set" , SourceXML . COMPOSITE_PRIMARY_KEY , dummyXmlOutputStreamProvider . getXmlString ( ) . trim ( ) )
assertEquals ( Arrays . asList ( "\n" , "The quick brown fox jumped over the lazy dog." ) , lines )
Assert . assertEquals ( 0 , labels . size ( ) )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . NOW )
assertNotNull ( inputStream )
Assert . assertEquals ( Logger . EVENT_UNSPECIFIED . toString ( ) , markerCapture . getValue ( ) . getName ( ) )
assertEquals ( "GBP 1.11" , test . toString ( ) )
assertNotNull ( url )
Assert . assertEquals ( expectedResult , res )
assertEquals ( true , result )
assertTrue ( rule . isVersionValid ( null ) )
assertNotNull ( team1 . getId ( ) )
assertArrayEquals ( expected , Proto . build_fixed_str ( 3 , str ) )
assertEquals ( uuid , urlToken )
assertEquals ( "22-16157603-G-C" , argument . getValue ( ) . getTranscript_consequences ( ) . iterator ( ) . next ( ) . getVariant_id ( ) )
assertTrue ( a . containsTagInRange ( Tag . IssuerOfPatientID , Tag . SourcePatientGroupIdentificationSequence ) )
assertNoOrders ( )
assertEquals ( asUnorderedSet ( o . logicalAxioms ( ) ) , asUnorderedSet ( o1 . logicalAxioms ( ) ) )
assertBeanValidation ( json , "query.metric[0].aggregators[0].m_divisor may not be zero" )
Assert . assertTrue ( MsgUtils . compareIgnoringWhiteSpaces ( serializedRequest , fu . readFile ( "SecurityListRequest.xml" ) ) )
Assert . assertNotNull ( addressResultsDto )
assertThat ( node . getIdentifier ( ) , is ( notNullValue ( ) ) )
assertNotNull ( result )
assertEquals ( 2 , result . size ( ) )
assertOutsideEqualsValue ( "M_PI" , Math . PI )
assertThat ( requestedShutdownCallable . call ( ) , equalTo ( false ) )
assertThat ( parents , contains ( propertyB ) )
assertEquals ( asList ( "FOOFOO" , "BARBAR" , "BAZBAZ" ) , result )
assertImagesEqual ( servedImage , storedImage )
assertThat ( target , is ( instanceOf ( BasicFlowMatch . class ) ) )
assertThat ( msg , startsWith ( "Abort, file already exists" ) )
assertEquals ( false , result )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
Assert . assertEquals ( count , 4 )
assertEquals ( CONTEXT_PATH + "/patternBaseUri/noPattern" , picketLinkRequest . get ( ) . getRequestURI ( ) )
assertEquals ( "Expects to retrieve the 2 patients which reference the two different organizations" , expectedIds , actualIds )
assertEquals ( Arrays . asList ( expected . build ( ) ) , builder . build ( ) . getPipeline ( ) )
assertTrue ( actionServiceRegistered )
Assert . fail ( Driver . class . getName ( ) + " not registered as a Service" )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2007 , 7 , 1 ) , OFFSET_PONE ) , t )
assertTrue ( executor . getException ( ) instanceof V8ScriptCompilationException )
Assert . assertEquals ( 1L , result . at ( 0 ) . getLong ( 0 ) . longValue ( ) )
assertNull ( value )
assertEquals ( "" , c . getStyleName ( ) )
assertNotNull ( "security level should be set in client attributes" , connectionClient . getAttributes ( ) . get ( GrpcAttributes . ATTR_SECURITY_LEVEL ) )
assertThat ( sw . toString ( ) , is ( "{\"hoge\":0}" ) )
assertEquals ( "<span>Ball</span><span>Car</span>" , output )
assertTrue ( translator . isMethodSupported ( "refreshUserToGroupsMappings" ) )
assertThat ( actual , is ( equalTo ( n ) ) )
assertIntValues ( array , 1 , 3 )
assertNull ( emailer . getProperties ( ) . getProperty ( "bcc" ) )
Assert . assertEquals ( createKeySpace . createQuery ( query ) , query . getCustomQuery ( ) )
assertTrue ( g1 instanceof PublicCloneable )
Assert . fail ( "Missing required input" )
assertEquals ( 10.0 , lin . sumNumber ( ) . doubleValue ( ) , 1e-1 )
assertTrue ( resolver . resolve ( "sit" ) . equals ( "137.251.22.69" ) )
assertEquals ( "a comment" , testSet . getTestResult ( 1 ) . getComments ( ) . get ( 0 ) . getText ( ) )
assertEquals ( 0 , cache . size ( ) )
assertTrue ( allZeros )
assertEquals ( 10 , classUnderTest . getGeneralCompletionConfig ( ) )
assertEquals ( "Method #getAnalyzer is wrong" , "org.apache.lucene.analysis.en.EnglishAnalyzer" , mapper . analyzer )
assertEquals ( expResult , result )
assertTrue ( thread . getState ( ) != State . WAITING )
assertEquals ( expResult , result )
Assert . assertTrue ( "Failed to list resources: " + result , Operations . isSuccessfulOutcome ( result ) )
assertThat ( conf , containsString ( "<interaction><code value=\"" + TypeRestfulInteraction . HISTORYINSTANCE . toCode ( ) + "\"/></interaction>" ) )
assertFalse ( completed . get ( ) )
Assert . assertTrue ( "Verify log message" , LogUtils . awaitLogMessage ( ".*logger-slf4j].*Message from SLF4J$" , 5000 ) )
assertTrue ( "Initial selection should be visible" , $ ( GridElement . class ) . first ( ) . getRow ( 1 ) . isSelected ( ) )
assertNotEquals ( feather . instance ( Plain . class ) , feather . instance ( Plain . class ) )
assertEquals ( count , query ( ) . from ( cat ) . orderBy ( cat . id . stringValue ( ) . asc ( ) ) . select ( cat ) . fetch ( ) . size ( ) )
assertThat ( g . bind ( input , inputFuture ) . run ( ) . get ( ) , equalTo ( 5 ) )
assertEquals ( "The Entities should be equals" , manufacturer , found )
assertEquals ( "RESOURCE" , r . get ( String . class ) )
assertThat ( registrations , containsInAnyOrder ( allOf ( hasProperty ( "name" , is ( "foo" ) ) , hasProperty ( "uri" , is ( URI . create ( "classpath:/foo-source" ) ) ) , hasProperty ( "metadataUri" , is ( URI . create ( "classpath:/foo-source-metadata" ) ) ) , hasProperty ( "type" , is ( ApplicationType . source ) ) ) , allOf ( hasProperty ( "name" , is ( "bar" ) ) , hasProperty ( "uri" , is ( URI . create ( "classpath:/bar-source" ) ) ) , hasProperty ( "metadataUri" , is ( URI . create ( "classpath:/bar-source-metadata" ) ) ) , hasProperty ( "type" , is ( ApplicationType . source ) ) ) , allOf ( hasProperty ( "name" , is ( "foo" ) ) , hasProperty ( "uri" , is ( URI . create ( "classpath:/foo-sink" ) ) ) , hasProperty ( "metadataUri" , nullValue ( ) ) , hasProperty ( "type" , is ( ApplicationType . sink ) ) ) ) )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 0 ) )
assertEquals ( expectedSize , actualSize )
assertParseTree ( rootNode ( "1+2" ) , tree )
assertTrue ( emptySet . isEmpty ( ) )
assertNotNull ( TollFree . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "^/cntrl/actn$" , pattern )
assertThat ( rdx . toString ( ) , not ( Matchers . isEmptyOrNullString ( ) ) )
assertEquals ( "3" , result . getXdmValue ( ) . itemAt ( 0 ) . getStringValue ( ) )
assertEquals ( vo . getPhoneNumbers ( ) . get ( 1 ) . getNumber ( ) , "5432109876" )
assertEquals ( map , actualMap )
assertThat ( set . size ( ) , is ( 0 ) )
Assert . assertEquals ( 8 , ( int ) max )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertActionFailedExceptionWithMessageIndicatingWriterWasUnableToActivateEditor ( )
assertEquals ( " --vanilla " , rProcessStartUpOptions . getStartUpOptionsAsCommand ( ) )
assertThat ( c , not ( nullValue ( ) ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
Assert . assertEquals ( name , InetAddressUtilities . getHostName ( ) )
assertEquals ( 0 , count )
assertEquals ( true , result [ 0 ] )
assertEquals ( false , getRemoveAnimationObjectAction ( ) . isEnabled ( ) )
assertEquals ( 1 , processInstances . size ( ) )
assertTrue ( msg . toString ( ) , expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
Assert . assertNotNull ( value )
assertContains ( e . getMessage ( ) , "'name'" )
assertNotNull ( reporter )
assertEquals ( "Unexpected status code in HTTP response." , SC_UNAUTHORIZED , statusCode )
assertions . startsWith ( sequence )
context . assertIsSatisfied ( )
assertTrue ( "Should get buffer" , responseReader != null )
assertEquals ( "Expecting well formed hql" , "from CcAndInferredLocationRecord cc ," + "ArchivedInferredLocationRecord in where cc.vehicleId= :vehicleId" + " and cc.vehicleAgencyId= :vehicleAgencyId and( cc.timeReported >= :startDate and " + "cc.timeReported < :endDate)" + " and cc.vehicleId = in.vehicleId " + "order by cc.vehicleId desc " , hql . toString ( ) )
assertVariable ( "character_set_client" , "utf8" )
assertNotNull ( AllTime . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "000000000000000000000000000000000000000000000000000000000000000a" , key . getPrivateKeyAsHex ( ) )
assertEquals ( expected , sanitized )
assertThat ( converter . convert ( formattedValue , Float . class , bundle ) , is ( equalTo ( theValue ) ) )
assertNotNull ( ids )
Assert . assertTrue ( "rolenames URL ends with /roles" , rolenames . endsWith ( "/roles" ) )
arrays . assertEndsWith ( description , null , newArray ( true ) )
assertEquals ( expResult , result )
assertEnvelopeEquals ( areaOfInterest , subEnv )
assertSeq ( new String [ ] { "<a/>" , "a" , "b" , "c" } , "remove((/top/*, 'a', 'b', 'c'), 2)" )
assertArrayEquals ( new String [ ] { "55555" , "4444" , "333" , "22" , "1" } , strings )
assertFalse ( hasPermission )
assertTrue ( "" , types != null && types . size ( ) == 1 && types . contains ( ProfileType . COMPANY_NAME ) )
assertEquals ( DATA , storage . loadPerson ( ID ) )
Assert . assertEquals ( true , agent . detectIos ( ) )
assertEquals ( 2 , parsed . getContained ( ) . size ( ) )
assertEquals ( "Expected exception doesn't occurs" , ReplyCode . KO_STREAM_OPERATION_NOT_ALLOWED . getCode ( ) , ( Integer ) code )
assertEquals ( "Mismatched data" , expected , res )
assertEquals ( SPEC0_ENTITY_FIELD , entityDef . getEntityField ( ) )
assertEquals ( expected , elements )
assertTrue ( collector . isMessageComplete ( ) )
assertNull ( wrapper . getYear ( ) )
assertEquals ( "There should be 3 lights" , 3 , lights . size ( ) )
Assert . assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getCode ( ) )
assertTrue ( comparator . compare ( "/hotels/{hotel}/**" , "/**/**" ) < 0 )
assertEquals ( subject . getResources ( ) , childContext . getResources ( ) )
assertEquals ( "Hello {Tim} {" , ResponseBodyInterpolator . interpolate ( "Hello {{name}} {" , req ) )
assertNotNull ( "readJson" , result )
result . assertErrorFreeLog ( )
assertThat ( customers . size ( ) , is ( 2 ) )
assertEquals ( result , true )
assertTrue ( output , output . matches ( "(?s).*Usage: dolines.*" ) )
assertEquals ( true , ConfigUtils . getOrElse ( config , "hello" , false ) )
assertTrue ( "testFix error !!!" , MapFile . fix ( fs , dir , IntWritable . class , Text . class , true , conf ) == PAIR_SIZE )
assertions . doesNotContain ( expected )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( clientID . getServiceID ( ) ) )
AssertJUnit . assertEquals ( output . getCurrentStateMap ( "testResourceName" , new Partition ( "testResourceName_0" ) ) . size ( ) , 0 )
assertFactorization ( poly , factors )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Stop>" + "<genericTag key=\"value\">" + "someText" + "</genericTag>" + "</Stop>" , elem . toXml ( ) )
XMLAssert . assertXpathEvaluatesTo ( String . valueOf ( true ) , "//accepted" , response )
assertEquals ( Arrays . asList ( "Bye" ) , list )
assertThat ( inst . projectExists ( "projectName" ) , is ( true ) )
assertEquals ( config . getInitialPositionInStream ( ) , InitialPositionInStream . TRIM_HORIZON )
assertNotNull ( Aws . fetcher ( "CRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 160 , query . getCacheCount ( cache , 160 ) )
assertTrue ( "testWithdrawAuth 0" , it . isWithdrawn ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertDateEquals ( dateTime , result )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( "select entity_0 from Entity entity_0 where entity_0.code = :code_1" , select . getQuery ( ) )
assertTrue ( passwordEncoder . checkpw ( plaintext , encoded ) )
assertEquals ( "invalid percent complete" , 92.0f , analysisSubmissionServiceImpl . getPercentCompleteForAnalysisSubmission ( ID ) , DELTA )
assertArrayEquals ( longng , m . getRecipients ( NEWSGROUPS ) )
Assert . assertTrue ( sut . isWeekday ( cal . getTime ( ) ) )
Assert . assertTrue ( storageAccount . isLargeFileSharesEnabled ( ) )
assertEquals ( 37.5 , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( d . returnOne ( ) , 1 )
assertEquals ( 3 , counter . getBeforeFileTreeWalkCount ( ) )
assertThat ( getTemplateLabel ( jobSpec , LabelConstants . CREATEDBYOPERATOR_LABEL ) , equalTo ( "true" ) )
Assert . assertEquals ( "Hello Kermit" , result )
assertNotNull ( result )
assertEquals ( 84 , id3tag . getBPM ( ) )
assertTrue ( eq . test ( entity . build ( ) ) )
Assert . isTrue ( "Updated Description" . equals ( newOrganization . getDescription ( ) ) && departmentList . size ( ) == newDepartmentList . size ( ) && departmentList . size ( ) > 0 )
AssertAnnotations . assertNamedEntity ( ne , select ( jcas , NamedEntity . class ) )
assertEquals ( expected , actual )
assertEquals ( expectedResult , verifyOscar . invoke ( audit ) )
assertNull ( arrayFirst )
Assert . fail ( "Cannot create EvictConfig with negative replicas" )
assertEquals ( "/projects/topic_17576/target/myclasses" , actualObj )
assertThat ( _response . getStatus ( ) , is ( CREATED ) )
assertTrue ( jsonld . contains ( vv ) )
assertEquals ( 1 , entities . size ( ) )
assertTrue ( invalid . subInterval ( someDate , someDate . plusDays ( 2 ) ) . isNotValid ( ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
assertThat ( target . readValue ( value ) , is ( false ) )
assertFalse ( batchStatistics . isSuspended ( ) )
assertThat ( logoutResponseXML , containsString ( "<samlp:LogoutResponse" ) )
assertThatAppletWasLaunched ( )
Assert . assertEquals ( 1 , comparator . compare ( currentRelease , null ) )
assertEquals ( ( i / 3 ) + " : " + testData [ i ] + ", " + testData [ i + 1 ] , expectedResult , actualResult )
assertEquals ( hash1 , hash2 )
assertThat ( result , is ( new String [ 0 ] [ 0 ] ) )
assertEquals ( 1 , TestUtils . regexCount ( img . getContent ( ) , "style=\"width:116pt;height:104pt\"" ) )
Assert . assertEquals ( json , writer . toString ( ) )
assertContentType ( person )
assertThat ( augustHours , closeTo ( 184.0 , 0.1 ) )
Assert . assertTrue ( responseList . size ( ) < 2 )
assertEquals ( 3 , result . scoreDocs . length )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( "��浠�Hash�￠����璇�" , "4FE6FF69F7257F2E8C36B0752B5393BF" , FileUtil . fileMD5 ( new File ( file ) ) . toUpperCase ( ) )
assertEquals ( expected , actual )
assertIteratedKeys ( x , "1" , "10" , "100" )
assertTrue ( errorsContainer . equals ( errors ) )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=ended&minSupportCount=50" ) )
assertEquals ( 1 , foundPosts . size ( ) )
Assert . assertEquals ( 0 , analyser . getLoadAtBeginning ( route ) . get ( 0 ) )
assertArrayEquals ( new long [ ] { 1 , 2 , 3 } , result )
assertCauseException ( response , ReflectiveOperationException . class )
assertTrue ( minute1 . equals ( minute2 ) )
assertTrue ( redis . objectRefcount ( key ) > 0 )
assertTrue ( result == 0 )
assertNotNull ( result )
assertThat ( sut . getHistoryRootDir ( ) , endsWith ( "config-history" ) )
Assert . assertEquals ( "Hello Kermit" , result )
assertSeen ( results , s0 )
assertThat ( array , is ( new float [ ] { 2 , 3 , 5 , 7 } ) )
assertNotNull ( assertion )
assertNull ( "Input Is Null After Close" , _charSequenceReader . getInput ( ) )
assertNotNull ( response )
assertNotNull ( fixture )
assertContains ( e . getMessage ( ) , "'id'" )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatusCode ( ) )
assertGeometryEquals ( expected , actual , STRICT , STRICT )
assertFalse ( matcher . match ( msg , rule ) )
assertEquals ( "{\"object\":" + paneJson + "}" , toJSON ( object ) )
assertTrue ( "toDegrees() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( 1 , count )
assertThat ( allAsList ( input ) , completesTo ( values ) )
this . assertLoadBlobViaTuples ( tuples , false , true )
Assert . assertThat ( ret3 , Matchers . containsString ( sum + "," + 11 ) )
Assert . assertTrue ( "Creation time not set correctly" , uic . getCreationTime ( ) > 0 )
assertThat ( result , is ( object ) )
assertTrue ( keyCodesSet . size ( ) == keyCodes . size ( ) )
Assert . assertTrue ( zero . isZero ( ) )
assertThat ( target , notNullValue ( ) )
assertThatSql ( query , is ( "SELECT table.col1,table.col2 FROM table" ) )
Assert . assertTrue ( mockDevice . getDeviceExtension ( ArchiveDeviceExtension . class ) . isVisibleSOPClass ( "1.2.3" ) )
Assert . assertThat ( e . getMessage ( ) , containsString ( expected ) )
Assert . assertEquals ( expected , actual )
assertHeadersJoined ( )
Assert . assertEquals ( "(new WebDriverWait(driver, 60)).until(new ExpectedCondition<Boolean>() {" + "\n\t\t\tpublic Boolean apply(WebDriver d) {" + "\n\t\t\t\treturn Pattern.compile(\".*all\").matcher(driver.getCurrentUrl()).find();" + "\n\t\t\t}" + "\n\t\t});" , result )
assertEquals ( expectedUrl , authorizationUrl )
assertTrue ( Script . matchNamed ( MatchType . EQUALS , "json" , null , "{ foo: null, bar: 0 }" , ctx ) . pass )
assertSame ( Sex . FEMALE , select . getValue ( ) )
assertEquals ( 3 , query ( func . args ( PATH1 , "CP1252" ) ) . length ( ) )
assertThat ( file , not ( exists ( ) ) )
assertNotNull ( result )
assertThat ( result , is ( jsonString ( "foo" ) ) )
assertEquals ( StrictMath . exp ( 2 ) , exp )
assertEquals ( location , another )
assertThat ( tester . asInteger ( "aaa" ) , is ( 1 ) )
assertNull ( "The background was not deleted" , background )
assertEquals ( r1 , r2 )
assertEquals ( sampleIn . doNotRemoveCastsFromSoustractionWhenResultIsWidened ( oi , pi , l ) , sampleOut . doNotRemoveCastsFromSoustractionWhenResultIsWidened ( oi , pi , l ) , 0.0 )
assertEquals ( TargetType . PILLAR , target . getType ( ) )
assertEquals ( jid . getDomain ( ) , component . getDomain ( ) )
assertEquals ( 13 , track . nextFrame ( ) . getData ( ) . remaining ( ) )
assertEquals ( expected , actual )
Assert . assertTrue ( "We should have a complete header" , bufPos != - 1 )
assertEquals ( "<p>This <a>is</a><span>foo</span> <a>jsoup</a><span>foo</span>.</p>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( expResult , result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff08_" ) )
assertEquals ( "" , result )
assertThat ( applicationSettings . getProjectUploadSetting ( ) , is ( PROJECT_UPLOAD_ALLOWED ) )
Assert . assertEquals ( footer . getCurrentYear ( ) , yearActual )
assertNotNull ( instance )
assertEquals ( "{}" , jsonb . toJson ( model ) )
assertTrue ( "The decrypted message was " + new String ( dec ) + "and must be " + "equal to " + TEST_STRING , Arrays . equals ( dec , original ) )
assertThat ( ChronoHistory . from ( history . getVariant ( ) ) , is ( history ) )
assertEquals ( "Wrong number of roof surfaces has been detected" , 1 , nDetect )
assertId ( items , result )
assertEquals ( expected , actual )
assertEquals ( testStyle , classUnderTest . getOperatorStyle ( ) )
assertTrue ( uit . isValid ( STR_VAL , STR_VAL ) )
assertThat ( allResourceCreatePermissionsForResourceClassAndDomain . isEmpty ( ) , is ( true ) )
assertEquals ( DummyDrawHandler . drawCircleToString ( 50 , 100 , 10 , null , null , null , null ) , drawHandler . getLastDrawCall ( ) )
assertFalse ( result . passedValidation ( ) )
assertThat ( actual , sameJSONAs ( expected ) )
assertTrue ( hive2DatabaseMeta . isDriverVersion ( 5 , 5 ) )
assertThat ( isValid , is ( false ) )
assertEquals ( testResponse , response . get ( 0 ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertEquals ( 0 , s3 . listBuckets ( ) . size ( ) )
assertEquals ( "Wrong parameters" , createTestParameters ( ) , params2 )
assertEquals ( "Base for strings is wrong" , "2001:db8:2de:0:0:0:0:e13" , parsed )
Assert . assertEquals ( 2 , result . length ( ) )
assertEquals ( "Wikipanion" , output . get ( id ) )
assertTrue ( supportsPlacement )
assertNotNull ( CacheUtils . getEntry ( "test_file.txt" , cache ) )
assertTrue ( ( ( BooleanType ) respParam . getParameter ( ) . get ( 0 ) . getValue ( ) ) . booleanValue ( ) )
assertEqualsWithoutWhiteSpaces ( "translate([-30, 0, 0]) (empty)" , ts )
Assert . assertEquals ( 140 + 4 * winScore - loosePenalty , scores . getScore ( ) )
Assert . assertEquals ( present , listener )
assertEquals ( 40 , count )
assertEquals ( 1 , dao . create ( foo ) )
Assert . assertNotNull ( savedTenant2 )
assertThat ( control . matches ( "/clients/3/subtask/5/" ) , is ( true ) )
Assert . fail ( "Expected to fail, but didn't" )
assertEquals ( "http://tempuri.org" , w . getFundingGroup ( ) . get ( 0 ) . getFundingSummary ( ) . get ( 0 ) . getUrl ( ) . getValue ( ) )
assertEquals ( "UUUU-04-01" , result . getParameters ( ) . get ( "date" ) . getAsString ( ) )
assertEquals ( "{\"text\":null}" , toJSON ( title ) )
assertThat ( shortForm , is ( equalTo ( "root-ontology" ) ) )
assertEquals ( 0 , services . size ( ) )
assertFalse ( instance . hasNext ( ) )
assertAllExchangesAreCompleted ( config , client . getExchangeStore ( ) , time )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
assertTrue ( Arrays . equals ( svalues . toArray ( new Integer [ 5 ] ) , svalues1 ) )
Assert . assertNull ( actualValue )
assertEquals ( value , OpenShiftContext . get ( ) . get ( "foo" ) )
assertTrue ( hash == 0x0920e0c1b7eeb261l )
assertEquals ( 0 , map . size ( ) )
assertEquals ( query , result )
Assert . assertEquals ( "" , query . getCommandText ( ) )
assertTrue ( "Short Ref empty" , constraintViolations . size ( ) == 1 )
assertEquals ( "\"test\"" , entityTagHeaderDelegate . toString ( entityTag ) )
assertEquals ( vars ( "a" ) , getNonPseudoVars ( csv , true ) )
assertEquals ( 0 , result )
assertEquals ( 1 , proc . getProjectedSymbols ( ) . size ( ) )
assertCount ( total , "one > 0" )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertEquals ( 6 , array [ pivot ] )
assertSameEnumeration ( "PostOrderModel" , coreEnum , xEnum )
assertThat ( underTest . isAccessAllowed ( httpServletRequest ) , is ( false ) )
assertFalse ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , NOT_STARTING_BYTE ) )
assertNull ( principal )
assertMustacheFactory ( DefaultMustacheFactory . class , helper . createMustacheFactory ( ) )
assertEquals ( mvj . get ( "ProgressStatus" ) , null )
assertEquals ( i , e . getSource ( ) )
assertCard ( expectedCard , "http://magiccards.info/m14/en/230.html" , expectedCard . getRarity ( ) . toDisplayName ( ) , expectedCard . getName ( ) )
assertEquals ( expected , result . getAttributes ( ) )
assertNotNull ( boolSchema )
assertThat ( StubWatchFactory . getRequestParameters ( ) . get ( 0 ) , both ( hasEntry ( "resourceVersion" , Integer . toString ( INITIAL_RESOURCE_VERSION ) ) ) . and ( hasEntry ( "labelSelector" , asList ( DOMAINUID_LABEL , CREATEDBYOPERATOR_LABEL ) ) ) )
assertEquals ( LocalDate . of ( 2009 , Month . JANUARY , 1 ) , firstQuarter )
assertTrue ( file . exists ( ) )
assertEquals ( "new_end" , vRoute . getEnd ( ) . getLocation ( ) . getId ( ) )
assertThat ( optimisticLockingException . getKey ( ) , is ( "OptimisticLock.TestEntity.version" ) )
assertEquals ( 1 , tables . size ( ) )
assertEquals ( oldPos + size , buffer . position ( ) )
Assert . assertNotNull ( "The returned digester for  '" + algorithm + "' algorithm is null." , digester )
assertThat ( check . isCompatible ( ) , is ( false ) )
assertThat ( builder , hasToString ( "<script type=\"text/javascript\">/* <![CDATA[ */\n" + "(function() {var s = document.createElement('script')," + "t = document.getElementsByTagName('script')[0];" + "s.type = 'text/javascript';" + "s.async = true;" + "s.src = 'https://api.flattr.com/js/0.6/load.js?mode=auto';" + "t.parentNode.insertBefore(s, t);})();\n" + "/* ]]> */</script>" ) )
assertEquals ( expResult , result )
assertions . doesNotContain ( expected )
assertArrayEquals ( result , new byte [ ] { 0 , 1 , 2 , 3 } )
assertEquals ( expResult , result )
assertEquals ( 1 , session . from ( $ ( noteVar ) ) . where ( where ) . list ( $ ( noteVar ) ) . size ( ) )
assertNull ( dss . parseEmail ( ) )
Assert . assertEquals ( data [ i ] * i , m . getEntry ( i , i ) , 0d )
assertThat ( handler , is ( instanceOf ( PatientValidator . class ) ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . FUNDING_READ_LIMITED )
assertEquals ( "g1.js" , groupNames . get ( "g1.js" ) )
assertEquals ( 15 , result )
assertThat ( conf , instanceOf ( GetConfigurationConfirmation . class ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertThat ( isDepartmentValid , is ( Boolean . TRUE ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
Assert . assertEquals ( CORSFilter . CORSRequestType . INVALID_CORS , requestType )
assertNotNull ( Flow . reader ( ) . read ( ) )
Assert . assertEquals ( 3 , list . size ( ) )
assertFalse ( matchResult )
assertRecurrencesCorrect ( "YEAR" , 3 , process ( trigger ) . getYearlyRecurrences ( ) )
assertFalse ( validator . validate ( EntityNames . STUDENT , studentIds ) . equals ( studentIds ) )
assertTrue ( callbackInvoked . get ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 5 , analyser . getLoadAtEnd ( route ) . get ( 0 ) )
assertEquals ( expectedScript , observedScript )
assertionHelper . assertDataObjectFlaggedWithAVU ( irodsFile . getAbsolutePath ( ) , "postProcForPutFired" , accessObjectFactory , irodsAccount )
assertThat ( result . contains ( expectedString ) , is ( true ) )
Assert . assertEquals ( 431 , response1 . getCode ( ) )
assertTrue ( className . equalsIgnoreCase ( DateTime . class . getSimpleName ( ) ) )
assertEquals ( "fake-token" , kc . getAccessToken ( ) )
assertEquals ( "application/json;odata.metadata=minimal" , request . getResponseContentType ( ) . toContentTypeString ( ) )
Assert . assertEquals ( expected , resultString )
Assert . assertEquals ( SpecificData . get ( ) . toString ( testRecord ) , SpecificData . get ( ) . toString ( output ) )
assertThat ( sequencerContext . getInputPath ( ) , is ( context . getValueFactories ( ) . getPathFactory ( ) . create ( "/a/b/c" ) ) )
assertEquals ( 1024L , FutureUtils . result ( future ) . longValue ( ) )
assertTrue ( rc . request ( ) . host ( ) . endsWith ( ":" + port ) )
assertEquals ( now , result )
assertThat ( decoded , is ( "hello world" ) )
Assert . assertEquals ( 0 , ( ( List < User > ) ret . getValue ( ) ) . size ( ) )
assertEquals ( object . longs , result . longs )
assertEquals ( responsesRemaining , collector . getResponsesRemaining ( ) )
assertFalse ( converter . canWrite ( clazz , mediaType ) )
assertSizes ( validator , char [ ] . class )
Assert . assertTrue ( message , expected . equals ( actually ) )
assertEquals ( singleValue , stats . getStatisticValue ( Statistic . MEAN ) )
Assert . assertEquals ( state . IDLE , state )
assertEquals ( "test" , mConfiguration . get ( PropertyKey . Template . MASTER_TIERED_STORE_GLOBAL_LEVEL_ALIAS . format ( 0 ) ) )
Assert . fail ( "Instantiation should fail" )
Assert . assertTrue ( h . match ( cookie , origin ) )
assertTrue ( names . isEmpty ( ) )
assertEquals ( "new java.util.ArrayList() {\n" + "  {\n" + "    add(\"foo\");\n" + "    add(\"bar\");\n" + "  }\n" + "}" , Stmt . load ( s ) . generate ( Context . create ( ) ) )
Assert . assertTrue ( result )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertTrue ( jobTwoStartTime - jobFinishTime >= 2000L )
assertEquals ( sqrt ( 2 ) * E * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
Assert . assertFalse ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertEquals ( "org.apache.hadoop.fs.shell.Ls" , cmd . getClass ( ) . getName ( ) )
assertGenerators ( result , generator . getClass ( ) )
Assert . assertEquals ( 86300000L , newDate . getTime ( ) - date . getTime ( ) )
Assert . assertEquals ( simple . getName ( ) , name )
assertNull ( m )
assertEquals ( Matrices . create ( 4 , 3 , new double [ ] { 1 , 2 , 9 , 3 , 4 , 8 , 9 , 8 , 5 , 4 , 3 , 0 } ) , matrix )
assertEquals ( 2 , l . size ( ) )
Assert . assertNull ( retireable . getRetireReason ( ) )
assertThat ( module . getMappingFiles ( ) , is ( equalTo ( Collections . EMPTY_LIST ) ) )
assertSeen ( results , s0 )
assertTrue ( repository . getFeatureState ( DummyFeature . TEST ) . isEnabled ( ) )
assertTrue ( entity . contains ( "map" ) )
Assert . assertTrue ( errMsg , hostname . endsWith ( expectedHostname ) )
assertExtendedEquals ( expected , dd , PRODUCT_TOLERANCE_FACTOR )
assertFalse ( cmd . onCommand ( sender , new CommandParser ( plugin , args , 1 ) ) )
assertEquals ( 0.0 , result , TOL )
assertSplit ( result , stringToSplit )
assertEquals ( Resolution . HD_720 , subject . getResolution ( ) . get ( ) )
assertSame ( url2 , url1 )
Assert . assertEquals ( "The file is packaged as test-deps-c-1.0.0.jar" , "test-deps-c-1.0.0.jar" , file . getName ( ) )
assertEquals ( "Response serializations should be equal to the mocked serializations" , mockedSerializations , responseSerializations )
Assert . assertEquals ( LogLevel . INFO , testedStore . readProperty ( "log" ) . getValue ( ) )
assertEquals ( expectedData , filteredData )
assertEquals ( new DiscreteInterval ( 900L , 1100L ) , impl . getTimeRemaining ( ) )
assertNotNull ( Country . reader ( ) . read ( ) )
assertThat ( JspUtils . getBasicCredentials ( request ) , allOf ( arrayWithSize ( 2 ) , arrayContaining ( username , password ) ) )
Assert . assertTrue ( checkServerState ( client , address , "STARTED" ) )
assertSame ( e , result )
assertEquals ( "do some work" , outputVal )
assertSame ( "Handler not set" , handler , config . getConversionHandler ( ) )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertEquals ( "<abc_def id=\"1\">Hello</abc_def> <abc-def>There</abc-def>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( "testCreatesFooClass" , generatedName )
assertFalse ( view . showPaging ( ) )
assertEquals ( "bar" , s )
assertEquals ( expResult , result )
assertEquals ( "Method #toString is wrong" , "GeoDistanceSortField{mapper=field, reverse=true, longitude=0.0, latitude=0.0}" , sortField . toString ( ) )
Assert . assertEquals ( "(aa_range (aa_point_location (aa_char Cys) - 125 + 1) _ (aa_point_location (aa_char Ala) - 123 - 1))" , loc . toStringTree ( parser ) )
assertEquals ( "" , room . getAlias ( ) )
assertThat ( isSet ( value ) , is ( true ) )
assertThat ( subject . getAbuseContact ( autnum ) . isPresent ( ) , is ( false ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertSetDirty ( )
Assert . fail ( "Error retrieving customer list caused by: " + e . getMessage ( ) )
assertThat ( result , equalTo ( false ) )
assertEquals ( " Echo Message = vasu" , response )
assertNotNull ( result )
assertTrue ( "Aggregate sasl server factory should be created" , ops . exists ( TEST_SERVER_FACTORY_ADDRESS ) )
assertEquals ( itemId , capturedEvent . getValue ( ) . getFirstItemId ( ) )
assertTrue ( appConfig . isHelp ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( array ) , equalTo ( new double [ ] { 0 , 1 , 2 , 3 , 4 , 5 } ) )
assertPolynomialRemainders ( dividend , divider , PrimitivePRS ( dividend , divider ) )
assertEquals ( 0x9000 , responseAPDU . getSW ( ) )
assertThat ( MomentInterval . between ( m1 , m2 ) . toZonalInterval ( ZonalOffset . UTC ) , is ( TimestampInterval . between ( t1 , t2 ) ) )
Assert . assertTrue ( exception instanceof RuntimeException )
assertEquals ( "one" , firstElement )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( null , decryption )
assertThat ( noOfSolutions , is ( 16 ) )
runner . assertAllFlowFilesTransferred ( PublishKafkaRecord_0_10 . REL_FAILURE , 3 )
Assert . assertTrue ( IntrospectUtil . hasCollectionType ( typeClass ) )
assertNotNull ( result )
assertEquals ( 1 , ref . atomicGet ( ) )
Assert . assertFalse ( element instanceof ExclusiveElement )
assertTrue ( retDocumentProjects == mergedDocumentProjects )
Assert . assertTrue ( "The list is not ordered descending" , sortedAges . equals ( ages ) )
assertEquals ( "{cast [42, Edm.SByte]}" , parseExpression ( "cast( 42\t, Edm.SByte        )" ) . toString ( ) )
Assert . fail ( "Expected an exception" )
assertEquals ( expected , actual )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( concept . getSet ( ) )
assertEquals ( "foo==2011-03-01" , ret )
throwables . assertHasRootCauseMessage ( INFO , error , null )
assertSame ( expected , actual )
assertEquals ( list , collection . getValue ( ) )
assertEquals ( "" , normalizeArchiveName )
assertEquals ( FOUR_LINES_REMOVED_SCORE + GLASS_OVERFLOWN_PENALTY , playerScores . getScore ( ) )
assertSame ( stringMessageBodyWriter , applicationProviders . getMessageBodyWriter ( String . class , null , null , TEXT_PLAIN_TYPE ) )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'integer',format:'int32'}}}" , s . getSchema ( Simple2dList . class ) )
assertTrue ( bugs . toString ( ) , bugs . isEmpty ( ) )
assertEquals ( o1 , o2 )
assertEquals ( new ContinuesRandomGenerator ( testSeed , seqNo ) . toString ( ) , new ContinuesRandomGenerator ( testSeed , seqNo ) . toString ( ) )
assertEquals ( expected , emptyGraph . getImmediateDominators ( ) )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "serverUrl" , MULTIPLE_TIBCO_BROKERS ) )
assertTrue ( instance . runCommand ( ) )
assertTrue ( "Got parameters" , builder . getParameters ( ) . isEmpty ( ) )
assertEqualHash ( byteBuffer , murmur3a )
assertThat ( signature , hasItem ( datatype ) )
assertNotNull ( result )
assertNotNull ( monitor2 )
context . assertIsSatisfied ( )
assertEquals ( "Wrong value" , ( short ) 0xbeef , u . s16 . get ( ) )
assertEquals ( 0xffffffffffffffffL , result )
mojos . assertBuildOutputs ( new File ( basedir , "target" ) , "classes/proc/Source.class" )
assertEquals ( username , FileTools . whoAmI ( ) )
assertThat ( data . getOriginal ( ) , is ( "{\"str\":\"hoge\",\"num\":1,\"test\":true}" ) )
assertTrue ( project1 . getCascadingChildrenNames ( ) . isEmpty ( ) )
assertTrue ( exp instanceof ASTCurrentDate )
assertThat ( logRecords , containsInfo ( CREATING_CRD ) )
Assert . assertEquals ( testResult [ i ] , reslut )
assertEquals ( 255 , result . getVoxel ( 5 , 15 , 5 ) , .01 )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Object" ) )
TestsIOUtils . assertEqualSets ( documentsWithoutTitle , new AvroDataStoreReader < DocumentWithoutTitle > ( path , DocumentWithoutTitle . SCHEMA$ ) )
assertNotNull ( entryCaptor . getValue ( ) . getStackTraceWriter ( ) )
assertPlanMatches ( access )
assertEquals ( "bill" , fake . name ( ) )
Assert . assertEquals ( configuration . getLong ( KafkaConfig . KAFKA_TEST_MESSAGE_COUNT_KEY ) , KafkaConsumerUtils . INSTANCE . getNumRead ( ) )
assertSingleElementCollection ( testCommandClientId , executeIds )
assertThat ( userCount , is ( 0 ) )
assertNull ( task )
assertNull ( classUnderTest . getDifferenceVal1 ( ) )
assertEquals ( "1.0.0-beta" , v2 . toString ( ) )
Assert . assertFalse ( hasIndexHashKeyEqualCondition )
Assert . assertTrue ( hedgeErrorRMS < 0.05 )
assertEquals ( list , Arrays . asList ( 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 , 2 , 1 ) )
context . assertIsSatisfied ( )
assertEquals ( table1 , table2 )
assertEquals ( AnnotationDataDummy . CLASS_CACHE , data . getCacheName ( ) )
assertEquals ( createContainerCaptor . getValue ( ) . getHostConfig ( ) . getMemorySwap ( ) , - 1 )
assertEquals ( ( time / 3600 ) * 3600 , windowFlooredNaturalTime )
assertEquals ( "Fusco" , person . getLastName ( ) )
assertEquals ( "r1c1,r1c2" + recordSeparator + "r2c1,r2c2" + recordSeparator , sw . toString ( ) )
Assert . assertEquals ( "example (wiki:XWiki.user (127.0.0.1): action on null at null)" , ex . toString ( ) )
assertNull ( value )
Assert . assertEquals ( 3 , gender . getBuckets ( ) . size ( ) )
Assert . assertEquals ( new Complex ( 0.0 , 0.5 ) , z . reciprocal ( ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 12 , undefRes . size ( ) )
assertEquals ( ValidationResult . Result . OK , validationResult . getStatus ( ) )
assertEquals ( "Good Morning" , cfg . getProperty ( "salutation.text" ) )
assertEquals ( expected , generateAttributesForPastingIntoTargetClass ( Car . class ) )
assertMessages ( "write" , 1 , "write_bytes_offset" )
assertTrue ( "value was " + Arrays . toString ( target ) , Arrays . equals ( expected , target ) )
assertEquals ( "getRaftState" , RaftState . Follower , mockRaftActor . getRaftState ( ) )
assertEquals ( "localhost-0" , strategy . hash ( infoMock , 0 ) )
assertEquals ( GelfMessageLevel . ALERT , gelfMessage . getLevel ( ) )
assertEquals ( "mycmd a\\b" , s )
assertThat ( result , is ( sameInstance ( partitionsByExprRequest ) ) )
assertEquals ( list . get ( 0 ) . getName ( ) , "test" )
assertNotNull ( result )
assertTrue ( "No random port has been allocated" , url . getPort ( ) > 0 )
assertEquals ( 123 , result )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( "incorrect value" , result , aNumber . toEngineeringString ( ) )
assertThat ( isValid , is ( true ) )
assertEquals ( packet , p )
assertTrue ( false )
assertNotNull ( constraints )
assertEquals ( b . build ( ) , doc )
assertThat ( output . get ( ) , hasContent ( "non-null" ) )
assertEquals ( "Failed to match 2 xrefs" , 2 , i )
assertEquals ( e1 , e2 )
assertEquals ( Boolean . TRUE , methodOutcome . getCreated ( ) )
Assert . assertEquals ( "" , json , notification . toJSON ( ) )
assertThat ( testValue . keywordName ( TestValueType . AGE ) , equalTo ( "AGE" ) )
assertThat ( jcrWorkspaces , is ( graphWorkspaces ) )
assertFound ( Files . newDirectoryStream ( dir , "1*" ) , child , child2 )
assertEquals ( "Hello ^^ John" , ResponseBodyInterpolator . interpolate ( "Hello ^^ :name" , req ) )
assertEquals ( "Method #toString is wrong" , "InetMapper{field=field, indexed=false, sorted=true, validated=true, column=field}" , mapper . toString ( ) )
assertEquals ( arr , vstacked )
Assert . assertEquals ( "EXECUTE ERROR:" , sqltrue , sqlnew )
assertThat ( instance , notNullValue ( ) )
assertEquals ( 0 , start . getSize ( ) . get ( 0 ) )
Assert . assertNotNull ( "Expected to be able to get MeteredInterface by interface and not by class." , mi )
assertPowerToughness ( playerA , "Pillarfield Ox" , 1 , 3 )
assertOut ( "a.child('child').setAttribute('attr3', 'foo')" )
assertEquals ( expected , new ResolverUtil ( ) . extractPath ( url ) )
assertTrue ( main . getWidget ( dataset . sourceType ) . isCallAfter ( ) )
assertNotNull ( manager . x )
assertEquals ( countryName , "<http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Country-United%20Kingdom>" )
assertEquals ( expected , bos . toString ( ) )
assertEquals ( connMock , dbcManagerSpy . getPooledConnection ( DBType . MYSQL , DB_URL , DHARMA_USER , DHARMA_PASSWORD ) )
Assert . assertEquals ( result . toStringWithoutTime ( ) . trim ( ) , expectedResult . trim ( ) )
assertThat ( gtx . get ( Hoge . class , key ) , is ( notNullValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( - 623347200000L , q . getFirstMillisecond ( c ) )
assertEquals ( 1 , tasks . size ( ) )
assertEquals ( converter . getClass ( ) , converterDescription . getImplementationClass ( ) )
assertThat ( output , CoreMatchers . containsString ( "Trigger deleted:" ) )
assertEquals ( user , new UserImpl ( "user123" , "user@codenvy.com" , "name" ) )
Assert . assertSame ( this . patient , this . mocker . getComponentUnderTest ( ) . get ( "P0123456" ) )
assertEquals ( true , code . toString ( ) . contains ( "d<-3\n" ) )
assertNotNull ( result )
assertThat ( serialized , is ( equivalentTo ( action ) ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( target . matchExactly ( ( FlowAction ) action ) , is ( true ) )
Assert . assertEquals ( 4711 , ds . getIntProperty ( ) )
assertBreadcrumbsAreEqual ( actualList , expectedList )
assertEquals ( 3 , countDownChecker . counter )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 LEFT OUTER JOIN table2 as t2 ON t1.c0 = t2.c0" ) )
assertEquals ( c , clone ( ( c ) ) )
assertThat ( InvertListNumber . index ( actualCoords , sizes , invert ) , equalTo ( index ) )
assertEquals ( "http://java.example.com:8080/foo/bar/qux/quux" , got . toString ( ) )
Assert . assertEquals ( 0 , echoServer . getConnected ( ) )
assertMatrixEquals ( expectedTableau , tableau . getData ( ) )
propertyChangeListenerTester . assertTimesOfPropertyChanged ( 0 )
assertConfigErrorForMissingAttributeRequired ( data )
Assert . assertEquals ( aggregatedValue , aggregator . aggregate ( aggregator . disaggregate ( aggregatedValue ) ) )
propertyChangeListenerTester . assertTimesOfPropertyChanged ( 0 )
Assert . assertEquals ( 1 , size . get ( ) )
assertThat ( all ( ) , everyItem ( completelyScheduled ( ) ) )
assertThat ( extractMonitorables ( timerAdapter ) . get ( MEDIAN ) . get ( ) , Matchers . < Object > is ( newMedian ) )
assertEquals ( output1 , output2 )
Assert . assertEquals ( "SELECT 3 + 5;" , text )
Assert . assertEquals ( nodeToKey ( eq01 ) , nodeToKey ( eq02 ) )
Assert . assertEquals ( clickMe . getText ( ) , buttonText )
assertTrue ( areBonded ( carboxylC , aminoN ) )
assertEquals ( "%1-%2 something %1-%3" , BufferTools . substitute ( source , "%X" , "XXXXX" ) )
Assert . assertEquals ( expected , pass . concretizeCell ( term ) )
assertEquals ( String . valueOf ( me . getCode ( ) ) , me . getNick ( ) )
assertEquals ( field . getValue ( ) , entityField . get ( IndexingUtils . FIELD_DOUBLE ) )
assertEquals ( door , house . getDoor ( ) )
Assert . assertNull ( result )
assertEquals ( md5sum , instance . getMd5sum ( ) )
assertContentChanges ( changes )
assertEquals ( p1 , p2 )
assertEquals ( 2 , objects . size ( ) )
this . tester . assertContains ( "<p class=\"empty\">foo &amp; bar</p>" )
assertNull ( otpAuthenticationFilter . attemptAuthentication ( request ) )
Assert . assertEquals ( "/v1/Workspaces/test" , getLine ( PATH_LINE , canonicalRequest ) )
assertThat ( result , is ( true ) )
assertFalse ( model . contains ( parent , child ) )
Assert . fail ( "Expected failure" )
assertArrayEquals ( "Wrong result for empty input" , empty , ClassUtils . wrappersToPrimitives ( empty ) )
Assert . fail ( "This sequencer run should not exist, should not have lanes, and should show a 404 Not Found" )
assertTrue ( mappedUrl . startsWith ( expectedPath ) )
assertEquals ( td , store . persist ( td ) )
assertEquals ( "Invalid default port" , 4573 , defaultAgiServer . getPort ( ) )
assertThat ( body , not ( containsString ( "<p></p>" ) ) )
assertTrue ( videos . contains ( video ) )
assertTrue ( 0 > v1 . compareTo ( v2 ) )
assertEquals ( "Unsupported parameter test for pwd." , result )
Assert . assertEquals ( Constants . FOOTER_ITEM_SIZE , itemActual . size ( ) )
assertEquals ( Status . UP , impl . getStatus ( ) )
assertDocumento ( documento )
assertThat ( result , is ( "LinkLayerizer Component" ) )
assertArrayEquals ( refar , d . getResult ( ) )
assertEquals ( 10 , getCache ( provider , "bar" ) . capacity )
assertEquals ( 2 , result . getSize ( ) )
assertEquals ( 2 , e1 . getObjectContext ( ) . performQuery ( query ) . size ( ) )
assertThat ( "same node from index" , lookedUpNode , is ( node1 ) )
assertTrue ( or . isDefined ( ) )
assertThat ( Lists . newArrayList ( iterable ) , contains ( "Hello" , "World" ) )
assertThat ( ( Boolean ) dummyExpression . evalChildAsBoolean ( 0 , returnNode , super . variables , super . functions , super . expressions ) , is ( false ) )
this . assertIndexOkResponseJsonStructure ( 1 , 10 , response )
assertEquals ( s . toString ( ) , expecting )
assertEquals ( UnresolvedAddressException . class , thrown . getClass ( ) )
assertTrue ( stopAtFirstIneligibleField ( field ) . isEmpty ( ) )
assertTrue ( HttpTestUtils . semanticallyTransparent ( resp1 , result ) )
assertEquals ( CSV_FILE , writer . toString ( ) )
assertEquals ( AppConfigProperties . DEFAULT_HIBERNATE_CONFIG_PATH , spyAppConfigProperties . getHibernateConfigPath ( ) )
assertEquals ( Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertTrue ( numberOfOperations == 0 )
assertModelForInjectionIsOriginalModel ( )
Assert . assertNotNull ( scheduler )
assertNull ( domain )
assertNull ( extensionMapping )
assertTrue ( endpointNode . exists ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( mock . booleanReturningMethod ( 1 ) )
assertEquals ( 0 , listLocationEvent . size ( ) , 0 )
assertThat ( result . httpRequestType , equalTo ( "DELETE" ) )
Assert . assertNull ( m )
Assert . assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertEquals ( definition , rhombusStorageKeyspaceDefinition )
assertThat ( conv , is ( "12:44:22.123" ) )
Assert . assertEquals ( "existsIn(IndexedCollection<Garage>, \"name\", \"brandsServiced\", equal(\"location\", \"Dublin\"))" , existsIn . toString ( ) )
assertTrue ( filter . shouldDeliverNotification ( eventContext ) )
assertEquals ( expected , actual )
assertEquals ( "a b b a a c a d d" , result )
assertFloatEquals ( "X position moved over the edge" , 32F , viewportVector . getX ( ) )
Assert . assertEquals ( "somethingmock" , ret . getValue ( ) )
Assert . assertEquals ( Integer . class , clazz )
assertThat ( DoubleUtil . toDouble ( i ) . doubleValue ( ) , is ( 1d ) )
assertThat ( result , is ( false ) )
assertEquals ( "input" , action . execute ( ) )
assertTrue ( "timestamp changed" , first != second )
assertTrue ( result )
assertSame ( expected , actual )
assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd" ) . format ( dt ) , new SimpleDateFormat ( "yyyy-MM-dd" ) . format ( dueDate ) )
assertEquals ( defaults , config . getDefaults ( ) )
assertEquals ( "" , actual )
arrays . assertDoesNotContain ( description , actual , null )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
Assert . assertEquals ( 1.0D , StreamsTestUtils . getMetricByName ( driver . metrics ( ) , "skipped-records-total" , "stream-metrics" ) . metricValue ( ) )
context . assertIsSatisfied ( )
assertEquals ( allocator . wrap ( ByteBuffer . wrap ( ECHO_BYTES ) ) , connectorMessageReceived . get ( ) )
assertFalse ( observer . accept ( path ) )
assertEquals ( result . build ( ) . find ( ArrayElement . class , "values" ) . get ( 0 ) . getEntries ( ) , myTestInstance . distinct ( builder ) . toList ( ) )
assertEquals ( "/project/view" , view )
assertThat ( bucketComparison1 , is ( bucketComparison1 ) )
assertThat ( domain . getAdminServerSpec ( ) . getServerRestartVersion ( ) , is ( "1" ) )
assertEquals ( "b:alt 2 a:alt 1\n" , found )
assertEquals ( "Organization/AAA" , p . getManagingOrganization ( ) . getReference ( ) )
Truth . assertThat ( callable . call ( 1 ) )
assertEquals ( 2 , NDArrayMath . matricesPerSlice ( arr ) )
assertEquals ( "http://foo/Patient?_at=2010-10-01T01%3A02%3A03.0Z" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertJsonEquals ( "{hello:'world',foo:'bar'}" , JsonSerializer . serialize ( map ) )
Assert . assertFalse ( reporter . hasReportedStartup ( ) )
assertEquals ( "package org.kissmda.test.junit;\n" + "import org.kissmda.AException;\n" + "import org.kissmda.BException;\n" + "public class ClazzName {\n" + "  public void doSomething1(  Name values) throws AException {\n" + "    assertNotNull(values);\n" + "  }\n" + "  public void doSomething2(  Name values) throws BException {\n" + "    assertNotNull(values);\n" + "  }\n" + "  public void doSomething3(  Name values) throws AException, BException {\n" + "    assertNotNull(values);\n" + "  }\n" + "}" , cu . toString ( ) . trim ( ) )
assertFalse ( v . isReturnToDepot ( ) )
assertEquals ( expected , cls )
assertEquals ( "4.1.2" , verison )
Assert . assertEquals ( "chosen overwritten-should have stayed the same" , firstLength , compareIrods . length ( ) )
assertTrue ( tuple instanceof StaticBinding )
assertEquals ( "TEXT" , p2 . getCode ( ) . getText ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . MISSING_SOURCE_QUEUE , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertThat ( Asn1DerDecoder . readPrivateKeyAlgorithm ( data ) , is ( "RSA" ) )
assertThat ( rows . getSortColumn ( ) , is ( nullValue ( ) ) )
assertLogEvent ( logEvent )
assertNull ( theResourceName . get ( ) )
assertThat ( value , is ( equalTo ( 1024L ) ) )
assertEquals ( extractedYAML , expectedYAML )
Assert . assertTrue ( ! result . isSetName ( ) && ! result . isSetDescription ( ) && ! result . isSetProperties ( ) )
assertEquals ( 1 , listener . updatedInjectedFilters . size ( ) )
assertNotNull ( constraints . getExpiryTime ( ) )
assertEquals ( "\"test\"" , s )
assertFalse ( IQSyntacticEquivalenceChecker . areEquivalent ( query , query1 ) )
Assert . assertEquals ( DMLScript . RUNTIME_PLATFORM . HYBRID , o . execMode )
assertZippelGCD ( gcd , a , b )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertEquals ( origDatagrams [ testIdx + 1 ] , d )
assertThat ( lines , hasItems ( "property.foo=bar" , "attribute.x=original-file-value" ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 } , params . valuesAsInts ( "a" ) )
assertEquals ( counter . getValue ( ) , 0 )
assertThat ( expected , equalTo ( actual ) )
assertEquals ( TestUtil . FTP_TEST_PROXY , result . get ( 0 ) )
assertEquals ( "qwerty" , ExpressionFieldAction . process ( action , Arrays . asList ( "qWeRtY" ) ) )
assertThat ( extractor . extractPropertyRowStartIndex ( sheet ) , is ( 3 ) )
assertEquals ( "ok" , mockCallback . getResult ( ) )
assertOut ( "var /** @type {*} */ a = function() {\n}" )
assertEquals ( "short field not aligned" , MAGIC , testlib . struct_align_Signed16 ( ptr ) )
assertSame ( test , base )
assertEquals ( "setName() sets the name of the application" , "foo" , application . getName ( ) )
assertEquals ( version . toString ( ) , "1.1" )
assertEquals ( Object . class , e . getListenerClass ( ) )
assertTrue ( values . isEmpty ( ) )
assertEquals ( 2 , repository . getCommits ( ) . size ( ) )
assertThat ( e . getClass ( ) . getName ( ) , is ( CarException . class . getName ( ) ) )
Verify . assertListsEqual ( FastList . newListWith ( "John Smith" , "Yuri Clark" , "Clark Kent" ) , peopleIn30s . asEcList ( ) . collect ( PersonFinder . name ( ) ) )
assertArrayEquals ( ARGENTINA_DIPUTADOS_VOTING_RECORD_EXPECTED , UtilsForTesting . tableToArrayOfRows ( table ) )
assertThat ( file . exists ( ) , is ( true ) )
Assert . assertEquals ( expectedKeys , actualKeys )
Assert . assertEquals ( 1 , rcs . size ( ) )
assertEquals ( "first=value1&second=value2" , getLastRequestQuery ( ) )
assertNotNull ( victim . getInputStream ( mockRequest , mockResponse , "http://www.google.com" ) )
assertThat ( doc . getKey ( ) , is ( notNullValue ( ) ) )
assertNotEquals ( one , 1 )
assertTrue ( result . length ( ) > 0 )
Assert . assertEquals ( 27. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 3 ) , route ) , 0.01 )
assertTrue ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( null , event )
assertNotNull ( instance . getMappainter ( ) )
Assert . assertEquals ( matrixDouble_EXPECTED , matrixDouble_ACTUAL )
assertEquals ( action . getShowWeekender ( ) , true )
assertResultSet ( res )
Assert . assertTrue ( impl . canCachedResponseBeUsed ( host , request , entry , now ) )
assertThat ( storageFormat . toString ( ) , sameJSONAs ( ( String ) asTinkerpop ) )
assertEquals ( 1 , violations . size ( ) )
assertEquals ( expected , cassandraRowMapper . map ( resultSet ) . next ( ) )
assertFalse ( "should not run other methods" , exactFilter . shouldRun ( otherMethod ) )
assertTrue ( handler . supportsView ( ComplexObsHandler . RAW_VIEW ) )
Assert . assertTrue ( updatedRows > 0 )
assertFalse ( result . isResult ( ) )
context . assertSentrySemanticException ( statement , "CREATE database " + DB1 , semanticException )
assertEquals ( "di.me meeting" , updated . getPrefLabel ( ) )
assertEquals ( expected + "/" , api . getUrl ( "" ) . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( ReadConcern . MAJORITY , parsedReadConcern )
assertThat ( match , is ( BestTypeMatch . SAME ) )
assertEquals ( String . class , mapValueParameterType )
assertEquals ( null , id . getValue ( ) )
assertThatAcceptorWasNotStarted ( )
assertTrue ( downloader . getClass ( ) . equals ( CachedDownloader . class ) )
assertThat ( identifiedPrincipals , hasItems ( new UidPrincipal ( 1000 ) , new GidPrincipal ( 1000 , true ) , new JwtSubPrincipal ( "EXAMPLE" , sub ) , new JwtJtiPrincipal ( "EXAMPLE" , jti ) ) )
assertThat ( minimizedChanges , is ( empty ( ) ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertEquals ( "port=8080" , config . getString ( DEFAULT_CONTAINER , "expression" ) )
assertOut ( "var a:XML = new XML('@')" )
assertHistoricProcessInstances ( )
assertEquals ( "failed to generate new object with parameterized type" , "new ArrayList<java.util.Date>()" , s )
Assert . assertEquals ( 6 , permutations . size ( ) )
Assert . assertEquals ( "The identifier must be as expected" , "test-id" , new SPQRNodeServer ( ) . registerProcessingNode ( "http" , "localhost" , 8080 , 8081 , mockClient ) )
assertEquals ( 10 , toTest . read ( new byte [ ] { 1 , 2 } ) )
assertEquals ( expResult , result )
assertEquals ( "{\"a\":[0,1]}" , n )
assertTrue ( message . contains ( "No event bus specified" ) )
assertEquals ( "There should be two registrations/unregistrations of MavenResolver before final (ConfigAdmin based) registration" , 5 , count )
assertEquals ( "Created incorrect hashtable" , 0 , h . size ( ) )
assertIsAborted ( tx )
context . assertIsSatisfied ( )
assertThat ( remoteFilesList . getResourceList ( ) , containsInAnyOrder ( allOf ( hasProperty ( "url" , is ( baseUrl + "files/dataset.nq" ) ) , hasProperty ( "mimeType" , is ( "application/n-quads" ) ) ) , allOf ( hasProperty ( "url" , is ( baseUrl + "files/dataset.nqud" ) ) , hasProperty ( "mimeType" , is ( "application/vnd.timbuctoo-rdf.nquads_unified_diff" ) ) ) ) )
assertTrue ( emptyMap . isEmpty ( ) )
AssertJUnit . assertTrue ( difference . isZero ( 1e-7 ) )
assertEquals ( JSON . serialize ( result ) , "[ \"value1\" , 12]" )
Assert . assertNull ( reporter . getProblemCounters ( ) . get ( Code . FIELD_ENUM_CONSTANT_ORDER_CHANGED . code ( ) ) )
Assert . assertEquals ( new Path ( "obj1.nestedSimpleInteger" ) , fullPath )
assertEquals ( file , system . getWorkingDirectory ( ) )
assertEquals ( "INSERT INTO user (user_id,user_name,pwd ) VALUES ( :userId,:userName,:pwd ) " , t . getInsertSql ( ) )
assertArrayEquals ( new Object [ ] { null } , params )
assertEquals ( "DELETE" , request . getMethod ( ) )
runner . assertAllFlowFilesTransferred ( ListenRELP . REL_SUCCESS , 2 )
assertFalse ( userCanReadBranch )
assertSideBarContainsClass ( "open" )
Assert . assertEquals ( "<div id=\"test\"></div>" , printer . toString ( ) )
Assert . assertFalse ( handler . deleteCgroup ( cgroupDir . getAbsolutePath ( ) ) )
assertEquals ( 0 , size )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertFalse ( red . equals ( black ) )
assertThat ( result , hasSize ( 1 ) )
assertNull ( "Analyzer must be null" , mapper . analyzer )
context . assertIsSatisfied ( )
assertEquals ( "Expected 10 results!" , 10 , n )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : from the implicit button" ) )
assertStatementCanBeDeparsedAs ( select , statement )
Assert . assertEquals ( "0" , p . getDimension ( ) )
assertions . startsWith ( sequence )
rule . assertScenarioEnded ( )
assertThat ( result , containsString ( "auth:           PGPKEY-ASD" ) )
assertTrue ( ! map . equals ( refMap ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "12345" , job . getConfiguration ( ) . get ( "hbase.client.scanner.timeout.period" ) )
assertEquals ( "Getting a feed should return a 404 with bad marker id." , HttpStatus . SC_NOT_FOUND , httpClient . executeMethod ( getFeedMethod ) )
assertEquals ( asList ( "" + "\n" + "raindrops--\n" + "her last kiss\n" + "goodbye.\n" ) , texts )
assertEquals ( FleetSize . INFINITE , vrp . getFleetSize ( ) )
assertTrue ( max < connPerRoute . getMaxPerRoute ( route ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "prop like \"abc\"" , e . toString ( ) )
Assert . assertEquals ( vector , new Vector ( 50 , 50 , 50 ) )
assertEquals ( false , out . firstElement ( ) . get ( ) )
assertThat ( givenStories . getPaths ( ) , equalTo ( Arrays . asList ( GIVEN_STORY_PATH1 ) ) )
assertThat ( mode , is ( equalTo ( ShellMode . interactive ( ) ) ) )
assertThat ( testStatus , is ( expectedStatus ) )
assertTodo ( expected , actual )
assertTrue ( 0 != rmAdminCLI . run ( args ) )
Assert . assertFalse ( lanes . isEmpty ( ) )
assertThat ( link , sameInstance ( Links . getDefault ( ) ) )
Assert . assertArrayEquals ( new String [ ] { "w=do" , "pt1=wh" } , cg . getContext ( 1 , TOKENS_1 , new String [ ] { "wh" } , AC_1 [ 1 ] ) )
assertEquals ( Arrays . asList ( 1 ) , list )
assertNull ( httpWebService . getPayloadAsString ( request ) )
assertTrue ( "Successful permission check was not logged" , loggedSuccessfulPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertThat ( messages . getMessages ( ) . getAllMessages ( ) , hasItems ( UpdateMessages . referencedObjectMissingAttribute ( ObjectType . PERSON , personName , AttributeType . MNT_BY ) , UpdateMessages . referencedObjectMissingAttribute ( ObjectType . ROLE , roleName , AttributeType . MNT_BY ) ) )
assertTrue ( channelManager . isEphemeralNode ( user1 ) )
assertEquals ( 1 , ContractClassWithStaticInitializer . STATIC_FIELD )
assertEquals ( bd . toString ( ) , result )
assertEquals ( 15634800000L , q . getFirstMillisecond ( ) )
assertEquals ( "a = 1\n" , output . toString ( ) )
assertEquals ( 9 , providers . size ( ) )
assertThat ( File . separator , is ( "\\" ) )
assertThat ( stderrObsWasRead . get ( ) )
assertFalse ( webSocketUpgrade . validateUpgradeReply ( responseStr . getBytes ( ) ) )
assertThat ( owlOntologyChange , is ( ontologyChange ) )
Assert . assertEquals ( val , val2 )
Assert . assertNotNull ( addressResultsDto )
Assert . assertTrue ( resource . contains ( DummyELs . class . getName ( ) ) )
assertTrue ( table . getIdentityColumns ( ) . isEmpty ( ) )
Assert . assertEquals ( Lists . newArrayList ( 1 , 2 , 3 , 4 , 5 ) , takeResult )
assertEquals ( 5000L , result )
assertProxy ( entityCaptor . getValue ( ) )
assertThat ( userInfo , nullValue ( ) )
assertTrue ( S3StorageBackend . requiresS3MediaDownload ( s3Properties :: get ) )
arrays . assertContainsSequence ( someInfo ( ) , actual , emptyArray ( ) )
assertEquals ( RenameSettings . MachStrategy . SUFFIX , view . getMachStrategy ( ) )
Assert . assertEquals ( "ref:g.43511" , gPos . toString ( ) )
assertFalse ( sf . getCache ( ) . containsEntity ( "com.hazelcast.hibernate.entity.DummyEntity" , 0L ) )
assertFalse ( "should be false on start with error" , filter . skipFilter ( new MockHttpServletRequest ( ) ) )
assertThat ( Timezone . of ( tzid ) , is ( expected ) )
Assert . assertEquals ( updateStreamRequest , argumentCaptor1 . getValue ( ) )
assertThat ( change . isChangeFor ( axiomType ) , is ( false ) )
assertNotNull ( RoomRecording . fetcher ( "RMXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "RTXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertNotSame ( instruction1 , instruction2 )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
assertNotNull ( "Created run was not assigned an ID." , mr . getId ( ) )
assertEquals ( e1 , e2 )
assertEquals ( true , extractedBool )
assertNull ( daoService . get ( userWrapper , "PKEY" , "Config" , StatisticRefEnum . CREATED_ISSUE_COUNT ) )
assertEquals ( 3 , callbackCount . get ( ) )
assertActive ( player1 , player2 , player3 , player4 )
assertNotNull ( "Previous step failed" , uri_sessionInstance )
assertNull ( res )
assertEquals ( Integer . valueOf ( 300 ) , taggedAmount . getId ( ) )
assertEquals ( expected , properties )
assertEquals ( 0 , IterableUtils . count ( IncludeNoNodes . getInstance ( ) . getAll ( database ) ) )
assertEquals ( 1 , taskService . createTaskQuery ( ) . count ( ) )
assertFalse ( valid )
assertEquals ( expected , splitter . split ( str ) )
assertNotNull ( Metric . reader ( "CAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertTrue ( deviceMastership . isDeviceMastered ( ) )
assertThat ( actual , equalTo ( expected ) )
assertNull ( externalLink )
assertThat ( FileUtils . readFileToString ( new File ( tempCopyFile ) ) , CoreMatchers . is ( cp_file . asText ( ) ) )
assertEquals ( "(10, 0)" , grid . getCell ( 10 , 0 ) . getText ( ) )
assertThat ( r . reduce ( Arrays . asList ( null , 5.0 , 1.0 , 4.0 ) ) , equalTo ( 5.0 ) )
assertEquals ( "one dollar" , actual )
editor . assertHoverContains ( "@ConditionalOnBean" , "@ConditionalOnBean (types: example.Hello; SearchStrategy: all) found bean 'missing'\n" + "\n" + "Process [PID=22022, name=`test-conditionals-live-hover`]" )
assertTrue ( null == obj )
Assert . assertEquals ( m , UnitTestUtils . serializeAndRecover ( m ) )
assertEcssEquals ( ".myDiv{" + "background-image:\"url(#{resource['test?gradientHeight=100px&height=150px&gradientColor=Skin.myskin']})\";" + "}" , convertFragment ( xcss ) )
assertEquals ( "1, 2, 3" , tree . toString ( ) )
assertThat ( "default minimun number of cores" , sut . getMinCores ( ) , is ( equalTo ( VM . DEFAULT_MIN_CORES ) ) )
assertEquals ( "jdbc:h2:mem:" + name , EmbeddedDatabaseRule . h2 ( ) . withName ( name ) . withProperty ( "prop" , null ) . build ( ) . getConnectionJdbcUrl ( ) )
assertSame ( stringConstructor , resolvedConstructor . getRawMember ( ) )
Assert . assertEquals ( "" , WebUtil . getContextPath ( ) )
assertEquals ( "Console" , loggerType )
assertEquals ( "testDesc" , trace . getDescription ( ) )
Assert . assertTrue ( c1 . isCompatible ( c2 , mutations ) )
assertEquals ( 3 , orders . size ( ) )
assertEquals ( "Cancel" , close )
assertThat ( foundResources , empty ( ) )
assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
Assert . assertEquals ( 20 , analyser . getLoadAtEnd ( route ) . get ( 0 ) , 0.01 )
assertSuccessResponse ( response )
assertNotNull ( result )
assertEquals ( otherHashCode , foreignableFieldHashCode )
assertFalse ( "No Longer Contains Test1" , _fastTable . contains ( "Test1" ) )
assertEquals ( "test" , JsonbProvider . provider ( ) . create ( ) . build ( ) . fromJson ( new StringReader ( json ) , SimpleProperty . class ) . value )
Assert . assertNotNull ( "null data object, was not found" , dataObject )
assertNotNull ( concreteCache . get ( "key" ) )
Assert . assertEquals ( resultEntity , entity )
assertNull ( property2 . getValue ( ) )
assertTrue ( output . contains ( "Get help with usage of this command" ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertTrue ( testVehicleSetTests . isClean ( ) )
assertEquals ( "http://example.com" , actual )
assertEquals ( "#" , link . getAttribute ( "href" ) )
assertEquals ( "" , result )
assertEquals ( SOME_BOOLEAN , result )
assertThat ( command . accept ( state ) , is ( false ) )
assertEquals ( "Select with multiple joins" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( counter . getValue ( ) , 0 )
assertEquals ( "$metadata#ESTwoKeyNav(PropertyInt16,PropertyString," + "CollPropertyCompNav/NavPropertyETTwoKeyNavMany)" , ContextURLBuilder . create ( contextURL ) . toASCIIString ( ) )
Assert . assertEquals ( "88095550" , endereco . getCep ( ) )
assertEquals ( null , actual )
assertEquals ( writer , manager . getAppendOnlyStreamReader ( ) )
Assert . assertEquals ( 13 , list . size ( ) )
assertEquals ( expected , quicksort ( tosort ) )
Assert . fail ( "expected IllegalArgumentException" )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEqual ( "1" , query . execute ( ) )
assertNotSame ( fsU1 , fsU2 )
assertNotNull ( newMember . getId ( ) )
assertSame ( dataNode . getAdapter ( ) , detected )
assertTrue ( userCanUpdateBranch )
assertTrue ( d_domain . getDrugs ( ) . isEmpty ( ) )
assertTrue ( sl . getChildren ( ) . isEmpty ( ) )
assertThat ( callback . getCallbackResult ( ) , is ( "Task Done successfully" ) )
assertNull ( variableValue )
e . put ( "/B?body=" + UonSerializer . DEFAULT . serialize ( DTOs . B . INSTANCE ) , "a" ) . execute ( ) . assertBody ( expected )
assertThat ( time . with ( PlainTime . COMPONENT . setToNextFullMinute ( ) ) , is ( PlainTime . of ( 0 , 1 ) ) )
assertNotNull ( head )
assertEquals ( "http://test.com/1?a=&b=" , HttpRequest . append ( "http://test.com/1" , params ) )
assertEquals ( actualSpeed , expectedSpeed )
assertThat ( auth . getTotpKey ( ) , equalTo ( generatedTotpKey ) )
assertEquals ( "Count of customer" , 0 , res )
assertThat ( isValid , is ( true ) )
Assert . assertEquals ( "Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw" , endereco . getDescricaoMunicipio ( ) )
assertThat ( expected . hashCode ( ) , is ( - 642289492 ) )
assertThat ( Template . parse ( markup ) . render ( assigns ) , is ( expected ) )
assertUpdateJob ( request , INTERNAL_SERVER_ERROR , "error" )
assertTrue ( get ( url ) . headers ( Collections . < String , String > emptyMap ( ) ) . ok ( ) )
assertTrue ( Integer . valueOf ( lowestTitle . compareTo ( summary . getTitle ( ) . getTitle ( ) . getContent ( ) ) ) < 0 )
assertNotNull ( revocationInformation )
assertEquals ( s , string ( token ( s ) ) )
Assert . assertArrayEquals ( "%20" . getBytes ( StandardCharsets . UTF_8 ) , encoded )
assertTrue ( childContext . contains ( contextWithSomeTerms ) )
assertThat ( access , is ( "access" ) )
assertEquals ( CollectionStringConstructorProducer . class , typeProducer . getClass ( ) )
assertTrue ( test . contains ( ConnectorTopology . INCOMING ) )
assertEquals ( "select cast('a''c' AS b)" , result )
Assert . assertFalse ( result )
assertEquals ( actualDeviceClientList . size ( ) , 1 )
assertOut ( "a(b)" )
assertThat ( minimizedChanges , is ( empty ( ) ) )
assertEquals ( expected , actual )
assertTrue ( connector instanceof NioSocketConnector )
assertThat ( hijri . with ( CommonElements . localDayOfWeek ( HijriCalendar . family ( ) , model ) . incremented ( ) ) , is ( hijri . nextDay ( ) ) )
Assert . assertTrue ( true )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "ENVELOPE (11.0 22.0,44.0 88.0)" , writer . toString ( ) )
Assert . assertTrue ( this . defaultPushServerConfigurationResponse . getPushableFields ( ) . isEmpty ( ) )
assertEquals ( 0.0 , comp . compare ( "1" , "" ) )
assertThat ( jPath . elementFrom ( glossaryRoot ) . getAsString ( ) , equalTo ( "example glossary" ) )
assertEquals ( 0 , buyPercentageFee . compareTo ( new BigDecimal ( "0.0025" ) ) )
this . assertGet ( "policytemplates/http%253A%252F%252Fplain.winery.opentosca.org%252Fpolicytemplates/PolicyWithIcon_w1-wip1/appearance" , "entitytemplates/policytemplates/visualappearance_icon.json" )
assertEquals ( field . getValue ( ) , entityField . get ( IndexingUtils . FIELD_DOUBLE ) )
assertEquals ( 123L , info . getId ( ) )
assertThat ( decoded , is ( rid ) )
assertNotNull ( uploadResponse )
assertFalse ( ctx . isAborted ( ) )
assertThat ( stringFragment , is ( "FOOBAR with NO " ) )
Assert . assertArrayEquals ( expected_output , out . toArray ( ) , 1e-2 )
assertEquals ( expResult , result )
Assert . assertEquals ( list , objectTree . get ( "randomStrings" ) )
Assert . assertTrue ( false )
assertTrue ( DockerUtils . runCommand ( docker , bookie , bkctl , "bookies" , "list" , "-ro" ) . contains ( "No bookie exists!" ) )
assertThat ( session1 , is ( session2 ) )
assertEquals ( new Long ( 123 ) , result )
assertTrue ( outAny . equal ( inAny ) )
assertEquals ( "Wrong variable value" , TEST_VALUE , interpolator . resolve ( TEST_PREFIX + ":" ) )
assertNotNull ( result )
Assert . assertEquals ( now , value )
assertEquals ( "No rules have been imported" , 0 , ss . size ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertFalse ( TestRMILoadBalancerFactory . areClientBalancersClosed ( ) )
assertThat ( context . statement ( ) , is ( "\"b c\"" ) )
assertThat ( returnedMode , is ( AvroMode . SPECIFIC ) )
assertEquals ( 11 , entities . size ( ) )
assertEquals ( 0 , result . getRequiredPlugins ( ) . size ( ) )
assertEquals ( "org.talend.components.processing.runtime.filterrow.FilterRowRuntime" , runtimeInfo . getRuntimeClassName ( ) )
assertThat ( result , isFailedCommand ( ) )
Assert . assertEquals ( msg , expected , actual , delta )
assertTrue ( caughtException )
assertThat ( oldestCustomer . get ( ) , is ( customerList . get ( 3 ) ) )
assertEquals ( o , null )
assertEquals ( 87 , result )
assertEquals ( new Scanner ( getClass ( ) . getResourceAsStream ( "/expected-2-sample.html" ) , "UTF-8" ) . useDelimiter ( "\\A" ) . next ( ) , sw . toString ( ) )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "1" , client . projects . findById ( "1" ) . execute ( ) . gid )
assertThat ( new JSONObject ( actual ) , sameJsonAs ( rawSchemaJson ) )
assertThat ( wrapper . startAsync ( ) , instanceOf ( LoggingAsyncContextImpl . class ) )
assertEquals ( future , underTest . streamCollect ( futures , consumer , supplier ) )
assertEquals ( dragon . getAttack ( ) , dragon . getBaseAttack ( ) * 2 )
assertEquals ( "(Key,Value)" , pair . toString ( ) )
assertNull ( convert )
assertEquals ( expected , actual )
Assert . notNull ( ( Department ) departmentDao . getDepartmentById ( departmentParent . getId ( ) ) )
assertThat ( "Unexpected MDX query" , getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Gender].[F], [Gender].[M]}, CrossJoin({[Promotion Media].[All Media]}, {[Product].[All Products], " + "[Product].[Drink], [Product].[Drink].[Alcoholic Beverages], [Product].[Drink].[Beverages], " + "[Product].[Drink].[Beverages].[Carbonated Beverages], [Product].[Drink].[Beverages].[Drinks], " + "[Product].[Drink].[Beverages].[Hot Beverages], [Product].[Drink].[Beverages].[Pure Juice Beverages], " + "[Product].[Drink].[Dairy], [Product].[Food], [Product].[Non-Consumable]})) ON ROWS " + "FROM [Sales] WHERE [Time].[1997]" ) ) )
assertNotNull ( id )
assertNotNull ( instance )
assertEquals ( expResult , result )
assertViolationsThat ( report . getValidationViolations ( ) , equalTo ( "example of queryParameter 'q' in action(POST /ok) - Value '10' is bigger than maximum 8" ) , equalTo ( "default value of queryParameter 'q' in action(POST /ok) - Value '2' is smaller than minimum 4" ) , startsWith ( "Example does not match schema for action(POST /nok) mime-type('application/json')\n" + "Content: 42\n" + "Messages:\n- error: instance type (integer) does not match any allowed primitive type (allowed: [\"string\"])" ) , startsWith ( "Example does not match schema for action(POST /nok) response(200) mime-type('application/json')\n" + "Content: 42\n" + "Messages:\n- error: instance type (integer) does not match any allowed primitive type (allowed: [\"string\"])" ) )
assertFalse ( elementDescriptor . isCascaded ( ) )
assertThat ( request . getConnectorId ( ) , equalTo ( zeroValue ) )
Assert . assertEquals ( "Document ID mismatch" , expectedDocumentID , actualDocumentID )
Assert . assertEquals ( getDao ( ) . count ( ) , 0 )
assertEquals ( "{\"d\":{\"MaximalAge\":99}}" , StringHelper . inputStreamToString ( ( InputStream ) result . getEntity ( ) ) )
assertTrue ( fileContents . contains ( MULTI_LINE_VALUE ) )
TerminalParserTest . assertResult ( parser , "throw foo;" , ThrowStatement . class , "throw foo;" )
Assert . assertEquals ( "�驻�� 41 �拽�转" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
Assert . assertTrue ( existKeyValue )
assertEquals ( "1.2." + part , cfBundleShortVersionStringTransformer . transform ( "1.2." + part ) )
assertEquals ( expected , uri . toString ( ) )
assertTrue ( "our user should be admin in one VO" , vos . size ( ) >= 1 )
assertTrue ( instance . fromFileSystem ( pathname ) instanceof ConfigurationFileImpl )
Assert . assertEquals ( m , TestUtils . serializeAndRecover ( m ) )
assertEquals ( "()" , mnd . getParameterDisplaySignature ( ) )
assertEquals ( "Wrong class for missingNode" , NodeRemoverFilterType . class , filter . getClass ( ) )
Assert . assertNotNull ( addressResultsDto )
assertTrue ( tester . testXmlSerialization ( ) )
assertEquals ( future , underTest . collectAndDiscard ( futures ) )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertEquals ( "idElt1" , response . getProcessGroupFlow ( ) . getId ( ) )
Assert . assertEquals ( - 1.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
assertSame ( reply , myTestInstance . runCommandAsync ( "command" ) . get ( ) )
assertEquals ( expected , output )
assertEquals ( "Base for strings is wrong" , Double . valueOf ( 3.2d ) , parsed )
assertThat ( target . validate ( ) , is ( true ) )
assertNotNull ( jedis )
Assert . assertTrue ( "Incorrect file types returned" , CollectionUtils . isEqualCollection ( types1 , widget . getFileTypes ( ) ) )
Assert . assertEquals ( "byte length and file length do not match" , irodsFile . length ( ) , actual . length )
assertTrue ( thePosition . getClassInformation ( ) instanceof PositionClassInformation )
assertTrue ( rm . getResultsList ( ) . size ( ) > 0 )
assertEquals ( "Success" , json . getString ( "status" ) )
assertEquals ( expectedSource , instrumentedSource )
Assert . assertEquals ( 5 , arrays . size ( ) )
assertThat ( set . size ( ) , is ( 0 ) )
Assert . assertTrue ( zero . isZero ( ) )
assertEquals ( 4 , fixture . bytesRead ( ) )
assertEquals ( "gonzo" , result . getId ( ) )
assertNotNull ( editCap )
assertEquals ( 0 , result . length )
assertFalse ( "Bottom100 is empty" , result . isEmpty ( ) )
assertFalse ( "Arrays with different order should not be equal" , equals )
assertThat ( validationList1 , is ( Arrays . asList ( INVALID_DB_TYPE , INVALID_DB_SERVER_NAME , INVALID_USERNAME , INVALID_PASSWORD , INVALID_TRUST_ALL_ROOTS , INVALID_RESULT_SET_TYPE , INVALID_RESULT_SET_CONCURRENCY , INVALID_COMMAND , INVALID_TIMEOUT ) ) )
Assert . fail ( )
assertThat ( query . toString ( ) , is ( expectedToString ) )
assertEquals ( "An unexpected node membership was returned" , expected , result )
assertTrue ( validator . validate ( EntityNames . TEACHER , teachers ) . equals ( teachers ) )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertThat ( count , is ( 3 ) )
assertEquals ( 0 , counter . get ( ) )
assertEquals ( 1 , metrics . meter ( MetricRegistry . name ( SessionManager . SESSIONS_METRIC_PREFIX , "deleted" ) ) . getCount ( ) )
assertEquals ( "000000005f32a420f68b2645b4e0e8467cc2e111" , toHexString ( new SamrGetMembersInGroupRequest ( handle ) . getStub ( ) ) )
Assert . assertEquals ( expected , actual , delta )
Assert . assertEquals ( "[1,2,3,4]" , linkedList . toString ( ) )
runner . assertAllFlowFilesTransferred ( FetchS3Object . REL_FAILURE , 1 )
Assert . assertTrue ( "Failed to verify signed challenge" , SaslEcdsaNist256PChallenge . verify ( recreatedPublicKey , CHALLENGE , signature ) )
assertNull ( recursiveType . getArrayElementType ( ) )
assertEquals ( 600084223 , widget . color )
assertEquals ( oldPos + size , buffer . position ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertContainsOnly ( testee . getFileFilters ( ) , filter1 , filter3 )
assertEquals ( IotHubStatusCode . OK_EMPTY , result )
assertEquals ( endOfDay ( base . plusMonths ( 9 ) ) , absoluteTime )
assertTrue ( entity . equals ( loadedEntity ) )
assertEquals ( expected , actual )
assertEquals ( 3 , result . getViolations ( ) . size ( ) )
assertTrue ( features . size ( ) > 0 )
Assert . assertEquals ( 1 , c )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
Assert . assertTrue ( contains )
AssertJUnit . assertTrue ( difference . isZero ( 1e-7 ) )
assertTrue ( "Result: " + session . getHtmlToDisplay ( ) , session . getHtmlToDisplay ( ) . contains ( "<option value=\"\" selected=\"true\">" ) )
assertEquals ( expected , actual )
MutableMessageFactoryTest . assertExpiryDateEquals ( expiryDateValue , message )
Assert . assertEquals ( String . format ( "send to\n%s now" , html ( bb , "email" , "address.domain" ) ) , formatter . format ( "send to\nemail@address.domain now" , defaultOptions ( ) ) )
assertEquals ( 2 * padded ( ARRAY_OVERHEAD + FIRST_DIM * ( OBJECT_REF + padded ( ARRAY_OVERHEAD + SECOND_DIM * OBJECT_REF ) ) ) + padded ( ARRAY_OVERHEAD + 2 * INT ) , ThreadTrackingContext . getBytes ( ) )
Assert . fail ( "server-group undefined" )
assertEquals ( f1 , f2 )
assertCursor ( meta . pofClassAttribute , 1 , 1 , 10 , 17 )
assertFailureValue ( "unexpected (3)" , "2, 3, 4" )
assertThat ( parsed , is ( answer ) )
assertTrue ( connectionServiceImpl . deleteConnection ( mockDBConnection ) )
assertEquals ( "Unexpected state class" , AbstractSelectState . class , state . getClass ( ) )
assertServiceEvent ( ServiceEvent . REGISTERED , TestService . class , 5 , TimeUnit . SECONDS )
assertions . doesNotContain ( new long [ ] { 6 , 8 } )
Assert . assertEquals ( "Candidate size should be " + EXPECTED_CANDIDATE_SIZE , EXPECTED_CANDIDATE_SIZE , termList . size ( ) )
assertParser ( twig )
assertEquals ( ShipmentCollection . getData ( ) . size ( ) , 1 )
Assert . assertTrue ( EqualsBuilder . reflectionEquals ( result , expected ) )
Assert . assertEquals ( ps2 . getUuid ( ) , vol . getPrimaryStorageUuid ( ) )
conditions . assertHas ( someInfo ( ) , actual , condition )
assertFlowState ( ACCEPTED_FAILED )
assertEquals ( "Hello" , pull . receiveMessage ( ) . popString ( ) )
assertEquals ( expected , actual )
assertEquals ( 3 , list . size ( ) )
assertEquals ( "" , target . evaluate ( build , build . getWorkspace ( ) , listener , TestCountsContent . MACRO_NAME ) )
Assert . assertEquals ( xmlEsperado , icms101 . toString ( ) )
Assert . assertTrue ( deadline . isBefore ( nowPlusOneMin + 1 ) )
assertArrayEquals ( expectedOutput , output )
assertServerReceived ( "<iq id=\"*\" type=\"set\" from=\"userc@localhost/voxeo\" to=\"#callId@localhost\"><transfer xmlns=\"urn:xmpp:tropo:transfer:1\" terminator=\"#\" timeout=\"20000\" media=\"bridge\" to=\"tel:123456\" answer-on-media=\"false\"></transfer></iq>" )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
maps . assertContains ( description , actual , null )
assertTrue ( timeInstant != null )
assertTrue ( "The exception message must contain the processor name" + processor . getName ( ) , containsName )
assertTrue ( "Destination object was not added in stream's destinations set." , found )
assertThat ( cal , instanceOf ( Calendar . class ) )
assertEquals ( mockParse , queryPlan . getParseFields ( ) )
assertTrue ( OpenmrsUtil . isTestMode ( ) )
assertEquals ( expectedTokyoOffset , actual )
assertNull ( server )
assertEquals ( 1 , victim . getPreProcessors ( ) . size ( ) )
assertTrue ( "Invalid response statusCode: " + statusCode , statusCode == HttpServletResponse . SC_OK )
assertTrue ( "return too late" , time < TIME )
assertOut ( "a = b" )
assertEquals ( IllegalArgumentException . class , e . getClass ( ) )
Assert . assertNull ( wordAfter )
assertNotNull ( "Null resource returned" , resource )
assertTrue ( flag )
assertEquals ( "" , result )
Assert . assertEquals ( "1.23E+08" , result . getText ( ) )
assertEquals ( "I" , to . getMotion ( ) )
Assert . assertEquals ( expected , superflatPreset )
assertEquals ( "xxx" , o )
context . assertIsSatisfied ( )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( 1 , result . size ( ) )
assertTrue ( headerUserAchievements . getBronzeBadgesCount ( ) > 0 )
Assert . assertTrue ( combiSet . nbOfCombinations ( 2 ) == 3 )
assertEquals ( result , ParseUtils . parseQuery ( "consumer." , "verion=1.0.0&cluster=china" ) )
assertMockEndpointsSatisfied ( )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
assertEquals ( Double . valueOf ( arg ) , il . exec ( t ) )
Assert . assertEquals ( 0.25 , f0 . getPartialDerivative ( 1 ) , 0 )
assertEquals ( 1676497.5 , julDate . getJulianDate ( ) , TOLERANCE )
assertEquals ( Integer . valueOf ( 2 ) , myTestInstance . saveAsync ( doc , Durability . ACK ) . get ( ) )
Assert . assertNotNull ( savedTenant )
assertFalse ( can )
assertEquals ( location . getPort ( ) , 1935 )
assertThat ( result ( ) , not ( containsString ( "<price>" ) ) )
Assert . assertEquals ( ImmutableList . of ( ThresholdFilterHeaderExtender . FILTER_GT_MIN_AAF_HOM_ALT ) , annotator . getFiltersFor ( gt ) )
assertTrue ( RelationalNodeUtil . shouldExecute ( query , false ) )
Assert . assertEquals ( "when the import is in progress, the " + ResetImportAction . IMPORT_IN_PROGRESS + " view should be returned" , ResetImportAction . IMPORT_IN_PROGRESS , view )
Assert . fail ( )
assertThat ( formatter . format ( PlainDate . of ( 1603 , 4 , 4 ) ) , is ( "25. March Anno Domini 1603" ) )
assertThat ( result , is ( true ) )
context . assertSentryException ( statement , "CREATE ROLE r2" , SentryAccessDeniedException . class . getSimpleName ( ) )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
assertEquals ( true , check . isRequired ( ) )
assertTrue ( parser . isMyType ( document ) )
assertInvalidQuery ( query )
assertEquals ( 6. * 3600. + 6. * 60. + 6. , sec , 0.01 )
assertThat ( outcomes . size ( ) , is ( 1 ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertEquals ( Action . DISCONTINUE , discontinuationOrder . getAction ( ) )
assertLife ( playerB , 17 )
assertEquals ( new Dimension ( 50 , 50 ) , ac . getValue ( ) . getSize ( ) )
assertEquals ( expResult , result )
assertEquals ( Arrays . asList ( ) , candidates )
assertThat ( contextAgain , equalTo ( context ) )
assertVisitorSatisfied ( )
assertTrue ( actual . contains ( "    <fn>" + NEWLINE + "      <text>John Doe</text>" + NEWLINE + "    </fn>" ) )
assertEquals ( "service" , s1 . getType ( ) )
assertNotNull ( victim . get ( new COSObjectKey ( 6 , 0 ) ) )
Assert . assertEquals ( expected . getAttribute ( "id" ) , actual . getAttribute ( "id" ) )
assertNull ( array . getArray ( ) )
assertThat ( b . getNode ( ) , is ( s ) )
JSONAssert . assertEquals ( "{" + "status: 'not-built', description: 'This hasn\\'t been built', commit: {}" + "}" , s , JSONCompareMode . LENIENT )
assertNotNull ( point )
assertTrue ( state == IotHubConnectionStatus . DISCONNECTED )
assertEquals ( results . size ( ) , 1 )
assertEquals ( "This is my cookie from the server" , response )
assertNotNull ( threadSafe )
assertNull ( request . getEcommerceRevenue ( ) )
assertResponse ( response , 204 )
assertEquals ( chainID , AltcoinBlock . getChainID ( auxpowVersion ) )
Assert . assertEquals ( "Incorrect condition" , "(WTextField=\"1\" or (WTextArea=\"2\" and WDropdown=\"3\"))" , builder . build ( ) . toString ( ) )
assertEquals ( combineCounts ( ) , result )
assertEquals ( expResult , result )
assertFalse ( "wrong version read" , v == "unknown" )
Assert . assertEquals ( "1, 2, , 4" , bindValueToString )
assertEquals ( SpringPropertyProxy . class , result . getClass ( ) )
assertTrue ( "Content Is Test" , _textBuilder . contentEquals ( "Test" ) )
Assert . assertEquals ( "Example value" , schemas . get ( "CustomerType" ) . getExample ( ) )
assertEquals ( "ST" , loop . getSegment ( 0 ) . getElement ( 0 ) )
assertEquals ( 0 , counter . get ( ) )
assertResultSet ( res )
assertThat ( secondTx , hasThrownException ( ) )
Assert . assertNull ( user )
assertEquals ( BaseAction . INPUT , action . doDefault ( ) )
Assert . assertEquals ( "" , getChild . getParent ( ) )
assertFalse ( isEditable )
assertEquals ( "public static  main(final String[] args) " , actualContent )
assertNull ( variable )
assertThat ( actual , is ( expected ) )
Assert . fail ( "Error retrieving workflow list caused by: " + e . getMessage ( ) )
assertEquals ( NotificationConstants . KEW_CONSTANTS . NOTIFICATION_DOC_TYPE , document . getDocumentTypeName ( ) )
assertEquals ( Boolean . TRUE , result )
assertTrue ( mpis . getParts ( ) . isEmpty ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertThat ( vraptor . getParameterValues ( "name" ) , is ( equalTo ( values ) ) )
assertEquals ( obj . getArray ( ) , null )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertNoErrorNotifications ( )
assertEquals ( 0.0 , fixture . readHalf ( ) , 0.0 )
assertEquals ( repo . resolve ( gfs . getStatusProvider ( ) . branch ( ) ) , result . getCommit ( ) )
assertThat ( text ( contents ) , is ( "1\n" ) )
assertEquals ( events . size ( ) , size ( stream ) )
assertEquals ( expecetedTableName , builtTableName )
assertJsFunctionCallSequence ( asList ( "" + "formatter.background({\n" + "  \"description\": \"\",\n" + "  \"keyword\": \"Background\",\n" + "  \"name\": \"background name\"\n" + "});\n" , "" + "formatter.step({\n" + "  \"keyword\": \"Given \",\n" + "  \"name\": \"first step\"\n" + "});\n" , "" + "formatter.match({\n" + "  \"location\": \"path/step_definitions.java:3\"\n" + "});\n" , "" + "formatter.result({\n" + "  \"status\": \"passed\"\n" + "});\n" , "" + "formatter.scenario({\n" + "  \"description\": \"\",\n" + "  \"keyword\": \"Scenario\",\n" + "  \"name\": \"scenario 1\"\n" + "});\n" , "" + "formatter.step({\n" + "  \"keyword\": \"Then \",\n" + "  \"name\": \"second step\"\n" + "});\n" , "" + "formatter.match({\n" + "  \"location\": \"path/step_definitions.java:7\"\n" + "});\n" , "" + "formatter.result({\n" + "  \"status\": \"passed\"\n" + "});\n" , "" + "formatter.background({\n" + "  \"description\": \"\",\n" + "  \"keyword\": \"Background\",\n" + "  \"name\": \"background name\"\n" + "});\n" , "" + "formatter.step({\n" + "  \"keyword\": \"Given \",\n" + "  \"name\": \"first step\"\n" + "});\n" , "" + "formatter.match({\n" + "  \"location\": \"path/step_definitions.java:3\"\n" + "});\n" , "" + "formatter.result({\n" + "  \"status\": \"passed\"\n" + "});\n" , "" + "formatter.scenario({\n" + "  \"description\": \"\",\n" + "  \"keyword\": \"Scenario\",\n" + "  \"name\": \"scenario 2\"\n" + "});\n" , "" + "formatter.step({\n" + "  \"keyword\": \"Then \",\n" + "  \"name\": \"third step\"\n" + "});\n" , "" + "formatter.match({\n" + "  \"location\": \"path/step_definitions.java:11\"\n" + "});\n" , "" + "formatter.result({\n" + "  \"status\": \"passed\"\n" + "});\n" ) , formatterOutput )
assertEquals ( "something == x && something == y" , result )
Assert . assertEquals ( "(124_125insAC)" , del . toHGVSString ( ) )
Assert . assertEquals ( "Decode brackets not correct" , out , WebUtilities . decodeBrackets ( in ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\" , "" } } ) ) )
assertEquals ( ImmutableMap . of ( "foo" , "bar" ) , everrestConfiguration . getAllProperties ( ) )
assertNotNull ( AllTime . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( threadReleasedLatch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( "/pentaho-di" , biServerContextPath )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertFalse ( "The text field of the calendar should not be empty after selecting a date" , textField . getAttribute ( "value" ) . isEmpty ( ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
assertArrayEquals ( Arrays . toString ( d . getResult ( ) ) , refar , d . getResult ( ) )
Assert . assertEquals ( "{}" , reference . get ( ) . getAttachment ( Http2Client . RESPONSE_BODY ) )
assertTrue ( result )
factory . assertCredentials ( destination . getCredentials ( ) )
assertEquals ( SliceReadStatus . StreamNotFound , slice . status )
assertTrue ( stringArray . length == 3 )
assertThat ( radio , hasSelectedRadioButton ( hasValue ( SELECTED_BUTTON_VALUE ) ) )
assertNotNull ( getResponse )
assertEquals ( new Dimension ( 100 , 100 ) , res )
assertFailure ( subject , new HostnameFormatValidator ( ) , "[" + subject + "] is not a valid hostname" )
assertTheEntireDomainTreeHasPermissionsDefined ( client )
assertTrue ( actual . equals ( expected ) )
assertFalse ( validator . isValidForRoutingTable ( globalAddress ) )
assertFalse ( lock . lock ( ) )
Assert . assertArrayEquals ( expected , processed )
assertEquals ( cache . get ( "a" ) , "b" )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertNotNull ( sizes )
assertEquals ( Address . newBuilder ( ) . setType ( Type . TYPE_UNKNOWN ) . setAddress ( "some-socket-address" ) . build ( ) , BinlogHelper . socketToProto ( unknownSocket ) )
assertBounds ( 0 , 15 , 10 , 20 )
assertFalse ( fs . exists ( newDir ) )
assertEquals ( asList ( debug ( mdcValues , marker , message , arg1 , arg2 ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( exp , out )
assertTrue ( set . isEmpty ( ) )
Assert . assertEquals ( "{var}" , e . toString ( ) )
assertThat ( nextToken , is ( nullValue ( ) ) )
assertNotNull ( instance . getFirstAtomMapping ( ) )
assertEquals ( Arrays . asList ( aa , ab , ac , ba , bb ) , kittens )
assertEquals ( sb . toString ( ) , b . toString ( ) )
assertEquals ( "testutils/calculator.wsdl" , info . getWsdlLocation ( ) )
assertEquals ( packet , p )
assertThat ( term , is ( "���炽�裤����" ) )
assertEquals ( text , baos . toString ( "UTF-8" ) )
assertEquals ( "1" , type . getValue ( rs , 1 ) )
assertThat ( searchResponse . getHits ( ) . getTotalHits ( ) , is ( 16l ) )
assertEquals ( "example" , Annotations . getServiceAnnotations ( ) . getService ( ) )
assertStringRepresentationIs ( "Key {one, 2, }" )
assertEquals ( false , rss )
assertEquals ( 1l , session . from ( $ ( dep ) ) . where ( $ ( dep . getEmployees ( ) ) . contains ( emp1 ) ) . count ( ) )
assertValidationFailures ( schema , config )
assertEquals ( "A2" , cache . get ( "a" ) )
assertEquals ( unused , h . getUnused ( ) )
assertThat ( queue . hasRemaining ( ) , is ( true ) )
assertEqualDoubleArrays ( pyplus , plus , epsilon )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'the' " ) )
assertArrayEquals ( expected , hands . getHandsComp ( ) )
assertNull ( query )
assertEquals ( "333 4444 55555" , StringUtils . join ( toText ( select ( jcas , Token . class ) ) , " " ) )
assertThat ( parsed , equalTo ( source ) )
assertEquals ( expectedResult , result )
assertThat ( "Integer schema" , combined , matches ( new SchemaMatcher ( expected ) ) )
assertEquals ( ResetContent . MESSAGE , ri . getDescription ( ) )
assertEquals ( "Outer class static variable is 778" , 778 , ret )
Assert . assertNotNull ( user )
Assert . assertEquals ( "<customIcons><Icon><UUID>h9T0QaXsTOCMqYKlB50o7w==</UUID><Data>AAAAAAAAAAAAAA==</Data></Icon></customIcons>" , xml )
assertXpathEvaluatesTo ( "" , "//ui:label/@what" , label )
assertTrue ( peterRank <= 2 )
assertEquals ( list , result )
assertFalse ( "Got a location" , detector . getFileHandler ( ) . isLocationDefined ( ) )
TestHelpers . assertDeepEquals ( expected , snapshot . getValue ( ) )
assertAppearanceFontSize ( dest , 21.25f )
assertions . contains ( values )
assertEquals ( expectedQuery , actualQuery )
assertNotNull ( result )
Assert . assertNotNull ( Files . getOwner ( path ) )
assertThat ( phase . getGoals ( ) , contains ( goal ( "goal1" , 500 , 500 ) ) )
assertThat ( options . getSnippetType ( ) , is ( SnippetType . CAMELCASE ) )
context . assertIsSatisfied ( )
assertTrue ( pebbleEngineProducer . pebbleEngine ( ) . getExecutorService ( ) instanceof CustomExecutorService )
assertions . isNotGreaterThan ( 2 )
assertEquals ( refPoint , testPoint )
assertEquals ( queryCopy . getQueryGeometry ( ) , query . getQueryGeometry ( ) )
assertEquals ( new HashSet < String > ( Arrays . asList ( "staff1" , "staff2" , "staff3" ) ) , underTest . filterConnectedViaCohort ( new HashSet < String > ( staffIds ) , e ) )
assertThat ( a , equalTo ( a1 ) )
assertSame ( injector . getInstance ( ScopeTest . class ) , injector . getInstance ( ScopeTest . class ) )
Assert . assertEquals ( globalConfig . getStringField ( ) , result . getStringField ( ) )
assertReceivedHtml ( )
assertMap ( navigator . getStateParameterMap ( ) , entry ( "bar" , "" ) )
assertThat ( output , is ( equalTo ( expected ) ) )
assertTrue ( threadedSingleThreadPerKernelTestHelper ( device , 16 ) )
assertEquals ( map . size ( ) , n * nThreads )
assertTrue ( expectPawn == Piece . WHITE_PAWN )
assertTrue ( satisfiesPrecondition ( cu ) )
assertTrue ( ! collector . getStatements ( ) . isEmpty ( ) )
assertEquals ( expectedAllocationPolicy , actualAllocationPolicy )
assertEquals ( "\"How pretty she is!\" said Ben to himself." , s . get ( 0 ) )
assertEquals ( "Wrong IMDB ID" , test . getImdb ( ) , result . getImdbId ( ) )
assertTrue ( v . allowsUnrecognizedPaths ( ) )
assertEquals ( expResult , result )
assertFalse ( generatedIds . contains ( id ) )
Assert . assertFalse ( "Invalid response from interceptor" , result )
assertThat ( runtimeClass , typeCompatibleWith ( FilterFactoryDecorator . class ) )
assertEquals ( expectedOutput , TemplateReplacer . applyTemplateChanges ( context , customTemplate ) )
Assert . assertNotNull ( factory )
assertTrue ( validator . validate ( EntityNames . STUDENT_SCHOOL_ASSOCIATION , associations ) . isEmpty ( ) )
Assert . assertTrue ( "errors list should be empty" , errors . isEmpty ( ) )
assertNotNull ( user )
assertFalse ( "No shard allocated" , result )
assertEquals ( 1 , allVisible . size ( ) )
assertEquals ( expected , actual )
assertEquals ( "Test" , request . getSearchString ( ) )
assertEquals ( "Required profiles" , "tui" , new ConciergePlatformBuilder ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertEquals ( resizer , receivedResizer )
assertThat ( "Unexpected MDX query after adding a new hierarchy" , getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Gender].[All Gender]}, {[Product].[All Products], [Product].[Drink], [Product].[Food], " + "[Product].[Non-Consumable]}) ON ROWS FROM [Sales]" ) ) )
assertEquals ( map1 , map2 )
assertArrayEquals ( ONE_BYTE_CODE_LIST , ByteArray . readAllBytes ( nlriByteBuf ) )
assertEquals ( Hex . toHexString ( outputStream . toByteArray ( ) ) , "00000000e65642fb8690d346879621aa30ed8486000002002e002e000400020017000000000000001700000053006500440075006d006d007900440075006d006d007900440075006d006d007900310052006900670068007400" )
Assert . assertEquals ( 100 , statusUfsOnlyFile . getInAlluxioPercentage ( ) )
assertEquals ( dataflow , edit . getSubject ( ) )
assertTrue ( ! customerKey . prefixOf ( key ) )
assertThat ( result , is ( false ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( expected , getStringWithContext ( TestUpdateImpl . example ( ) ) )
assertTrue ( it . next ( ) . asText ( ) . contains ( "mvc" ) )
assertEquals ( commandCaptor . getValue ( ) . reason ( ) , Status . DEADLINE_EXCEEDED )
assertEquals ( FilterReply . ACCEPT , mockAppender . getFilterChainDecision ( loggingEvent ) )
Assert . assertFalse ( Settings . CACHING_ENABLED )
assertTrue ( hasPermission )
Assert . assertTrue ( schema instanceof ObjectSchema )
assertEquals ( 5 , d , 0 )
result . assertIsSatisfied ( 100 )
assertThat ( parsed , is ( answer ) )
assertEquals ( 16 , profile . dashBoards [ 0 ] . widgets . length )
assertFalse ( violation )
assertTrue ( Arrays . stream ( oboString . split ( "\n" ) ) . anyMatch ( line -> line . startsWith ( "relationship:" ) && line . contains ( "named relation y1" ) ) )
assertEquals ( "GBP 5.82" , test . toString ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "��丿 �丨馗� 丿�诏乇" , t . format ( new Date ( ) ) )
assertStoreContains ( out , 9 , 8 , 7 , 1 , 2 , 3 )
assertEquals ( 1 , a . getSix ( ) . intValue ( ) )
assertEquals ( ImmutableSet . of ( "b" ) , ex . getMissingIds ( ) )
Assert . assertFalse ( "Failure expected false" , r . getLeft ( ) )
assertThat ( getInst ( ) . findNode ( "nodeName" ) , equalTo ( node ) )
assertEquals ( "Object Type: RPKI Manifest\n" + "Signing time: 2008-09-01T22:38:29.000Z\n" + "Version: 0\n" + "Number: 68\n" + "This update time: 2008-09-01T22:43:29.000Z\n" + "Next update time: 2008-09-02T22:43:29.000Z\n" + "Authority Key Identifier: " + aki + "\n" + "Filenames and hashes:\n" + "    filename1 ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\n" + "    filename2 cb8379ac2098aa165029e3938a51da0bcecfc008fd6795f401178647f96c5b34\n" , output . getBuffer ( ) . toString ( ) )
assertTrue ( unit . isValid ( null , null ) )
assertEquals ( 1 , matcher . groupCount ( ) )
assertEquals ( "[c_0 = 22,c_1 = 11,c_2 = 42,c_3 = 32,c_4 = 27,c_5 = 37,r_0 = 30,r_1 = 86,r_2 = 55,x_0_0 = 4,x_0_1 = 1,x_0_2 = 10,x_0_3 = 5,x_0_4 = 3,x_0_5 = 7,x_1_0 = 12,x_1_1 = 8,x_1_2 = 18,x_1_3 = 16,x_1_4 = 15,x_1_5 = 17,x_2_0 = 6,x_2_1 = 2,x_2_2 = 14,x_2_3 = 11,x_2_4 = 9,x_2_5 = 13,xa_0_0 = 4,xa_0_1 = 1,xa_0_2 = 10,xa_0_3 = 5,xa_0_4 = 3,xa_0_5 = 7,xa_1_0 = 12,xa_1_1 = 8,xa_1_2 = 18,xa_1_3 = 16,xa_1_4 = 15,xa_1_5 = 17,xa_2_0 = 6,xa_2_1 = 2,xa_2_2 = 14,xa_2_3 = 11,xa_2_4 = 9,xa_2_5 = 13]" , survoPuzzle . store . toStringOrderedVars ( ) )
assertThat ( vreAuthorization , is ( present ( ) ) )
assertEquals ( model . toString ( ) , binder . getModel ( ) . toString ( ) )
assertEquals ( "V" , five )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( resultA . hashCode ( ) , resultB . hashCode ( ) )
Assert . assertEquals ( expected , input )
Assert . assertEquals ( "SELECT INTERVAL '6-11' YEAR TO MONTH\nFROM DUAL;\n" , text )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-l" , "1" , "-r" , file . getAbsolutePath ( ) } ) )
assertEquals ( "There should be 3 lights" , 3 , lights . size ( ) )
assertNull ( this . g2 . getClipBounds ( ) )
assertEquals ( 281547991161788L , ceosReader . readB8 ( ) )
Assert . assertTrue ( tags . size ( ) >= 1 )
assertThat ( image . getOptions ( ) , is ( notNullValue ( ) ) )
assertNotNull ( sb . install ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertOut ( "var /** @type {number} */ a = new Number(\"1\")" )
assertThat ( tunneledMetaStoreMapping . isAvailable ( ) , is ( false ) )
assertTrue ( result )
assertEquals ( "Unexpected result found when parsing jobName=" + input , expected , found )
assertTrue ( Arrays . equals ( data , wrapper . getData ( ) ) )
Assert . assertEquals ( minorVersion , minorVersionProxy )
assertSame ( 5 , conf . getDefaultGatheringTimeout ( ) )
assertEquals ( "Substitution was not correctly applied" , "This is a lunches lunches" , record . getFormattedMessage ( ) )
assertTrue ( ! retrievedIdValues . contains ( application . getId ( ) ) )
assertTrue ( 10 > IterableUtils . countNodes ( getDatabase ( ) ) )
arrays . assertHasSize ( description , null , 8 )
assertEquals ( ( Double ) 0d , getTarget ( results , "high_time" ) )
assertThat ( result , is ( true ) )
assertThat ( time . with ( PlainTime . COMPONENT . setToNextFullMinute ( ) ) , is ( PlainTime . of ( 0 , 1 ) ) )
assertThat ( page . multiSelectWithSelection . getAllSelectedValues ( ) , contains ( "1" , "3" ) )
assertNull ( "Date parsing is wrong" , mapper . readBitemporalDate ( new Columns ( ) , "vt_to" ) )
assertEquals ( "bearista" , convSessionId )
Assert . assertEquals ( "{\"at\":\"01:33:08.750431006Z\"}" , os . toString ( ) )
assertTrue ( avroSchema != null )
assertEquals ( fmt . getContext ( ) . getLocale ( ) , loc )
Assert . assertSame ( owner , pa . getAccessLevel ( ) )
assertArrayEquals ( new short [ ] { 2048 , 4096 , 0 } , cv . getPhaseAngles ( ) )
Assert . assertEquals ( valorTotalTributos , imposto . getValorTotalTributos ( ) )
assertTrue ( "Incorrect mapping of property with annotated setter" , actual . indexOf ( "property-2: value2\r\n" ) >= 0 )
assertThat ( foundThread , is ( Optional . of ( thread ) ) )
assertEquals ( 4 , exceptions )
Assert . assertEquals ( set ( b , c ) , presenceDao . getSubdirectories ( a ) )
assertEquals ( 123456.89f , executeTestMethod ( test , Float . class , null , 123456.89f ) . floatValue ( ) , 0.0f )
assertThat ( actualJson , is ( expectedJson ) )
assertEquals ( result , threadCount * invocationsPerThread + 1 )
assertEquals ( HTTP_RESPONSE_MESSAGE , inMessage . get ( HTTPConduit . HTTP_RESPONSE_MESSAGE ) )
Assert . assertTrue ( "Unable to fetch module update url: " + url , updateRdf . contains ( "<updates" ) )
assertNotNull ( result )
Assert . assertArrayEquals ( bytes , bytes2 )
assertThat ( criterion . convertValueForDatastore ( new ArrayList < String > ( ) ) . size ( ) , is ( 0 ) )
assertEquals ( "((ENTITY_ID is_null  OR ENTITY_ID != " + userId + ") AND ((ID = " + userId + " AND (ACTUALOWNER =  OR ACTUALOWNER is_null )) OR ACTUALOWNER = " + userId + "))" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertTrue ( "flux vide" , output . size ( ) > 0 )
assertContainsMesssage ( messages , Severity . INFO , HEALTH_CHECK_IS_ALIVE_MESSAGE , 0 )
assertEquals ( "b" , toml . getString ( "target.'cfg(unix)'.dependencies.b" ) )
assertMockEndpointsSatisfied ( )
assertResultSet ( res )
assertArrayEquals ( emptyArray , Base64 . encodeBase64 ( emptyArray ) )
assertNotNull ( settings )
assertThat ( feature . getProperties ( ) , is ( smnRecord ) )
assertThat ( other , DateMatchers . sameMillisecondOfSecond ( date ) )
assertTrue ( "No company movies found" , ! result . isEmpty ( ) )
assertTrue ( result . get ( ) )
assertEquals ( "'a,b,c',xyz" , sw . toString ( ) )
assertTrue ( check ( "tag" , input , output ) )
assertEquals ( 10000L , messagingQosParam . getRoundTripTtl_ms ( ) )
assertEquals ( 0 , s . getRequiredSkills ( ) . values ( ) . size ( ) )
assertTrue ( set . contains ( tuple ) )
assertEquals ( expected , actual )
assertEquals ( "There should be one file" , 1 , files . length )
assertEquals ( expected , result , 0.0 )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertEquals ( 2 , rules )
assertEquals ( H2JdbcUrlFactory . H2_IN_MEMORY_JDBC_URL_PREFIX + dbName , jdbcUrl )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "wmfImageTest02.pdf" , sourceFolder + "cmp_wmfImageTest02.pdf" , destinationFolder , "diff_" ) )
assertEquals ( null , CollectionUtils . getByPath ( input , "d" ) )
assertEquals ( "CREATE TABLE CATALOG_NAME.TABLE_NAME (COLUMN1_NAME BIGINT AUTO_INCREMENT NULL) AUTO_INCREMENT=2" , generatedSql [ 0 ] . toSql ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertNumEquals ( DoubleNum . valueOf ( 0 ) , cost )
Assert . assertEquals ( ticketId , ticket . getTicketString ( ) )
assertEquals ( 10 , toTest . read ( ) )
assertEquals ( v , v2 )
assertEquals ( o1 , o2 )
assertEquals ( 1 , clusters . size ( ) )
assertTrue ( instance . fromDatabase ( dataSource , "table" , "key" , "value" ) instanceof ConfigurationDbImpl )
assertThat ( monthsWithLengthFour . values ( ) , contains ( "June" , "July" ) )
Assert . assertEquals ( bitField . getStartElapsedEncodingStrategy ( ) , StartElapsedTimeEncodingStrategy . PREV_EQUALS )
assertEquals ( id , db . getCharValue ( id , CHAR_STORED_FILED_NAME ) )
Assert . assertEquals ( 1 , paths . size ( ) )
assertEquals ( graphIds , elementMock . getGraphIds ( ) )
assertFalse ( result . getSuccess ( ) )
assertEquals ( 2 , fired )
assertContains ( "Master footer is here" , content )
assertNotEquals ( testResource1 , testResource2 )
Assert . assertEquals ( 0 , concept . getCompatibleNames ( new Locale ( "en" ) ) . size ( ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( "7613255" , user . getId ( ) )
assertThat ( displayableGoal , is ( new DisplayableGoal ( "project1" , "phase1" , "goal1" , "dep1 dep2" , 0 , 4 , 8 ) ) )
Assert . fail ( "Should have Assert.failed on the second parameter to 'contains' not " + "being bound." )
assertFalse ( problem )
assertEquals ( context , config . getContext ( ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Long" ) )
assertEquals ( "aTestString" , classUnderTest . getImportedFromTable ( ) )
Assert . assertEquals ( r . asNode ( ) , query . getParam ( "s" ) )
assertEquals ( "Hello <b>there</b>!" , TextUtil . stripNewlines ( cleanHtml ) )
assertTrue ( trashState )
assertTrue ( "Waited less than 700ms: " + waited , waited < 700 )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertActive ( player1 , player2 , player3 , player4 )
Assert . assertEquals ( 0 , errors . size ( ) )
assertThat ( hostConfig . restartPolicy ( ) , is ( HostConfig . RestartPolicy . always ( ) ) )
assertTrue ( actual . isEmpty ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertEquals ( entityCrudKitSettings , settings . getSettings ( ) )
assertEquals ( contractInfo , contractRegistry . registerContract ( targetClass , contractClass ) )
Assert . isTrue ( c . getTitle ( ) . equals ( title ) )
assertThat ( result , is ( "0FFFFFFF2" ) )
Assert . assertFalse ( context . getResult ( ) )
assertEquals ( 1d , t , 0.1f )
Assert . assertEquals ( "a" , qy . get ( 0 ) )
assertEquals ( "aTestString" , classUnderTest . getProcedureSeparator ( ) )
assertThat ( encoded , not ( stringContainsInOrder ( "<Bundle" , "<entry>" , "<base value=\"" , "<Patient" , "<id value=" ) ) )
assertThat ( formatterOutput , is ( "classpath:path/test.feature:2\n" ) )
assertThat ( status . code , is ( HttpURLConnection . HTTP_BAD_REQUEST ) )
Assert . assertEquals ( "gecko1_8" , provider . getPropertyValue ( mockServletRequest ) )
assertThat ( isTransactionRelated , is ( false ) )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertThat ( expected . getMessage ( ) , startsWith ( "[foo] did not satisfy [" + getClass ( ) . getName ( ) ) )
assertNotNull ( shareLibService . getShareLibJars ( "pig" ) )
assertNotNull ( result )
assertSingleReplacement ( tokenIterator , "{var}" , "foo" , "\\{foo\\}" )
assertEquals ( 11 , p . getTotalPages ( ) )
assertEquals ( "gt0100" , code )
Assert . assertEquals ( 1 , impl . getScheduledIdentifiers ( ) . size ( ) )
assertEquals ( 2 , beans . size ( ) )
assertNotNull ( result )
assertEquals ( n . getTarget ( ) , n . getLinkTarget ( ) )
Assert . assertNull ( "Should be null for option with null code" , SelectListUtil . getOptionWithMatching ( options , "A" ) )
assertNotEquals ( modifyAliases1 , modifyAliases2 )
Assert . assertEquals ( 0 , l . size ( ) )
Assert . assertEquals ( expected , actual )
assertFalse ( constraint . fulfilled ( iContext ) )
Assert . assertEquals ( null , vo )
assertEquals ( "http://foo.bar.com/fubar?a=b" , eu . withParameter ( EldaURL . OPERATION . SET , "a" , "b" ) . toString ( ) )
assertThat ( messages , is ( empty ( ) ) )
assertAccessForbidden ( client )
assertThat ( description . toString ( ) , startsWith ( "a stage that completed exceptionally with java.io.IOException: error" ) )
assertEquals ( 1 , stat . getIno ( ) )
assertEquals ( "hello" , CompletableFuturesExtra . getCompleted ( future ) )
Assert . assertTrue ( response . contains ( "<out>AudiTesting enhanced REST Feature relative mapping</out>" ) )
assertEquals ( "https://www.google.com/apis/ads/publisher" , config . getNamespacePrefix ( ) )
assertEquals ( new MockServer ( ) . getResultURL ( ) , resultURL . toString ( ) )
assertCorrectPropertyPathStringRepresentations ( constraintViolations , "addressesPerCity[Lyon]" )
mock . assertIsSatisfied ( )
assertThat ( driver . findElement ( By . id ( "userIdMDC" ) ) . getText ( ) , is ( "user1" ) )
assertArrayEquals ( context , testBuffer . getBytes ( ) , bufferWriteStream . toBuffer ( ) . getBytes ( ) )
assertTrue ( okstate . get ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( "OK" , status )
assertTrue ( events . size ( ) == 5 )
assertTrue ( "Wrong simplified filter: " + simplified , simplified == null || simplified instanceof AllFilter )
assertThat ( listener . awaitCompletion ( 0 , TimeUnit . MINUTES ) , is ( true ) )
assertEquals ( "{\"d\":{\"Age\":42}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( clonedName , hadoopClusterDelegate . editNamedCluster ( null , namedCluster , shell ) )
assertLog ( Log . ERROR , "test error argument argument2 argument3" , exception )
assertFocused ( c11 )
arrays . assertContains ( description , actual , other )
assertNotNull ( tutor )
assertEquals ( "��丿 �丨馗� 丿�诏乇" , t . format ( new Date ( ) ) )
assertThat ( Stage . getDurationOfStageFromRun ( previousRun , getPopulatedStage ( ) ) , is ( - 1L ) )
Assert . assertNotNull ( predicate )
Assert . assertEquals ( true , bh . decodeXml ( multiValuedAttribute , null , null ) )
assertNull ( result )
assertNotNull ( entity . getId ( ) )
arrays . assertDoesNotContain ( description , actual , value , null )
assertEquals ( error . getClass ( ) . getSimpleName ( ) + " in " + "TestName.methodName" , getAttribute ( marker , MESSAGE ) )
assertEquals ( allUsers . get ( 0 ) , person )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
maps . assertContainsAnyOf ( someInfo ( ) , actual , new MapEntry [ 0 ] )
assertEquals ( "Unexpected primary style name" , state . primaryStyleName , layout . getPrimaryStyleName ( ) )
Assert . assertEquals ( 4 , root . left . right . data . intValue ( ) )
Assert . assertThat ( properties . size ( ) , IsEqual . equalTo ( 0 ) )
assertValueModelFires ( model , interval , expected )
assertResultSet ( res )
assertNotNull ( Channel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertFalse ( plan . contains ( "Statistics" ) )
Assert . assertTrue ( COLUMN . equals ( actual ) )
assertThat ( this . requestMap , hasKey ( "pagedData" ) )
assertArrayEquals ( expected [ i ] , output , 0 )
assertThat ( sw . toString ( ) , is ( equalTo ( "    hello\n    world\n" ) ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) )
assertEquals ( 3 , count )
Assert . assertTrue ( false )
assertAnnotations ( 2 , Vehicle . class , new TestVehicle ( 0 , "Hovercraft" , "OTHER" ) , new TestVehicle ( 1 , "blue satellite" , "SPACE" ) )
assertEquals ( "Usage: man [<options>]" + getLineSeparator ( ) + "[OPTION...]" + getLineSeparator ( ) + getLineSeparator ( ) + "Options:" + getLineSeparator ( ) + "  -d, --debug    emit debugging messages" + getLineSeparator ( ) + "  -D, --default  reset all options to their default values" + getLineSeparator ( ) , clp . printHelp ( ) )
Assert . fail ( "Mechanism name could not be null" )
assertEquals ( asList ( "A" , "B" , "HELLO" ) , collected )
assertEquals ( 0 , result )
assertEquals ( "[a,b,c]" , ctxt . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( 45 , list . size ( ) )
assertNull ( array )
assertThat ( result , is ( representation ) )
assertNull ( activity . getHistoryTimeToLive ( ) )
assertEquals ( "Field value should propagate to the corresponding key in the map" , "value" , map . get ( "key" ) )
context . assertEquals ( "Hello!" , body . toString ( ) )
assertThat ( data . equals ( other ) , is ( true ) )
assertEquals ( "incorrect value" , 1 , aNumber . signum ( ) )
assertEquals ( expected , dbMeta . getFieldDefinition ( valueMeta , null , null , false , false , false ) )
Assert . assertFalse ( dataFlowShell . hasAccess ( RoleType . VIEW , OpsType . STREAM ) )
assertNotNull ( User . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( "TestSetPlace 0" , 0 == related . getPlace ( ) )
assertNotNull ( formService . submitStartForm ( processDefinitionId , properties ) )
Assert . assertEquals ( 2 , path . getShapes ( ) . size ( ) )
Assert . assertEquals ( "la femme frappe le chien sur le rocher et frappe le chien derri猫re le rideau" , this . realiser . realise ( aggregated ) . getRealisation ( ) )
assertPointArrayArrayEquals ( expected , actual )
assertValidationFailures ( schema , config )
assertEquals ( "Revision null ()" , nullRevision . toString ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertTrue ( "output does not contain version" , listOutput . contains ( "version" ) && listOutput . contains ( "metadata" ) )
Assert . assertEquals ( fullName , CallerLoggerUtil . getName ( null ) )
assertEquals ( "SimpleInterest{\n" + " RateAndPeriods{\n" + "  rate=Rate[0.05]\n" + "  periods=100}}" , ci . toString ( ) )
Assert . assertNull ( RpcUtils . getInvocationId ( inv ) )
assertFalse ( mediator . changeNick ( " Amy " ) )
assertArrayEquals ( test , getInputStream ( ) . readLittleIntArray ( test . length ) )
assertTrue ( txNew . isPresent ( ) )
assertEquals ( expected , actual )
assertThat ( results , empty ( ) )
assertArrayEquals ( GPUVec . convert ( result ) , multiply . toArray ( ) , 0.01 )
Assert . assertEquals ( 0 , patientCount )
assertEquals ( expected , result )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( cp , point )
assertTrue ( true )
assertEquals ( with . schema ( ) , withoutSchema . add ( field ) )
assertEquals ( 0 , users . size ( ) )
assertFalse ( presenter . isDirty ( ) )
assertEquals ( 1148032488000L , cdrEvent . getStartTimeAsDate ( tz ) . getTime ( ) )
assertThat ( formatterOutput , sameJSONAs ( expected ) )
assertEquals ( expResult , result )
assertEquals ( diff , result . intValue ( ) )
assertSuccess ( result )
assertEquals ( "token should be not null and not empty" , sap , token )
assertTrue ( arrayType . isArray ( ) )
assertEquals ( fakeResolver , factory . newNameResolver ( new URI ( "bbb://foo" ) , Attributes . EMPTY ) )
assertEquals ( 1 , instances )
assertTrue ( ex . isPrime ( 71 ) )
assertTrue ( arr . some ( callbackfn ) )
assertEquals ( "" , result )
assertThat ( serialisedBadgesDetailsOf ( job ) , is ( nullValue ( ) ) )
assertDropdownIsBelow ( )
assertEquals ( object , target . anObject )
assertOut ( "goog.array.forEach(obj, function (i) {\n\tbreak;\n})" )
assertThat ( tuple . getIntegerOrDefault ( "field" , 2 ) , equalTo ( 2 ) )
assertThat ( m , arrayWithSize ( 1 ) )
assertTrue ( ulongValue == 100000 )
assertThat ( children , containsInAnyOrder ( clsB ) )
Assert . assertEquals ( String . format ( "a %s text" , this . html ( bb , "http://something" , "url description" ) ) , formatter . format ( "a [url='http://something']url description[/url] text" , defaultOptions ( ) ) )
assertEquals ( "Response body is not correct." , USER_IN_DEFAULT_REALM , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_DEFAULT_REALM , CORRECT_PASSWORD , SC_OK ) )
assertTransformedText ( normalizedText , inputText , "de" , segmenter , normalizer )
assertTrue ( d1 instanceof PublicCloneable )
Assert . assertEquals ( "$classpath" , location )
assertEquals ( CodecSupport . toString ( Base64 . decode ( EX_12_SUFFIX ) ) , plaintext )
assertEquivalent ( bufferB , new Buffer ( ) . writeUtf8 ( us + xs + ys ) )
assertFalse ( df . isAvailable ( ) )
assertEquals ( 0 , array . length )
assertEquals ( EthiopicDate . of ( 2005 , 13 , 5 ) , test )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertEquals ( counter . getValue ( ) , 0 )
Assert . assertEquals ( "[:d = number.lt(my.product.price, 4.2)]" , p . q ( ) )
assertTrue ( diff . toString ( ) , diff . similar ( ) )
assertSame ( solution , SolutionListUtils . findBestSolution ( list , comparator ) )
Assert . assertEquals ( 3 , total )
assertTrue ( writer . toString ( ) . startsWith ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<ediroot>" + "<interchange Standard=\"EDIFACT\" SyntaxId=\"UNOL\" SyntaxVersion=\"1\"" ) )
assertEquals ( ( short ) 123 , deserialize . readShort ( ) )
Assert . assertEquals ( "(aa_change_ssr (aa_point_location (aa_char Cys) 123) ( 3 _ 4 ))" , aa_change_ssr . toStringTree ( parser ) )
assertEquals ( expected , converted )
assertion . satisfies ( "is hunk" )
assertFalse ( ic . outgoingResponse ( reqDetails , new ResponseDetails ( resource ) , req , resp ) )
Assert . fail ( "an exception should have been thrown" )
assertNotNull ( Today . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
listener . assertEventFired ( new SortOrder ( "foo" , SortDirection . DESCENDING ) )
assertEquals ( 2 , res . getInt ( "nbHits" ) )
assertEquals ( "Unexpected response" , "ONCE" , v )
assertEquals ( module . getAppModuleName ( ) , applicationInterfaceRepository . getApplicationModules ( filters ) . get ( 0 ) . getAppModuleName ( ) )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( Arrays . asList ( ) , res . getValues ( ) )
assertEntityCount ( 0 , entity , TEST_CONNECTION_ID )
assertEquals ( 0.0267 , density , .001 )
Assert . assertEquals ( 3 , resultList . size ( ) )
assertEquals ( BaseAction . SUCCESS , action . detail ( ) )
assertEquals ( t , new HttpURL ( s ) . toString ( ) )
assertTrue ( result )
assertEquals ( item . getType ( ) , result )
assertEquals ( "Boolean value does not match" , bookmark . isShared ( ) , loadedBookmark . isShared ( ) )
assertThat ( children , is ( empty ( ) ) )
Assert . assertEquals ( 211 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( mockResponse , testResult )
assertions . contains ( null )
assertThat ( HibernateSettingsXml . class , hasValidGettersAndSettersExcluding ( excludeProperties ) )
assertTrue ( seq . isLastMessage ( ) )
assertThat ( DomainPermissions . getInstanceWithGrantOption ( systemPermissionName ) , sameInstance ( domainPermission ) )
assertEquals ( 7 , s1 . getClausesCount ( ) )
assertNotNull ( template . getRootNode ( ) )
assertEquals ( builder . learningCurveLimit , 3 )
assertSame ( "Mismatched resolved value" , expected , actual )
Assert . assertEquals ( 3 , byteRange . getRanges ( ) )
assertTrue ( drugs . isEmpty ( ) )
assertEquals ( mvj . get ( "OriginAimedDepartureTime" ) , "2012-03-01T14:20:00.000-05:00" )
assertEquals ( newService , newRegister . get ( "test/dubbo.test.api.HelloService:1.0.0" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
Assert . assertTrue ( zero . isZero ( ) )
assertTrue ( deserialize ( toTest , "ffff" ) )
assertThat ( target . getPackets ( ) , is ( packets ) )
Assert . assertEquals ( expected , actual )
assertTestRunFails ( testPlan )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertEquals ( getUrl ( "" ) , finalURL )
Assert . assertEquals ( GisgraphyServiceType . GEOCODING , geocodingServlet . getGisgraphyServiceType ( ) )
assertThat ( resources , contains ( orgId , parentOrgId ) )
assertGraphStrict ( expected , received )
assertThat ( encoded , stringContainsInOrder ( "<MedicationRequest xmlns=\"http://hl7.org/fhir\">" , "<contained>" , "<Medication xmlns=\"http://hl7.org/fhir\">" , "<id value=\"123\"/>" , "<code>" , "<coding>" , "<system value=\"urn:sys\"/>" , "<code value=\"code1\"/>" , "</coding>" , "</code>" , "</Medication>" , "</contained>" , "<medicationReference>" , "<reference value=\"#123\"/>" , "<display value=\"MedRef\"/>" , "</medicationReference>" , "</MedicationRequest>" ) )
assertEquals ( "Evelyn Waugh" , value )
Assert . assertThat ( classList . size ( ) , is ( 1 ) )
assertEquals ( "1" , XPathAfterVisitor . saxVisitedAfterElement . getTextContent ( ) )
assertEquals ( "" , found )
Assert . assertEquals ( expected , result )
assertTrue ( result )
assertTrue ( millisecond . equals ( millisecond ) )
assertEquals ( out , frame2 )
context . assertIsSatisfied ( )
assertThat ( result , is ( nullValue ( ) ) )
assertNull ( "current workflow null" , presenter . currentWorkflow )
runner . assertNotValid ( )
assertTrue ( result . isSuccess ( ) )
assertEquals ( new org . apache . http . client . utils . URIBuilder ( SERVICE_ROOT + "/Categories(1)/Products/Model.AllOrders()" ) . build ( ) , uriBuilder . build ( ) )
assertThat ( result , hasItems ( testTeam . simpleRowFor ( testTeam . emil , "member" ) , testTeam . simpleRowFor ( testTeam . david , "member" ) ) )
assertThat ( duration . minus ( Duration . ofMillis ( 1300 ) ) , equalTo ( TimeDuration . ofSeconds ( - 0.5 ) ) )
assertFalse ( "isDisplayed should return false if a list with no elements displayed is specified" + " required with no requirement limit." , view . isDisplayed ( ) )
assertEquals ( cougarLogString , victim . toCougarLogString ( ) )
assertEquals ( new Integer ( 10 ) , list . get ( 0 ) )
TestUtils . assertEquals ( "MatrixUtils.inverse() returns wrong result" , MatrixUtils . createRealIdentityMatrix ( data . length ) , result , Math . ulp ( 1d ) )
assertTrue ( "DB info can't be empty" , ! dbInfo . isEmpty ( ) )
assertTrue ( isHurricaneSeason )
assertEquals ( low , metric . getLowValue ( ) , 0.05 )
assertEquals ( "id" , request . getUserId ( ) )
assertEquals ( new Integer ( 1988 ) , byYear . max ( CENTERS_ROOKIE_YEAR ) )
assertFalse ( resultMessage ( result , HttpRequestType . POST ) , result . passedValidation ( ) )
assertEquals ( c . length , 0 )
Assert . assertEquals ( rgTime_EXPECTED , rgTime_ACTUAL , eps05 )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes WHERE CONTAINS(nodes.property,'expression')" ) )
assertEquals ( builder . maximumLength , 15 )
assertEquals ( inputString , outputString )
Assert . assertEquals ( "涓��戒汉姘��惰�" , words )
assertThat ( options . toJSON ( ) , is ( ( JsonElement ) json ) )
assertEquals ( Object . class . getSimpleName ( ) , result )
assertEquals ( expected , actual )
assertEquals ( "(boo 34)\n" , found )
assertEquals ( jedisCluster . get ( "foo" ) , "bar" )
assertResultsEqual ( net , "ALPHA" , "BETA" , "GAMMA" )
resultListener . assertTestCasePassed ( )
Assert . assertEquals ( "preliminary end of stream" , bytes . length / 4 , i )
assertEquals ( nextDate , DateUtils . getNextDay ( theDate ) )
assertFileWithMissingRecords ( filePath )
Assert . assertEquals ( 1 , comparator . compare ( id1 , id2 ) )
assertThat ( e . getClass ( ) . getName ( ) , is ( AuthAccessDeniedException . class . getName ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( errors . toString ( ) , containsString ( "No issues" ) )
assertEquals ( "E:12" , x . toString ( ) )
Assert . assertEquals ( range . getQualifyingPageNums ( 16 ) , Arrays . asList ( 11 , 12 , 13 , 14 , 15 , 16 ) )
assertEquals ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR , responseWrapper . getStatusCode ( ) )
assertEquals ( OrderBy . FWD_ROW_KEY_ORDER_BY , plan . getOrderBy ( ) )
assertThat ( ( BigInteger ) getter . invoke ( instance ) , is ( equalTo ( new BigInteger ( "1337" ) ) ) )
assertThat ( frenchFakeValues . get ( PATH ) , is ( notNullValue ( ) ) )
assertTrue ( appender . isStarted ( ) )
assertEquals ( Variant . Export , variant )
assertTrue ( solution . getAttributes ( ) . isEmpty ( ) )
assertOut ( "a.child('child').child('grandchild').removeChildAt(0)" )
assertEquals ( view , viewName )
assertEquals ( expectedArray , actualArray )
assertThat ( managementService . createJobDefinitionQuery ( ) . jobDefinitionId ( jobDefinition . getId ( ) ) . singleResult ( ) . getOverridingJobPriority ( ) , is ( 1701L ) )
assertEquals ( "" , result )
Assert . assertEquals ( "<div class=\"htmlform\">This shows a logic test for a man</div>" , session . getHtmlToDisplay ( ) )
assertTrue ( response . getNumberOfFeatures ( ) . intValue ( ) == 46 )
assertEquals ( "xpto" , retrievedParent . getName ( ) )
assertTrue ( "No click in log" , logContainsText ( itemClickOn ( 3 , 2 , false ) ) )
assertThat ( options . getFeaturePaths ( ) , contains ( URI . create ( "classpath:com/example.feature" ) ) )
assertArrayEquals ( expectedOffsetValues , actualOffsetValues , 1e-10 )
assertTrue ( "No 'administrator' in " + home , home . contains ( "administrator" ) )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 4 , 8 , 4 ) )
Assert . assertEquals ( 2 , forumToChange . getDisplayOrder ( ) )
Assert . assertTrue ( ( scopePath . findScopeByName ( ClassScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( CodeDefaultScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( DefaultScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( ClassScopeDescriptor . NAME ) . containsAllProperties ( properties ) ) )
assertEquals ( 2 , processInstances . size ( ) )
assertEquals ( 13 , dt . intValue ( ) )
assertThat ( key . getVersion ( ) , is ( "1.2.0" ) )
assertEquals ( Status . FAIL , jxm . getStatus ( ) )
assertThat ( converter . convert ( formattedToday , Calendar . class , bundle ) , is ( equalTo ( cal ) ) )
assertions . isNotEqualByComparingTo ( actual )
assertThat ( stream ( extract ) . filter ( v -> v == SPECIFIC_VALUE ) . count ( ) , is ( Long . valueOf ( extract . length ) ) )
assertTrue ( appender . isStarted ( ) )
assertTrue ( status == 0 )
Assert . fail ( "Not valid" )
assertEquals ( "POINT (0 0)" , ClobType . getString ( ( ClobType ) Evaluator . evaluate ( ex ) ) )
assertTrue ( instance . verify ( signature ) )
assertEquals ( expected , uri . toString ( ) )
assertNotNull ( recordWriter )
assertEquals ( YarnApplicationAttemptState . NEW , applicationAttempt . createApplicationAttemptState ( ) )
objects . assertIsEqualToIgnoringNullFields ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . NOW )
assertEquals ( "Not all required characters where escaped." , escapedChars , MCRSolrUtils . escapeSearchValue ( restrictedChars ) )
assertEquals ( expected , actual )
assertRequest ( "GET" , "Message/" , params )
assertThat ( actual . stream ( ) . map ( ValidationResult :: getExplanation ) . collect ( Collectors . toList ( ) ) , hasItem ( containsString ( "the current service cannot be registered as a " + SERVICE_TYPE . getSimpleName ( ) + " to lookup" ) ) )
Assert . assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( "myIRI" , sfp . getShortForm ( root ) )
assertTrue ( new Matcher ( ) . matchRelationship ( output , input ) )
assertEquals ( get ( "propIsTrue" ) , actual )
Assert . assertTrue ( klass . getFields ( ) . size ( ) >= klass . getDeclaredFields ( ) . size ( ) )
assertEquals ( asList ( warn ( mdcValues , marker , message , arg1 ) ) , testLogger . getLoggingEvents ( ) )
assertServiceEvent ( ServiceEvent . REGISTERED , TestService . class , 5 , TimeUnit . SECONDS )
assertNode ( "/sequenced/teiid/vdbs/PartsFromXml" , "vdb:virtualDatabase" , "mix:referenceable" , "mode:derived" )
assertTrue ( pass )
assertTrue ( history . isStepForwardAllowed ( ) )
assertThat ( ServiceHelper . getServerName ( service ) , equalTo ( "myserver" ) )
Assert . assertTrue ( "Expect null expression: " + expr , expr . isNullExpression ( ) )
Assert . assertTrue ( orPredicate . test ( null ) )
Assert . assertEquals ( childConfig . getUserID ( ) , result . getUserID ( ) )
assertEquals ( "journal-title-in-container-title-short" , work . getJournalTitle ( ) . getContent ( ) )
assertThat ( timeTransition . isFinished ( ) , IsEqual . equalTo ( true ) )
assertNotNull ( entity . point . geoDistance ( new Point ( ) ) )
Assert . assertThat ( resource , instanceOf ( YamlResource . class ) )
assertNotNull ( result )
Assert . assertEquals ( 42L , toml . getLong ( "foo" ) . longValue ( ) )
assertTrue ( first . equals ( second ) )
assertThat ( request . getImsi ( ) , equalTo ( stringLength20 ) )
Assert . assertTrue ( EdtfPattern . YEAR_MONTH_DAY_A . matches ( edtf ) )
assertEquals ( Arrays . asList ( "foo:1234" , "bar:1234" ) , config . getServers ( ) )
assertFalse ( cp . isReadOnly ( ) )
assertEquals ( expResult , result )
assertEquals ( 0 , sibs . size ( ) )
assertEquals ( "Hi commons!" , StrSubstitutor . replace ( "Hi ${name}!" , map ) )
assertThat ( query . toString ( ) , is ( equalTo ( " where (bucket=orid)" ) ) )
Assert . assertFalse ( "Failure expected true" , r . getLeft ( ) )
context . assertIsSatisfied ( )
assertThat ( resolvedPath , is ( nullValue ( ) ) )
assertNotNull ( writer . toString ( ) )
assertEquals ( "search" , result )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertEquals ( numBlocks , numBlocksRead )
Assert . assertEquals ( 0 , list . length )
assertFalse ( callbackArgument . getValue ( ) )
Assert . assertEquals ( test , pluginForMongo . getTypeName ( "test" ) )
assertTrue ( "Expected bytes array not found after convert" , bytes . length > 0 )
assertEquals ( rde , bd )
arrays . assertDoesNotContain ( description , actual , values )
assertEquals ( obj . toString ( ) , "LSAPR_POLICY_ACCOUNT_DOM_INFO{DomainName:null, DomainSid:null}" )
assertEquals ( field . getXrefEntity ( ) , xrefEntity )
assertThat ( isValid , is ( true ) )
assertEquals ( i , test . getValue ( ) )
Assert . assertEquals ( 100 , cache . size ( ) )
assertTagsetMapping ( files )
assertEquals ( expectedResult , actualResult )
assertEquals ( true , ExclusionTriggers . ShouldTriggerOnListOfFiles ( "dir_1" , "" , changedfilespath ) )
assertPattern ( info , expectedUrl )
Assert . assertNotNull ( arguments )
assertEquals ( obj . getValue ( ) , "test123" )
assertArrayEquals ( result , CompactEncoder . binToNibbles ( test ) )
assertThat ( formatter . parse ( "(246) 1752 n. Chr." ) , is ( PlainDate . of ( 1752 , 9 , 13 ) ) )
Assert . assertEquals ( expResult , result )
assertThat ( client . getMongoUri ( ) , is ( "mongodb://custom.domain.com" ) )
assertThat ( retrievedPost , is ( equalTo ( null ) ) )
assertValues ( presentFieldList , actual )
Assert . assertEquals ( HttpStatus . FORBIDDEN_403 , res . status )
assertMakeImageCanReadImage ( imageData )
assertThat ( replaced , is ( sameInstance ( change ) ) )
assertFalse ( testPropertyLoader . properties . isEmpty ( ) )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertThat ( target . removeEdgeAction ( "node1" , action ) , is ( false ) )
Assert . assertEquals ( 21 , age )
assertFalse ( resolver . supportsParameter ( param ) )
assertEquals ( "should get right result" , jsonResult , json )
runner . assertAllFlowFilesTransferred ( DeleteS3Object . REL_SUCCESS , 1 )
assertFalse ( this . it . hasNext ( ) )
assertTrue ( matcher . match ( msg , rule ) )
assertThat ( builder . build ( ) , equalTo ( "{\"metrics\":[{\"name\":\"metricName\",\"tags\":{\"fi\":[\"fum\"],\"foo\":[\"bar\"]}}],\"start_relative\":{\"value\":1,\"unit\":\"HOURS\"}}" ) )
assertEquals ( alias , alias2 )
assertNull ( daoService . get ( userWrapper , StatisticRefEnum . CREATED_ISSUE_COUNT ) )
Assert . assertEquals ( "test" , FileChannelEmul . byteBufferToString ( result ) )
assertPermanentCount ( playerA , "Barrage Tyrant" , 1 )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertEquals ( expectedQuery , actualQuery )
rule . assertScenarioEnded ( )
assertEquals ( - 1 , br . read ( ) )
Assert . assertThat ( methodMatcher . matches ( methodInvocationTree ) , is ( true ) )
Assert . fail ( "Shouldn't be able to update dataset with same name " + dataset1 . getName ( ) + " of dataset with id " + dataset1 . getId ( ) )
assertThat ( ListNumbers . toListNumber ( array ) , equalTo ( ( ListNumber ) new ArrayFloat ( array ) ) )
assertEquals ( msg , read )
assertEquals ( "!Proxy!" + servletName + "JSESSIONID=1234;path=" + servletPath , rsp . getHeaderField ( "Set-Cookie" ) )
Assert . assertTrue ( ! file . exists ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Wrong property value (path=" + path + ")" , USER_JACK_POLYNAME_NORM , found )
assertThat ( getLatestTargetVersion ( scriptsForDB ) , is ( currentSchemaVersion ) )
assertThat ( noOfSolutions , is ( 17 ) )
assertTrue ( output . contains ( TEST_ZK_NODE + Zkrw . DEFAULT_LIST_DELIMITER ) && output . contains ( TEST_ZK_CHILD1_NODE + Zkrw . DEFAULT_LIST_DELIMITER ) && output . contains ( TEST_ZK_CHILD2_NODE + Zkrw . DEFAULT_LIST_DELIMITER ) && output . contains ( TEST_ZK_GRANDCHILD_NODE + Zkrw . DEFAULT_LIST_DELIMITER ) )
assertThat ( request . getIdTag ( ) , equalTo ( idTag ) )
assertEquals ( context . getBean ( SingleBean . class ) , builder . build ( ) )
assertNotNull ( tag )
assertThat ( Generator . generate ( Parser . parse ( smi ) ) , is ( exp ) )
assertTrue ( true )
assertThat ( modelInstance , notNullValue ( ) )
assertEquals ( expResult , result )
assertSame ( "Instance not found" , params , MultiFileBuilderParametersImpl . fromParameters ( map , true ) )
runner . assertValid ( cfProvider )
assertSame ( e , CRestException . handle ( e ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( "base64Binary" , shortForm )
assertFalse ( list . isEmpty ( ) )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\n  return React.createElement('div', { 'id': 'foo' });\n}" )
assertEquals ( 2000 , node1 . completedTime ( ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0x90 , 0x78 , 0x56 , 0x34 , 0x12 } , output )
assertEquals ( EventType . RS_ZK_REGION_FAILED_OPEN , data . getEventType ( ) )
assertNotNull ( result )
XMLAssert . assertXMLEqual ( "<regexParameterFilter>\n" + "  <key>TEST</key>\n" + "  <defaultValue>Default</defaultValue>\n" + "  <normalize>\n" + "    <case>UPPER</case>\n" + "    <locale>en_CA</locale>\n" + "  </normalize>\n" + "  <regex>foo|Bar|BAZ</regex>\n" + "</regexParameterFilter>" , xs . toXML ( filter ) )
assertThat ( result , is ( false ) )
assertEquals ( "UID1 should have Permission YES" , Permission . YES , localDomainAccessController . getConsumerPermission ( UID1 , DOMAIN1 , INTERFACE1 , OPEARATION1 , TrustLevel . HIGH ) )
Assert . assertEquals ( 1 , compareResult )
assertEquals ( FOUND , action . getCode ( ) )
assertOut ( "/**\n * @export\n */\nB.prototype.b = function() {\n  var self = this;\n  function c(f) {\n  };\n  var /** @type {Function} */ f = null;\n  f = org.apache.royale.utils.Language.closure(this.b, this, 'b');\n  c(f);\n}" )
assertThat ( token . getType ( ) , is ( PCRELexer . OneDataUnit ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . APPLICATION_JSON ) . get ( ) . getStatus ( ) )
assertThat ( loader . locate ( "home" ) , is ( nullValue ( ) ) )
assertNotNull ( PropertyUtils . getProperty ( result , "auditInfo" ) )
assertFalse ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertResponse ( response , 204 )
assertThat ( target . exists ( ) , is ( true ) )
assertThat ( doubleProperty , is ( equalTo ( 42.0d ) ) )
Assert . assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.processing.runtime.fieldselector.FieldSelectorRuntime" ) )
assertTrue ( "Shouldn't get response" , response == null )
Assert . assertEquals ( false , context2 . error ( ) . isPresent ( ) )
assertArrayEquals ( new String [ ] { "55555" , "4444" , "333" , "22" , "1" } , strings )
assertEquals ( key , LivingDoc . $ ( key ) )
assertTrue ( cleanExit )
assertFalse ( p1 . equals ( p2 ) )
assertTrue ( d instanceof PublicCloneable )
assertErrorResponse ( response , ErrorResponse . ErrorType . INVALID_INPUT , "INVALID_WEBHOOK_VERIFICATION_KEY_ID" )
assertEquals ( 4 , results . size ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
EvictorTestUtils . assertEvictionPlanValid ( requestBytes , plan , mMetaManager )
assertMockEndpointsSatisfied ( )
assertEquals ( "rows touched" , 8 , result . size ( ) )
Assert . assertEquals ( "<table border=\"1\" cellspacing=\"0\">\n" + "<tr>\n" + "<th class=\"pass\">Col 1</th>\n" + "</tr>\n" + "<tr>\n" + "<td class=\"pass\">A1</td>\n" + "</tr>\n" + "</table>" , TableTestUtils . getHtml ( this . tableVerifier , "table" ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertIsSemver ( semver , version , 1 , 2 , null , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
assertEquals ( 500 , getCap . get ( 0 ) )
Assert . assertFalse ( AddonUtils . isListWithKeyAndDisplayValues ( properties ) )
assertNull ( dao . getForUser ( topicDraft . getTopicStarter ( ) ) )
Assert . assertEquals ( "<pp:foo xmlns:pp=\"http://p\"></pp:foo>" , writer . toString ( ) )
assertTrue ( usl . getPenStroke ( ) . getDashArray ( ) . equals ( "1 5 3" ) )
Assert . fail ( "Expect dropping partition to fail" )
assertSame ( persons , result )
assertFeatureValues ( expected , testQuery , testText , getChain ( new OrderedSequentialPairsFeatureExtractor ( 1 ) ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertFalse ( result )
context . assertAuthzException ( statement , "USE default" )
assertTrue ( lines . contains ( "longest-mention: Bill Clinton" ) )
assertArrayEquals ( new String [ ] { "2" , "3" } , testBean . varArgs )
assertEquals ( 0 , result . size ( ) )
assertEquals ( "default" , processEngine . getName ( ) )
assertEquals ( "P1" , value )
assertArrayEquals ( new int [ ] { 0 , 0 , 1 } , closed )
assertEquals ( 5 , css . getSeverity ( ) )
assertEquals ( "" , Bytes . toString ( res ) )
Assert . fail ( "Did not throw expected exception for first char '" + c + "'" )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 2 ) )
Assert . assertEquals ( hash , checksum . getValue ( ) )
assertEquals ( 4 , business . findGreatest ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
Assert . assertEquals ( "StreamEvent[stream=STREAMID,timestamp=2016-11-09 05:01:26,971,data=[namevalue,hostvalue,4],metaVersion=metaVersion]" , streamEvent . toString ( ) )
assertEquals ( Arrays . asList ( "aaa" , "bbb" , "ccc" ) , topics )
assertEquals ( "a : '1234'" , writer . toString ( ) )
assertTrue ( result . length ( ) == 0 )
assertDownloadAndInstallMessage ( getDistributionSet ( ) . getModules ( ) , controllerId )
assertEquals ( 1 , filter . evaluate ( ) . count ( ) )
assertEquals ( "alt 1\n" , found )
assertNotNull ( x509CertificateWithInfo )
assertEquals ( expected , result )
assertNumEquals ( 0 , getCriterion ( ) . calculate ( series , new BaseTradingRecord ( ) ) )
assertEquals ( expected , result )
assertThat ( graphManager . getGraph ( ) . traversal ( ) . E ( ) . has ( "tim_id" , relId . toString ( ) ) . count ( ) . next ( ) , is ( 2L ) )
assertEquals ( 3 , lines . size ( ) )
assertTrue ( axis . isTickMarksVisible ( ) )
assertEquals ( command , presenter . getCommand ( ) )
assertNotNull ( woodcuttingPlugin . getSession ( ) )
assertThat ( syncData , is ( equalTo ( expectedSyncData ) ) )
assertThat ( target , notNullValue ( ) )
assertThat ( name , is ( NAME ) )
assertTrue ( ! mrbResponse . get ( ) . isTerminated ( ) )
assertThat ( "missing owner not detected" , validation . hasErrorAbout ( "no" , "owner" ) )
assertEquals ( mockResponse , testResponse )
assertEquals ( 3 , keyspaces . size ( ) )
Assert . fail ( "Invalid input" )
assertSame ( new DefaultSecurityContext ( s ) . getSubject ( ) , s )
assertEquals ( html , sanitized )
assertFalse ( serverDead . get ( ) )
assertEquals ( 1 , entityLog . size ( ) )
assertHasError ( result , PlanningExecutionResult . ErrorCode . TASK_MODIFIED_SINCE_PLAN_CALCULATION_ERROR , errorMessage , CONTAINER_ID )
Assert . assertEquals ( expected , ( ( CalculatingReceiver ) receivers [ i ] ) . value , expected * .001 )
Assert . assertEquals ( "3599" , oAuthMachine . readAttributeFromBodyMap ( input , "expires_in" ) )
assertThat ( manager . heartbeat ( "foo" ) , is ( INVALID_VOTER_RESPONSE ) )
assertFalse ( topic . isCodeReview ( ) )
assertTrue ( "delete fail" , curator . deleteNode ( nodeName ) )
assertTrue ( RelaxNgSchemaValidator . validateAgainstRelaxNg ( actualXml ) )
assertEquals ( 25 - 3 , execute ( Artist . class , parsed1 ) . size ( ) )
assertEquals ( expected , incWhenPositive32 ( j ) )
assertEquals ( 2 , ruleSet . getRules ( ) . size ( ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( "null" , result )
org . junit . Assert . assertEquals ( maxCount , count . get ( ) )
assertEquals ( sz , z , FastInteger . parseUint ( sz . toCharArray ( ) ) )
assertNotNull ( informe . getId ( ) )
assertTrue ( cut . isPositive ( 50 ) )
assertThat ( "Body is incorrect!" , body , matchesPattern ( "^Processed \\[message] with \\[Camel \\(test\\) thread #\\d+ - Profile Threads]$" ) )
assertTrue ( notJar . stream ( ) . anyMatch ( elem -> elem . contains ( "test-classes" ) ) )
assertThat ( result . getType ( ) , is ( "InPacket" ) )
assertFalse ( p . hasTag ( "tag" ) )
Assert . assertEquals ( FastMath . toDegrees ( x ) , value . toDegrees ( ) . getReal ( ) , epsilon )
Assert . assertTrue ( SpecificData . get ( ) . compare ( input , deserializedObject , input . getSchema ( ) ) == 0 )
assertOut ( "public class A implements IA, IB, IC {\n}" )
assertThat ( strings , contains ( "hello" , "world" ) )
service . callCounter . assertCalls ( "{findIds=2, getItems=6}" )
assertOutput ( expected )
Assert . assertTrue ( score <= 0 )
assertEquals ( Unpooled . buffer ( ) , output )
assertEqualsIgnoreWhitespace ( expected , drl )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( pl . get ( "filename" ) , "a b.txt" )
assertEquals ( selectedInterval . getName ( ) , "Engineering" )
assertEquals ( CREATED . getStatusCode ( ) , response . getStatus ( ) )
assertArrayEquals ( data , stream . toByteArray ( ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location - (nt_number 123)))" , loc . toStringTree ( parser ) )
Assert . assertTrue ( foundETag )
assertNull ( channel21 . readOutbound ( ) )
assertEquals ( "wrapping renderer must use list's default on null" , defaultRenderer . getClass ( ) , renderer . getDelegateRenderer ( ) . getClass ( ) )
assertThat ( result , is ( "\"" + ID + "\"" ) )
assertTrue ( result . isSuccess ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
descriptor . assertValid ( )
assertEquals ( key , manager . getZigBeeNetworkKey ( ) )
assertEquals ( 1 , handler . recover ( new Object [ ] { "Randell" } , new RuntimeException ( "Planned" ) ) )
assertEquals ( expecting , t . toStringTree ( ) )
assertTrue ( emptyList . isEmpty ( ) )
assertEquals ( topic . getUserPostCount ( user ) , 2 )
Assert . assertNotNull ( collector . getScope ( ) )
lists . assertEndsWith ( description , actual , null )
ReflectionAssert . assertReflectionEquals ( except , result )
assertEquals ( lbl . size ( ) , lbl2 . size ( ) )
Assert . assertEquals ( 42 , value )
assertEquals ( "qwerty" , comment . getContent ( ) )
assertEquals ( "2015-10-05" , mo . getAuthoredOnElement ( ) . getValueAsString ( ) )
assertEquals ( "The load rules arent correct" , "loadrules" , scm . getLoadRules ( ) )
assertPutFails ( role , OntopiaRestErrors . MANDATORY_FIELD_IS_NULL )
assertEquals ( "{b:'1',c:'2'}" , m . toString ( ) )
assertEquals ( COSNull . NULL , victim . nextNull ( ) )
assertFalse ( action . getLocation ( ) . indexOf ( "gateway=true" ) >= 0 )
assertEquals ( "One" , doc . head ( ) . text ( ) )
assertEquals ( "\\" , AviatorEvaluator . execute ( "'\\\\'" , env ) )
Assert . assertEquals ( expectedSpec , actualSpec )
Assert . assertEquals ( ultraLargeValue , map . get ( 1 ) . toString ( ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertThat ( ClockInterval . parseISO ( "PT1H55M30S/141530" ) , is ( interval ) )
assertCorrectLoggerName ( )
Assert . assertEquals ( originalFont . getOs2 ( ) . getTypoAscender ( ) , parsedFont . getOs2 ( ) . getTypoAscender ( ) )
Assert . assertEquals ( "anything" , ctx . getSqlStatement ( ) )
assertNotNull ( emailAlerter )
assertEquals ( asList ( "O" , "�" , "�" ) , stringsToSort )
assertEquals ( aseVariant1 . getA1Counts ( ) , expResult )
assertThat ( NF . numberNode ( BigInteger . ONE ) , is ( sut ) )
assertThat ( target . readValue ( value ) , is ( true ) )
assertEquals ( 2 , constraints . size ( ) )
Assert . assertEquals ( 51 , startLevel . getStartLevel ( ) )
assertEquals ( SampleLocations . STOCKHOLM , cargo . getDelivery ( ) . getLastKnownLocation ( ) )
assertTrue ( connection . isAuthenticated ( ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 7 )
Assert . assertEquals ( s , result )
assertTrue ( stopWatch . getDuration ( ) . compareTo ( Duration . ofSeconds ( 1 , 100 ) ) < 0 )
assertEquals ( 5 , twSearch . countAll ( resindex ) )
assertThat ( p , is ( nullValue ( ) ) )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( "|Monday|Tuesday|Wednesday|Thursday|Friday" , days )
assertEquals ( "#" , exc . getPointerToViolation ( ) )
assertNoViolations ( constraintViolations )
assertEquals ( buildExceptionMessage ( "Expected SUCCESS but twin status was " + deviceUnderTest . deviceTwinStatus , internalClient ) , DeviceTwinCommon . STATUS . SUCCESS , deviceUnderTest . deviceTwinStatus )
Assert . assertEquals ( expectedGeoJson , geoJson )
assertThat ( getLatestTargetVersion ( scriptsForDB ) , is ( currentSchemaVersion ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertTrue ( result )
Assert . assertEquals ( 2 , result . length ( ) )
PatternAssert . assertThat ( POSTGRES_CONNECTION_STRING_PATTERN )
Assert . assertEquals ( fastq , FastqTools . convert ( fastq , fastq . getVariant ( ) ) )
assertEquals ( "\n# Level1\n" , writer . toString ( ) )
assertTrue ( validator . validate ( EntityNames . TEACHER_SECTION_ASSOCIATION , teacherSectionAssociations ) . isEmpty ( ) )
assertThat ( validPeriods , definedBy ( StartOfTime . create ( ) , EndOfTime . create ( ) ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( dc . getPredicates ( ) . contains ( p ) )
assertEquals ( "Should be one template on the page" , 1 , page . getNumberOfTemplatesInProject ( ) )
assertEquals ( user . getUrl ( ) , TestAppEnv . getUrl ( ) )
assertNotNull ( tg )
assertNotNull ( result )
assertThat ( result . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( element . getText ( ) , "click me" )
Assert . assertNull ( testsuites )
assertThat ( serializer , is ( instanceOf ( IgnoringSerializer . class ) ) )
assertThat ( rs . size ( ) , equalTo ( 3 ) )
assertEquals ( 12.3457 , Double . parseDouble ( localeInvariant ) , 0.000001 )
assertTrue ( monitor . isSendQueueWarning ( ) )
assertEquals ( String . join ( "\n" , "name: \"proxyhost\"" , "port: 80" , "" ) , yamlConfig )
assertNotNull ( retrieved )
assertNull ( st )
assertThat ( add , is ( 4.5 ) )
assertEquals ( 0 , bs . getPositionOfAPlayer ( p ) )
assertEquals ( "  MAP Test" + j , trueMAP_LSAT7 [ j ] , map , 1e-4 )
assertNoSuchElementExceptionIsThrownOnGet ( before )
assertHead ( input , 12 , expectedOutput )
assertEquals ( true , xmlHelpers . validateSignature ( document ) )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( "4 Nov 2010 16:06:04 GMT" , block . getTime ( ) . toGMTString ( ) )
assertions . isNotEqualByComparingTo ( actual )
assertTrue ( updatedUri . toString ( ) . equals ( "http://some.server.com:9090/path/to/file?param1=1&param2=2" ) )
Assert . assertEquals ( null , vo )
assertThat ( resultedQuery , is ( expectedQuery ) )
Assert . assertNotNull ( limitOrder )
assertNull ( mav )
assertPrefetchResult ( result )
assertNotNull ( instance . getPreferences ( ) )
assertNull ( recursiveType . getArrayElementType ( ) )
TestUtils . assertEquals ( "scalar add" , new Array2DRowRealMatrix ( testDataPlus2 ) , m . scalarAdd ( 2d ) , entryTolerance )
assertTrue ( result . size ( ) == 35 )
Assert . assertEquals ( results , actual )
Assert . assertEquals ( "G9JYBOMPUXHYHKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVVOGKPJBVBM9TDPULSFUNMTVXRKFIDOHUXXVYDLFSZYZTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHRTNIQWJQNDWRYLCA" , hash )
assertThat ( root , hasXPath ( "/sl:EndpointData/wsa:EndpointReference/wsa:Address" , WSA_SL_NS_CONTEXT ) )
assertEquals ( - 4L , result )
assertEquals ( HttpStatusCode . NON_AUTHORITATIVE . code , response . getStatus ( ) )
assertEquals ( Rational . ONE , result )
assertTrue ( testFailed . isEmpty ( ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( expResult , result )
assertFailureValue ( "missing (1)" , "z" )
Assert . assertTrue ( list . isEmpty ( ) )
assertEquals ( deliveryDayAlloc , deliveryDay )
assertEquals ( "Incorrect status code" , new Integer ( 400 ) , new Integer ( resp . getStatusCode ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertNotNull ( doc )
assertEquals ( CUSTOM_PRIORITY , seedJob . getPriority ( ) )
Assert . assertEquals ( "custom-value" , mf . getMainAttributes ( ) . getValue ( "Custom-Entry" ) )
assertNotNull ( testVehicle )
assertEquals ( "[FOO, FOOBAR]" , Iterables . toString ( tree . getKeysContainedIn ( document ) ) )
assertNotNull ( scriptStatement )
assertEquals ( "Property Lists were not equal" , pIn , GradoopFlinkTestUtils . writeAndRead ( pIn , getExecutionEnvironment ( ) ) )
assertEquals ( 0 , ProfileLogger . dump ( ) . size ( ) )
assertEquals ( 1 , rc . periodBarriersCrossed ( start , end ) )
assertEquals ( expResult , result )
assertParamsValue ( "p1-val" , p1 , "p2-val" , "p3-val" , "p01-val" , "p02-val" , "p03-val" , actual )
assertEquals ( ( Double ) 0d , getTarget ( results , "high_time" ) )
assertEquals ( "Test            " , BatchParserCommon . removeEndingCRLF ( new Line ( line , 1 ) ) . toString ( ) )
assertEquals ( "Wrong property" , values , config . getList ( String . class , KEY_PREFIX ) )
assertEquals ( fixture . getId ( ) , response . getId ( ) )
Assert . assertNotNull ( shardMeta )
Assert . assertTrue ( msg , Arrays . deepEquals ( esperado , resultado ) )
assertEquals ( LinkstateTopologyBuilder . LINKSTATE_TOPOLOGY_TYPE , topology . getTopologyTypes ( ) )
assertE ( "�尖�尖�尖�尖��" + "��  �モ��" + "�尖�� �モ��" + "�尖��  ��" + "�尖�尖�尖�尖��" )
Assert . assertEquals ( "" , InfluxDbPoint . map2String ( map ) )
assertFalse ( evaluator . shouldProxyHost ( "1.232.12.3" ) )
assertTrue ( b )
assertFutureCancelMetaCancel ( future )
assertEquals ( 0 , settings . getSysColor ( ) )
Assert . assertTrue ( expected . equals ( actual ) )
Assert . assertNotNull ( migrationPlan )
assertEquals ( "png" , TestUtils . getFormatName ( new ByteArrayInputStream ( baos . toByteArray ( ) ) ) )
assertEquals ( 12345 , result )
Assert . assertEquals ( 1 , stateContext . getData ( ) )
assertEquals ( 0 , records . size ( ) )
Assert . assertEquals ( "Huawei_Gsm" , vertexTraversal ( this . sqlgGraph , softwareVersion ) . in ( "vendorTechnology_softwareVersion" ) . next ( ) . value ( "name" ) )
assertEquals ( 1000 , callCnt . get ( ) )
assertEquals ( taskExecutor . execCount , 10 )
Assert . assertNull ( div )
Assert . assertEquals ( "The fox jumps over" , hl . makeWellFormed ( xmlContent ) )
assertEquals ( TEST_INITIAL_DFS_REPLICATION , testConfiguration . get ( "dfs.replication.initial" ) )
assertThat ( span . to ( SECONDS ) , is ( 19L ) )
Assert . assertEquals ( xmlEsperado , referenciada . toString ( ) )
assertEquals ( 0 , consumerPrefetch . retriesAttempted )
assertEquals ( "Mismatched data" , expected , res )
Assert . assertEquals ( 0 , queue . size ( ) )
assertFalse ( "Initiator should not have an Ack request from disapproval because they were the disapprover user" , document . isAcknowledgeRequested ( ) )
assertEquals ( 0 , ( ( Object [ ] ) emptyArray . getArray ( ) ) . length )
assertTrue ( result )
assertEquals ( javaUri , uri . toJavaUri ( ) )
assertFalse ( abstractRule . test ( patent ) )
assertEquals ( Float . valueOf ( "12.3" ) , converter . getAsObject ( facesContext , new UIPanel ( ) , "12.3" ) )
Assert . assertFalse ( "collection should have inherit turned back off" , isInherit )
assertThat ( sampleEntities . getTotalElements ( ) , equalTo ( 0L ) )
assertArrayEquals ( expected [ i ] , output , 0 )
Assert . assertNull ( from )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertFalse ( dnsMessage . getHeader ( ) . isQuery ( ) )
assertSame ( GBP_2_34 , test )
assertEquals ( expecting , result )
assertEquals ( 2 , managers . size ( ) )
assertEquals ( "file Name" , message )
assertThat ( idAndVersion1 . compareTo ( idAndVersion2 ) , is ( 0 ) )
assertEquals ( "Expected 2 results!" , 2 , count )
Assert . fail ( )
assertTrue ( proxy . wasCalled ( ) )
assertThat ( response , is ( "" ) )
assertEquals ( "A_" , buffer . removeCString ( ) )
assertEquals ( Lists . newArrayList ( "a" , "c" ) , Lists . newArrayList ( intersection . materialize ( ) ) )
assertEquals ( 2 , bs . capacity ( ) )
assertTrue ( Pattern . matches ( "(?s).*text%20before%20query%20string.*?text%20after=query%20string.*" , page . asXml ( ) ) )
assertTrue ( instance . hasNext ( ) )
Assert . assertTrue ( referredGraphs . toArray ( ) [ 0 ] . equals ( DEFAULT_GRAPH ) )
assertEquals ( requestString , StaxUtils . toString ( response ) )
assertEquals ( s . fromReal ( 2 * - 4 + 3 * 6 + 5 * 7 ) , t1 . getDotProduct ( t2 ) , 1e-13 )
assertThat ( Template . parse ( markup ) . render ( assigns ) , is ( expected ) )
assertTrue ( HttpTestUtils . semanticallyTransparent ( resp2 , result ) )
assertTrue ( "Returned object should be a SynchronizedQueue." , queue instanceof SynchronizedQueue )
Assert . assertEquals ( "Domain is not valid - Should have 0 cookies" , 0 , result . size ( ) )
assertTrue ( "Wrongly reduced InOid filter: " + query . getFilter ( ) , query . getFilter ( ) instanceof NoneFilter )
assertTrue ( props . size ( ) > 0 )
assertFalse ( topic . hasTopic ( ) )
assertThat ( result , is ( expectedAxiom ) )
assertNull ( setupPostData ( "PUT" ) . get ( ) )
assertThat ( Integer . parseInt ( codepoints ) , is ( CodePoints . NOT_FOUND ) )
assertNull ( remainingBuffer )
assertThat ( underTest . login ( "username" , "password" ) , is ( nullValue ( ) ) )
assertThat ( copyObjectRequest . getNewObjectMetadata ( ) . getSSEAlgorithm ( ) , is ( ObjectMetadata . AES_256_SERVER_SIDE_ENCRYPTION ) )
assertTrue ( tweets . length == 6 )
assertEquals ( "from SURVEY SURVEY with (NOWAIT, NOLOCK)\nwhere SURVEY.NAME is null" , query . toString ( ) )
assertEquals ( "test" , all . toString ( ) )
assertEquals ( "<order><id>123/id><customerId>4444/customerId><date>20100110</date>" + "<item><id>222</id><amount>1</amount></itemn></order>" , xml )
assertTrue ( runtimeService . createProcessInstanceQuery ( ) . singleResult ( ) . isSuspended ( ) )
Assert . assertTrue ( true )
Assert . assertEquals ( instantiatedMethod . getGeneratedClass ( ) , generatedType )
assertEquals ( value , ( Double ) 20.6 )
assertEquals ( String . valueOf ( ReturnCode . NO_SPEECH . code ( ) ) , firstEvent . getParameter ( "rc" ) )
assertThat ( extractMonitorables ( adapter ) . get ( NINETY_NINETH ) . get ( ) , Matchers . < Object > is ( new99thMetric ) )
assertEquals ( "" , result )
Assert . assertEquals ( expect , text )
assertEquals ( map , result )
assertEquals ( STATUS_BAD_REQUEST , resp . getStatus ( ) )
assertTrue ( fromJson instanceof Boolean )
assertEquals ( dest , OutlineUtils . toPageDestination ( victim , catalog ) . get ( ) )
assertThat ( date . with ( YEAR_OF_WEEKDATE , 2014 ) , is ( PlainDate . of ( 2014 , 2 , 25 ) ) )
assertFalse ( factory == SqlGeneratorFactory . getInstance ( ) )
Assert . assertEquals ( BatchStatus . FAILED , jobExecution . getBatchStatus ( ) )
Assert . assertEquals ( "All is well" , message )
assertThat ( anonymized , is ( "http://<USERNAME>:<PASSWORD>@www.domain.com" ) )
assertFalse ( formDataEntityProvider . isReadable ( type , null , new Annotation [ 0 ] , null ) )
assertTrue ( observer . await ( tc ) )
Assert . assertEquals ( "绗�涓�椤�|涓�涓�椤�|涓�涓�椤�|��椤�" , value )
assertEquals ( "double: 7 654 321,099" , b . primitiveDouble ( 7654321.0987d ) )
assertThat ( options . getCredentialsProvider ( ) , is ( URI . create ( "localjceks://file/foo/bar.jceks" ) ) )
Assert . assertEquals ( "da2794f442f08a73ac9eef7f9378dd7a5bbcf8c6" , fp )
assertEquals ( "the artifact must be downloaded" , true , new File ( localRepo , "ant/ant/1.5.1/ant-1.5.1.jar" ) . exists ( ) )
Assert . assertSame ( dElem , mergeElem )
assertThat ( testOutcome . getSkippedCount ( ) , is ( 1 ) )
assertArrayEquals ( id . toByteArray ( ) , embedding . getRawId ( 0 ) )
assertTrue ( runtimeService . createProcessInstanceQuery ( ) . singleResult ( ) . isSuspended ( ) )
Verify . assertSetsEqual ( Sets . mutable . with ( "Dolly" , "Spike" , "Tabby" , "Spot" ) , smithPets . asEcList ( ) . collect ( TO_PET_NAME , Sets . mutable . empty ( ) ) )
Assert . assertEquals ( WritableUtils . val ( 0.d ) , udf . evaluate ( args ) )
Assert . assertEquals ( false , a . contains ( b ) )
Assert . assertEquals ( id , client . getId ( ) )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( VpnRoute . class ) )
assertEquals ( POFilter . FILTER_CONFIG_ID , filterConfigId )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertions . startsWith ( sequence )
assertTrue ( ok )
assertTrue ( ints . get ( i ) == null )
assertFalse ( "List size mismatch across lists" , words1 . equals ( words2 ) )
assertNull ( ebl . getReceived ( ) )
assertEquals ( Arrays . asList ( "ok" ) , list )
assertNull ( conceptService . getDrug ( drugId ) )
assertArrayEquals ( new int [ ] { 0 , 0 } , matrix [ 0 ] )
Assert . assertEquals ( reply , receivedReply )
assertTrue ( containsJob ( vrp . getJobs ( ) . get ( "2" ) , getRoute ( "19" , Solutions . bestOf ( solutions ) ) ) )
assertEquals ( 1 , query . size ( ) )
assertTrue ( or . isDefined ( ) )
assertParsedMessages ( message )
assertThat ( found , is ( true ) )
assertArrayEquals ( "{ 'hello' : 'world' } not the expected bytes." , helloWorld , out . toByteArray ( ) )
assertEquals ( "timestamp" , type . getDataType ( 0 , 0 , 0 , false ) )
assertScriptEquality ( expectedScript , actualScript )
assertThat ( v , is ( nullValue ( ) ) )
assertFalse ( cache . remove ( key , value + 1 ) )
assertThat ( restored . isNull ( ) , is ( true ) )
assertTrue ( ! strategyService . getStrategies ( ) . isEmpty ( ) )
assertEquals ( "To is not properly parsed" , new Date ( 5 ) , mapper . readTo ( columns ) )
Assert . assertEquals ( "Thread count should be correct due to matching browser" , 10 , freeThreads )
Assert . assertEquals ( sum , referenceSum . doubleValue ( ) , 0.01 )
assertEquals ( value , workflowInstance . getVariableValue ( "v" ) )
assertFalse ( matcher . matchesSafely ( item ) )
Assert . assertNotNull ( "Reply message was null on reply queue: " + replyQueue , reply )
assertEquals ( 1 , repository . getCommits ( ) . size ( ) )
assertThat ( impl . isPermitted ( "repoName" , "repoFormat" , BreadActions . READ , variableSource ) , is ( true ) )
assertThat ( result , containsString ( "<type>basic</type>" ) )
assertEquals ( "valueA" , pc . getString ( "keyA" ) )
this . assertLoadBlobViaTuples ( tuples , true , true )
assertEquals ( res , String . class )
assertEquals ( CREATED . getStatusCode ( ) , actual . getStatus ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertNotNull ( hostName )
assertEquals ( Arrays . asList ( "Duke" , "Hantsy" ) , nameList )
assertEquals ( result , new Pair < > ( 0 , 4 ) )
assertEquals ( "Used the DemoService as default.\r\nYou can cancel default service by command: cd /" , result )
assertThat ( testSupport . getResources ( CUSTOM_RESOURCE_DEFINITION ) , contains ( crd ) )
assertEquals ( 3 , count )
assertThat ( extendedWings , is ( true ) )
Assert . assertEquals ( "ZZZZ" , FastqTools . convertQualities ( fastq , FastqVariant . FASTQ_SOLEXA ) )
Assert . assertEquals ( 3 , E . withComponent ( Basic . class ) . size ( ) )
assertEquals ( expecteds , actuals )
assertTrue ( ca . getFallbackParameters ( ) . equals ( ap2 ) )
assertEquals ( outputExpedted , outputString )
Assert . assertEquals ( "/css/ui.css" , ModuleUtil . getPathForResource ( module , path ) )
assertEquals ( String . join ( "\n" , "name: \"proxyhost\"" , "port: 80" , "" ) , yamlConfig )
assertEquals ( simplePojo . getIntValue ( ) , result . get ( "intValue" ) )
assertNotNull ( reporter )
assertEquals ( expOut , out )
assertEquals ( expected , IbUtils . getDefaultTagList ( ) )
assertEquals ( false , result )
assertEquals ( 1 , messages . size ( ) )
Assert . assertEquals ( IdentityConstants . NAME_CONFLICT , IdentityResponseWrapper . buildFaultMessage ( responseMock ) . getCode ( ) )
assertThat ( command . accept ( state ) , is ( false ) )
assertEquals ( normalUser , returnedUser . get ( ) )
assertEquals ( String . valueOf ( me . getCode ( ) ) , me . getNick ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPdf , cmpPdf , destinationFolder , "diff" + testName + "_" ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( RESULT_COUNT , actual )
Assert . assertEquals ( "did not get expected packing instruction" , sb . toString ( ) , dataObjInp . getParsedTags ( ) )
assertions . endsWith ( )
assertEquals ( expected , stats )
assertEquals ( 100 , result )
assertNotNull ( productRepository )
assertEquals ( getFailureMessage ( ) , linspace . getRow ( 0 ) . sumNumber ( ) . doubleValue ( ) , 1.0 , 1e-1 )
assertEquals ( "Resolved" , "scan-dir:" + file . toURL ( ) . toExternalForm ( ) , m_underTest . resolve ( file . getAbsolutePath ( ) ) )
assertThat ( b . getConsole ( ) , Matchers . containsString ( "Checking out " + svnContainer . getUrlUnsaveRepo ( ) ) )
assertEquals ( "Sat May 13 14:18:52 UTC 2017" , field . getDate ( ) . toString ( ) )
assertNotNull ( instance . getVersion ( ) )
assertEquals ( 1 , tuple . len ( ) )
assertEquals ( qm1 , qm2 )
assertEquals ( branch . getUnsubscribeLinkForSubscribersOf ( Branch . class ) , "/branches/1/unsubscribe" )
assertEquals ( ByteBuffer . wrap ( stopRow ) , ByteBuffer . wrap ( new byte [ ] { 0 , 0 , 1 } ) )
assertRequest ( "POST" , "Message/" )
assertTrue ( acualValues . isEmpty ( ) )
assertThat ( clusterVO , is ( nullValue ( ) ) )
assertArrayEquals ( yhat1 , yhat2 , 1e-8 )
Assert . assertEquals ( 3 , subscriptionsRepository . getAllSubscriptions ( ) . size ( ) )
assertEquals ( "localhost:8080" , req . host ( ) )
assertEquals ( "parent_kind (1) > child_kind (2)" , prettifiedKey )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x0 ) ) )
assertThat ( transformed , is ( "transform_string_to_type=" ) )
this . assertLoadBlobViaTuples ( tuples , false , true )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ACTIVITIES_READ_LIMITED , ScopePathType . AFFILIATIONS_READ_LIMITED , ScopePathType . FUNDING_READ_LIMITED , ScopePathType . ORCID_PATENTS_READ_LIMITED , ScopePathType . PEER_REVIEW_READ_LIMITED , ScopePathType . ORCID_WORKS_READ_LIMITED )
assertThat ( PlainDate . axis ( ) . stepForward ( date ) , is ( PlainDate . of ( 2012 , Month . FEBRUARY , 29 ) ) )
assertDefaultConfig ( config , true )
assertTrue ( listOfStrings . size ( ) == 4 )
assertEquals ( 0 , h . nestLevel )
assertThat ( consoleStepListener . toString ( ) , is ( "" ) )
assertThatStepsInstancesAre ( builderPrivateModule . buildCandidateSteps ( ) )
assertTrue ( result )
Assert . assertFalse ( workerPool . isPaused ( ) )
assertStack ( new Object [ ] { - 1 , null , null , null , null , null } , stack )
assertTrue ( "Unexpected compressed size: " + compressed . size ( ) , compressed . size ( ) > SAMPLE_SIZE * 8 )
assertTrue ( ( Boolean ) result )
assertEquals ( "Base for string is wrong" , Long . valueOf ( 3 ) , parsed )
assertEquals ( 0 , JNIBusyWaiting . INSTANCE . whileEqual ( null , buffer . address ( ) , runs , 0 ) )
Assert . fail ( "Expected an exception" )
assertEquals ( 100 , vrp . getJobs ( ) . values ( ) . size ( ) )
assertThat ( timeLine . getValidPeriods ( ) , definedBy ( StartOfTime . create ( ) , point ( contemporaryExample ) , point ( contemporaryExample . plusDays ( 1 ) ) , EndOfTime . create ( ) ) )
runner . assertNotValid ( )
assertNull ( principal )
assertToken ( profile , token , new JwtAuthenticator ( ) )
Assert . assertEquals ( expected , mFileSystemMaster . checkConsistency ( FILE , CheckConsistencyContext . defaults ( ) ) )
assertEquals ( "select entity_0 from Entity entity_0 where ( entity_0.code = :code_1 and entity_0.primitiveInt > :primitiveInt_2 )" , select . getQuery ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "123" + "456" ) . getValue ( ) )
assertThat ( view . estimatedDuration ( ) , is ( "" ) )
Assert . assertTrue ( this . defaultPushServerConfigurationResponse . getPushableFields ( ) . isEmpty ( ) )
assertTrue ( ( Boolean ) result )
assertNotNull ( InstalledAddOnExtension . fetcher ( "XEXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "XFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( mojo . isSkip ( ) )
Assert . assertFalse ( "no MarshallingMethodEndpointAdapter found" , result . isEmpty ( ) )
assertEquals ( expected . toString ( ) , actual . toString ( ) )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� �郝烩��" + "��###��" + "�尖�尖�尖�尖��" )
assertEquals ( 1 , document . select ( ".vcard .prodid" ) . size ( ) )
assertEquals ( "redis://${REDIS_URI}" , config . getAddress ( ) )
assertEquals ( results , clientWrapper . getBulk ( keys ) )
TestUtil . assertSuccess ( result )
assertEquals ( 1 , posts . size ( ) )
assertTrue ( connectFuture . isConnected ( ) )
assertThat ( tuple . getListOrDefault ( "field" , Collections . emptyList ( ) ) , equalTo ( value ) )
assertEquals ( 3 , map . size ( ) )
assertEquals ( true , CollectionUtils . isEmpty ( c ) )
assertThat ( buf . toString ( ) , is ( equalTo ( "" ) ) )
assertFalse ( count . isShowQuotas ( ) )
assertFalse ( accessor . declaresField ( field ) )
assertEquals ( text , adapter . getFilteredStringAt ( 2 , 0 ) )
assertTrue ( entity . getName ( ) == null )
this . tester . assertRenderedPage ( this . tester . getApplication ( ) . getHomePage ( ) )
Assert . assertEquals ( Response . Status . OK . getStatusCode ( ) , modifyingResponse . getStatus ( ) )
assertEquals ( "{}" , gson . toJson ( p ) )
Assert . assertEquals ( "{\"@context\":\"../$metadata#Collection($ref)\"," + "\"value\":[{\"@id\":\"ESAllPrim(32767)\"}," + "{\"@id\":\"ESAllPrim(-32768)\"}," + "{\"@id\":\"ESAllPrim(0)\"},{\"@id\":\"ESAllPrim(10)\"}]}" , resultString )
assertEquals ( RESOURCE_MANAGER , action . getResourceManager ( ) )
assertEquals ( 1 , ase . getRangeInternal ( ) , 0 )
assertEquals ( 5. , start . getTheoreticalEarliestOperationStartTime ( ) , 0.01 )
assertTrue ( "Task duration is suspect: " + task . getDuration ( ) , ( task . getDuration ( ) >= 1000L ) && ( task . getDuration ( ) <= 20000L ) )
assertTrue ( ! AuthzResolver . isAuthorized ( new PerunSessionImpl ( perun , new PerunPrincipal ( "pepa" , ExtSourcesManager . EXTSOURCE_NAME_INTERNAL , ExtSourcesManager . EXTSOURCE_INTERNAL ) , new PerunClient ( ) ) , Role . PERUNADMIN ) )
assertions . containsSequence ( sequence )
assertEquals ( exp , area , 1e-10 )
assertEquals ( value , propertiesConfigurationProperties . getProperty ( key ) )
Assert . assertEquals ( "56138725000103" , infoConsultaCadastro . getCnpj ( ) )
Assert . assertEquals ( Schema . Type . FIXED , subSchema . getType ( ) )
assertEquals ( config . getStorageIndexNamePrefix ( ) + "-1920-01-01_23:59" , name )
assertEquals ( 0 , result )
assertEquals ( "Yo Scott" , response )
assertEquals ( "\t" , pluginParameters . indentCharacters )
assertThat ( target . equals ( flow ) , is ( true ) )
assertTrue ( GitFileUtils . exists ( file , commit , repo ) )
assertXMLEqual ( "Invalid source" , "<child/>" , result . toString ( ) )
assertVectorEquals ( add ( alpha , yd ) , x . add ( alpha , y ) )
Assert . assertEquals ( "max value" , Double . valueOf ( 857.0 ) , maximumTotalOrderValue )
assertTrue ( sn . equals ( other ) )
assertEquals ( fixture , this . libshout . getHost ( ) )
Assert . assertEquals ( build . getBestStrategy ( ) , StringEncodingStrategy . REPEAT_COUNT )
assertHelpLines ( "Option                                Description                       " , "------                                -----------                       " , "-t, --cutoff, --threshold <Double: a  a threshold value beyond which a  " , "  positive decimal number that will     certain level of the application" , "  represent the threshold that has      should cease to write logs      " , "  been outlined>                                                        " , EMPTY )
assertThat ( f . andThen ( i -> i + 1 ) . apply ( "" , "" , "" , "" , "" ) , is ( 2 ) )
assertThat ( DockerHost . configPathFromEnv ( ) , equalTo ( "foodir" ) )
assertThat ( this . arr . get ( 1 ) , is ( 2 ) )
Assert . assertTrue ( 1 == _c . convert ( "1" ) )
assertEquals ( expected , toString ( acc ) )
assertNotNull ( result )
files . assertIsNotEmptyFile ( INFO , actual )
assertEquals ( actualPostsPage , expectedPostsPage )
assertEquals ( "vhtml" , bindings . get ( "_suffix" ) )
assertEquals ( "select * from (  " + "select a.*, rownum rn from (   " + "select survey1.ID from SURVEY survey1  ) " + "a) " + "where rn > 3 and rownum <= 5" , query . toString ( ) )
assertEquals ( FleetSize . FINITE , vrp . getFleetSize ( ) )
assertEquals ( URL + "?param%201=value1&param%202=value2" , uri . toString ( ) )
assertIdentical ( "/repaired.owl" , ontology )
assertThat ( Version . findHighestMatchingBuildNumber ( version , versionSet ) , equalTo ( 2 ) )
assertResultSet ( res )
assertScoreAndParse ( content , "postgres_test_statements_2.ddl" , 101 )
Assert . assertEquals ( s , backAgain )
assertThat ( taskService . createTaskQuery ( ) . taskAssignee ( "demo" ) . count ( ) , is ( 1L ) )
assertEquals ( "Mr T, 33, F" , value )
assertTrue ( "wrong body " + body , body . contains ( "processEngine\":{\"status\":\"UP\",\"details\":{\"name\":\"testEngine\"}}" ) )
Assert . assertEquals ( ste . toString ( ) , frame . toString ( ) )
assertXmlVersionInProlog ( inputWithBom , "1.1" , "<?xml version='1.1'>" )
assertFalse ( srcGeoCoding . isCrossingMeridianAt180 ( ) )
assertTrue ( videos . contains ( video ) )
assertCorrectBinaryString ( data , expected )
assertEquals ( qn , qnExpected )
assertThat ( ids , contains ( "Observation/O1" ) )
assertEquals ( g1 , g2 )
assertEquals ( "Mismatched result" , expected , actual )
Assert . assertEquals ( 200 , response . getStatus ( ) . getStatusCode ( ) )
Helpers . assertJson ( twinMetadata . toString ( ) , "{\"$lastUpdated\":\"2017-09-21T02:07:44.238Z\",\"$lastUpdatedVersion\":10}" )
assertTrue ( mappedNames . contains ( VALID_WC_USERNAME_RESPONSE ) )
assertFalse ( JobUtils . isJobExecutionRestartable ( jobExecution ) )
assertScoreCompareToOrder ( comparator , buildNode ( 1 , "-110" , 5 , 41 ) , buildNode ( 1 , "-110" , 5 , 40 ) , buildNode ( 1 , "-110" , 7 , 40 ) , buildNode ( 2 , "-110" , 5 , 40 ) , buildNode ( 2 , "-110" , 7 , 40 ) , buildNode ( 1 , "-95" , 0 , 5 , 40 ) , buildNode ( 2 , "-95" , 0 , 5 , 40 ) , buildNode ( 2 , "-95" , 0 , 7 , 40 ) , buildNode ( 1 , "-90" , 5 , 40 ) , buildNode ( 1 , "-90" , 7 , 40 ) , buildNode ( 2 , "-90" , 5 , 40 ) , buildNode ( 2 , "-90" , 7 , 40 ) , buildNode ( 1 , "-1init/-85" , 5 , 40 ) , buildNode ( 1 , "-100init/-80" , 7 , 40 ) )
assertEquals ( body . toString ( ) , "error test error" )
assertEquals ( "test-value" , clientWrapper . get ( "key1" , transcoder ) )
assertEquals ( data1 , reloadableResource . get ( ) )
assertEquals ( UriComponentsBuilder . fromHttpUrl ( "http://www.indexer.com/api?t=search&extended=1&q=title author" ) . build ( ) , testee . buildSearchUrl ( searchRequest , null , null ) . build ( ) )
assertFalse ( tinyFilter . add ( "bust" ) )
assertArrayEquals ( b , SortOrder . invert ( SortOrder . invert ( b , 0 , b . length ) , 0 , b . length ) )
assertEquals ( expResult , result )
assertTrue ( "Datasets not isomorphic" , isomorphic ( ds0 , ds ) )
Assert . notNull ( canalInstance )
Assert . assertNotNull ( response . getHeaders ( ) )
Assert . assertNotNull ( str )
assertProposalDoesNotExist ( proposals , "Pick out selected part of String" )
assertEquals ( TestEnum . A , loadedEntity . getTestEnum ( ) )
assertThat ( underTest . getType ( ) , is ( RELATION_NAME ) )
assertThat ( "system-input-def-7.xml" , systemInputDef , matches ( new SystemInputDefMatcher ( expected ) ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "A" , 0.234 , 1.0 ) ) )
assertThat ( content . get ( 0 ) , is ( "Hello My Name is Jimmy Pop" ) )
assertEquals ( FilterReply . DENY , mockAppender . getFilterChainDecision ( loggingEvent ) )
Assert . assertTrue ( list . size ( ) == 1 )
assertTrue ( Arrays . equals ( expected_output , actual_output ) )
assertEquals ( svalues , svalues1 )
Assert . assertEquals ( password , expected , computed , 0.000000000000001 )
assertEquals ( new BigDecimal ( "0.00" ) , min )
Assert . assertEquals ( 3 , getRowCount ( ) )
assertTrue ( true )
assertNull ( getTestChargingStationFromRepository ( ) )
assertNotNull ( schema )
assertUrlProtected ( servletUrl )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) )
assertEquals ( i , ringBuffer . getNewestElement ( ) . intValue ( ) )
Assert . assertEquals ( 5 , ( ( Long ) l . get ( 0 ) ) . longValue ( ) )
assertNull ( result )
Assert . assertTrue ( zero . isZero ( ) )
assertEquals ( expected , actual )
Assert . assertArrayEquals ( centroidExpected , location . getCentroid ( ) )
assertThat ( uris , is ( asList ( new URI ( "http://baseurl/static/rapture/baseapp-prod.js" ) , new URI ( "http://baseurl/static/rapture/extdirect-prod.js" ) , new URI ( "http://baseurl/static/rapture/bootstrap.js" ) , new URI ( "http://baseurl/static/rapture/d3.v4.min.js" ) , new URI ( "http://baseurl/extjs-script-1-test-1.js" ) , new URI ( "http://baseurl/extjs-script-2-test-1.js" ) , new URI ( "http://baseurl/extjs-script-1-test-2.js" ) , new URI ( "http://baseurl/extjs-script-2-test-2.js" ) , new URI ( "http://baseurl/react-script-1-test-prod.js" ) , new URI ( "http://baseurl/react-script-2-test-prod.js" ) , new URI ( "http://baseurl/static/rapture/test-1-prod.js" ) , new URI ( "http://baseurl/static/rapture/test-2-prod.js" ) , new URI ( "http://baseurl/static/rapture/app.js" ) ) ) )
JsonAssert . assertJsonObjectEquals ( EXPECTED_JSON_RESPONSE , jsonResponse )
assertTrue ( engine instanceof PartialRecallExecutionEngine )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
Assert . assertTrue ( createdEventFired )
Assert . assertTrue ( links . isEmpty ( ) )
assertEquals ( "testStr" , bean . getTestStr ( ) )
assertNotNull ( "Base snapshot" , memory . getBaseSnapshot ( ) )
Assert . assertTrue ( "the 'startMaintenanceMode' method was not invoked as expected." , invoked )
assertEquals ( 115L , m_img . get ( rect ) )
assertNull ( dbDialectClass )
assertThat ( message . getKeyword ( ) , is ( Keyword . NONE ) )
assertTrue ( "Expected successful outcome" , response . getUnderlying ( ) )
assertNumEquals ( "1.0" , highestValue . getValue ( 0 ) )
assertNotEquals ( set , notSet )
context . assertTrue ( res . failed ( ) )
assertEquals ( MediaType . TEXT . name ( ) , child . getAttribute ( mediaTypeAttributeType . getName ( ) ) . getValue ( ) )
assertEquals ( "hello hello" , expression . execute ( testObj ) )
assertTrue ( "Provider http server mechanism factory should be created" , ops . exists ( TEST_SERVER_MECHANISM_FACTORY_ADDRESS ) )
Assert . assertNotNull ( track . addItem ( task1 ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertThat ( list . size ( ) , is ( 1 ) )
assertSame ( "OutoutStream is not set correctly." , outputStream , entrancePi . getOutputStream ( ) )
assertEquals ( bd1 , bd2 )
assertTrue ( "t value should be null" , null == cr . getTag ( "t" ) )
assertEquals ( expectedValue , value )
assertMockEndpointsSatisfied ( )
assertThat ( families , arrayContaining ( ProcessingFamilyDefinition . NAME ) )
given ( ) . param ( "expand" , 1 ) . when ( ) . get ( "resources/" ) . then ( ) . assertThat ( )
assertThat ( header . toString ( ) , is ( "name: value" ) )
assertEquals ( 2 , sut . size ( ) )
assertEquals ( expected , buchberger )
assertEquals ( "!yro1\n" , sWriter . toString ( ) )
assertEquals ( expecteds , actuals )
assertNotNull ( models )
assertThat ( gson . fromJson ( gson . toJson ( d ) , Duration . class ) , is ( d ) )
assertAnnotations ( 1 , Temporal . class , new TestEntity < > ( 0 , "Monday 25th February 2013" ) )
assertNotNull ( resp )
assertThat ( new JSONObject ( actual ) , sameJsonAs ( rawSchemaJson ) )
Assert . assertEquals ( FastMath . toRadians ( x ) , value . toRadians ( ) . getReal ( ) , epsilon )
assertEquals ( "foo" , testClass3StringFieldAccessor . getValue ( testClass3 ) )
assertEquals ( "Wrong content" , CONTENT , readFile ( file ) )
assertThat ( actual , is ( nullValue ( ) ) )
Assert . assertTrue ( "Adler32 mismatch between written and read" , processListener . checkAdlers ( ) )
assertEquals ( 10 , classUnderTest . getGeneralCompletionConfig ( ) )
assertFalse ( export . equals ( null ) )
Assert . assertNotNull ( ds )
assertThat ( result , equalTo ( "withMyField" ) )
assertEquals ( String . valueOf ( i ) , expected , array . getNextSet ( i ) )
assertTrue ( output , output . contains ( "The command-timeout must be a valid positive integer" ) )
assertSuggestions ( suggestions , "foo" , "foob" , "foobar" )
assertEquals ( 0 , collection . getNumOfEntities ( ) )
assertEquals ( "noVehicle" , v . getId ( ) )
assertEquals ( template , test . build ( ) )
assertFalse ( "AUTH in debug output" , test ( properties , "AUTH" ) )
assertThat ( output , stringContainsInOrder ( "   <text>" , "      <div" , "         <pre>line1\nline2\nline3  <b>BOLD</b></pre>" ) )
assertEquals ( "342\n" , found )
assertTrue ( emptyMap . isEmpty ( ) )
assertEquals ( "Number of upgrades steps" , 0 , path . size ( ) )
assertThat ( actual , is ( "localhost" ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
testRunner . assertAllFlowFilesTransferred ( PutParquet . REL_FAILURE , 1 )
assertions . doesNotContain ( value , index )
assertEquals ( "99\n" , found )
assertTrue ( Arrays . equals ( recreated , secret ) )
assertEquals ( buf . toString ( ) , "{\"a\":\"aa\",\"b\":\"bb\"}" )
assertThat ( element . getText ( ) , is ( "still www.test.de" ) )
assertEquals ( vNum , intsNum )
assertEquals ( BPResultType . FAIL , result . getResultType ( ) )
assertEquals ( 3 , algo . getSearchStrategyManager ( ) . getStrategies ( ) . size ( ) )
assertThat ( result , is ( "LinkLayerizer" ) )
Assert . assertNotNull ( q . retrieveKnownFields ( ) )
assertEquals ( expected , uri . toString ( ) )
assertNull ( metadata . getEntityListenersMetadata ( ) . getCallbacks ( ) )
assertNotSame ( dg1 , dg2 )
assertEquals ( input . limit ( ) , input . position ( ) )
assertFalse ( found )
Assert . assertEquals ( "10.1.223.134" , address )
assertProcessEnded ( pi . getId ( ) )
assertTrue ( validate )
assertNotNull ( "Condition builder is not built" , builder )
assertEquals ( FeatureState . DISABLED , state )
assertValidationFailures ( deriver , config )
assertTrue ( ! failed . get ( ) )
assertErrorResponse ( response , ErrorResponse . ErrorType . INVALID_INPUT , "INVALID_ACCESS_TOKEN" )
assertArrayEquals ( result , new byte [ ] { 0 , 1 , 2 , 3 } )
assertEquals ( NUMADD , sortMapDistr . domainSize ( ) )
assertTrue ( entity . getSex ( ) == 'F' )
assertEquals ( "accept() content-type-header=[application/x-www-form-urlencoded; charset=UTF-8] accepts-header=[application/custom1,application/custom2]" , actual )
assertArrayEquals ( expectedSorted , data )
assertEquals ( false , result )
assertThat ( defn . equals ( defn2 ) , is ( true ) )
assertEquals ( "Editable master ACE for UID1 should be equal to expectedMasterAccessControlEntry" , expectedMasterAccessControlEntry , store . getEditableMasterAccessControlEntries ( UID1 ) . get ( 0 ) )
assertNotValid ( result )
assertNotNull ( result )
Assert . assertNotNull ( stream . read ( ) )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
Assert . assertNotEquals ( PipelineAck . ECN . DISABLED , ecn )
assertTrue ( expectedAsc . containsAll ( list ) )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
assertTrue ( sut . isTokenValid ( "/rest/api/1.0/projects/TEST/repos" , "testuser" , token ) )
assertEquals ( "" , value )
Assert . assertEquals ( success , jobFuture . get ( ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsFile , accessObjectFactory , irodsAccount )
assertNotNull ( Balance . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( 1 , conflicts . size ( ) )
assertEquals ( "No errors should be registered" , 0 , errors . getErrorCount ( ) )
assertTrue ( pageXml . contains ( "foo bar" ) )
assertThat ( value , is ( valueOfDesc2 ) )
assertEquals ( StatusCode . NAMESPACE_NOT_FOUND , response . getCode ( ) )
assertFailureLogPresent ( pi , "failingTask" )
assertEquals ( Collections . singletonList ( 3L ) , context . performQuery ( query ) )
assertEquals ( null , min )
assertTrue ( Objects . equals ( city , getDocumentDataAsCity ( docRef ) ) )
Assert . assertEquals ( "(hgvs_variant (aa_single_allele_var (aa_single_allele_multi_change_var (reference NM_000109.3 :) p. (aa_multi_change_allele [ (aa_multi_change_allele_inner (aa_change (aa_change_inner (aa_change_substitution (aa_point_location (aa_char Cys) 2) (aa_char Ala)))) (aa_var_sep /) (aa_change (aa_change_inner (aa_change_substitution (aa_point_location (aa_char Arg) 3) (aa_char His))))) ]))))" , hgvs_variant . toStringTree ( parser ) )
assertNull ( polygonSymbolizer . getStroke ( ) )
assertThat ( getTemplateLabel ( jobSpec , LabelConstants . CREATEDBYOPERATOR_LABEL ) , equalTo ( "true" ) )
assertThat ( result . getPayload ( ) , is ( not ( instanceOf ( ExceptionPayload . class ) ) ) )
assertEquals ( "" , actual )
Assert . assertEquals ( 0 , proposals . size ( ) )
assertEquals ( "Mismatched data" , expected , res )
files . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertEquals ( assertion , tensorGet )
Assert . assertEquals ( 400 , index )
assertEquals ( 1 , message . getMessageId ( ) )
assertEquals ( "2017" , da . getDocType ( ) )
assertMatches ( expr . matcher ( "/a/b/c/d/e/@something" ) , "/a/b/c" , "/x/y" )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( ( long ) 8 , ( long ) result . getLongWrapperValue ( ) )
assertNotNull ( result )
assertTrue ( generators . size ( ) > 10 )
assertEquals ( 14 , xreader . findIPStart ( packet ) )
assertEquals ( reference , notPredicate . asCNF ( ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
Assert . assertEquals ( msg , result )
assertEquals ( "test_metric" , sentMetric . getKey ( ) )
assertEquals ( map , service . getInactiveDevices ( ) )
assertSame ( hello . getIterationStrategyStack ( ) , uriTools . resolveUri ( HELLO_URI . resolve ( "iterationstrategy/" ) , wfBundle ) )
assertEquals ( 2 , result . size ( ) )
assertEquals ( VRS [ i ] , ElementDictionary . vrOf ( TAGS [ i ] , null ) )
assertEquals ( Sets . newHashSet ( "server=server1->db=jranalyst1" , "server=server1->functions" ) , backend . getPrivileges ( Sets . newHashSet ( "manager" ) , new ActiveRoleSet ( Sets . newHashSet ( "junior_analyst_role" , "functions" ) ) ) )
assertEquals ( 8 , v . size ( ) )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
Assert . assertEquals ( 8 , patientIdentifiers . size ( ) )
assertThat ( editor . getValue ( ) , is ( ( Object ) Credential . builder ( ) . userName ( "user" ) . setPassword ( "password" . toCharArray ( ) ) . database ( "db" ) . plainSasl ( ) . build ( ) ) )
assertThat ( result , Matchers . equalTo ( "test1=blah1&test2=blah2" ) )
assertEquals ( 3.14159 , result , 0.00001 )
assertEquals ( 7L , impl . getNanoTime ( ) . size ( ) )
assertIdentityNotExist ( securityRealm , evidence )
assertTrue ( "installed pom should exist" , destinationPom . exists ( ) )
assertTrue ( serviceManager . getServiceTypesByServerType ( subject , 435878 ) . isEmpty ( ) )
assertThat ( rendering , is ( "1st September 2011" ) )
assertTrue ( users . contains ( new User ( "1" , "first" ) ) )
assertNotSame ( fixture , copy )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "with recursive sub as ((select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.SUPERIOR_ID\n" + "from EMPLOYEE EMPLOYEE\n" + "where EMPLOYEE.FIRSTNAME = ?)\n" + "union all\n" + "(select EMPLOYEE.ID, EMPLOYEE.FIRSTNAME, EMPLOYEE.SUPERIOR_ID\n" + "from EMPLOYEE EMPLOYEE, sub\n" + "where EMPLOYEE.SUPERIOR_ID = sub.ID))\n" + "select *\n" + "from sub" , serializer . toString ( ) )
assertEquals ( expected , stripped )
this . context . assertIsSatisfied ( )
Assert . fail ( "API broken here" )
assertEquals ( "file://" + base . toString ( ) + "/ui/dist/index.html" , Constants . webViewLocation ( parameters ) )
assertThat ( formatter . withTimezone ( "UTC+2" ) . format ( PlainTimestamp . of ( 2015 , 3 , 29 , 2 , 30 ) ) , is ( "2015-03-29T02:30+02:00" ) )
Assert . assertTrue ( corbaBadParam )
assertEquals ( 0 , ( int ) tree . entries ( ) . count ( ) . toBlocking ( ) . single ( ) )
assertTrue ( dsl . size ( ) > 0 )
assertThat ( response . getStatus ( ) , is ( 200 ) )
assertTrue ( strategy . shouldRetry ( request , env ) )
assertTrue ( infoValidator . validate ( info ) )
assertNull ( target . getMatch ( ) )
assertEquals ( "Count of customer" , 0 , res )
Assert . assertEquals ( null , p . getValue ( ) )
assertTrue ( capabilities . isOperationSupported ( GetMap ) )
assertThat ( strings , contains ( "one" , "[unknown]" , "three" ) )
assertThat ( headerCell . getAttribute ( "class" ) , not ( containsString ( "sort-" ) ) )
assertEquals ( "23" , sb . toString ( ) )
assertThat ( link , is ( notNullValue ( ) ) )
assertNotEquals ( 0 , validationIssues . size ( ) )
assertEquals ( pb . getProperty ( "test" ) , "43" )
Assert . assertTrue ( errors . hasFieldErrors ( "doseUnits" ) )
assertTrue ( client . hasMobile ( ) )
assertPaths ( paths , "s,m,o,t" , "s,n,o,t" )
assertThatContainsOnly ( archive , scriptPath )
assertSame ( ret , forward . shutdownNow ( ) )
assertThat ( driver . findElement ( By . cssSelector ( ".date-and-time" ) ) . isDisplayed ( ) , is ( true ) )
assertThat ( target . matchExactly ( match ) , is ( false ) )
assertEquals ( "{\"b\":2}" , s )
assertTrue ( result . getMessage ( ) + " should contain text 'Invalid JSON'" , result . getMessage ( ) . contains ( "Invalid JSON" ) )
assertEquals ( "value" , settings . get ( "key" , "default" ) )
assertTrue ( cut . getYears ( ) . isEmpty ( ) )
assertEquals ( "master" , result . get ( ) )
assertEquals ( 1L , analyser . getCommands ( ) . values ( ) . iterator ( ) . next ( ) . getCommand ( 0 ) . getAllStatmts ( ) . stream ( ) . filter ( stat -> stat . getPosition ( ) . getLine ( ) == 26 ) . count ( ) )
assertEquals ( expected , actual )
assertNotNull ( parentId )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoImportacao ( ) . toString ( ) )
Assert . assertEquals ( d_words1 . get ( i ) , d_dictTransitionCardinality . sequence ( i + 1 ) )
Assert . assertNull ( "Result is wrong" , o )
assertFalse ( condition . shouldDisplay ( context ) )
Assert . assertEquals ( "bar" , resolved )
assertFalse ( lockAcquired )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertTrue ( tctf . isReady ( mock ( CyColumn . class ) ) )
assertFalse ( timeLine . isValid ( current ) )
assertEquals ( 1 , ( int ) access . readFromExpecting ( "stoppedCount" , 1 ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "{CPU=1, camelInfluxDB.MeasurementName=MyTestMeasurement}" , result )
assertThat ( url , is ( "http://localhost:8080/test" ) )
assertEquals ( "(int x) -> {" + CRLF + "    return (x + 1);" + CRLF + "}" + CRLF , CodeModelTestsHelper . toString ( aLambda ) )
assertEquals ( Status . CREATED . getStatusCode ( ) , response . getStatus ( ) )
Assert . assertEquals ( STORE_SIZE , count )
assertThat ( settings , is ( applicationPreferences ) )
assertTrue ( accept )
assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertFlatResult ( result )
assertNotNull ( entity . getId ( ) )
utils . assertStatus ( "/stacks/" + id , HttpStatus . INTERNAL_SERVER_ERROR )
assertNotNull ( post )
runner . assertNotValid ( )
Assert . assertEquals ( "Fr3gSvoAeKbGpQD3r98KFeB50P3Gq14XBVsv5fpiaBvJ3HTOpREiwYGs20Xw" , endereco . getDescricaoMunicipio ( ) )
assertThat ( buf . toString ( ) , is ( equalTo ( "// Act\r\n" ) ) )
Assert . fail ( "Failed to catch unsupported comparator names" )
assertThat ( version , equalTo ( V_5_2_0 ) )
assertEquals ( 2.0 , WeightedLevenshtein . distance ( "1" , "" , e ) )
Assert . assertEquals ( "Hello " , new String ( out . toByteArray ( ) ) )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , "12.3" ) )
Assert . assertEquals ( expected , actual )
assertTrue ( cont1 == 10 )
assertEquals ( asList ( foo2 , foo3 ) , results )
assertEquals ( 10 , ref . atomicGet ( ) )
assertEquals ( "PONG" , response )
assertTrue ( 0 > v1 . compareTo ( v2 ) )
assertTrue ( requestMeta . getHeaders ( ) . containsKey ( "X-Foo" ) )
assertSameEnumeration ( "PreorderModel" , coreEnum , xEnum )
Assert . assertTrue ( failedAsExpected )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( originalLimit , limit )
assertEquals ( XsdAttributeName . BASE . getLocalName ( ) , attr . getLocalName ( ) )
assertEquals ( row , null )
assertTrue ( Files . isDirectory ( target ) )
Assert . assertEquals ( "<p>Line<br/>with<br/><br/>line breaks</p>" , text . asHtml ( linkResolver ) )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertEquals ( TERM_FACTORY . getConstantLiteral ( "1" , XSD . LONG ) , translation )
assertEquals ( withLabel , pd1 )
assertThat ( result . fullName ( ) , is ( "int" ) )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_BOXING ) )
Assert . assertEquals ( 51L , tuplesPerWindow )
assertThat ( throttler . throttledUntil ( new Object ( ) , request ) , equalTo ( Instant . EPOCH ) )
assertNotNull ( result )
assertEquals ( 86 , Colors . rgbColor ( "aquamarine1" ) . longValue ( ) )
assertThat ( next . join ( ) , is ( VALUE ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( Collections . emptyMap ( ) . toString ( ) , bucketVersions )
assertEquals ( String . format ( "Create table new_table with 1 column and no indexes" + "%n    - A non-null column called column_one [STRING(10)]" ) , HumanReadableStatementHelper . generateAddTableString ( newTable ) )
assertResultsMatch ( select ( windowFunction ( count ( ) ) . orderBy ( field ( "partitionValue1" ) ) . build ( ) . as ( "theCount" ) ) . from ( tableRef ( "WindowFunctionTable" ) ) , "4" , "4" , "4" , "4" , "7" , "7" , "7" )
assertNotNull ( "�规��娴�绋�瀹�涔�Id�峰��娴�绋��炬��瑰け璐�" , result )
assertNull ( externalLink )
assertEquals ( score , smsd1 . getEnergyScore ( 0 ) )
Assert . isTrue ( 1111122222334444L == time )
assertEquals ( val . awaitAndGet ( ) , "from instance won't cause an outer reference" )
assertEquals ( "the status of message replied must be 'ok'. " , "ok" , reply . body ( ) . getString ( "status" ) )
assertEquals ( 3 , inMemoryResultAccumulator . getAggregationResultCount ( ) )
assertThat ( properties , containsInAnyOrder ( allOf ( hasProperty ( "name" , equalTo ( "name" ) ) , hasProperty ( "value" , equalTo ( "Hans" ) ) ) , allOf ( hasProperty ( "name" , equalTo ( "age" ) ) , hasProperty ( "value" , equalTo ( "12" ) ) ) ) )
assertTrue ( cleanupFailed )
assertThat ( returnValue , equalTo ( "package protected" ) )
assertEquals ( context , wizardPage . context )
assertTrue ( checkContains ( reasoned , "SubClassOf(<http://x.org/XA> <http://x.org/XB>)" ) )
assertEquals ( new HashSet < String > ( ) , all )
assertThat ( sut . getGMPath ( ) , is ( gmPath ) )
assertThat ( coll . withComplement ( window ) , is ( expected ) )
assertQuery ( em , 1 , query )
assertEquals ( 3 , array . length )
arrays . assertDoesNotHaveDuplicates ( description , actual )
assertNotNull ( result )
assertEquals ( 0x10 , acia . read ( 0x0001 , true ) )
Assert . assertEquals ( 0 , timeZoneDefinition . compare ( first , first ) )
assertNotNull ( Service . reader ( ) . read ( ) )
Assert . assertTrue ( ! ( ( BasicDecider ) instance ) . isToRunContained ( metadata . getWorkflowRun ( workflowRunAcc ) . getInputFileAccessions ( ) , filesToRun ) )
assertEquals ( true , mockResult . included ( "canEdit" ) )
assertEquals ( m1 , m2 )
assertTrue ( ctx1 . getScore ( ) < ctx2 . getScore ( ) )
assertEquals ( valueIn , valueOut , 0.0001 )
assertEquals ( "PONG" , status )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "17-Jun-2013" )
assertObject ( args )
assertEquals ( "a\n" , found )
Assert . assertEquals ( "ExacRecord [chrom=1, pos=13371, id=., ref=G, alt=[C], filter=[], " + "alleleCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], SAS=[2], ALL=[2]}, " + "alleleHetCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], SAS=[0], ALL=[0]}, " + "alleleHomCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], SAS=[1], ALL=[1]}, " + "alleleHemiCounts={}, " + "chromCounts={AFR=770, AMR=134, EAS=254, FIN=16, NFE=2116, OTH=90, SAS=5052, ALL=8432}, " + "alleleFrequencies={AFR=[0.0], AMR=[0.0], EAS=[0.0], FIN=[0.0], NFE=[0.0], OTH=[0.0], SAS=[3.95882818685669E-4], ALL=[2.3719165085388995E-4]}]" , record . toString ( ) )
assertEquals ( expectedValue . trim ( ) , entityExecutor . getEntities ( ) . get ( 1 ) . getContent ( ) . trim ( ) )
assertEquals ( 1 , allPatients . size ( ) . intValue ( ) )
assertEquals ( 4 , count )
assertEquals ( 2 , serviceInfos . size ( ) )
Assert . assertEquals ( ValidationType . CITY , ctxUser . execute ( input ) )
assertTotal ( list )
assertTrue ( verifier . verify ( signature ) )
Assert . assertEquals ( getManager ( ) . count ( ) , count - 1 )
assertEquals ( expResult , stringBuilder . toString ( ) )
Assert . assertFalse ( "Failed to handle bad pattern" , grok . configure ( props ) )
assertEquals ( query , result )
assertTrue ( "Time entity validation failed" , schema . validate ( timeString ) )
assertFalse ( executor2 . submit ( new TryLockTask ( reentrantReadWriteUpdateLock . readLock ( ) ) ) . get ( ) )
assertNull ( "Immunosuppression was not null" , immunosuppressionTreatment )
assertEquals ( expected . toString ( ) , PercentDecoder . decodeAll ( encoded . toString ( ) ) )
assertEquals ( source , builder . getPropertyState ( ) )
Assert . fail ( "HttpServerTestingFrameworkException should have been thrown" )
assertNotNull ( testObj . getFieldDataManager ( ) )
Assert . assertEquals ( "Processing of the HL7 message did not result in the new proposal being added to the model" , initialOccurrences + 1 , Context . getConceptService ( ) . getConceptProposals ( "ASDFASDFASDF" ) . size ( ) )
assertTrue ( stmt instanceof CreateTableNode )
assertNotNull ( val )
Assert . assertEquals ( quantidadeItemEfetivamenteExportado , exportacaoIndireta . getQuantidadeItemEfetivamenteExportado ( ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>" , result )
assertArrayEquals ( "Byte arrays are not the same." , bOut . toByteArray ( ) , finalOut . toByteArray ( ) )
assertEquals ( "^~(.+)$" , pattern )
assertEquals ( size + 1 , container . size ( ) )
assertEquals ( 6. * 3600. + 6. * 60. + 12. * 3600. + 12. , sec , 0.01 )
Assert . assertEquals ( Integer . class , clazz )
Assert . assertTrue ( "Unexpected returned set" , ret . containsAll ( referenceList ) && ret . size ( ) == referenceList . size ( ) )
assertNotNull ( session . from ( $ ( var ) ) . where ( $ ( var . getText ( ) ) . containsIgnoreCase ( "a bcd e" ) ) . uniqueResult ( $ ( var ) ) )
assertNotNull ( fixture )
assertSuccessfulConversion ( res , - 4 )
assertFalse ( controller . isConnected ( ) )
assertEquals ( object , result )
assertEquals ( "3��臧� ��" , t . format ( new Date ( 0 ) ) )
assertEquals ( l , bic . parse ( text ) )
assertNull ( s )
assertThat ( output . readValuesToList ( ) , equalTo ( expectedValues ) )
assertMockEndpointsSatisfied ( )
Assert . assertArrayEquals ( list . toArray ( ) , ListUtil . valueToLowerCase ( list ) . toArray ( ) )
assertTrue ( kb . hasErrors ( ) )
assertTrue ( "processor does not support supported return type" , processor . supportsReturnType ( supportedReturnType ) )
Assert . assertEquals ( 4 , count . get ( ) )
assertTrue ( MultiParts . hasMultiPart ( metaDatas ) )
assertArrayEquals ( expected , jsonified )
assertEquals ( jsonValue , result )
assertNull ( response . getRedirectedUrl ( ) )
Assert . assertNotNull ( "nonvoidNoParams should have returned a value" , returned )
Assert . assertEquals ( DEFAULT_USERNAME , callIntermediateWhoAmI ( ) )
assertThat ( terminalStep . wasRun ( ) , is ( false ) )
tester . assertContains ( "admin" )
context . assertAuthzException ( statement , "CREATE DATABASE somedb" )
assertThat ( clazz , hasValidBeanEquals ( ) )
assertEquals ( "<p>Test</p>" , cleanHtml )
assertEquals ( rc . request ( ) . host ( ) , host )
assertEquals ( "a" , Util . getName ( mock ) )
assertEquals ( annotations , annotationsOnMethod )
assertTrue ( impl . hasElapsed ( ) )
assertSame ( TEST_ROUTE , extractedValue )
Assert . assertEquals ( testString , decodedUTF8 )
assertTrue ( messageLatch . await ( 3 , TimeUnit . SECONDS ) )
assertNull ( loader . getParent ( ) . getParent ( ) )
assertThat ( dialect . addOptimizerHints ( sql , hints ) . toString ( ) , is ( "SELECT /* SQL_ID */ /*+ INDEX (PUBLIC.TEST_1 test_ix) USE_NL */" + System . lineSeparator ( ) + " * FROM PUBLIC.TEST_1" ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertArrayEquals ( array . data ( ) . asFloat ( ) , compressed . data ( ) . asFloat ( ) , 0.1f )
assertTrue ( Arrays . equals ( getPacketData ( "05 00 61 00 00" ) , request . serialize ( ) ) )
assertThat ( generatedHtmlReports . size ( ) , is ( 3 ) )
assertTrue ( Arrays . equals ( pktSerialized , pktSerialized1 ) )
Assert . assertTrue ( ldapLogin . doAction ( req , resp ) )
assertPayloadEqual ( payload )
assertEvent ( "org/osgi/framework/ServiceEvent/REGISTERED" , FilterUtils . eq ( "service.objectClass" , "org.knowhowlab.osgi.testing.it.testbundle.service.Echo" ) , 2 , TimeUnit . SECONDS )
assertEquals ( "URI is not built correctly" , uri , newUri )
assertThat ( options . getLogPath ( ) , is ( new Path ( "hdfs://localhost:8020/logs/" ) ) )
assertNotNull ( p )
Assert . assertEquals ( conn . getResponseCode ( ) , HttpURLConnection . HTTP_BAD_REQUEST )
assertNull ( value )
assertTrue ( infoValidator . validate ( info ) )
assertEquals ( "Firemaking(9)" , screenshotPlugin . parseLevelUpWidget ( LEVEL_UP_LEVEL ) )
assertDelete ( )
assertUrl ( url , "https" , "localhost" , 443 , "/" )
assertEquals ( 1 , buffer . readableBytes ( ) )
assertTrue ( stop . isSuccessful ( ) )
assertFalse ( result )
assertEquals ( "0.002322" , buttonFunctionblockData . getStatusProperty ( "sensor_value" ) . get ( ) . getValue ( ) )
assertFalse ( matcher . matches ( mockElement ) )
assertOut ( "/**\n * @export\n * @return {number}\n */\nfoo.bar.B.prototype.b = function() {\n  var /** @type {Array.<string>} */ a = null;\n  return a.length;\n}" )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( configurator . getDoubleProperty ( propertyName ) , expectedValue , TestUtility . epsilon )
assertEquals ( "user1,user2" , result )
assertEquals ( 1 , performImportScript ( csv , false ) )
assertEquals ( "com.querydsl.codegen.QPoint" , factory . create ( type ) . getFullName ( ) )
assertEquals ( "Refugee       " , leftTrimmedString )
assertTrue ( "Refrence to True" , STMUtils . dereference ( ref ) )
assertFalse ( op . isArchivalGroup ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( exp instanceof ASTCurrentDate )
assertThat ( info . isTeiidSupport ( ) , is ( Boolean . FALSE . booleanValue ( ) ) )
assertEquals ( expected , actual )
assertMedianIs ( 6D )
Assert . assertEquals ( 2 , records )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Response a=\"b\" foo=\"bar\"/>" , elem . toXml ( ) )
assertTrue ( gc . moveToTrash ( path ) )
Assert . assertNull ( "No se ha borrado el documento" , getServicioDocumentos ( ) . getInfoDocumento ( ID_EXISTENTE ) )
Assert . assertEquals ( "dataOf1" , data , artifact )
assertEquals ( DummyDrawHandler . drawTextToString ( "Das ist \" dfs " , 10 , 20 , AlignHorizontal . LEFT , null ) , drawHandler . getLastDrawCall ( ) )
assertTrue ( "Expected exception was not thrown." , expectedExceptionThrown )
assertAnnotationCompletions ( "@Value(value=\"${data.prop2}\"<*>)" , "@Value(value=\"${else.prop3}\"<*>)" , "@Value(value=\"${spring.prop1}\"<*>)" )
assertEquals ( experimentDeleteRequest . getRequestHeaders ( ) , headers )
assertEquals ( query , expected )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( expecting , found )
assertMatch ( e , s )
assertEquals ( 24 , result )
Assert . assertEquals ( "Hello Kermit" , result )
assertTrue ( true )
assertEquals ( "12攵� ��" , t . format ( new Date ( 0 ) ) )
assertEquals ( VALID_REGISTRATION_ID , Deencapsulation . getField ( deviceRegistrationState , "registrationId" ) )
assertEquals ( target . field , check . send ( ) )
assertSame ( t . toLocalTime ( ) , LocalTime . NOON )
Assert . assertEquals ( "*3\r\n+master\r\n:0\r\n*0\r\n" , formatStr )
assertTrue ( "Expected a non-empty set of values." , expected . length != 0 )
Assert . assertTrue ( this . component . setVisibility ( this . entity1 , null ) )
Assert . assertEquals ( new Integer ( 3 ) , person . getAttribute ( 3 ) . getAttributeType ( ) . getId ( ) )
Assert . assertEquals ( 1 , qualifyMock . getMessages ( ) . size ( ) )
assertEquals ( "UPDATE DATABASECHANGELOG " + "SET MD5SUM = '7:e27bf9c0c2313160ef960a15d44ced47' " + "WHERE ID = N'SYPA: AUTO_START t眉眉p INT -> TEXT, vaartus 0 00 17 * * ?' " + "AND AUTHOR = 'martin' " + "AND FILENAME = 'db/changelog.xml'" , sqls [ 0 ] . toSql ( ) )
assertThat ( families , arrayContaining ( "Cloud/Snowflake" ) )
Assert . assertEquals ( 100 , cache . size ( ) )
assertEquals ( response . getStatus ( ) , HttpServletResponse . SC_NOT_FOUND )
assertEquals ( "HmacSHA1 size" , 20 , result . length )
assertEquals ( lineString , dump ( ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "wkt" ) )
Assert . assertEquals ( 0 , vm . getStack ( ) . size ( ) )
assertEquals ( Collections . EMPTY_SET , nullFieldProblems )
assertEquals ( vo . getPhoneNumbers ( ) . get ( 1 ) . getNumber ( ) , "5432109876" )
runner . assertNotValid ( )
assertNotNull ( getFixture ( ) . review ( null , master , slave ) )
assertFalse ( proxy . isTableExists ( "foo" ) )
assertArrayEquals ( new String [ ] { "55555" , "4444" , "333" , "22" , "1" } , strings )
assertEquals ( result , "ok" )
assertNotNull ( argumentType )
assertEquals ( "warn:My message with 3 parameters : 1, 2, 3" , output )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Refer/>" , elem . toXml ( ) )
assertFalse ( factory == SqlGeneratorFactory . getInstance ( ) )
Assert . assertTrue ( "Expected zero but it was: " + actualValue , actualValue == 0 )
assertThat ( stepListener . getCurrentTestOutcome ( ) . getTestSteps ( ) . get ( 1 ) . getScreenshotCount ( ) , is ( 1 ) )
assertTrue ( this . testBulkListRequestHandlerAdvice . executeLatch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "| script | selenium driver fixture |\n" + "| start browser | firefox | on url | http://example.com |\n" + "| check | is | getText | on | field | Test |\n" + "| ensure | do | waitForText | on | field | with | Test |\n" + "| stop browser |\n" , result )
assertKernel ( kernel , CIRCLE3 , e )
assertEquals ( 14 , xreader . findIPStart ( packet ) )
assertXMLEqual ( expected , actual )
assertEquals ( expResult , result )
assertEquals ( "0362210a336ba79c6cab30bf09deaf2f1a749e6f" , actual . get ( "/content/test-page/jcr:content" ) )
assertIterationsEqual ( out2 , out1 )
assertTrue ( containsSeededMethod )
assertArrayEquals ( expectedBuffer , buffer )
assertTrue ( value == 6 || value == 5 )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertEquals ( total , JFishList . wrap ( all ) . sum ( "age" ) . intValue ( ) )
assertEquals ( ( ( SoapMessage ) messageContext . getRequest ( ) ) . getSoapHeader ( ) , result )
FunctionTestUtil . assertResult ( stringFunction . invoke ( contextMap ) , "{ key1 : value1, key2 : { childKey1 : childValue1 } }" )
assertNotNull ( countTime )
assertThat ( config . getProvider ( ) . getClass ( ) , Matchers . is ( Matchers . typeCompatibleWith ( MyCustomProvider . class ) ) )
assertNotNull ( fixture )
assertEquals ( exp , rev )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
assertThat ( copy ( ints ) , is ( equalTo ( ints ) ) )
Assert . assertTrue ( this . component . setVisibility ( this . entity1 , null ) )
assertNotNull ( Fax . reader ( ) . read ( ) )
assertEquals ( "Failed to construct proper writer" , "Hello" , sw . toString ( ) )
assertEquals ( AuthStatus . SUCCESS , module . validateRequest ( messageInfo , client , null ) )
assertEquals ( expResult , result )
Assert . assertNotNull ( editor . getValue ( ) )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertEquals ( expectedHmacSHA256Signature , actualHmacSHA256Signature )
Assert . assertTrue ( result . success ( ) )
assertTrue ( result . length ( ) > 0 )
Assert . assertFalse ( dl . doAction ( reqNotPost , mock ( HttpServletResponse . class ) ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'the' []{0,2} 'Force' " ) )
assertEquals ( notA , comp )
assertEquals ( expResult , result )
assertThat ( other , DateMatchers . sameMillisecondOfSecond ( date ) )
assertTrue ( theObject . getClassInformation ( ) instanceof GameObjectClassInformation )
assertNotNull ( afeTipoDescuento )
assertEquals ( "All test cases should pass" , 4 , runner . getPassed ( ) )
Assert . assertFalse ( factory . isSafetyGuaranteed ( ) )
assertFalse ( actual )
Assert . assertEquals ( nIterations , gkoPool . getDestroyedCount ( ) )
Assert . assertNotNull ( result . getQueryExplanations ( ) )
assertThat ( model2 . getMySerializableBlob ( ) , is ( value ) )
assertSame ( d , e . getDomain ( ) )
assertEquals ( ( Integer ) 3 , Collections . min ( list ) )
assertCanMultiTokenizeString ( randomUnicodeOfLength ( LENGTH ) , rand . nextInt ( 998 ) + 2 , rand . nextInt ( 100000 ) , tokenizer )
assertEquals ( expectedPlan , actualPlan )
assertEquals ( "username" , usernameForAuthorEmail )
Assert . assertThat ( result . size ( ) , is ( 1 ) )
assertEquals ( expectedTypes , sourceTypeDAO . getTypes ( TENANT_ID ) )
Assert . assertEquals ( "SELECT " + fixedColumns + ",`foo.bar` FROM v WHERE _user_ = 'me'" , sql )
assertThat ( movie . toUri ( ) , equalTo ( rootUri . resolve ( "/movies/1" ) ) )
assertThat ( dispatched , is ( SYNC_PRIVATE_FLOW_MSG + ".main1@" + ASYNC_MAIN_FLOW_THREAD_NAME + "." + SYNC_PRIVATE_FLOW_NAME + "@" + ASYNC_MAIN_FLOW_THREAD_NAME ) )
assertNotNull ( result )
assertTrue ( aNumber == result )
Assert . assertEquals ( 2 , lqs . size ( ) )
assertEquals ( new Long ( 100 ) , mojoTimer . getDuration ( ) )
Assert . assertEquals ( 0 , a . getMaxNestedBlocks ( ) )
assertSizeViolations ( validator . validate ( foo ) )
Assert . assertTrue ( this . manager . connect ( this . person1 , this . family1 ) )
Assert . assertEquals ( "{title=fivesmallq}" , result )
assertFalse ( violated )
assertThat ( processors . size ( ) , equalTo ( 0 ) )
assertThat ( def . isMultiple ( ) , is ( true ) )
assertErrorEventDefinition ( "subProcessStart" , "myErrorCode" , null )
assertEquals ( expected , product )
assertEquals ( expecteds , actuals )
assertThat ( doHandle ( request , responseWithNullPayload ) , is ( sameInstance ( responseWithNullPayload ) ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 7 , warnings . size ( ) )
assertTrue ( status == 0 )
assertTrue ( savedEntity . isValid ( ) )
assertListSize ( knownTotal , knownContentList )
assertThat ( externalTaskService . getExternalTaskErrorDetails ( externalTaskId ) , is ( ERROR_DETAILS ) )
assertEquals ( TypeInfoFactory . getListTypeInfo ( TypeInfoFactory . getMapTypeInfo ( TypeInfoCreator . createString ( ) , TypeInfoCreator . createFloat ( ) ) ) , orcType )
assertEquals ( aces , l2 )
assertThat ( doc . getKey ( ) , is ( notNullValue ( ) ) )
assertThat ( representation . getName ( ) , is ( "transaction" ) )
assertEquals ( "a" , result )
Assert . assertNotNull ( personStructure )
assertEquals ( expr , printConstraint ( expression ) )
Assert . assertEquals ( expectedXML , actualXML )
assertTrue ( "Editor must not work when it is disabled!" , ! isElementPresent ( TextFieldElement . class ) )
assertArrayEquals ( one . toArray ( ) , betaGrad2 . toArray ( ) , 0.01 )
assertEquals ( expectedNow ( ) , result )
assertEquals ( "verboseConfig" , configObservable . toBlocking ( ) . single ( ) )
assertNull ( "Unexpected value for index=" + index , o )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optDistinctToReduced ) )
assertTrue ( sourceFile . exists ( ) )
Assert . assertEquals ( actual , expected )
assertEquals ( openIds , user . getOpenIds ( ) )
assertTrue ( "Incorrect statement in the Block" , stmt . equals ( TestCommandStatement . sample1 ( ) ) )
assertEquals ( 13 , value )
assertTrue ( "incorrect value" , aNumber . toString ( ) . equals ( result ) )
assertEquals ( "Test 1 2 3 null" , processDefinition . getDescription ( ) )
assertThat ( result . getName ( ) , is ( COLLECTION_NAME ) )
assertEquals ( id , id2 )
assertFalse ( transform instanceof LinearTransform )
assertTrue ( isDisabled )
assertEquals ( time . getTime ( ) , metadata . getProductStartTime ( ) . getAsDate ( ) . getTime ( ) )
assertEquals ( "zero" , actual )
Assert . assertEquals ( 0 , latch . getCount ( ) )
assertTrue ( "No click in log" , logContainsText ( itemClickOn ( 3 , 2 , false ) ) )
assertEquals ( Status . FAILED , result . getStatus ( ) )
assertThat ( perspectiveId , is ( this . perspectiveId ) )
assertThat ( page . hasError ( ) , is ( false ) )
assertEquals ( filterClause , " AND \"fieldName\" = 3" )
Assert . assertTrue ( result )
assertThat ( "candidates should contain [name=]" , candidates , hasItems ( "name=" ) )
assertTrue ( isGroup )
assertOut ( "for (var /** @type {number} */ i = 0, /** @type {number} */ len = 10; i < len; i++)\n  break;" )
Assert . assertNotNull ( addressResultsDto )
Assert . assertNotNull ( instance . getAllAtomMapping ( ) )
Assert . assertEquals ( "chosen overwritten-should have stayed the same" , firstLength , compareIrods . length ( ) )
assertFalse ( DialectFactory . isProgress ( mockSqlDatabaseMetaData ) )
assertEquals ( reader , readerResult )
assertThat ( currentSessionManager . getMeasurementStreams ( ) . size ( ) , equalTo ( 1 ) )
assertEquals ( 4 , beanMap . size ( ) )
assertEquals ( 0 , DynamoDBUtil . getItemSizeBytes ( item ) )
assertEquals ( label , 0.0 , diff . getRMS ( ) , TOLERANCE )
assertExec ( "Should be the same" , Numbers . class , "deserDouble__D" , f )
assertThat ( log . getLogEntries ( 1 , 5 , quorumId ) , resultsIn ( aListOfEntriesWithConsecutiveSeqNums ( 1 , 5 ) ) )
assertEquals ( context . getBean ( SingleBean . class ) , builder . build ( ) )
Assert . assertEquals ( "SELECT pet.id, pet.num, pet.name, pet.age, pet.cate, pet.master_id, pet.user_id FROM t_pet pet  ORDER BY id" + fieldAdd + " ASC LIMIT 0, 5 ;" , sql )
assertEquals ( expecteds , actuals )
assertEquals ( 2 , session . from ( var ) . distinct ( ) . list ( var ) . size ( ) )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( FlowspecL3vpnRoute . class ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Wrong output: " + output , output . contains ( "Setting initial instance status as: STARTING" ) )
assertFalse ( server . isComplete ( ) )
assertTrue ( elapsed < 2 * SECOND )
assertTrue ( passwordEncoder . checkpw ( plaintext , encoded ) )
assertEquals ( "exists (select 1\n" + "from cat.kittens as cat_kittens_0\n" + "where cat_kittens_0.name = ?1)" , serialize ( predicate ) )
assertThat ( commands , hasKey ( asList ( "test" ) ) )
assertNotNull ( method )
assertEquals ( "Wrong URL" , file . getAbsoluteFile ( ) , FileLocatorUtils . fileFromURL ( url ) . getAbsoluteFile ( ) )
Assert . assertNull ( connectionManager . getConnectionDetails ( TestConnectionProvider . SCHEME , CONNECTION_NAME ) )
assertEquals ( "\t" , pluginParameters . indentCharacters )
assertTrue ( control . matches ( "/any/ICanPutAnythingInHere/what" ) )
assertTrue ( "Should get 'lollol'" , Arrays . equals ( testBytes , value . getBytes ( ) ) )
assertNull ( entity . getName ( ) )
assertEquals ( expected , nameGenerator ( prefix ) . generate ( nameRequest ( ) . originalName ( originalName ) ) )
Assert . assertTrue ( maxAbsDeviation < 5E-03 )
assertThat ( "inventory" , found , itemWithNumber ( "12345678" ) )
assertTrue ( "Intersection between line and point is incorrect" , pi . equals ( piExp ) )
assertNull ( eRetrieved )
assertNull ( variableValue )
assertEquals ( messageList . size ( ) , partitionMessageQueue . getMessageList ( ) . size ( ) )
assertThat ( found , equalTo ( expected ) )
assertEquals ( exp , res )
assertTrue ( matcher . match ( msg , rule ) )
Assert . assertEquals ( _runCounts . size ( ) , 5 )
assertEquals ( 3 , breakpoint . getLine ( ) )
assertThat ( any . contains ( MILLI_OF_DAY ) , is ( true ) )
Assert . assertEquals ( 2 , tables . size ( ) )
assertSequence ( visitor . getNodes ( ) , "c" , "b" , "e" , "d" , "a" )
Assert . assertEquals ( ServerParse . BEGIN , sqlType )
assertSame ( p3 , result )
assertEquals ( "1.0101" , element . getValueAsString ( ) )
Assert . assertEquals ( idSet . size ( ) , 16 )
assertEquals ( 2 , response . getBody ( ) . getEntities ( ) . size ( ) )
assertEquals ( 1 , fakeClock . numPendingTasks ( ) )
assertProcessInstanceCompleted ( processInstance )
Assert . fail ( ex . getMessage ( ) )
assertEquals ( 10 , average , 0 )
assertSame ( "get target same as table" , table , searchable . getTarget ( ) )
assertEquals ( languagesSeperatedByComma , elementsJoined )
throwables . assertHasMessageMatching ( info , actual , REGEX )
assertEquals ( "car" , type . getProfile ( ) )
assertEquals ( cache . get ( "a" ) , null )
assertEquals ( profilePage . getUsername ( ) , "test-admin" )
assertNull ( result )
assertEquals ( "_id" , res . getSearchParam ( ) . get ( 1 ) . getName ( ) . getValue ( ) )
assertEquals ( 10 , wrapper . getGenre ( ) )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigShort ( ) ) . isWarnEnabled ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertThat ( serialize ( writable ) . length , is ( 0 ) )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertThat ( record . getStation ( ) , is ( nullValue ( ) ) )
Assert . assertEquals ( createArrayNode ( createObjectNode ( "fieldName" , 3 ) , createObjectNode ( "fieldName" , 4 ) , createObjectNode ( "fieldName" , 5 ) ) , result )
assertThat ( msg , is ( "MESSAGE_TEXT" ) )
assertEquals ( expResult , result )
assertEquals ( "error" , ex . getMessage ( ) )
assertThat ( eventCaptor . getValue ( ) . getConfiguration ( ) , is ( storeConfigCopy ) )
assertEquals ( 2 , cnt . get ( ) )
Assert . assertEquals ( testTemplate1 . getDescription ( ) , description )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
assertEquals ( asList ( "5:1" , "1:0" , "1:2" , "2:3" , "2:4" , "5:6" , "6:7" , "6:8" ) , messageResults )
Assert . assertEquals ( 1 , countingNotifier . getNotificationCount ( ) )
assertEquals ( "(| [= foo] [= bar] [= baz])" , m . toString ( ) )
assertSame ( ctrlC , accelerator )
assertEquals ( 4.0 , distance . compute ( point1 , point2 ) , EPSILON )
assertThat ( ifCounterDataIndexable . matchesPojo ( this . counterData ) , is ( true ) )
assertEquals ( 1 , added )
org . junit . Assert . assertEquals ( 0 , ret )
assertEquals ( ShipmentCollection . getData ( ) . size ( ) , 1 )
assertEquals ( HttpStatusCode . NOT_FOUND . getStatusCode ( ) , connection . getResponseCode ( ) )
assertEquals ( ( i < 10 ? i : 10 ) , ( ( Long ) ksession . getQueryResults ( "TestLengthWindow" ) . iterator ( ) . next ( ) . get ( "$eventCount" ) ) . intValue ( ) )
Assert . assertEquals ( "b;a" , response . getSource ( ) . get ( "_labels" ) )
assertEquals ( 3 , scores . size ( ) )
assertEquals ( "a\n" , found )
assertThat ( reader . getContentLength ( ) , is ( equalTo ( - 1 ) ) )
assertThat ( result , is ( expected ) )
assertViewName ( mav , "editProfile" )
assertEquals ( jt . getRawClass ( ) , Integer . class )
assertTrue ( hidden )
assertEquals ( Integer . valueOf ( 0x42 ) , event . getMessageId ( ) )
assertEquals ( 0 , folder . findBindPairForInStream ( 0 ) )
Assert . assertEquals ( String . format ( "a %s text" , this . html ( bb , "red" , "colored" ) ) , formatter . format ( "a [color='red]colored[/color] text" , defaultOptions ( ) ) )
assertResultSet ( res )
assertTrue ( "Listeners have been cloned" , cc2 . getEventListeners ( ConfigurationEvent . ANY ) . isEmpty ( ) )
assertArrayEquals ( null , getRow ( ) . getArray ( "texta" , String [ ] . class ) )
assertEquals ( avClusteringCoefficient , Double . NaN )
assertEquals ( OpenJPATemplates . DEFAULT , JPAProvider . getTemplates ( em ) )
assertProjectOut ( compiledFileNames , testDirPath )
assertThat ( conn , is ( notNullValue ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( tz . isInvalid ( date , PlainTime . of ( 3 , 0 ) ) , is ( false ) )
assertEquals ( "country.getCountry().getName() does not return 芯斜�械写懈薪�械� 谐芯��写邪���胁邪" , "芯斜�械写懈薪�械� 谐芯��写邪���胁邪" , city . getCountry ( ) . getName ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( bar1 . hashCode ( ) , bar2 . hashCode ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( component ) instanceof WPartialDateFieldRenderer )
assertEquals ( o1 , o2 )
assertThat ( result . toString ( ) , is ( "OuterBean1{name='bingoohuang', bean=InnerBean1{addr='gongjianfang'}}" ) )
assertEquals ( 0 , configList . getBuildConfigurations ( ) . size ( ) )
assertEquals ( MqttQos . DELIVER_AT_MOST_ONCE , mqttMessage . getQos ( ) )
assertNotNull ( Regulation . fetcher ( "RNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "1" , ( ( NumberValue ) value1 ) . getValue ( ) )
assertEquals ( "../.." , result . toString ( ) )
Assert . assertTrue ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
assertNull ( "Not null type is returned for property ''" , container . getType ( "" ) )
assertNull ( c )
assertEquals ( 0 , shell . run ( new String [ ] { "listbookies" , "-ro" } ) )
Assert . assertEquals ( 2 , count . intValue ( ) )
assertEquals ( 0 , orgUnits . size ( ) )
Assert . assertEquals ( "comp itself should have the focus" , comp , uic . getFocussed ( ) )
assertThat ( nodeTuple , is ( nullValue ( ) ) )
given ( ) . port ( jettyPort ) . log ( ) . all ( ) . accept ( ContentType . JSON ) . when ( ) . get ( "/openapi" ) . then ( ) . log ( ) . all ( ) . assertThat ( )
assertContentSame ( rs , rc , columnParam1 )
assertFalse ( "There was cacheable headers" , HeaderUtils . hasCacheableHeaders ( headers ) )
assertEquals ( top , entry . getValue ( ) )
assertEquals ( ModelInterceptor . filter ( DummyModel . class . getMethod ( "filter" ) ) . getEntityClass ( ) , DummyModel . class )
assertEquals ( "Mary loves the cow." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertEquals ( Float . valueOf ( "12.3" ) , converter . getAsObject ( facesContext , new UIPanel ( ) , "12.3" ) )
assertFalse ( uploadSuccessful )
Assert . assertEquals ( entity , result )
assertEquals ( 77 , optionalLong . orElse ( 77 ) , 0 )
assertTrue ( length == 10 )
Assert . assertEquals ( correlation . computeCorrelationMatrix ( input ) , new BlockRealMatrix ( expected ) )
assertEquals ( "tset a si siht" , out )
assertArrayEquals ( plaintext , decoded )
assertTrue ( NamedCurve . verify ( KeyCodec . getKeyAsRawBytes ( pub ) , dataForSigning , signatureGen ) )
assertFalse ( topic . hasTopic ( ) )
assertSame ( t , TEST_2007_07_15_12_30_40_987654321 )
assertSame ( "Wrong root node" , ROOT_AUTHORS_TREE , model . getRootNode ( ) )
assertEquals ( "2 + 3" , expr . getParameterValue ( ) )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
assertThat ( result . fullName ( ) , is ( Long . class . getName ( ) ) )
Assert . assertEquals ( "[1, 3]" , s . toString ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
Assert . assertEquals ( "99999999999.9999" , cide . getQuantidadeBCCIDE ( ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "A:\t[A, C]\t[A, C]\t\n" + "C:\t\n" , res )
assertThat ( source . contains ( "\r" ) , is ( true ) )
Assert . assertEquals ( "(nt_range (nt_point_location (nt_base_location (nt_number 123)) (nt_offset + (nt_number 987))) _ (nt_point_location (nt_base_location (nt_number 456)) (nt_offset + (nt_number 765))))" , range . toStringTree ( parser ) )
assertTrue ( "failed to decrypt ciphertext" , Arrays . equals ( message , expectedMessage ) )
TerminalParserTest . assertResult ( parser , "throw foo;" , ThrowStatement . class , "throw foo;" )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REGEX , v , TERM_FACTORY . getConstantLiteral ( "A.*B" , XSD . STRING ) , TERM_FACTORY . getConstantLiteral ( "i" , XSD . STRING ) ) , translation . get ( 0 ) )
Assert . assertEquals ( 0 , queue . size ( ) )
assertThat ( manager . getActions ( ) . size ( ) , is ( expectedSizeOfMenu ) )
Assert . assertTrue ( vmInfo != null )
Assert . assertEquals ( expResult , result )
assertEquals ( value , this . impl . getString ( key ) )
assertThat ( id , greaterThan ( 0 ) )
assertEquals ( "Repository contains incorrect number of statements" , 1 , testCon . size ( ) )
Assert . assertEquals ( i , result . length ( ) )
assertThat ( result , is ( "" + "{\n" + "  \"service\" : \"abuse-contact\",\n" + "  \"link\" : {\n" + "    \"type\" : \"locator\",\n" + "    \"href\" : \"http://rest.db.ripe.net/abuse-contact/193.0.0.1\"\n" + "  },\n" + "  \"parameters\" : {\n" + "    \"primary-key\" : {\n" + "      \"value\" : \"193.0.0.0 - 193.0.0.255\"\n" + "    }\n" + "  },\n" + "  \"abuse-contacts\" : {\n" + "    \"key\" : \"\",\n" + "    \"email\" : \"\",\n" + "    \"suspect\" : false,\n" + "    \"org-id\" : \"\"\n" + "  },\n" + "  \"terms-and-conditions\" : {\n" + "    \"type\" : \"locator\",\n" + "    \"href\" : \"http://www.ripe.net/db/support/db-terms-conditions.pdf\"\n" + "  }\n" + "}" ) )
assertThat ( captor . getValue ( ) , is ( false ) )
assertPutFails ( association , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
Assert . assertEquals ( "in the room and a car" , this . realiser . realise ( this . inTheRoom ) . getRealisation ( ) )
assertNotNull ( Role . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNotNull ( result )
assertEquals ( "2.25" , event . getLocation ( ) . getReference ( ) . toString ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( Result . ERROR , properties . afterFormFinishMain ( repo ) . getStatus ( ) )
Assert . assertEquals ( session . getRandomGenerator ( foo0 ) , session . getRandomGenerator ( foo1 ) )
Assert . assertEquals ( expected , value )
assertEquals ( merging , policy . merge ( entryMerging , entryExisting ) )
assertThat ( element . getText ( ) , is ( "value with appended text" ) )
assertEquals ( original , other )
assertOut ( "goog.array.forEach(obj, function (i) {\n\tbreak;\n})" )
Assert . assertTrue ( "Created new SystemParameterCache instance " , cache != null )
assertFalse ( undefined . isReleased ( ) )
assertObjectEquals ( "{type:'number'}" , x . getSchema ( ) )
assertThat ( "testInstallItem_Context_InProgressSubmission 0" , result , equalTo ( is . getItem ( ) ) )
Assert . assertEquals ( infoReverse . getSequence ( ) , resultTranscript )
Assert . assertEquals ( 0 , patients . size ( ) )
assertEquals ( Collections . singletonList ( 1 ) , supplier . get ( ) . collapse ( Objects :: equals ) . toList ( ) )
assertEquals ( new Integer ( 2 ) , MethodFixture . getArgNum ( ) )
assertStat ( result )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'\\'true\\'',h:'\\'123\\''}" , r )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( environmentId , listGatewaysOptions . environmentId ( ) )
assertEquals ( ":name" , ejbql )
assertInvalidQuery ( query )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertArrayEquals ( Arrays . toString ( d . getResult ( ) ) , refar , d . getResult ( ) )
assertEquals ( "Failed to generate while loop with nested expressions and no body" , WHILE_NESTED_EMPTY , s )
assertEquals ( 0 , youngFriends . size ( ) )
Assert . assertNull ( prefixcc . getNamespace ( prefix ) )
assertTrue ( errors . equals ( noErrors ) )
Assert . assertTrue ( Integer . toString ( i ) , actual == expected [ i ] )
assertThat ( zookeeperClient , not ( nullValue ( ) ) )
assertEquals ( expected , xml )
assertOut ( "RoyaleTest_A.prototype.foo = function() {\n  return React.createElement('div', null, 'Foo');\n}" )
Assert . assertEquals ( "http://foo:8080/bar?a=A&b=B" , filter . getRequestURL ( request ) )
assertThat ( writer . get ( ) , is ( - 100 ) )
assertThat ( target . getMergeFeature ( feature1 . getId ( ) ) . getStatuses ( ) . get ( 0 ) , is ( Statuses . UNDEFINED . getTextName ( ) ) )
assertSame ( description , EmptyTextDescription . emptyText ( ) )
assertEquals ( new HashSet < > ( records ) , new HashSet < > ( recovered ) )
assertEquals ( expecteds , actuals )
Assert . assertEquals ( lb . getStatus ( ) , LoadBalancerStatus . ACTIVE )
assertNotNull ( "AppointmentAttendee is null" , entity )
assertNotEquals ( 0 , tokenLists . size ( ) )
assertEquals ( 1430469789198L , TradingUtils . toMillisFromNanos ( nanoinstant ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
Assert . assertEquals ( Status . FORBIDDEN . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertNotNull ( result )
Assert . assertEquals ( encodedHex . toLowerCase ( ) , encoded . toLowerCase ( ) )
assertThat ( errors , hasFieldErrors ( "givenName" ) )
assertTrue ( "Encoder test-" + i , b )
assertEquals ( 2 , tool . heapCaculation ( ) )
assertResponse ( response , 204 )
assertFalse ( validator . validate ( EntityNames . STAFF , staffId ) . equals ( staffId ) )
assertEquals ( "test" , cache . getProgram ( ) )
assertEquals ( f . getQuery ( ) , q )
Assert . assertEquals ( expectedCrossProduct , crossProduct )
assertNull ( repository . getModuleMetadata ( "TEST-FOLLOW" ) )
assertEquals ( writeOperation , rowProcessor . getWriteOperation ( ) )
assertEquals ( "" , result )
assertEquals ( 0 , app . executeApplication ( args ) )
assertSame ( eagAttributes , npn . grpcHandler . getEagAttributes ( ) )
Assert . assertFalse ( isAdmin )
Assert . assertNull ( result )
context . assertIsSatisfied ( )
Assert . assertFalse ( validator . validSequence ( 2 , inputSequence , outcomesSequence , outcome ) )
Assert . assertEquals ( n , keeperStats . getPsyncSendFailCount ( ) )
assertTrue ( drl . indexOf ( "enabled true" ) > 0 )
assertEquals ( 0 , v . hashCode ( ) )
assertTrue ( file . getName ( ) . endsWith ( ".class" ) )
assertEquals ( expResult , result )
Assert . fail ( e . getMessage ( ) )
assertTrue ( throwables [ 0 ] instanceof NullPointerException )
assertTrue ( "socket path pattern matches " + RE , a . path ( ) . matches ( RE ) )
assertFalse ( pgql . parse ( query ) . isQueryValid ( ) )
assertEquals ( "Wrong value" , ( byte ) 0xef , u . s8 . get ( ) )
Assert . assertTrue ( isPortInCircuit )
assertNull ( checkProfessionalUser )
assertThat ( this . passwordService . passwordsMatch ( "password" , password ) , is ( true ) )
assertThat ( resolver . resolve ( CamelCase . class ) , equalTo ( "org/jbehave/core/io/camel_case.story" ) )
assertPermanentCount ( playerA , "Cabal Therapist" , 0 )
assertEquals ( expected , actual )
assertEquals ( 1.0 , test . getScalar ( 0 , 0 , - 1 ) . sumNumber ( ) )
assertOut ( "goog.provide('foo.bar.baz.A');\n\n/**\n * @constructor\n */\nfoo.bar.baz.A = function() {\n};" )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertSame ( t . toLocalTime ( ) , LocalTime . NOON )
assertEquals ( TestUtil . FTP_TEST_PROXY , result . get ( 0 ) )
assertThat ( arbitraryObject , should ( matcher ) . after ( action ) )
assertNotNull ( con . getMetaData ( ) )
Assert . assertEquals ( 1 , events . size ( ) )
assertThat ( result , is ( true ) )
Helpers . assertJson ( json , expectedJson )
assertEquals ( "Input value json should match output value json" , inputJson , outputJson )
Assert . assertTrue ( "Created new SystemParameterCache instance " , cache != null )
assertNotNullOrEmpty ( "Tags should never be null." , tags )
assertSame ( t , TEST_2007_07_15_12_30_40_987654321 )
Assert . assertEquals ( true , localesInOrder . contains ( LocaleUtility . fromSpecification ( OpenmrsConstants . GLOBAL_PROPERTY_DEFAULT_LOCALE_DEFAULT_VALUE ) ) )
assertEquals ( 4 , ruleset . getRules ( ) . size ( ) )
assertEquals ( 1 , foundComments . size ( ) )
assertOut ( "++a" )
Assert . assertEquals ( diffusioncoefficient , result [ 0 ] , 0.1 )
assertTrue ( details . hasCommitted ( ) )
assertEquals ( response . getStatusCode ( ) , 200 )
Assert . assertEquals ( ValidationResult . Result . OK , sink . validate ( null ) . getStatus ( ) )
Assert . assertEquals ( expected , queryFromBuilder )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( "oldId" , newActualId )
MockEndpoint . assertIsSatisfied ( mockEndpoints )
Assert . areEqual ( true , countA == 10 && countB == 0 , "countA值" )
assertThat ( ListNumbers . toListNumber ( array ) , equalTo ( ( ListNumber ) new ArrayInt ( array ) ) )
assertEquals ( 1 , executeTestMethod ( test , Integer . class , null , 0 ) . intValue ( ) )
assertTrue ( content . contains ( "*.forge" ) )
assertThat ( target . getAttribute ( "key" ) , is ( nullValue ( ) ) )
assertEquals ( 2 , list . size ( ) )
Assert . assertEquals ( coeffs_EXPECTED , coeffs_ACTUAL )
assertNotNull ( "Testing to string" , mr . toString ( ) )
assertEquals ( expected , actual )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertTrue ( "testCanEditBooleanAuth 0" , communityService . canEditBoolean ( context , c ) )
JsonTestUtils . assertHasArrayOfObjectsWithFields ( response , "applications" , "name" , "id" )
Assert . assertTrue ( new JSONObject ( PEDIGREE_1_MIGRATED_DATA ) . similar ( new JSONObject ( captured ) ) )
assertEquals ( Math . sqrt ( 2 ) - 1 , circle . distance ( r ) , PRECISION )
Assert . assertEquals ( "caught" , o )
assertEquals ( String . valueOf ( ReturnCode . NO_SPEECH . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "rc" ) )
assertEquals ( doc1 , io . getDocumentById ( id1 , true ) )
assertEquals ( t1 , t2 )
assertEquals ( 1 , x . size ( ) )
assertEquals ( "GRMZ" , s )
Assert . assertEquals ( "{\"a\":\"a\",\"c\":{\"a\":\"c.a\",\"c\":{}}}" , valueAsString )
assertOrecValue ( orec , orecValue )
assertFalse ( andFn . accept ( 1 ) )
assertTrue ( Bytes . equals ( key1Bytes , key1ExpectedBytes ) )
assertEquals ( 144.0 , ( ( Service ) vrp . getJobs ( ) . get ( "87" ) ) . getTimeWindow ( ) . getEnd ( ) , 0.1 )
assertEquals ( vo . getPhoneNumbers ( ) . get ( 1 ) . getNumber ( ) , "5432109876" )
assertNull ( result )
assertOut ( "var /** @type {CustomVector} */ a = new CustomVector([], 'String')" )
assertEquals ( "java_buildpack" , target . getBuildpacks ( ) . get ( 0 ) . getName ( ) )
assertEquals ( expResult , result )
assertEquals ( 1 , repositoryService . createProcessDefinitionQuery ( ) . count ( ) )
assertEquals ( "<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table></td><td>Three</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
Assert . assertFalse ( setA . equals ( setB ) )
Assert . assertEquals ( 0.0059 , test . bootstrap ( x , y , 10000 , false ) , 1E-3 )
assertEquals ( VALID_DATE , Deencapsulation . getField ( enrollmentGroup , "createdDateTimeUtcDate" ) )
Assert . assertNull ( persistence . retrieve ( getContact ( ) . getName ( ) ) )
assertEquals ( "Failed to filter query string" , expectedResult , normalizedUrl )
assertEquals ( value , property . getOriginalValue ( ) )
assertNotNull ( context . getBean ( "snsOutboundChannelAdapter.snsExecutor" , SnsExecutor . class ) )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
assertEquals ( FOO_VALUE , client . getAttribute ( DOMAIN_NAME , OBJECT_NAME , "foo" ) )
assertTrue ( exception . getMessage ( ) . contains ( "must be a Collection" ) )
assertThat ( value , is ( equalTo ( 1024L ) ) )
assertEquals ( "Required profiles" , "tui" , new FelixPlatformBuilderF160 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertTrue ( "size must be more than 0, but it is - " + queryModel . size ( ) , queryModel . size ( ) > 0 )
assertEquals ( "Unexpected result found when parsing jobName=" + input , expected , found )
assertEquals ( expResult , result )
assertEquals ( constraintViolations . size ( ) , 0 )
Assert . assertEquals ( "result2" , result . get ( "outputVariable1" ) )
assertAntFilter ( filters , "{\"address\":{\"streetName\":\"At my place\",\"streetNumber\":\"1\"},\"email\":\"somewhere@no.where\",\"firstName\":\"Martin\",\"lastName\":\"Frey\",\"reports\":[{\"address\":null,\"email\":\"report0@no.where\",\"firstName\":\"First 0\",\"lastName\":\"Doe 0\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report1@no.where\",\"firstName\":\"First 1\",\"lastName\":\"Doe 1\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report2@no.where\",\"firstName\":\"First 2\",\"lastName\":\"Doe 2\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report3@no.where\",\"firstName\":\"First 3\",\"lastName\":\"Doe 3\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report4@no.where\",\"firstName\":\"First 4\",\"lastName\":\"Doe 4\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report5@no.where\",\"firstName\":\"First 5\",\"lastName\":\"Doe 5\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report6@no.where\",\"firstName\":\"First 6\",\"lastName\":\"Doe 6\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report7@no.where\",\"firstName\":\"First 7\",\"lastName\":\"Doe 7\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report8@no.where\",\"firstName\":\"First 8\",\"lastName\":\"Doe 8\",\"manager\":null,\"reports\":null},{\"address\":null,\"email\":\"report9@no.where\",\"firstName\":\"First 9\",\"lastName\":\"Doe 9\",\"manager\":null,\"reports\":null}]}" )
assertNoConsumerError ( exception . get ( ) )
assertEquals ( RecordType . IMAGE , f . getRecordType ( UID . SecondaryCaptureImageStorage ) )
testRunner . assertAllFlowFilesTransferred ( PutKudu . REL_FAILURE , 1 )
assertEqualsIgnoreWhitespace ( expected , real )
assertObjectEquals ( "[{f:-2},{f:-1},{f:0},{f:1},{f:2},{f:3}]" , run ( INT_BEAN_ARRAY , s ) )
assertNotNull ( result )
Assert . assertEquals ( "number emitted tuples" , 1 , swinSink . collectedTuples . size ( ) )
assertThat ( findFeature ( features , "UpdateFirmware" ) , is ( instanceOf ( UpdateFirmwareFeature . class ) ) )
assertArrayEquals ( b , SortOrder . invert ( SortOrder . invert ( b , 0 , b . length ) , 0 , b . length ) )
assertEquals ( augmentationNode , entry . getValue ( ) )
assertEquals ( RequestOptions . WAIT_FOR_RESPONSES_UNTIL_TIMEOUT , requestOptions . getWaitForResponses ( ) )
assertEquals ( "Signal: Alarm! Terminate!" , pod1 . getStatus ( ) )
assertTrue ( exceptionList . size ( ) == 0 )
Assert . assertEquals ( "Tabby" , names . makeString ( ) )
Assert . assertTrue ( result . isValid ( ) )
assertEquals ( arr , resultArr )
assertThat ( signature . isEmpty ( ) , is ( true ) )
assertEquals ( address1 . hashCode ( ) , address2 . hashCode ( ) )
Assert . assertEquals ( dto1 , loaded1 )
assertThat ( result . toSet ( ) . size ( ) , is ( 1 ) )
assertEquals ( 25 , counter . getCountIterations ( ) )
Assert . assertTrue ( "key and value check" , AerospikeTestUtils . checkEvents ( ) )
assertEquals ( "http://java.example.com" , got . toString ( ) )
assertThat ( entityManager . getEntity ( EntityDescriptor . createDescriptorForLifecycle ( id , version ) ) . get ( ) . getID ( ) , is ( id ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
Assert . assertEquals ( "A file with this name already exists. Continue to upload as a new version or rename the file." , text )
assertEquals ( HttpStatus . SC_MOVED_PERMANENTLY , response . getStatus ( ) )
assertThat ( c , is ( 2 ) )
Assert . assertNotNull ( containsStrategy )
assertThat ( eqlTranService . queryDataCount ( ) , is ( 0 ) )
assertThat ( encoded , stringContainsInOrder ( "<Patient xmlns=\"http://hl7.org/fhir\">" , "<contained>" , "<Condition xmlns=\"http://hl7.org/fhir\">" , "<id value=\"1\"/>" , "</Condition>" , "</contained>" , "<extension url=\"test\">" , "<valueReference>" , "<reference value=\"#1\"/>" , "</valueReference>" , "</extension>" , "<birthDate value=\"2016-04-05\"/>" , "</Patient>" ) )
assertArrayEquals ( "invalid opaque value" , opaque . getOpaque ( ) , xdr . xdrDecodeDynamicOpaque ( ) )
assertTrue ( result . length ( ) > 0 )
assertNotNull ( ci )
assertFocusModificationSanity ( context )
assertEquals ( invalidJs + ";" , writer . toString ( ) )
assertTrue ( "Shouldn't get response" , response == null )
assertOverflow ( new BigDecimal ( x ) . add ( new BigDecimal ( y ) ) , result , x + y )
assertProfilesOK ( smooks )
assertEquals ( model , actual )
assertEquals ( score , 1.0 , 0.00001 )
assertFalse ( activityManager . isStarted ( expectedSplashScreenActivity ) )
assertNotNull ( getCoprocessor ( log ) )
Assert . assertEquals ( 50 , getChronicle ( ) . getNumEvents ( 1 , 50000 ) )
assertEquals ( "Expected 5 results!" , 5 , count )
assertTrue ( config . isTableProfile ( ) )
Assert . assertEquals ( "node path" , getPostData ( "uniqueness" ) )
JSONAssert . assertEquals ( expected , response . getBody ( ) , false )
assertTrue ( mapper . getOntologyIRIs ( ) . contains ( df . getIRI ( "http://owlapitestontologies.com/thesubont" ) ) )
assertEquals ( dataSet . getRowCount ( ) , 50 )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optOrderByDistinctApplication ) )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertEquals ( "~valid" , expr . getParameterValue ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( x . getBaseState ( ) , x . getNodeState ( ) )
Assert . assertFalse ( result )
assertTrue ( objUnderTest . isServiceProviderExists ( validSP ) )
Assert . assertEquals ( 3600000 , sampler . getDumpTimeMillis ( ) )
assertEquals ( InetAddress . getByName ( "127.0.0.1" ) , actual )
assertEquals ( expected , result )
assertEquals ( "Container returned too many items when the range was >> container size" , 1 , ic . getItemIds ( 0 , 10 ) . size ( ) )
Assert . assertEquals ( 1 , queue . size ( ) )
assertEquals ( 0 , res0 . size ( ) )
assertThat ( elasticsearchTemplate . indexExists ( "test-index" ) , is ( false ) )
assertEquals ( new Double ( 20.0 ) , request . getEcommerceTax ( ) )
assertThat ( actual , is ( expected ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
Assert . assertSame ( this . config , this . mocker . getComponentUnderTest ( ) . getConfiguration ( PATIENT_LABEL ) )
Assert . assertEquals ( Arrays . < Object > asList ( 1 , 2 , 3 ) , list )
assertEquals ( logs . get ( i ) , message )
assertEquals ( expected , this . output . toString ( ) )
assertTrue ( ( Boolean ) result )
assertFalse ( between . appliesToProperty ( "bar" ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 5 , files . length )
assertNotNull ( result )
assertEquals ( "<a><b><xxx newElementAttribute=\"1234\"></xxx></b></a>" , result . getResult ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "17-Jun-2013" )
MatcherAssert . assertThat ( new GrStatic ( ( ) -> grammemes ) . grammaticalMeaning ( Mockito . mock ( ActualArguments . class ) ) . grammemes ( ) , CoreMatchers . is ( grammemes ) )
TestUtils . assertEquals ( anexo , anexoCreado )
assertEquals ( results [ p ] , density , 0.0 )
assertVisitorSatisfied ( )
assertEqualsIgnoreWhitespace ( expected , real )
assertNull ( singletonServiceGroup . unregisterService ( firstReg ) )
assertArrayEquals ( new double [ ] { 1 , 2 , 3 , 4 } , NormalizeUtils . getMaxValuesOfTheColumnsOfAMatrix ( matrix ) , 0.00001 )
assertNotNull ( Document . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ETXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 1 , ( ( ClusterMetricGetters ) statsCollector ) . getMessageFailedCount ( ) )
assertTrue ( result . length ( ) == 0 )
assertEquals ( 123 , ( ( UIDFolder ) test ) . getUIDValidity ( ) )
assertEquals ( user . getName ( ) , result . get ( 0 ) . getName ( ) )
assertArrayEquals ( TEST_DATA , attrs . getBytes ( 0x7FE00010 ) )
assertTrue ( eventRecieved )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertEquals ( Boolean . FALSE , f . evaluate ( ) )
assertEqualsJson ( expected , actual )
assertArrayEquals ( new byte [ ] { 5 , 4 , 3 , 2 , 1 } , bytes )
assertEquals ( 2 , ( int ) entries . count ( ) . toBlocking ( ) . single ( ) )
assertOut ( "org.apache.royale.utils.Language.sortOn(a, 'foo')" )
assertEquals ( description , activity . getProperty ( PROPERTY_ACTIVITY_DESCRIPTION ) )
assertThat ( windows . withIntersection ( ) . isEmpty ( ) , is ( true ) )
assertCollectionSerialization ( expectedJSON , collection )
assertTrue ( PharmaModulo11Validator . isValid ( pzn ) )
assertNull ( getParameterRepositoryService ( ) . getParameterValueAsBoolean ( key ) )
Assert . assertNull ( new CompareTool ( ) . compareVisually ( dest , sourceFolder + "cmp_signedCades_" + file , destinationFolder , "diff_" , getTestMap ( new Rectangle ( 30 , 245 , 200 , 12 ) ) ) )
assertThat ( status , is ( ApplicationLauncher . LAUNCH_ERROR ) )
Assert . assertEquals ( Collections . < Term > emptyList ( ) , terms )
assertArrayEquals ( temp , ContractCheck . mustNotBeNullOrEmpty ( temp , "test" ) )
assertEquals ( 3 , uris . size ( ) )
Assert . assertEquals ( "a" , rootEl . getNodeName ( ) )
Assert . assertEquals ( null , unit )
assertFalse ( currentData . isPresent ( ) )
assertMatches ( expr . matcher ( "/a/b/c/d/f/@something" ) , "/a/b/c" , "/\\$2u/b/c/y/z/d/f" )
assertEquals ( "Count of customer" , 0 , res )
assertEquals ( 0 , fields . size ( ) )
assertEquals ( jsonObject , BsonCodec . bsonBytesToJsonObject ( BsonCodec . jsonObjectToBsonBytes ( jsonObject ) ) )
Assert . assertEquals ( originalPaths , harPaths )
assertTrue ( producer . windowing instanceof Time )
assertSame ( root , transform ( root ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsCollection , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
assertEquals ( "abc" , FuturesExtra . syncTransform3 ( futureA , futureB , futureC , ( a , b , c ) -> a + b + c , MoreExecutors . directExecutor ( ) ) . get ( ) )
Assert . assertEquals ( "23452350" , randomans . toString ( ) )
assertEquals ( "UUUU-04-01" , result . getParameters ( ) . get ( "date" ) . getAsString ( ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Response/>" , elem . toXml ( ) )
assertEquals ( msgs . size ( ) , 0 )
assertEquals ( "from SURVEY s d SURVEY s5\n" + "on s.ID = s5.ID" , query . toString ( ) )
assertTrue ( "Bundle file '" + _bundle + "' for bundle'" + bundle + "' does not exist." , _bundle . exists ( ) )
assertEquals ( 5 , cashFlow . getSize ( ) )
assertTrue ( "Should equals" , toJsonNode ( res ) . equals ( toJsonNode ( TestUtils . readStringFromClasspathFile ( "/asserts/prepareChagelogIndexedDocument_ORG-1501_1.json" ) ) ) )
assertNull ( entryRelationship )
Assert . assertTrue ( charset . equals ( CharsetUtil . getCharset ( charsetIndex ) ) )
assertNotNull ( payString )
assertThat ( credentials , is ( notNullValue ( ) ) )
assertEquals ( 2 , actualExpectedWorkerLinkCount )
Assert . assertTrue ( response . contains ( "Call reached IMPL as schemaValidation went thru fine.siteid - 0clientid - abclang - 3" ) )
Assert . assertNotEquals ( resp . getStatus ( ) , HttpServletResponse . SC_UNSUPPORTED_MEDIA_TYPE )
given ( ) . get ( "zips/notfound.zip/test/path/resource/gateleen.png" ) . then ( ) . assertThat ( )
assertNotNull ( target )
assertThat ( stream . count ( ) , equalTo ( 2L ) )
assertEquals ( "query condition serialization is wrong" , expected , actual )
assertTrue ( outStr . contains ( NamenodeFsck . HEALTHY_STATUS ) )
Assert . assertFalse ( molecule1 . equals ( molecule2 ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , contains ( stringContainsInOrder ( "log home" , "/shared/logs/" + UID ) ) )
assertEquals ( "bar" , result )
Assert . fail ( )
Assert . assertEquals ( "Not an role ACL" , RolesACL . class , acl . getClass ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertEquals ( "Part1/Part2trunk/Part3" , sw . toString ( ) )
assertThat ( separators , is ( ";\n;\n;" ) )
assertTrue ( XmiReader . getIdRef ( mockReader ) . toString ( ) . equals ( id ) )
assertEquals ( 0 , report . getEventCount ( ) )
Assert . assertFalse ( t1 == t2 )
assertThat ( sshClientEnvVar , anyOf ( startsWith ( "::1" ) , startsWith ( "127.0.0.1" ) ) )
assertThat ( new DoubleRangeValidator ( 3 , 5 , "hoge" ) . validate ( parameters , "aaa" ) , is ( "hoge" ) )
Assert . assertEquals ( inputCardinality , subplanCtx . getOutputCardinality ( 0 ) )
assertThat ( a . overlaps ( b ) , is ( true ) )
this . assertVerification ( )
assertEquals ( buf . toString ( ) , "null" )
assertEqualsStoreParams ( params , params2 )
assertFalse ( i1 . equals ( new Object ( ) ) )
assertEquals ( Expression . GREATER_THAN_EQUAL_TO , exp . getType ( ) )
assertEquals ( bursaWolf , actual )
assertEquals ( RestrictedHealthStatus . OK , response . getHealthy ( ) )
assertTrue ( predicate . isHighlighted ( null , adapter ) )
assertNull ( array )
assertEquals ( expectedSqlForMathOperations5 ( ) , result )
Assert . assertEquals ( "(aa_change_ssr (aa_point_location (aa_char Cys) 123) ( 3 _ 4 ))" , aa_change_ssr . toStringTree ( parser ) )
assertEquals ( PORT , pct . getHttpsProxyPort ( ) )
assertEquals ( "void f(void* target, void* p0) {\n" + "    struct f_0001_0001 {int m0;};\n" + "    struct f_0001_0000 {int m0;};\n" + "    struct f_0001 {struct f_0001_0000 m0;struct f_0001_0001 m1;};\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\n" + "}\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertEquals ( err . getClass ( ) , HttpPostRequestEncoder . ErrorDataEncoderException . class )
assertUserCount ( users , 6 )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertNotNull ( kbase )
BatchMainMock . assertLog ( "main(" + "-initiator, myUser, " + "-type, segmentation, " + "-segmentations, 1, 2, " + "-configuration, myBatchConfiguration, " + "-date, myDate, " + "-arg1, value1, " + "-arg2, value2, " + "-arg3, value3)" )
assertEquals ( Boolean . TRUE , EL . eval ( "classes:isPresent('" + clsName + "')" ) )
assertEquals ( c , clone ( ( c ) ) )
Assert . assertEquals ( "did not get expected length back" , expectedLen , actualRead )
assertEquals ( 1 , res . getInt ( "nbHits" ) )
Assert . assertTrue ( writer . isStopped ( ) )
assertEquals ( "PasswordRecovery.ok" , mockResult . included ( "message" ) )
assertEquals ( myType , entry . getType ( ) )
assertEquals ( 0 , violations . size ( ) )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertTrue ( p . getProperties ( ) != null )
assertArrayEquals ( expected , params . getTripleIndexes ( ) )
Assert . assertEquals ( 12 , p . i ( 4 , new C2 ( ) ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( 1L , bytes . readLong ( 0 ) )
assertEquals ( 70 , loadOntology . getAxiomCount ( ) )
assertSame ( "same info" , info , info ( "m" , "m desc" ) )
maven . forProject ( basedir ) . execute ( "verify" ) . assertErrorFreeLog ( )
assertEquals ( result2 , result1 )
assertEquals ( "failed to generate class with method calling method on this" , CLASS_WITH_METHOD_CALLING_METHOD_ON_SUPER , cls )
assertEquals ( "Request should be denied due to lack of authentication" , Response . Status . UNAUTHORIZED , val . getStatusInfo ( ) )
assertEquals ( "http://localhost:80/mywebapp/servlet/MyServlet/" , tested . getBaseUrl ( ) )
Assert . assertEquals ( map , TestUtils . serializeAndRecover ( map ) )
assertEquals ( "http://foo/Patient?_include=a&_include=b" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertTrue ( cohortService . getCohortMembershipByUuid ( RestTestConstants2_1 . COHORT_MEMBERSHIP_UUID ) . getVoided ( ) )
assertTrue ( reduce . getWindowing ( ) instanceof Time )
Assert . assertTrue ( warningFound )
assertFalse ( validator . getValidationResult ( ) . hasFailures ( ) )
Assert . assertTrue ( checkFlowNodeInstanceState ( NodeInstaceStates . PASSED_STATE , process , defaultInstanceId ) )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertFalse ( "Expected DateTimeSchema string validation failure did not succeed" , schema . validate ( stringEntity ) )
assertTrue ( permissionEvaluator . hasPagePermission ( authentication , "project" , "branch" , DocumentrConstants . HOME_PAGE_NAME + "/foo" , Permission . VIEW ) )
assertNotNull ( reporter )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertTrue ( "Exp. true when user does exist in the file" , auth . exists ( user ) )
assertTrue ( "Attribute not removed" , node . getAttributes ( ) . isEmpty ( ) )
assertThat ( readBytes ( testee , 4 ) , is ( "Hello|World|" ) )
Assert . assertEquals ( "1\n1\n3" , formatted )
assertEquals ( "Expected 404 but got " + response . getStatus ( ) , 404 , response . getStatus ( ) )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertThat ( result . getType ( ) , is ( "OFPInPacket" ) )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
runner . assertNotValid ( service )
assertTrue ( Arrays . equals ( expectedResult , encoded . array ( ) ) )
assertEquals ( new ArrayList < HttpCookie > ( ) , InboundCookieParser . parse ( values ) )
assertEquals ( expected , actual )
assertEquals ( columnInfoListWithNull , fromConfig )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( sortedValues , values )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( expResult , result )
assertChangesDispatched ( listener )
Assert . assertEquals ( "did not build expected path" , expected , computedPath )
assertThat ( url , is ( "/abc/Anything/def/123/ghi/123.45" ) )
assertIsRemovedToInvisible ( columnModel , 0 , true )
assertEquals ( 5 , optionalLong , 0 )
assertEquals ( expectedDate . getTime ( ) , metadata . getProductEndTime ( ) . getAsDate ( ) . getTime ( ) )
assertEquals ( assertion , columnVar )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertEquals ( "Persist operator should be removed from dag after stream.remove" , null , persistOperatorMeta )
assertEquals ( 0.0D , progressBar . getPercentComplete ( ) )
assertResultSet ( res )
assertEquals ( createTestData ( 7 , 2 , 0 , 10 , 10 ) , toMap ( scanner ) )
assertEquals ( 2 , findIndexObject . size ( ) )
assertNotNull ( paquete . getId ( ) )
assertEquals ( "True has to be returned in this case" , preferredBlockSize , inf . getPreferredBlockSize ( ) )
Assert . assertEquals ( ImmutableSet . of ( "keyToInclude" , "anotherKeyToInclude" ) , filteredPhotonRequest . values ( ) )
assertEquals ( 6 , actualExpectedWorkerLinkCount )
Truth . assertThat ( GrpcCallContext . createDefault ( ) . withTimeout ( Duration . ofSeconds ( - 1L ) ) . getTimeout ( ) )
Assert . assertEquals ( 0.0 , a . get ( 1 , 1 ) , 0.0 )
assertEquals ( 3 , results . size ( ) )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "No such service demo" , result )
assertTrue ( ! outputEntity . hasKey ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertNotNull ( job . toString ( ) )
assertEquals ( "<b><<test>></b>" , multiLineText . toString ( ) )
Assert . assertEquals ( 211 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertNull ( url )
assertTrue ( result . size ( ) == 2 )
assertTrue ( response . getEntry ( ) . size ( ) > 0 )
Assert . assertTrue ( result . equals ( "10 minutes" ) )
assertSseResponse ( sseResponse , "event:eventName" , "data:payload1" , "" , "event:eventName" , "data:payload2" )
assertTrue ( this . validator . validate ( c ) . isEmpty ( ) )
Assert . assertEquals ( "${missing}" , readProperties ( basedir ) . get ( "custom" ) )
Assert . assertEquals ( "The house where I played poker has been abandoned since 1986." , realised . getRealisation ( ) )
assertThat ( isSet ( value ) , is ( true ) )
assertThat ( map . prices ( ) , is ( ( Map < String , Integer > ) ImmutableMap . of ( "red" , 17 , "green" , 18 ) ) )
assertTrue ( close . await ( 10 , SECONDS ) )
assertEquals ( Arrays . asList ( 2 , 3 , 4 ) , values )
assertThat ( "Kein Ergebnis geliefert" , target , notNullValue ( ) )
assertEval ( stringNode ( DC . NS ) , "tarql:expandPrefix('dc')" )
Assert . assertEquals ( "41 minutoj" , prettyTime . formatDuration ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
Assert . fail ( type [ j ] + ", " + b + ", " + a )
Assert . assertEquals ( 2d , StatUtils . getVariance ( numbers ) , TOL )
Assert . assertEquals ( "88132-020" , retornoConsultaCadastroEndereco . getCep ( ) )
assertTrue ( serviceSet . isEmpty ( ) )
assertThat ( IDN . toUnicode ( result . toString ( ) ) , equalTo ( robots ) )
assertNull ( query . offset ( 10 ) . fetchOne ( ) )
Assert . assertFalse ( ZipCompletionScanner . isCompleteZip ( file ) )
assertEquals ( asList ( new EndOfSession ( ) ) , clientEvents . collect ( ) )
Assert . assertThat ( values , Matchers . contains ( "value 0.5;pqy=vwz;q=0.5" , "value 1.0" , "other;param" ) )
assertEquals ( newModified , Files . getLastModifiedTime ( path ) . toMillis ( ) )
assertPolygons ( expected , polys )
assertNotNull ( accessToken )
assertLocation ( "Rome" , "Italy" )
Assert . assertEquals ( "Report!C23" , 1000d , value , 0d )
ModelTestBase . assertIsoModels ( expected , m )
assertThat ( violations . size ( ) , is ( 1 ) )
assertTrue ( "expected oval but got " + count , count == 1 )
assertEquals ( Long . class , handler . apply ( rs , 1 ) . getClass ( ) )
assertCleanedUpState ( 1 )
assertNotNull ( edm )
assertThat ( timePeriod . with ( MINUTES . rounded ( ) ) , is ( Duration . ofClockUnits ( 4 , 56 , 0 ) ) )
assertTrue ( true )
assertEquals ( IOTester . BT_IN_PAYLOAD , buf . getPayload ( ) )
Assert . assertEquals ( 3 , table . getRowCount ( ) )
assertEquals ( c , v . getProperty ( "birthday" ) )
assertEquals ( 0 , result . size ( ) )
assertValidSelector ( result )
assertThat ( result , is ( sameInstance ( foreignKeysResponse ) ) )
Assert . assertNotNull ( result )
Assert . assertTrue ( getException )
assertEquals ( expected , api . getAPIUrl ( "" ) )
assertThat ( this . state . getRowIndex ( ) , is ( equalTo ( rowIndex ) ) )
assertTrue ( underTest . deleteToken ( ) )
assertNotNull ( instance . getPreferences ( ) )
given ( ) . get ( "zips/notfound.zip/test/path/resource/gateleen.png" ) . then ( ) . assertThat ( )
assertThat ( renewer . getCurrentlyHeldLeases ( ) . size ( ) , equalTo ( 0 ) )
Assert . assertEquals ( "The rule does not match the built one" , testRule , builtRule )
Assert . assertTrue ( st . toString ( ) , st . findString ( ) . size ( ) > 0 )
assertEquals ( "dubbo://127.0.0.1:20887" , result )
Assert . assertTrue ( "topic was not deleted" , topic . getTopicMap ( ) == null )
assertEquals ( PropUtil . getIntSessionProperty ( sess , "test" , 1 ) , 2 )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( "check same component" , _update . hasUpdate ( NEW_STRING_PATH , newComponent2 ) )
assertEquals ( ONE_LINE_REMOVED_SCORE , playerScores . getScore ( ) )
assertEquals ( "array type" , 2 , parsed . params . get ( 0 ) . first . arrayDepth )
Assert . assertTrue ( check . equals ( o ) )
assertTrue ( usl . getLineWidth ( ) == 12.2 )
assertTrue ( 5.0f == d . asFloat4 ( ) )
Assert . assertTrue ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( String . valueOf ( now . atZone ( DateUtils . zone ( ) ) . getYear ( ) ) , DateUtils . formatYear ( ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertThat ( response , is ( noContent ) )
assertNull ( NativeCodeLoader . getLoadingError ( ) )
assertEquals ( value , out . getSizeT ( ) )
assertEquals ( expected , key . toString ( ) )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertTrue ( v1 . compareTo ( v2 ) < 0 )
assertThatSliderValueIs ( maximumOf ( slider ) )
assertEquals ( 3 , iterableSize )
Assert . assertEquals ( EMPTY , result )
assertEquals ( o1 , o2 )
assertEquals ( endpointConfiguration , store . getEndpointConfiguration ( ) )
assertNull ( retrievedState )
assertEquals ( exp , config . getReplicaSelector ( ) )
assertEquals ( expected , actual )
assertThat ( parameter , is ( "bar" ) )
Assert . assertEquals ( 18 , buf . remaining ( ) )
assertEquals ( "dois sextilh玫es" , actual )
assertEquals ( true , result . contains ( expResult ) )
Assert . assertEquals ( "Failure - expected validatorList size to be 2" , 2 , str . size ( ) )
assertEquals ( anchorListItem , workbenchMenuStandardNavBarView . getMenuItemContextWidgetMap ( ) . get ( menuId ) )
assertEquals ( toPercentage ( scale - ZOOM_INCREMENT ) , zoomUI . getPercentageZoom ( ) )
assertOut ( "function foo(bar:*):int {\n\treturn -1;\n}" )
assertTrue ( vrpBuilder . getLocationMap ( ) . containsKey ( "end" ) )
assertEquals ( contentExpected , contentReturned )
Assert . assertTrue ( rep . containsKey ( "Test view 1" ) )
Assert . assertEquals ( 166.66666666 , li . getValue ( 50 ) , 1e-5 )
Assert . assertEquals ( 4 + 10 + 1000 , metaFileSmall . getTotalSize ( ) . intValue ( ) )
Assert . assertEquals ( 0 , services . size ( ) )
assertThat ( TestI18n . testMessage . text ( Locale . CHINESE ) , is ( "Test Message" ) )
assertThat ( result . getClass ( ) , equalTo ( LeggingsThing . class ) )
assertEquals ( result , expecting )
assertEquals ( "5:::{\"name\":\"woot\"}" , result )
assertThrown ( val , promise )
assertPaths ( asList ( "path" , "asset" ) , paths )
Assert . assertEquals ( Integer . valueOf ( 3 ) , object )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
assertEquals ( "a b\n" , found )
assertEquals ( cal . getTime ( ) , w . getEnd ( ) )
Assert . assertEquals ( 12 , entities . size ( ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPermissions ( authorizables , list ( "jranalyst" ) ) . values ( ) ) . toString ( ) )
assertRecord ( record )
assertEquals ( "field.keys()" , p . toString ( ) )
assertNull ( spanType )
assertTrue ( hasLock )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
Assert . assertTrue ( this . entityAccess . isOwner ( ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "jobletTest1" , PomIdsHelper . getJobletArtifactId ( property ) )
assertTrue ( outContent . toString ( ) . equals ( args [ 3 ] + " is in progress.\n" ) )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( ) )
Assert . assertNull ( mapping )
assertThat ( comments , hasSize ( 3 ) )
assertNotNull ( row . hashCode ( ) )
this . assertResponse ( faultResponse , null , this . defaultMessage , component . name ( ) , null , null , this . parameters )
Assert . assertEquals ( result . getResultSize ( ) , 8 )
assertFalse ( nicHandle . equals ( null ) )
assertEquals ( false , victim . getConfiguration ( ) . isDebug ( ) )
assertFalse ( b )
Assert . assertSame ( timer , this . timer )
assertEquals ( "Failed to convert empty String to BigDecimal" , null , model . getAmountDec ( ) )
Assert . assertNotNull ( "LoggerName value is missing" , atFields . get ( "loggerName" ) )
assertSame ( solution , selection . execute ( population ) )
assertEquals ( newValue , presenter . getValue ( ) )
assertNull ( resource )
assertEquals ( 2 , rules . size ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error test error" ) . getValue ( ) )
assertTrue ( rootMapper . mySynchronizer . getSelectedItems ( ) . isEmpty ( ) )
assertConstruct ( tq , ttl )
Assert . assertEquals ( "{\"error\":{\"msg\":\"This is a test of the emergency alert system\",\"code\":400}}" , writer . toString ( ) )
assertEquals ( 1 , ret_val )
assertEquals ( "Attemped updating a Person after adding a Tab to his first " + "TabGroup, then clearing the EntityManager.  " + "Expected to see the new tab after re-loading the Person." , "Foo" , ford . getStartTabGroup ( ) . getTabs ( ) . get ( ford . getStartTabGroup ( ) . getTabs ( ) . size ( ) - 1 ) . getTabName ( ) )
assertEquals ( "2 + 3" , expr . getParameterValue ( ) )
assertEquals ( "<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertFalse ( like1 . equals ( like2 ) )
assertEquals ( 0 , attribs . size ( ) )
assertEquals ( "Reference value not set" , Integer . valueOf ( MAGIC ) , ref . getValue ( ) )
assertEquals ( il2 . numDimensions ( ) , opr . numDimensions ( ) )
assertEquals ( "Answer throwing " + e , r . toString ( ) )
assertThat ( Asn1DerDecoder . readPrivateKeyAlgorithm ( data ) , is ( "RSA" ) )
assertEquals ( 80 , config . httpPort ( ) )
Assert . assertEquals ( "Should return exactly one variable" , 1 , response . jsonPath ( ) . getMap ( "" ) . size ( ) )
assertions . doesNotContain ( ( short ) 4 , index )
assertTrue ( "Unexpected error for: " + configValue . name ( ) , configValue . errorMessages ( ) . isEmpty ( ) )
assertEquals ( a . getSrcContextAlias ( ) , "src" )
RouteUtils . assertSatisfied ( result )
assertThat ( query . count ( ) , is ( 0L ) )
assertTrue ( executor instanceof FatGammaTxnExecutor )
assertThat ( log . getEvents ( ) . size ( ) , equalTo ( 4 ) )
Assert . assertEquals ( "The received ID is different than expected VALID_ID." , VALID_ID , da . getId ( ) )
assertNull ( jobResult . getOutcomeResult ( ) )
Assert . assertEquals ( getResultMatrix ( ) , resultMatrix )
assertEquals ( "Session file should match" , defaultTarget , session . getPom ( ) )
assertEquals ( 86 , Colors . rgbColor ( "aquamarine1" ) . longValue ( ) )
Assert . assertNotEquals ( Board . Cell . CELLS [ 4 ] [ 2 ] , move . start )
assertEquals ( SIMPLE_LINK_TEXT , convertedEvent . getDescription ( ) )
assertEquals ( expectedMethods , calledMethods )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LENGTH(nodes.property) < 'literal'" ) )
Assert . assertTrue ( getLog ( ) , Pattern . compile ( "\\[([0-9]{2}):([0-9]{2}):([0-9]{2})\\.([0-9]{3})\\]" ) . matcher ( getLog ( ) ) . find ( ) )
assertEquals ( ORDER_XML , orderXML )
assertEquals ( p . get ( "A" ) . toString ( ) , "B" )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertFalse ( it . hasNext ( ) )
Assert . assertArrayEquals ( message , expecteds , actuals )
assertTrue ( htmlToDisplay . contains ( "<span id=\"obs-id\" class=\"obs-field custom-class\">" ) )
Assert . assertEquals ( 5 , MVEL . eval ( "parent.?lastName.length()" , person ) )
assertEquals ( "http://java.example.com:8080/foo/bar/" , got . toString ( ) )
assertEquals ( expectedAddDays ( ) , result )
assertThat ( xray . getConstructors ( ) , hasSize ( 0 ) )
assertEquals ( "geom" , ( dump ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "layer" ) )
assertEquals ( "a/b/c" , url )
context . assertSentrySemanticException ( statement , "drop database " + DB1 , semanticException )
assertTrue ( getNoErrorMsg ( ) , result )
assertCustomerSample ( )
assertTrue ( result )
assertEquals ( table . getColumn ( 0 ) . getIdentifier ( ) , adapter . getColumnIdentifierAt ( 0 ) )
assertTrue ( true )
assertSame ( "Cloned instance" , TimeoutNow . INSTANCE , cloned )
assertEquals ( DataTypeManager . DefaultDataClasses . BIG_DECIMAL , f . getType ( ) )
assertEquals ( "jdbc/DS" , propertyLoader . getUniqueName ( ) )
assertTrue ( "Expected the test to generate a grid" , checkGrid ( "Social_Profiles_Controls_My_Colleagues" ) )
assertEquals ( EXPECTED_DELETE_WORKSPACE_PATH , path )
assertFalse ( routingTable . hasDefaultRoute ( ) )
assertEquals ( "Wrong number of child builders" , 3 , childBuilders . size ( ) )
assertEquals ( "2008/DT Sichuan/JJ earthquake/NN From/IN Wikipedia/NN ,/, the/DT free/NN encyclopedia/NN" , firstLine )
assertEquals ( 0 , a . size ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) > 'literal'" ) )
assertThat ( two , is ( equalTo ( "2" ) ) )
assertTrue ( listsEqual )
assertEquals ( Status . RUNNING , retrievedObject . getStatus ( ) )
context . assertEquals ( ERROR , replyBody . getString ( STATUS ) )
Assert . assertTrue ( versionMatchFilter . check ( makeAssociationDescriptor ( null ) , makeServiceItem ( ) ) )
Assert . assertEquals ( value , Integer . valueOf ( defaultValue ) )
assertInvocations ( client . getBusinessActivityInvocations ( ) )
Assert . assertEquals ( "x=" + x , sig . value ( x ) , sigL . value ( x ) , EPS )
Assert . assertEquals ( "isEmpty()" , testBuffer . result )
assertResultSet ( res )
Assert . assertSame ( e , this . mocker . getComponentUnderTest ( ) . process ( e ) )
BeanAssert . assertBeanEquals ( bean , parsed )
arrays . assertContains ( someInfo ( ) , actual , IntArrays . emptyArray ( ) )
Assert . assertArrayEquals ( expectedNames , list . toArray ( new String [ list . size ( ) ] ) )
assertThat ( graph . run ( executorService ) . get ( ) , equalTo ( "fallback response" ) )
assertNotNull ( reporter )
Assert . assertTrue ( orPredicate . test ( null ) )
assertThat ( taxFactorForPerson , equalTo ( TAX_FACTOR ) )
assertTrue ( CorbaLoc . parseKey ( pior . get_object_key ( ) ) . indexOf ( orbProps . getProperty ( "jacorb.implname" ) ) != - 1 )
assertQuery ( testId , result , tdr . getTestData ( testId ) )
assertEquals ( "OK" , r )
MatcherAssert . assertThat ( new LrFromVocabulary ( concept ) . pickLexeme ( Mockito . mock ( ActualArguments . class ) , new BasicVocabulary ( ImmutableMap . of ( concept , lexeme ) ) ) , CoreMatchers . is ( lexeme ) )
assertEntityHasValue ( mappedKey , value )
assertConfig ( cfg , "permessage-compress" , expectedParams )
Assert . assertThat ( unit . createKey ( evt ) , Matchers . equalTo ( ByteBuffer . allocate ( 4 ) . putInt ( "logger" . hashCode ( ) ) . array ( ) ) )
assertEquals ( InternetServiceLifecycleMeta . States . InService . class . getSimpleName ( ) , order . getState ( ) )
assertEquals ( days , testResult )
assertEquals ( "filename.jpg" , filename )
TestUtils . assertEquals ( interesadoDTO , interesadoVO )
assertEquals ( "" , html )
assertEquals ( 8 , tiffLong . getSizeInBytes ( ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertResponse ( response , 400 , "{\"errors\":[\"com.google.gson.stream.MalformedJsonException: Use JsonReader.setLenient(true) to accept malformed JSON at line 2 column 22\"]}" )
assertNull ( actual )
assertEquals ( "clusterName1" , config . getClusterName ( ) )
assertNotNull ( Sim . reader ( ) . read ( ) )
assertThat ( xoManager , notNullValue ( ) )
assertThat ( ont . containsAxiom ( otherAnnoAssertion ) , is ( false ) )
assertTrue ( cell . getTerrain ( ) instanceof Sand )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertTrue ( null == obj )
Assert . assertEquals ( StatusCodes . NOT_FOUND , result . getStatusLine ( ) . getStatusCode ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ORCID_BIO_UPDATE , ScopePathType . ORCID_BIO_EXTERNAL_IDENTIFIERS_CREATE )
Assert . assertTrue ( sum . longValue ( ) == 255 )
assertEquals ( 0.433 , new StandardError < > ( x , y ) . getStandardError ( ) , 0.001 )
assertEquals ( prefix_classic_search_result_3 , result )
Assert . assertEquals ( 2 , terms . size ( ) )
Assert . assertEquals ( config . getHashAlgorithm ( ) , newVal )
org . assertj . core . api . Assertions . assertThat ( connectionsAfterReporting )
assertThat ( anyTS . getMinimum ( DIGITAL_HOUR_OF_DAY ) , is ( 0 ) )
assertTrue ( ex . traverse ( Key . GTEQ , filter , 0 ) )
assertNotNull ( context . getBean ( "snsOutboundChannelAdapter.snsExecutor" , SnsExecutor . class ) )
assertEquals ( "treeTable autoCreateRowSorter must be false" , false , table . getAutoCreateRowSorter ( ) )
arrays . assertDoesNotContain ( description , actual , value , index )
assertNull ( conn )
Assert . assertTrue ( expected1 . equals ( result ) || expected2 . equals ( result ) )
assertThat ( Duration . in ( units ) . between ( t1 , t2 ) , is ( Duration . ofPositive ( ) . months ( 0 ) . days ( 27 ) . hours ( 9 ) . minutes ( 15 ) . build ( ) ) )
Assert . assertEquals ( "pocangularportlet_WAR_pocjsportlet_INSTANCE_MVFuHik6CyK0" , portletId )
assertTrue ( ! result )
assertEquals ( "<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
Assert . assertTrue ( ops . isEmpty ( ) )
assertEquals ( ExchangeKeys . TYPE . FILES_BUCKET , BsonRequest . selectRequestType ( pathTokens ) )
Assert . assertFalse ( rose . containsRemote ( endp ) )
assertFalse ( glass . accept ( new FigureImpl ( ) , 0 , 0 ) )
assertEquals ( CREATED . getStatusCode ( ) , getStatus ( response ) )
assertEquals ( "http://localhost:8080/jaxrs-uri-template-1.0-SNAPSHOT/app/download/file/{path:.+}" , result )
assertThat ( expected , equalTo ( actual ) )
mockEndpoint . assertIsSatisfied ( )
assertEquals ( expected , b )
Assert . assertEquals ( IsolationLevels . SERIALIZABLE , connection . getIsolationLevel ( ) )
assertEquals ( 123L , deserialize . readLong ( ) )
assertEquals ( 2 , all . size ( ) )
assertEquals ( "- 34, channel=0\n" , found )
assertEquals ( cause , sut . getCause ( ) )
Assert . assertNull ( irodsFileSystem . getConnectionMap ( ) )
assertNull ( System . getProperty ( PROPERTY_NAME_SANDBOX_NAME ) )
assertEquals ( expectedScript , observedScript )
Assert . assertEquals ( Integer . class , clazz )
assertEquals ( "<p>This is <em>Sparta</em></p>\n" , doc )
assertFalse ( ex . isPrime ( - 231 ) )
Assert . assertEquals ( "Test" , out )
assertEquals ( "The list from the detailed history, was not the same as returned from checkout" , list , actualList )
Assert . assertNull ( this . component . getId ( ) )
Assert . assertEquals ( "did not get expected data length" , testLen , result . length ( ) )
assertEquals ( Base64 . getEncoder ( ) . encodeToString ( baos . toByteArray ( ) ) , iterators )
assertFalse ( r1 . contains ( d ) )
assertTrue ( result )
Assert . assertEquals ( .999 , x , 1.0e-5 )
assertEquals ( "Should return HTTP 201 (Created)" , HttpStatus . CREATED , adapterResponse . getResponseStatus ( ) )
assertEquals ( "(f=1)" , o )
assertNotNull ( result )
assertEquals ( "A" , gisFeature . getFeatureCode ( ) )
assertEquals ( "<" , writer . toString ( ) )
assertThat ( target . matchExactly ( action ) , is ( false ) )
assertEquals ( TextUtil . readUTF8 ( path ) , generator . getResult ( ) )
Assert . assertNotEquals ( "Test that getLocationX returned an int value" , - 1 , val )
Assert . assertEquals ( ECHO_STRING , outMessage )
Assert . assertEquals ( "13/September/Tuesday" , result . getText ( ) )
assertEquals ( "Incorrect Short Reason" , "Platform Down leela.local Change (changeValue) " , alertManager . getShortReason ( testPlatformAlert ) )
assertEquals ( d1 , d2 )
assertEquals ( expected , x )
Assert . assertArrayEquals ( originalData , recoveredData )
assertEquals ( this . dataservice . hashCode ( ) , thatDataservice . hashCode ( ) )
assertThat ( selectedCell , is ( "B2" ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "EADD" , "EADH" )
assertThat ( range . contains ( - 25.0 ) , equalTo ( false ) )
Assert . assertEquals ( new ComplexDoubleMatrix ( A_PASCAL_22 , A_PASCAL_22 ) , outMatrix )
mockEndpoint . assertIsSatisfied ( 5000 )
assertEquals ( typeId1 , typeId2 )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertEquals ( "SELECT 1 + 1;" , text )
assertEquals ( Sets . newHashSet ( g . getEnd ( ) ) , g . getStart ( ) . getFollow ( ) )
assertEquals ( "<foo:bar id=\"1\" /><abc:def id=\"2\">Foo<p>Hello</p></abc:def><foo:bar>There</foo:bar>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertNotFired ( watch )
assertEquals ( 2 , wlsClusterConfig . getMaxClusterSize ( ) )
assertTrue ( "Should have received returned message" , latch . await ( 1 , TimeUnit . SECONDS ) )
assertTrue ( correct . get ( namedEntity . getLabel ( ) ) . equals ( disambiguatedURL ) )
assertNoOrders ( )
Assert . assertEquals ( now , value )
assertEquals ( true , annotationProxy . deprecated ( ) )
assertEquals ( "Wrong result" , value , conf . get ( String . class , key ) )
assertEquals ( 1 , x . size ( ) )
assertEquals ( "success" , value . asIs ( ) )
assertThat ( harry . getFriends ( ) , hasItems ( sally , steve ) )
assertEquals ( "Failed to generate foreach loop using a literal String array" , FOREACH_LITERAL_STRING_ARRAY , s )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertThat ( converter . toWritableObject ( javaList ) , is ( ( Object ) writableList ) )
Assert . assertTrue ( mqttV5Receiver . validateReceipt ( "a/2/c" , 2 , samplePayload . getBytes ( ) ) )
assertFalse ( actual )
assertEquals ( "Config" , caller . getResponseBody ( ) )
assertThat ( result , is ( Arrays . asList ( a , b , c ) ) )
assertThat ( escapeXml ( text ) , is ( text ) )
assertArrayEquals ( new String [ ] { "A" , "B" , "C" } , r . readAtomStringList ( ) )
Assert . assertEquals ( "Value is incorrect" , map ( DATE_TIME_2_STRING , "test" ) , value )
Assert . assertEquals ( IrodsRuleInvocationTypeEnum . IRODS , actual )
assertEquals ( null , message )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertNotNull ( "Could not find workflow " + WF_APICONSUMER , wfResource )
Assert . assertEquals ( 11 , result . intValue ( ) )
assertTrue ( value instanceof NullWritable )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_height_04_" ) )
assertThat ( writer . get ( ) , is ( nullValue ( ) ) )
assertThat ( storageManager . load ( KEY_STORE_NAME ) , is ( entity ) )
assertEquals ( Integer . valueOf ( 0x42 ) , event . getMessageId ( ) )
assertTrue ( 5.0f == d . asFloat4 ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( true , result . get ( ) )
assertEquals ( sparseRep , rep . toSparseFormat ( ) . trim ( ) )
Assert . fail ( "IllegalArgumentException expected but not thrown" )
assertEquals ( "123" , ids )
Assert . assertFalse ( result )
assertTrue ( filter . shouldDeliverNotification ( eventContext ) )
assertSingleNotificationType ( EventType . FAILED_AUTHENTICATION )
assertNotNull ( url )
Assert . assertEquals ( "a" , UnassignedJobReasonTracker . getMostLikelyFailedConstraintName ( frequency ) )
assertThat ( comparator . compare ( "Hello" , "World" ) , equalTo ( 10 ) )
assertTrue ( "This roles should have the privilege" , role . hasPrivilege ( "priv1" ) )
assertTrue ( plugin . getPlayerMuteStorage ( ) . getMute ( player . getUUID ( ) ) . isSilent ( ) )
Truth . assertThat ( name . toString ( ) )
assertEquals ( 2 , numberOfOccurences )
assertEquals ( "TestValue" , ( ( Context ) context . lookup ( "context" ) ) . lookup ( "test" ) )
assertEquals ( "<html><head></head><body></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertDispatcherServletIsInitializedWithWebApplicationContextAdapter ( )
assertNotNull ( builder )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertTrue ( requestParameter . isFloat ( ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertThat ( conf , containsString ( "<interaction><code value=\"" + SystemRestfulInteraction . HISTORYSYSTEM . toCode ( ) + "\"/></interaction>" ) )
assertEquals ( "Deserialized definition should be functional" , address . getPostalCode ( ) , postalCode )
assertEquals ( "ix" , suffix )
assertThat ( entry , is ( instanceOf ( UpdateVertexLogEntry . class ) ) )
assertEquals ( sz , z , Integer . parseInt ( sz ) )
assertEquals ( out . size ( ) , 0 )
assertEquals ( 0 , result )
assertions . containsOnly ( values )
assertThat ( healthCheck . getStatusLine ( ) . getStatusCode ( ) , is ( 500 ) )
Assert . assertEquals ( "should have returned the tag added" , 1 , irodsTagValues . size ( ) )
assertEquals ( expected , x )
Assert . assertEquals ( HttpStatus . SC_NOT_MODIFIED , result . getCode ( ) )
assertEquals ( tree , actual )
assertFeatureValues ( expected , "document" , "document" , EXTRACTOR )
login . assertIsConnectedAs ( "test1" )
assertThat ( dog . names . length , is ( equalTo ( 2 ) ) )
assertTrue ( "Failed to fill Object array correctly" , d [ i ] == val )
assertTrue ( out . equals ( "G4 P10" ) )
assertEquals ( SampleLocations . STOCKHOLM , cargo . getDelivery ( ) . getLastKnownLocation ( ) )
assertThat ( nsp . getMinusSign ( new Locale ( "fa" ) ) , is ( "‎−" ) )
Assert . assertEquals ( 10 , analyser . getLoadDelivered ( route ) . get ( 0 ) , 0.01 )
assertThat ( other , DateMatchers . sameSecondOfMinute ( date ) )
assertMockEndpointsSatisfied ( )
assertEquals ( TimeValue . ofSeconds ( 20 ) , impl . getCorrectedInitialAge ( entry ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "Certificate can be parsed" , ValidationMessage . getMessage ( validationCheck ) )
assertEquals ( streamName , sn . getName ( ) )
assertThat ( parameters , equalTo ( Arrays . asList ( ( Object ) "foo" , "test" ) ) )
assertSeen ( results , s0 )
assertEquals ( expected , cassandraRowMapper . map ( resultSet ) . next ( ) )
assertEquals ( query , result )
assertTrue ( response . getStatusCode ( ) == 422 )
assertEquals ( Integer . valueOf ( 64444167 ) , ( ( Document ) ( ( List ) ( ( Document ) queryResult . getResult ( ) . get ( 0 ) ) . get ( "chromosomes" ) ) . get ( 0 ) ) . get ( "size" ) )
checker . assertEquals ( "[" + i + "]" , exp , act )
Assert . assertEquals ( ( Integer ) 11 , res )
assertEquals ( "<pre><code>public class HelloWorld {\n" + "}\n" + "</code></pre>" , result )
assertFalse ( ( "" + kieModuleMetaData . getPackages ( ) ) . contains ( "junit" ) )
assertEquals ( "db17" , rec . get ( "SUM" ) )
assertSame ( cmd . returnValue , cmd . await ( ) )
assertEquals ( "(a 3 4)\n" , found )
assertNull ( StringCompressionUtil . unpackAndDecompress ( testChars ) )
Assert . assertTrue ( ret < 5 || ret >= 9 )
assertFalse ( "Unexpected exception is visible." , $ ( NotificationElement . class ) . exists ( ) )
assertEquals ( 10 , teams . size ( ) )
Assert . assertEquals ( ps2 . getUuid ( ) , vol . getPrimaryStorageUuid ( ) )
assertEquals ( "0" , subject . getOutput ( ) . get ( 0 ) )
assertTrue ( result . isResultOK ( ) )
Assert . assertFalse ( evaluator . hasPermission ( authentication , targetId , targetType , permission ) )
assertEquals ( expected , actual )
assertEquals ( 2 , springBeansConfig . getTargets ( ) . size ( ) )
assertEquals ( "TestGetValues 0" , valueList , collected . getValues ( context , item ) )
Assert . assertFalse ( canUse )
assertEquals ( "<select class='gwt-ListBox'>" + "<option value='Please select...'>Please select...</option>" + "<option value='M'>M</option>" + "<option value='F'>F</option>" + "</select>" , c . getRight ( ) )
assertTrue ( result == true )
Assert . assertEquals ( 0l , ( long ) RequestObjectHelper . getStartOffset ( requestObject ) )
assertThat ( getSnippet ( feature ) , is ( equalTo ( expected ) ) )
assertEquals ( keyExpected , keyBuilt )
assertTrue ( thiis || thaat )
assertTrue ( testFailed . isEmpty ( ) )
assertEquals ( "<html><head></head><body>pre <script>inner</script> aft</body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
MutableMessageFactoryTest . assertExpiryDateEquals ( expiryDateValue , message )
Assert . assertArrayEquals ( bytes , result )
assertTrue ( c . value ( ) == Cursor . NOT_LOADED )
assertEquals ( signInUser . getUsername ( ) , user . getUsername ( ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertEquals ( KarmaCalculator . DOWNVOTED_QUESTION_OR_ANSWER , votedAtSomething . reward ( ) )
assertThat ( tags . size ( ) , is ( 2 ) )
assertEquals ( 4 , wproc . getWidgetUsages ( ) . size ( ) )
assertFalse ( filter . matches ( record ) )
assertListTEquals ( listT , 42 )
Assert . assertEquals ( expectedHtml , html )
assertEquals ( arr , resultArr )
assertEquals ( goodTasks [ i ] , md . getTaskId ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertTrue ( "Failed to fill Object array correctly" , d [ i ] == val )
assertions . isNotEqualTo ( "some value" )
Assert . assertTrue ( results . isEmpty ( ) )
assertNotNull ( "picker format array must not be null" , picker . getFormats ( ) )
assertEquals ( buf . toString ( ) , "[\"a\", [], \"c\"]" )
assertThat ( TimestampInterval . parseISO ( "2012092T1415/096T1600" ) , is ( expected ) )
assertEquals ( "OK" , result )
assertEquals ( 2 , constraints . size ( ) )
assertEquals ( response . getStatus ( ) , JsonResponseStatus . FAIL )
assertEquals ( "There should be 0 errors" , 0 , chain . getChildren ( ) . size ( ) )
assertEquals ( td , store . persist ( td ) )
assertEquals ( JodaBeanUtils . collectionType ( test , Person . class ) , List . class )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertEquals ( "Hello, world!" , text )
assertEquals ( expectedHtml , removeTextRange ( result ) )
assertEquals ( 100_000_000 , counter . sum ( ) )
Assert . assertEquals ( serializablePair , sp )
assertThat ( feature . getId ( ) , is ( WidgetFeature . class . getCanonicalName ( ) ) )
assertNull ( service )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertThat ( list . size ( ) , is ( 1 ) )
assertThat ( pipeline . getStatus ( ) , equalTo ( SHUT_DOWN ) )
assertEquals ( "b" , m2 . getHeader ( "a" , null ) )
assertEquals ( String . class . toString ( ) , value . getValue ( ) )
assertThat ( f . delete ( ) , is ( true ) )
assertEquals ( original , restored )
assertIsAborted ( tx )
assertRangeCut ( input , expectedOutput , 1 , 2 )
assertThat ( target . containsLink ( link . getId ( ) ) , is ( false ) )
Assert . assertNotNull ( new JsonXMLBinder ( ) . unmarshal ( SampleTypeWithNamespace . class , config , unmarshaller , reader ) )
assertEquals ( 200 , dps . size ( ) )
assertOut ( "foo : goog.array.forEach(obj, function (i) {\n\tbreak foo;\n})" )
assertEquals ( "Checking subseq as expected" , expectedDna , subSeq . getSequenceAsString ( ) )
assertTrue ( differentiator . isNew ( fileInputStream ) )
assertEquals ( 1 , constraints . size ( ) )
assertEquals ( "Unexpected value for toString()" , expexted , actual )
assertEquals ( "" , stripHeader ( response ) )
assertNull ( "Null was expected." , result )
assertEquals ( expResult , result )
assertEquals ( Long . valueOf ( - 1L ) , myTestInstance . updateAsync ( doc , update ) . get ( ) )
assertTrue ( comparator . isDifferent ( lhs , rhs ) )
assertEquals ( Arrays . asList ( "ls -ltr \"|\" \">>>\"" , "> 2" , "grep -v hello" ) , t . getCommandStrings ( ) )
assertNull ( propertyName + " not set on renderer" , renderer . getClientProperty ( propertyName ) )
assertEquals ( expResult , result )
assertEquals ( EdmSimpleTypeKind . DateTime , edmDateType )
assertThat ( inputSchema , equalTo ( properties . main . schema . getValue ( ) ) )
assertEquals ( 12 , results . size ( ) )
assertThat ( new SomeClass ( ) , is ( sut ) )
assertThat ( error , containsString ( "Config file " + file . getAbsolutePath ( ) + " cannot be read." ) )
assertArrayEquals ( new double [ ] { ( 1.0 - 1.0 ) / 3.0 , ( 2.0 - 1.0 ) / 3.0 , ( 3.0 - 1.0 ) / 3.0 , ( 4.0 - 1.0 ) / 3.0 } , normalizedVector , 0.00001 )
assertEquals ( ace , parsed )
assertPersonCredits ( credits )
assertEquals ( expected , result )
assertEquals ( "Hello World!" , app . getMsg ( ) )
assertThatSubProcessIsCalled ( createCallProcess ( "id" , "${subProcessDefinitionId}" ) , Collections . singletonMap ( "subProcessDefinitionId" , subProcessDefinitionId ) )
assertEquals ( NOT_FOUND , response . getStatus ( ) )
Assert . assertEquals ( CurrentUser . getUser ( ) , "doAsProxyUser" )
Assert . assertEquals ( expectedString , resultBootstrapString )
assertEquals ( "3 乇�夭 15 爻丕毓鬲 38 丿���� 丿�诏乇" , t . format ( durations ) )
assertThat ( result , equalTo ( "2016-01-01 12:00:00 - myTopic\n" ) )
assertThat ( description . toString ( ) , is ( "is \"x\"" ) )
Assert . assertFalse ( patientService . isIdentifierInUseByAnotherPatient ( patientIdentifier ) )
Assert . assertArrayEquals ( SOL_33_EXPECTED , SOL_33_ACTUAL , DELTA )
Assert . assertEquals ( newCfg , ctx . getConfiguration ( ) )
assertEquals ( "Date not equal to itself ISO formatted and parsed" , d . getTime ( ) , d2 . getTime ( ) + d . getTime ( ) % 1000 )
Assert . assertEquals ( 0 , floor )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . fail ( "Cannot marshall a complex map" )
assertEquals ( expectedResult , actualResult )
Assert . assertEquals ( 2 , this . sqlgGraph . traversal ( ) . V ( ) . count ( ) . next ( ) . intValue ( ) )
Assert . assertEquals ( before - 1 , after )
assertEquals ( expected , result )
assertTrue ( map . isEmpty ( ) )
assertEquals ( "IP address should be set to the IP address that was specified" , IP_ADDRESS , ipAddress )
assertNotNull ( jsonAllUserJobSummary )
assertEquals ( 4300 , totalCalories )
assertThat ( actual , containsString ( "<h1>Name</h1><div class=\"nameElement\">given <b>FAM1 </b></div><h1>Address</h1><div><span>line1 </span><br/><span>line2 </span><br/></div></div>" ) )
assertThat ( response . getStatus ( ) , is ( Response . Status . OK . getStatusCode ( ) ) )
assertEquals ( resizer , receivedResizer )
assertEquals ( "USD" , test . getCode ( ) )
assertEquals ( DummyDrawHandler . drawTextToString ( "Das ist \" dfs " , 10 , 20 , AlignHorizontal . LEFT , null ) , drawHandler . getLastDrawCall ( ) )
Assert . assertEquals ( "0" , text . getTextValue ( ) )
assertEquals ( 946800000L , w . getFirstMillisecond ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertEquals ( "yawpapp" , config . getPackagePrefix ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( "2.4" , FmtUtils . stringForLiteral ( nl , getContext ( ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
Assert . assertTrue ( files . get ( 0 ) . contains ( "filesample.txt" ) )
assertEquals ( 1 , null1Dao . create ( nullThing ) )
assertThat ( multiSupplier . authForBuild ( ) . configs ( ) , allOf ( hasEntry ( "a" , auth1 ) , hasEntry ( "b" , auth2 ) , hasEntry ( "c" , auth4 ) ) )
assertThat ( string , is ( "" ) )
assertThat ( PrettyTime . of ( Locale . US ) . withReferenceClock ( clock ) . print ( dur , TextWidth . WIDE ) , is ( "4 weeks and 10 days" ) )
assertFalse ( "Did not create DatagramSocket" , socket == null || socket instanceof MulticastSocket )
assertFalse ( checker . isDetected ( ) )
assertEquals ( 3 , result . getLength ( ) )
assertFalse ( checker . isAuthorized ( context , profiles , " " , null ) )
assertThat ( labels , equalTo ( Arrays . asList ( "2013/03/12 01:30" , "01:31" , "01:32" ) ) )
assertEquals ( 1 , result . size ( ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertEquals ( input , output )
assertEquals ( NUM_WRITERS * ENTRIES , countHLog ( logfile , fs , conf ) )
assertNotTriggered ( result )
assertResultSet ( res )
assertEquals ( "Six rules are set" , 6 , ss . size ( ) )
assertEquals ( expecting , result )
Assert . assertEquals ( "Injected Bean" , injectedBean . name ( ) )
assertEquals ( 0 , youngFriends . size ( ) )
assertEquals ( "3 爻丕卅�鬲 �����" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
assertThat ( result , is ( "Node2" ) )
Assert . assertEquals ( "http://example.com/orders/{orderId}{?view}" , dummy . getTemplate ( ) . getTemplate ( ) )
assertThat ( testOutcome . getUserStory ( ) . getName ( ) , is ( "My user story" ) )
assertEquals ( u . getSubusers ( ) . get ( 0 ) , subUserInfo . get ( ) )
assertThat ( ( Integer ) cache . ms . get ( "aaa" ) , is ( 1 ) )
assertEquals ( 1 , rules )
Assert . assertEquals ( 30 , count )
arrays . assertHasSize ( description , null , 8 )
assertEquals ( 265463 + 13 , executeTestMethod ( test , Integer . class , null , 265463 ) . longValue ( ) )
assertLinkWithSameUnitsOk ( LinkInfo . UNIT_TYPE . PROTOCOL , units )
assertEquals ( optimize1 , optimize1Duplicate )
assertEquals ( 1 , sql . insertInto ( table ( "post" ) ) . columns ( field ( "id" ) , field ( "title" ) ) . values ( 1L , "High-Performance Java Persistence" ) . execute ( ) )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE )
assertions . isNotEqualTo ( expected )
Assert . assertEquals ( 0 , buffer . length ( ) )
assertArrayEquals ( y , x )
assertEquals ( "UTF-8" , EncodingDetector . detectEncoding ( data , true , null ) . name ( ) )
Assert . assertEquals ( expected , result )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoISSQNTotal ( ) . toString ( ) )
Assert . assertEquals ( resultEntity , entity )
assertEquals ( result , log ( log ( 1 ) ) , 0.0 )
assertThat ( jmc . convert ( makeEvent ( strangeMsg , NO_ARGS ) ) , is ( strangeMsg ) )
assertEquals ( new Integer ( 1920 ) , minElement )
Assert . assertEquals ( value , got . getpDate ( ) )
assertEquals ( "<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>" , doc . body ( ) . html ( ) )
assertEquals ( "cd2a3d9f938e13cd947ec05abc7fe734df8dd826" , Hex . toHexString ( key . getAddress ( ) ) )
assertEquals ( null , result )
Assert . assertEquals ( "ActionInvoker.ERROR_0012 - Could not invoke action \"foo\" locally: Map = " + NL + "{" + NL + "    key1 = val1 java.lang.String" + NL + "    key2 = val2 java.lang.String" + NL + "} java.util.HashMap" + NL , messages . getCouldNotInvokeActionLocally ( "foo" , params ) )
Assert . assertEquals ( "creator has not been correctly set" , Context . getAuthenticatedUser ( ) . getUserId ( ) , persisted . getCreator ( ) . getUserId ( ) )
assertThat ( sampleTestClass . driver , is ( not ( nullValue ( ) ) ) )
assertEquals ( expectedProfile . getSid ( ) , resultantProfile . getSid ( ) )
assertThat ( route . getPriority ( ) , is ( Path . DEFAULT ) )
assertSame ( t . toLocalTime ( ) , LocalTime . MIDNIGHT )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "18 months" , 18 , "month" , 0 , null , "time" ) )
Assert . assertEquals ( "<string>foo</string>" , serializedData )
assertEquals ( "a,,b" + recordSeparator , sw . toString ( ) )
Assert . assertTrue ( result . isValid ( ) )
assertTrue ( rec_cnt == 3 )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
assertNotNull ( style )
Assert . assertEquals ( 2 , cpu . getRegister ( ) , 0 )
assertThat ( peek . getCumulativeAverageLatencyInMs ( two ) , is ( ( 105d + 34d + 97d ) / 3 ) )
assertEquals ( "Floor script should match expected" , expectedFloor ( ) , actual )
assertEquals ( expected , roundTrip . getResults ( ) )
Assert . assertEquals ( expectedNames , customerNames )
Assert . assertTrue ( res . isEmpty ( ) )
assertThat ( future , completesTo ( "abcdef" ) )
Assert . assertEquals ( 404 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( "{" + "\"@context\":\"../$metadata#ESCollAllPrim(1)/CollPropertyDecimal\"," + "\"@metadataEtag\":\"W/\\\"metadataETag\\\"\"," + "\"value\":[\"12\",\"-2\",\"1234\"]}" , resultString )
assertTrue ( SUCCESS_MSG , monitor . deleteAsync ( key ) . get ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertThat ( entity . awakeFromInsertionCount ( ) , is ( 1 ) )
assertNotNull ( m )
assertThrows ( VolumeChooserException . class , ( ) -> getTableDelegate ( ) )
assertTrue ( result . getIndexUpdates ( ) > 0 )
assertEquals ( "6kp/8/8/8/8/8/8/8" , classUnderTest . getAsFenString ( ) )
assertTrue ( victim . accept ( request ) )
assertEquals ( sb . toString ( ) , qb . prepareStatementString ( ) )
assertEquals ( "calendarColumn at absolute column " + column , calendarColumn , dayGridPosition . x )
assertEquals ( Integer . valueOf ( 1 ) , parseResults . get ( FILE_PATH ) . getHitsByLine ( ) . get ( NO_BRANCH_LINE ) )
assertEquals ( "Wrong conversion result" , p . pattern ( ) , PropertyConverter . toPattern ( ".+" ) . pattern ( ) )
assertTrue ( uri . endsWith ( "D.ttl" ) )
assertThatSelectedValueIs ( "a0" )
client . execute ( op ) . assertSuccess ( )
assertEquals ( config . getMinReadBufferSize ( ) , acceptedConfig . getMinReadBufferSize ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
assertFalse ( "Expected ComplexSchema integer validation failure did not succeed" , schema . validate ( integerEntity ) )
assertEquals ( networkNormalizationMethod . getType ( ) , normalizationMethod . getType ( ) )
Assert . assertEquals ( 3 , activityNodes . size ( ) )
assertEquals ( c1 , c2 )
assertThat ( log , is ( Files . readAllLines ( Paths . get ( "src/test/resources/data/expected/AuditLogSqlFilter" , "testExecuteQueryFilter.txt" ) , StandardCharsets . UTF_8 ) ) )
assertEquals ( key . getDefaultValue ( ) , impl . getString ( key ) )
assertTrue ( logging . getLog ( ) . contains ( "RuleSet name is missing." ) )
assertEquals ( FORWARD_PATH , springSecurityRequest . getRequestURI ( ) )
Assert . assertNull ( job )
assertEquals ( 0.1d , mutNum . doubleValue ( ) , 0.01d )
assertThat ( actual , nullValue ( ) )
assertTrue ( updatedUri . toString ( ) . equals ( "http://some.server.com:9090/path/to/file?param1=1&param2=2" ) )
assertThat ( pickupTruck , hasProperty ( "model" , equalTo ( "Big 10" ) ) )
assertEquals ( true , options . showSummary ( ) )
Assert . assertEquals ( IsolationLevels . SERIALIZABLE , connection . getIsolationLevel ( ) )
assertOut ( "/**\n * @export\n * @const\n * @type {number}\n */\nRoyaleTest_A.prototype.foo = 420" )
arrays . assertContains ( description , actual , true , null )
Assert . assertNotSame ( hostName , NetworkUtils . ERROR_HOST_NAME )
assertEquals ( new SchemaAndValue ( SchemaBuilder . bool ( ) . version ( 1 ) . optional ( ) . build ( ) , null ) , schemaAndValue )
assertNotNull ( "Returned input stream is null" , is )
Assert . assertEquals ( "moduleA" , foundModule )
assertThat ( result , is ( not ( nullValue ( ) ) ) )
assertEquals ( DOCNAME , docName ( ) )
assertTrue ( true )
assertThat ( unlocked . equals ( unlocked ) , is ( true ) )
Assert . assertSame ( MissingNode . getInstance ( ) , result )
assertMethodCall ( "clinicRepo.flush()" , FLUSH_METHOD , entityParameter )
assertNotNull ( in )
assertEquals ( buf . toString ( ) , "--Z" )
assertEquals ( ldt . format ( DateTimeFormatter . ofPattern ( "yyyy-MM-dd HH:mm:ss.SSS" ) ) , date )
assertTrue ( "Expected:\n" + new String ( expected_res ) + ". \nGot:\n" + transRes , StreamUtils . compareCharStreams ( new ByteArrayInputStream ( expected_res ) , new ByteArrayInputStream ( transRes . getBytes ( ) ) ) )
assertNotNull ( result . getContainedItemSchema ( ) )
assertEquals ( "base64Binary" , shortForm )
assertTrue ( violated )
Assert . assertEquals ( bufferSize , bytes . length )
assertTokens ( integer ( 12 ) , new CommentToken ( "#" , " + 3" ) )
assertEquals ( "clone=true" , getLastRequestQuery ( ) )
assertTrue ( matcher . find ( ) )
context . assertTrue ( config . succeeded ( ) )
Assert . assertEquals ( expResult , result )
JSONAssert . assertNotEquals ( "Message" , "{id:1234}" , actual , false )
validator . verifyTextInLog ( "loaded class java.sql.SQLException" ) . verifyTextInLog ( "loaded class javax.xml.ws.Holder" ) . verifyTextInLog ( "loaded class javax.xml.bind.JAXBException" ) . verifyTextInLog ( "loaded class javax.transaction.TransactionManager" ) . verifyTextInLog ( "loaded class javax.transaction.InvalidTransactionException" ) . assertThatLogLine ( is ( "java.specification.version=" + JVM_SPEC_VERSION ) , greaterThanOrEqualTo ( 1 ) )
assertEquals ( "joe" , StaticUserWebFilter . getUsernameFromConf ( conf ) )
assertEquals ( "SELECT trim(' ' FROM substring(Description, (pos1 + 1)))" , actualCommand . toString ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( thisNameOccurrence . getNameForWhichThisIsAQualifier ( ) , occs . getNames ( ) . get ( 1 ) )
assertThat ( getServers ( ) , hasItem ( "ms1" ) )
assertEquals ( createContainerCaptor . getValue ( ) . getHostConfig ( ) . getMemorySwap ( ) , - 1 )
assertTrue ( executed . get ( ) )
assertEquals ( 0 , eventNumber )
assertEquals ( 2.71f , array2 . getFloat ( 0 ) , 0.01 )
assertEquals ( VisitStatus . BYPASS , visit ( node ) )
assertThat ( replication . name ( ) , is ( "destructive-db.table2" ) )
assertThat ( DataenumUtils . equal ( o , o ) , is ( true ) )
Assert . assertEquals ( 1 , reactorHandlerRegistry . getEntrypoints ( ) . size ( ) )
assertionHelper . assertIrodsFileMatchesLocalFileChecksum ( destFile . getAbsolutePath ( ) , localFile . getAbsolutePath ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
Assert . assertEquals ( "what does a wolf eat" , this . realiser . realise ( p ) . getRealisation ( ) )
assertEquals ( "boo 34\n" , found )
Assert . assertEquals ( expected , BitBufferHelper . toNumber ( array , i ) )
assertEquals ( value , Prefixes . getURIValue ( uri ) )
assertEquals ( "" , res )
assertEquals ( 160 , rrs . size ( ) )
assertEquals ( 32 , program . getMemSize ( ) )
assertFalse ( resourceEditProperty . isRelationProperty ( ) )
assertEquals ( 0 , actual . size ( ) )
assertThat ( "getValue" , node . getValue ( ) , is ( - 2147483648 ) )
assertEquals ( "Hello, foo Earthright 3" , view . getContent ( ) )
Assert . assertEquals ( "Fail count record of room" , i , cr )
Assert . assertTrue ( false )
assertThat ( target . getConvPortId ( nwId , nodeId , portId ) , is ( "port01" ) )
assertEquals ( 1 , res )
assertAllExchangesAreCompleted ( config , client . getExchangeStore ( ) , time )
assertEquals ( 1000.0 , testResult , 0.0 )
result . assertIsSatisfied ( )
assertThat ( iter . hasNext ( ) , is ( false ) )
assertThat ( issue . getBody ( ) , is ( body ) )
assertNotEquals ( array , result )
assertNotNull ( results )
assertTrue ( Arrays . equals ( pktSerialized , pktSerialized1 ) )
Assert . assertEquals ( "3.10" , retornoConsultaCadastro . getVersao ( ) )
assertEquals ( "fa 3 segles" , t . format ( new Date ( 0 ) ) )
Assert . assertTrue ( true )
assertNotNull ( tiposBecas . getId ( ) )
sensei . assertParseXml ( "" )
Assert . assertFalse ( impl . canCachedResponseBeUsed ( host , request , entry , now ) )
assertTrue ( this . timedTask . getInvocation ( ) > 0 )
assertTrue ( c1 instanceof PublicCloneable )
assertEquals ( jq ( ".zswidget-chart" ) . length ( ) , 1 )
assertNotNull ( service )
Helpers . assertJson ( jsonElement . toString ( ) , expectedJson )
Assert . fail ( "Exception expected." )
TestUtil . assertFuzzyDoesNotContain ( "<option value=\"3\">Never Never Land</option>" , session . getHtmlToDisplay ( ) )
Assert . fail ( "expected exception" )
assertEquals ( "update EMPLOYEE\n" + "set ID = ?\n" + "where EMPLOYEE.ID = (select emp2.ID\n" + "from EMPLOYEE emp2\n" + "where emp2.SUPERIOR_ID is not null)" , sql . getSQL ( ) )
assertTrue ( ex . getMessage ( ) . equals ( "Test dee exception 2" ) )
Assert . assertEquals ( "Stan" , server . getManagedBeanValue ( "#{foo.text}" ) )
assertNull ( cfg . get ( FlumeConfiguration . NODE_STATUS_PORT ) )
assertThat ( ruleManager . listGlobals ( ) . get ( "bla" ) , is ( "java.util.Random" ) )
assertEquals ( "Should get a 200 response" , HttpStatus . OK , jdbcFeedSource . getFeed ( getFeedRequest ) . getResponseStatus ( ) )
assertEquals ( 2 , bs . capacity ( ) )
assertEquals ( ret , expectedRet )
assertEquals ( expectedTransportCosts + expectedActivityCosts , iCosts , 0.01 )
assertTrue ( "pool size should be DEFAULT_MAX_ACTIVE, despite the wrong configuration" , poolConfig . getMaxActive ( ) == PoolConfiguration . DEFAULT_MAX_ACTIVE )
assertMultilinesEquals ( "Number of values:       6     5      4\n" + "Minimum value:       3.00 -9.00 -12.00\n" + "Maximum value:      22.00  7.00   2.00\n" + "Mean value:         13.17 -1.40  -3.50\n" + "Root Mean Square:   14.44  6.40   6.40\n" + "Standard deviation:  6.49  6.99   6.19\n" , text )
assertEquals ( false , passedSessionStartCall . await ( 2 , TimeUnit . SECONDS ) )
assertThat ( "Expceted principal not found" , rmap , hasItem ( KERMIT_PRINCIPAL ) )
assertTrue ( "娑���" . equals ( new String ( result . getBytes ( "GBK" ) , "UTF-8" ) ) )
assertTokenStreamContents ( tokenizer , stringArray ( "example.com" ) )
Assert . assertSame ( o , ts . get ( o ) )
Assert . assertFalse ( "Management operation " + op . asString ( ) + " succeeded: " + response . toString ( ) , "success" . equals ( response . get ( "outcome" ) . asString ( ) ) )
assertEquals ( "PONG" , status )
Assert . assertEquals ( 43 , map . size ( ) )
Assert . assertNull ( caixa )
assertEquals ( expecting , result )
Assert . assertEquals ( "Wrong  Port No" , new PortNumber ( 0x00010203L ) , deserializedMessage . getPort ( ) )
context . assertIsSatisfied ( )
assertUnderflow ( ( long ) x - ( long ) y , result )
assertTrue ( fileSizeAfter < fileSizeBefore )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertThat ( appMetadataResource . getFilename ( ) , is ( "foo-source" ) )
assertThat ( score , is ( 3900 ) )
assertEquals ( new LID ( "1" ) , editor . getValue ( ) )
assertEquals ( "select straight_join survey.NAME from SURVEY survey order by survey.NAME asc" , toString ( query ) )
assertEquals ( new File ( dir , "foo" + ext ) , fileForURI ( uri , "/" , "/rest/" , dir , ext ) )
Assert . assertEquals ( codigoDeBarras , produto . getCodigoDeBarras ( ) )
assertEquals ( sampledDeadlockList , deadlockChartGroup )
assertEquals ( "http://localhost:8080/test" , builder . build ( ) . toString ( ) )
assertEquals ( "default" , parent . getInit ( ) )
assertEquals ( 1 , hits . totalHits )
assertEquals ( "me" , realm . getName ( ) )
assertEquals ( 1 , tasks . size ( ) )
DataMockery . assertOPTIONSResponse ( response )
assertEquals ( "Wikipanion" , output . get ( id ) )
Assert . assertEquals ( 211 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertThat ( encoded , stringContainsInOrder ( "{" , "\"resourceType\": \"Patient\"," , "\"contained\": [" , "{" , "\"resourceType\": \"Condition\"," , "\"id\": \"1\"" , "}" , "]," , "\"extension\": [" , "{" , "\"url\": \"test\"," , "\"valueReference\": {" , "\"reference\": \"#1\"" , "}" , "}" , "]," , "\"birthDate\": \"2016-04-05\"" , "}" ) )
assertNotSame ( iter , TransformedIterator . maybeTransform ( iter , negate ) )
assertEquals ( String . valueOf ( context ) , result )
assertEquals ( FilterReply . DENY , mockAppender . getFilterChainDecision ( loggingEvent ) )
assertEquals ( "one or two null values" , result )
assertEquals ( 7 , count )
Assert . assertEquals ( demoService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) , helloService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) )
assertThat ( actual , is ( expected ) )
assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertThat ( or . isSatisfied ( ) , is ( true ) )
Assert . assertNotNull ( connectionManager . createConnectionDetails ( TestConnectionProvider . SCHEME ) )
assertThat ( getPivotModel ( ) . getCurrentMdx ( ) , is ( equalTo ( "SELECT {[Measures].[Unit Sales], [Measures].[Store Cost], [Measures].[Store Sales]} ON COLUMNS, " + "CrossJoin({[Product].[All Products], [Product].[Drink], [Product].[Food], [Product].[Non-Consumable]}, " + "{[Promotion Media].[All Media], [Promotion Media].[Bulk Mail], [Promotion Media].[Cash Register Handout], " + "[Promotion Media].[Daily Paper], [Promotion Media].[Daily Paper, Radio], [Promotion Media].[Daily Paper, Radio, TV], " + "[Promotion Media].[In-Store Coupon], [Promotion Media].[No Media], [Promotion Media].[Product Attachment], " + "[Promotion Media].[Radio], [Promotion Media].[Street Handout], [Promotion Media].[Sunday Paper], " + "[Promotion Media].[Sunday Paper, Radio], [Promotion Media].[Sunday Paper, Radio, TV], " + "[Promotion Media].[TV]}) ON ROWS FROM [Sales]" ) ) )
assertArrayEquals ( result , new byte [ ] { 0 , 1 , 2 , 3 } )
assertLines ( lines )
assertThat ( disque . bgrewriteaof ( ) , containsString ( msg ) )
Assert . assertEquals ( 0 , dfsadmin . run ( args1 ) )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertNotNull ( imageFileSaver )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( N + 1 , count )
assertEquals ( "token 1\n" , found )
Assert . assertEquals ( "IN([CAT.COL];\"value\")" , formatted )
assertNull ( metadata . get ( tellTaleKey ) )
assertTrue ( e instanceof SocketTimeoutException )
assertEquals ( expected , resultVal )
assertEquals ( date , fileTime . getTime ( ) )
assertEquals ( entity , response . readEntity ( String . class ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Pay>" + "Hey no tags!" + "</Pay>" , elem . toXml ( ) )
Assert . assertEquals ( "Incorrect default width percentage from constructor" , 0 , col . getWidth ( ) )
Assert . assertEquals ( 2L , organizationTbl . getOrgId ( ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertEquals ( Criteria . notIn ( "name" , criteria ) , instance . notIn ( "name" , criteria ) . getQueryCriterion ( ) )
assertThat ( record . get ( ) . getLastLogin ( ) , is ( lastLogin ) )
assertEquals ( p , fromSparseRecursiveForm ( recForm , 3 , MonomialOrder . DEFAULT ) )
assertEquals ( 1 , sol . getUnassignedJobs ( ) . size ( ) )
assertEquals ( "{\"date1\":null,\"foo\":\"string1\",\"string2\":null,\"string3\":null}" , processor . generate ( object ) )
Assert . assertEquals ( "ABC" , v )
assertEquals ( Lists . newArrayList ( "a" , "b" , "c" ) , mConfiguration . getList ( PropertyKey . WEB_THREADS , "," ) )
assertEquals ( "69933463-4E56-4221-931A-5F009788B333" , product . getID ( ) )
assertThat ( l , greaterThan ( 1L ) )
assertEquals ( expected , result )
Assert . assertNull ( "Should be null for option with null code" , SelectListUtil . getOptionWithMatching ( options , "A" ) )
assertEquals ( expected , actual )
assertEquals ( 2 , posts . size ( ) )
assertOut ( "function foo(bar:String, baz:int = null):int {\n\treturn -1;\n}" )
assertThat ( webapp . getBuildImage ( ) , is ( notNullValue ( ) ) )
assertResults ( o , results )
assertThat ( command . accept ( state ) , is ( true ) )
assertThat ( query . count ( ) , is ( 3L ) )
assertEquals ( LOG_CONFIG_FILE , applicationArgumentsUnderTest . getLoggingConfigFileName ( ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( X_MADEUP_BASE ) ) )
assertEquals ( "IdentifierLabel" , resource . getIdentifier ( ) . get ( 0 ) . getValue ( ) )
assertThat ( result , is ( "NetworkId" ) )
assertTrue ( "getValue() returned wrong value" , intVal == testVal . getValue ( ) )
assertTrue ( "Asynchronous call was synchronous?" , duration < 100 )
Assert . assertEquals ( expected , actuals )
assertMockEndpointsSatisfied ( )
assertNotNull ( result )
assertThat ( res , Matchers . is ( Lists . newArrayList ( "AAAAACCCCC" , "CCCCCAAAAA" ) ) )
assertNotNull ( handler . event )
assertSame ( firstTry , st )
Assert . assertNull ( "School category should be null" , result )
assertions . doesNotContain ( new long [ ] { 6 , 8 } )
assertEquals ( "1234" , model . getAwsSecretKey ( ) )
assertEquals ( expected , actualQuery )
assertGreater ( "Grid should scroll vertically while editing in unbuffered mode" , getGridVerticalScrollPos ( ) , originalScrollPos )
assertEquals ( exp , res )
assertEquals ( SecurityGroupEntityMgr . findById ( this . em , NEW_SG_SAME_SFC_BINDED_EXISTING_SG_ELEMENT_ID_NULL_CREATE_ELEMENT . getId ( ) ) . getNetworkElementId ( ) , NEW_SG_SAME_SFC_BINDED_EXISTING_SG_ELEMENT_ID_NULL_CREATE_ELEMENT . getNetworkElementId ( ) )
assertEquals ( 32.8125 , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
TestUtils . assertEquals ( "m3*m4=m5" , m3 . multiply ( m4 ) , m5 , entryTolerance )
FeedChecker . assertQ ( "The XML error is not correct" , result , "//error[.='" + errorMessage + "']" )
Assert . assertEquals ( 0 , response . getTotalHits ( ) . value )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff28_02_" ) )
Assert . assertTrue ( out . contains ( "simple call" ) )
assertTrue ( convertedValue instanceof Long )
assertEquals ( " ::  took 0 ms." , result )
assertEquals ( artifactId . toString ( ) , mods . get ( 0 ) . getRevision ( ) )
assertEquals ( recon , hb )
Assert . assertSame ( e , this . mocker . getComponentUnderTest ( ) . process ( e ) )
assertThat ( testTable . getMaxPages ( ) , equalTo ( 10 ) )
assertEquals ( "null" , result )
assertEquals ( expectedQuery , actualQuery )
Assert . assertTrue ( "The file" + fileName + "doesn't contain expected content." , checkFileContains ( path , "Release: " ) )
assertEquals ( true , classUnderTest . IsZeroFill ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertNotNull ( "null execOut" , execOut )
assertTrue ( sql , sql . startsWith ( "SELECT " + "#result('t0.ESTIMATED_PRICE' 'java.math.BigDecimal' 'sc0' 'sc0' 3), " + "#result('t1.ARTIST_NAME' 'java.lang.String' 'sc1' 'sc1' 1) FROM" ) )
assertEquals ( "Can't go away" , ShadowToast . getTextOfLatestToast ( ) )
Assert . assertEquals ( namespace , event . getNamespaces ( ) . next ( ) )
assertTrue ( ValidationUtilities . validateRegExp ( regex , "abc\n def" ) )
assertEquals ( "" , strList )
assertEquals ( unused , h . getUnused ( ) )
assertTrue ( measures . toString ( ) , measures . isEmpty ( ) )
assertFalse ( BasicModel . isMember ( relationshipManager , someUser , someGroup ) )
assertParsingIsCorrect ( nativeQuery , expectedCacheName )
Assert . assertEquals ( "Error downloading file shared with me" , file . getEnclosureLength ( ) . longValue ( ) , bytes )
Assert . assertEquals ( "This is a comment" , newObservation . getComment ( ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
Assert . assertEquals ( fileEntry . getLabel ( ) + " could not be tagged because the file has been deleted or is no longer visible." , text )
Assert . assertEquals ( "test" , urlEncodedValueReturned )
assertTrue ( latch . await ( 5 , TimeUnit . SECONDS ) )
assertEquals ( "file://" + base . toString ( ) + "/ui/dist/index.html" , Constants . webViewLocation ( parameters ) )
assertEquals ( expectedScript , observedScript )
assertThat ( uuids . size ( ) , is ( 10 ) )
assertEquals ( 50 , p . getAge ( ) )
assertThat ( results . get ( 0 ) . getTestSteps ( ) . size ( ) , is ( 3 ) )
Assert . assertEquals ( AuthenticationToken . ANONYMOUS , token )
assertEquals ( ApiStatus . SUCCESS , response . getMeta ( ) . getStatus ( ) )
paths . assertHasNoParentRaw ( info , actual )
assertTrue ( at . getTemplate ( ) . length ( ) == 0 )
Assert . assertEquals ( INSTALL_SDK_PATH , sdk . getPath ( ) )
assertEquals ( "[]" , list . toString ( ) )
assertTrue ( isServiceReady )
assertGenres ( results )
Assert . assertEquals ( 0 , sync ( cache . size ( ) ) . intValue ( ) )
assertMandatoryElements ( targetProduct , true )
assertTrue ( "Reader Should Be Ready After Setting ByteBuffer" , _utf8StreamReader . ready ( ) )
assertTrue ( ! customerKey . prefixOf ( key ) )
assertEquals ( "all-same test" , diffsToString ( Diff . diffText ( a , b , false , false , false ) ) , "" )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertThat ( builder . getExecutor ( ) , is ( MoreExecutors . directExecutor ( ) ) )
assertionHelper . assertIrodsFileOrCollectionExists ( targetIrodsCollection , irodsFileSystem . getIRODSAccessObjectFactory ( ) , irodsAccount )
assertEquals ( "ID = userId" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
Assert . assertEquals ( HttpStatus . SC_OK , result . getCode ( ) )
assertNull ( res )
assertNotEquals ( pattern , patterns . getPattern ( entityId2 ) )
Assert . assertEquals ( expectedLanguage , actualLanguage )
assertEquals ( expected , actual )
assertThat ( this . request . getSortColumn ( ) , is ( sortColumn ) )
Assert . assertTrue ( success )
assertTrue ( check . isSuccess ( ) )
assertTrue ( ! result )
assertEquals ( Hive2DatabaseMeta . TRUNCATE_TABLE + testTableName , hive2DatabaseMeta . getTruncateTableStatement ( testTableName ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<features xmlns=\"http://karaf.apache.org/xmlns/features/v1.0.0\" name=\"test-dependencies\">\n" + "<feature name=\"test-dependencies\">\n" + "<bundle>mvn:mygroup/myArtifactId/1.0</bundle>\n" + "</feature>\n" + "</features>\n" , wr . toString ( ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertTrue ( w . getStatus ( ) == HttpServletResponse . SC_PROXY_AUTHENTICATION_REQUIRED )
assertEquals ( getDate ( "2013-05-05 17:58:45.0" ) , jstOi . getPrimitiveJavaObject ( result . get ( "five" ) ) )
assertThat ( route , canHandle ( PathAnnotatedController . class , "withRelativePath" ) )
assertThat ( matcher . matches ( response ) , is ( false ) )
assertArrayEquals ( new String [ ] { "\"Delimited Field Name\"" , "Default_Case" } , cols )
assertNotEquals ( createCNodeData ( DataType . MATRIX ) , createCNodeData ( DataType . SCALAR ) )
Assert . assertTrue ( authorizableHierarchy . toString ( ) , authzProvider . hasAccess ( user1 , authorizableHierarchy , actions , ActiveRoleSet . ALL ) )
assertEquals ( "\"x\".\"dup\"" , t . getNameInSource ( ) )
assertEquals ( 80 , req . getServerPort ( ) )
assertEquals ( expected , cls )
assertThat ( token . getType ( ) , is ( PCRELexer . OneDataUnit ) )
assertEquals ( expResult , result )
Assert . assertArrayEquals ( "The computed solution for Manger attack must be equal to the original message" , message , solution . toByteArray ( ) )
assertThat ( testExecutor . invokeTest ( 1000L , ImmutableMultimap . of ( "force" , "whatever" ) ) , is ( true ) )
assertTrue ( a . equals ( b ) )
assertNotNull ( defaultRule . defaultQueueName )
assertEquals ( 2 , outcme . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
FunctionTestUtil . assertResult ( codeFunction . invoke ( offsetTime ) , "time( \"" + TimeFunction . FEEL_TIME . format ( offsetTime ) + "\" )" )
assertEquals ( "Unexpected UI providerclass configuration option value" , uiProvider , config . getUIProviderClassName ( ) )
assertThat ( sb . toString ( ) , is ( "1,2,3" ) )
assertEquals ( expResult , stringBuilder . toString ( ) )
Assert . assertEquals ( "{\"alice\":{\"@xmlns:p\":\"http://test\",\"p:bob\":[\"charlie\"]}}" , result . toString ( ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertFalse ( "The getChanges() method reported a change" , hasChange )
assertEquals ( expected , actual )
assertEquals ( reason , null , actual )
Assert . assertFalse ( validator . isValid ( 9 , context ) )
assertEquals ( 86 , Colors . rgbColor ( "aquamarine1" ) . longValue ( ) )
assertThat ( element . getText ( ) , is ( "value with appended text" ) )
Assert . assertSame ( buffer , ByteBufferUtils . decreaseBufferCapatity ( buffer , 512 , 1024 ) )
assertNull ( daoService . get ( userWrapper , "PKEY" , "Config" , StatisticRefEnum . CREATED_ISSUE_COUNT ) )
assertThat ( schedCapture . getValue ( ) , is ( lsScheduler ) )
Assert . assertEquals ( 0 , distance . compute ( a , a ) , 0d )
assertEquals ( user , expectedUser , "Returned user is incorrect." )
assertSame ( map0 , mdcAdapter . copyOnThreadLocal . get ( ) )
assertTrue ( StoreParams . sameValues ( p , pDft ) )
assertEquals ( 1 , fixture . mark ( ) )
Assert . assertTrue ( parseInvoked )
Assert . assertNotEquals ( nodeToKey ( queryA ) , nodeToKey ( queryB ) )
assertThat ( result , equalTo ( "hey, 1, hey, ho, hum, h盲pp, 2" ) )
Assert . assertEquals ( new URI ( "http://localhost:80/" ) , result )
_PmAssert . assertVisible ( pm . pmBeanImpl )
assertThat ( axioms , hasItem ( axiom ) )
assertThat ( intOrString1 , equalTo ( intOrString2 ) )
Assert . assertEquals ( "Incorrect PersonMergeLog found by loser" , l . getUuid ( ) , personMergeLog26 . getUuid ( ) )
assertEquals ( "Mismatched " + opt + " negotiation" , expected , actual )
Assert . assertEquals ( expectedLanguage , actualLanguage )
Assert . assertEquals ( 0 , results . size ( ) )
Assert . assertEquals ( "foo" , comp . getHtmlClass ( ) )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "17-Jun-2013" )
assertTrue ( basePermission . isAllowed ( auth , permittable1 ) )
assertFalse ( validator . isValid ( new MyCustomStringImpl ( "79927398714" ) , null ) )
Assert . assertEquals ( bidJson , objectMapper . writeValueAsString ( simpleBid ) )
assertEquals ( expected , uri . getRawPath ( ) )
assertions . contains ( value , index )
assertMappedFieldValueIsEmptyCollection ( )
assertEquals ( V8Value . FLOAT_32_ARRAY , typedArray . getType ( ) )
assertTrue ( jsonb , jsonb . matches ( "\\{\\s*\"third\"\\s*:\\s*\"Third\"\\s*,\\s*\"fourth\"\\s*:\\s*\"Fourth\".*}" ) )
Assert . assertTrue ( Files . size ( tmfile . toPath ( ) ) > 0 )
assertThat ( e . getMessage ( ) , containsString ( expectedExceptionMessage ) )
assertEquals ( exp , z )
assertEquals ( expecetedTableName , builtTableName )
assertEquals ( true , new File ( "target/data/person_" + ID + ".json" ) . exists ( ) )
assertEquals ( new ArrayList < Category > ( ) , mockResult . included ( "categories" ) )
assertEquals ( "1,2" , parameters . get ( "key" ) )
assertEquals ( 23 , instance . evaluations )
assertEquals ( "Select using a where not clause" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertTrue ( isElementPresent ( By . className ( "v-slot-valid" ) ) )
assertions . isNotEqualByComparingTo ( actual )
Assert . assertEquals ( record . get ( "name" ) . toString ( ) , decoded . get ( "name" ) . toString ( ) )
assertThat ( capturePackage . getValue ( ) . name ( ) , is ( "com.example.package" ) )
assertEquals ( exp , actual )
Assert . assertEquals ( 10 , cache . size ( ) )
assertSame ( this . joystick , joystick )
Assert . assertEquals ( Boolean . TRUE , converter . convert ( Boolean . TRUE ) )
Assert . assertEquals ( "hdfs://localhost:8020/some/path" , HiveAuthzBindingHookBase . parseURI ( "/some/path" ) . getName ( ) )
Assert . assertEquals ( assinatura , eventoInutilizacao . getAssinatura ( ) )
Assert . assertEquals ( expectedResult , result )
Assertions . assertEquals ( Collections . singletonMap ( "color" , "orange" ) , response )
assertHandCount ( playerA , 0 )
assertDefault ( NASTY , NASTY , NASTY , actual )
assertThat ( PropertiesUtil . createPrefixMap ( properties , "abc" ) , is ( answer ) )
assertThat ( filter . apply ( "a a a a" , "a" , "b" ) , is ( ( Object ) "b b b b" ) )
assertThat ( value , equalTo ( "Dummy" ) )
assertTarget ( "[['a', 'b']]" )
assertCompletion ( "server:\n" + "  address: bark\n" + "port<*>\n" , "server:\n" + "  address: bark\n" + "  port: <*>\n" )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertThat ( resolver . resolve ( CamelCase . class ) , equalTo ( "org/jbehave/core/io/CamelCase.story" ) )
assertEquals ( txtFile . getAbsoluteFile ( ) , source . getFile ( ) )
assertEquals ( dataflow , edit . getSubject ( ) )
assertEquals ( "@.ABCD\n@.XYZ" , b . asString ( ) )
assertTrue ( jee . evaluate ( event ) )
assertEquals ( ( byte ) 0xf3 , applicationDirectory . madData [ 0 ] )
assertThat ( aDouble , equalTo ( 3.1536E10 ) )
assertProcessInstanceCompleted ( processInstance )
assertThat ( new File ( current , "a.txt" ) , is ( file ( ) ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( "The entity text is correctly transported" , entityText , EntityUtils . toString ( response . getEntity ( ) ) )
assertEquals ( "Rate[0.0567]" , r1 . toString ( ) )
assertThat ( "the minimal binary setter has return type void" , setter . getReturnType ( ) , equalToType ( Void . TYPE ) )
assertEquals ( ImmutableMap . of ( CallOptionsUtil . REQUEST_PARAMS_HEADER_KEY , encodedRequestParams ) , headers )
assertThat ( aggregateMapper . getCapped ( ) . getMax ( ) , is ( 50 ) )
assertNull ( field . getFillColourOpacity ( ) )
testHelper . assertExecutionTreeAfterMigration ( )
assertThat ( event , is ( expected ) )
assertThat ( s , is ( "a value less than <1> or a value greater than <5>" ) )
Assert . assertEquals ( "A" , name )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( originalSize - 1 , getNumberOfAllVisitsIncludingVoided ( ) )
assertArrayEquals ( inorder , wrongorder )
arrays . assertEndsWith ( description , null , newArray ( true ) )
assertTrue ( sc . invokeDestinationCalled ( ) )
assertEquals ( 7.76573e-2 , p , 1e-6 )
assertEquals ( AuthorizationResult . ACCESS_DENIED , permission . getResult ( ) )
assertEquals ( "The quick brown fox jumped over the lazy dog." , resolvedString )
assertFalse ( result )
Assert . assertEquals ( expected , actual )
assertTrue ( str . contains ( format . format ( date ) ) )
assertNotNull ( myException )
assertJavaScriptIsOn ( $ . driver ( ) . get ( ) )
Assert . assertEquals ( 1 , countingNotifier . getNotificationCount ( ) )
assertEquals ( "Expected response not seen." , "ONE" , response )
assertEquals ( "false" , testedString )
assertNotNull ( oracleEngine )
assertEquals ( 0 , ThreadTrackingContext . getBytes ( ) )
assertEquals ( "#646464" , getColorpickerValue ( ) )
assertEquals ( 1 , post . getVersion ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( this . patient1 , this . component . resolveEntity ( PATIENT_1_ID ) )
assertFalse ( validationHelper . hasErrors ( ) )
arrays . assertEndsWith ( description , null , newArray ( true ) )
assertThat ( sut . isMatch ( real , expected ) , is ( true ) )
assertTrue ( failedAsExpected )
assertTrue ( lines . contains ( "longest-mention: Bill Clinton" ) )
assertThat ( "isSame must not return true for locations created with different paths and the same property" , locationA1 . isSame ( locationA2 ) , is ( false ) )
Assert . assertFalse ( result )
assertTrue ( true )
assertions . isNotEmpty ( )
assertTrue ( victim . accept ( request ) )
Assert . assertNotNull ( irodsFileSystem )
assertTrue ( "Rule Delegation Bo fetched " , ruleDelegationBos != null && ruleDelegationBos . size ( ) == 1 )
assertThat ( actual , is ( equalTo ( "/ab/CD/ef/GH" ) ) )
assertThat ( request . getValue ( ) , equalTo ( stringLength500 ) )
Assert . assertEquals ( "SELECT 3 * 5;" , text )
assertThat ( version , is ( notNullValue ( ) ) )
Assert . assertEquals ( query , interpretedQuery )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertThat ( context , str , is ( RESULT_MSG + RESULT_INT ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertFalse ( value . isReplaceableBy ( 99L , 9 , ComparableComparator . INSTANCE ) )
assertEquals ( adminUserId , __response . getOwner ( ) )
assertEquals ( "193d2ad9-e671-4d66-9211-7f75f6380231" , orderId )
assertEquals ( 986083199999L , m . getLastMillisecond ( calendar ) )
assertNotNull ( testClass )
assertEquals ( tstName , ent . getSchema ( ) )
assertTrue ( BatchUtil . evaluate ( batch ) )
assertEquals ( "[{\"name\":\"table 1\",\"pkPolicy\":\"user_generated_value\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"isPrimaryKey\":true},{\"name\":\"column 1\",\"nullable\":true}]}]" , content )
assertEquals ( 3.14159 , result , 0.00001 )
assertThat ( notification , containsString ( "\"url\":\"foobar\"" ) )
assertEquals ( "/_nodes/_all/_shutdown" , action . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( "rpc/encoded" , encodingStyle )
assertNotNull ( graph . tx ( ) )
assertEquals ( JobConfigHistoryConsts . ICONFILENAME , sut . getIconFileName ( ) )
assertEquals ( 'd' , ex . charAt ( s , 12 ) )
assertEquals ( type , DateIntervalType . DAY )
Assert . assertEquals ( true , errors . hasFieldErrors ( "encounterDatetime" ) )
assertFalse ( replaced )
assertEquals ( exp , TYPING_MAPPER . readValue ( json , ZoneId . class ) )
Assert . assertNotNull ( command )
assertTrue ( e . getMessage ( ) . contains ( "Output dir" ) )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertEquals ( stat , UnitTestUtils . serializeAndRecover ( stat ) )
assertThat ( MODEL . getStartTransition ( utc ) , is ( AUTUMN_1996 ) )
assertEquals ( "Failed on [" + i + "] iteration" , expected , merged )
assertThat ( jvm . shouldEnableRemoteDebugging ( ) , is ( false ) )
assertThat ( pages . isCurrentPageAt ( ApacheHomePage . class ) , is ( true ) )
assertTrue ( "Add and get relation by type" , relationList . get ( 0 ) . getKeyid1 ( ) . equals ( testRelation . getKeyid1 ( ) ) )
assertEquals ( null , MavenConfigService . getLocalRepoFromConfig ( config ) )
Assert . assertNull ( "should have deleted data object description" , value )
assertEquals ( loadResourceAsString ( "empty_item_of_list.html" ) , result )
assertEquals ( "Hello {Tim} {" , ResponseBodyInterpolator . interpolate ( "Hello {{name}} {" , req ) )
assertNull ( response . getHeaders ( ) . get ( "Content-Location" ) )
assertEquals ( "catch" , getValue ( ) )
Assert . assertEquals ( tokenList . size ( ) , 0 )
assertEquals ( 4.0 , distance . compute ( point1 , point2 ) , EPSILON )
assertTrue ( fs . unlink ( "foo" ) )
assertEquals ( "1, 2, 3" , tree . toString ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertThat ( tracker . getAll ( ) [ firstElementOfArray ] . getComments ( ) [ firstElementOfArray ] , is ( comment ) )
Assert . assertEquals ( expectedShard , shard )
assertEquals ( val . apply ( m ) , m . with ( val ) )
context . assertIsSatisfied ( )
assertEquals ( status , actualStatus )
assertEquals ( "`ID` = :id" , result )
assertEquals ( 0.7306356862792885 , r , 0.000000000001 )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertNotNull ( path )
assertTrue ( specification . stats ( ) . hasFailed ( ) )
assertEquals ( expected , actual )
assertEquals ( "testgroup" , externalId )
Assert . assertEquals ( 401 , response . getStatus ( ) )
assertEquals ( expectedUri , uri )
assertEquals ( expResult , result )
assertEquals ( 1 , count . get ( ) )
assertTrue ( "Authentication Context should be created" , ops . exists ( TEST_AUTHENTICATION_CONTEXT_ADDRESS ) )
assertEquals ( "No child collection expected." , 0 , code . strings ( ) . length )
assertEquals ( "Expected 5 results!" , 5 , n )
assertTrue ( ! cs . hasNext ( ) )
assertEquals ( "value" , jedis . get ( "key" ) )
assertTrue ( FileUtils . contentEqualsIgnoreEOL ( new File ( "src/test/resources/reference/test-normalized.dump" ) , outputFile , "UTF-8" ) )
assertE ( "�尖�尖�尖�尖��" + "��  �衡��" + "��   ��" + "��   ��" + "�尖�尖�尖�尖��" )
Assert . assertEquals ( "hello,world" , result . getName ( ) )
assertFalse ( hasResourceProvidableType )
assertTrue ( ValidationUtilities . validateRegExp ( regex , "abc\n def" ) )
Assert . assertEquals ( "Class should not be considered: " , false , new DifferenceAccumulatingHandler ( inclusionSet , exclusionSet ) . isClassConsidered ( "de/test/java/regex/classImpl" ) )
assertEquals ( TestEnum . TWO , readValue )
assertGreater ( "The header deco in Valo hasn't been recalculated after initial rendering" , topDeco . getSize ( ) . getHeight ( ) , 20 )
assertNotNull ( as )
assertEquals ( 3 , postCommentScores . size ( ) )
assertTrue ( wasEmpty . get ( ) )
assertArrayEquals ( new String [ ] { "singleton" } , treeContent )
Assert . assertTrue ( matcher instanceof UriPatternMatcher )
assertEquals ( 0 , tree . size ( ) )
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\"$or\":[{\"username\":{\"$ne\":\"\"}}]}" )
assertTrue ( Arrays . equals ( expectedPrivs , privs ) )
assertTrue ( suspendables . contains ( method ) )
assertEquals ( 2 , searchService . search ( "Functionblock" ) . size ( ) )
assertNull ( data )
assertValidationFailures ( validee , ConfigFactory . empty ( ) )
Assert . assertEquals ( 27. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 3 ) , route ) , 0.01 )
assertThat ( sampleEntity , is ( notNullValue ( ) ) )
assertEquals ( content , IOUtils . toString ( ungzippedStream , Charset . defaultCharset ( ) ) )
assertEquals ( "incorrect result" , result , aNumber . compareTo ( bNumber ) )
assertEquals ( constraintViolations . size ( ) , 1 )
assertEquals ( 50 , port . doubleIt ( 25 ) )
assertThat ( classes . size ( ) , is ( 6 ) )
assertObjectEquals ( "{type:'number'}" , x . getSchema ( ) )
assertJsonEquals ( "{hello:'world',foo:'bar'}" , JsonSerializer . serialize ( map ) )
assertEquals ( 0 , violations . size ( ) )
assertStates ( "existing" , NOT_SUPPORTED , LINKED_BUT_NOT_SYNCED , EXISTING , null , null )
assertEquals ( "Black" , dto . getColors ( ) [ 0 ] )
assertArrayEquals ( expected , fixture . getServerAddresses ( ) )
assertEquals ( document , mapper . readerFor ( MediaInfoDocumentImpl . class ) . with ( DeserializationFeature . ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT ) . readValue ( JSON_MEDIA_INFO_EMPTY_ARRAYS ) )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
Assert . assertEquals ( "rm/localhost@EXAMPLE.COM" , client . timelineDTRenewer )
Assertions . assertNotNull ( docker , "should be passed as a parameter" )
assertFalse ( shouldAnalyze )
assertEqualsSet ( "TestDeclarations.rdf" , Declaration ( c ) , Declaration ( o ) , Declaration ( d ) , Declaration ( i ) , Declaration ( ap ) , Declaration ( datatype ) )
assertions . isGreaterThan ( expected )
assertEquals ( "names do not match!" , "myComponent" , component . getName ( ) )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertEquals ( "" , result )
assertEquals ( "Should have received exactly 2 change events" , 2 , observedEvents . size ( ) )
assertTrue ( csv . equals ( "" ) )
assertNotNull ( webKeys )
assertEquals ( "Unexpected primary style name" , state . primaryStyleName , table . getPrimaryStyleName ( ) )
assertJson ( json )
assertEquals ( "coap://unknownhost:5683" , server . getUri ( ) )
Assert . assertEquals ( journalTable . getKeyColumnNames ( ) , ImmutableList . of ( "foo" ) )
assertTrue ( "Got parameters" , builder . getParameters ( ) . isEmpty ( ) )
Assert . fail ( "RuntimeException expected" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff16_" ) )
assertArrayEquals ( "results == fooBar" , results , values )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( handler . isCalledOnce ( ) )
Assert . assertEquals ( expected . replace ( '\'' , '"' ) , result )
assertMatches ( written , resolved )
assertEquals ( "foo" , result )
assertEquals ( "" , result )
Assert . assertNotNull ( factory )
assertThat ( domain . getValidationFailures ( resourceLookup ) , empty ( ) )
assertThat ( statistics . getVertexCount ( ) , is ( 11L ) )
assertTrue ( bars [ 0 ] . equals ( bars [ 1 ] ) )
assertEquals ( "Mismatched " + opt + " negotiation" , expected , actual )
Assert . assertEquals ( "baz" , manipulation . getColumnToUpdate ( ) )
Assert . assertEquals ( new BigDecimal ( "23691.35" ) , term . getIndexedValue ( ) )
assertEquals ( "M" , sew . getValue ( ) )
assertTrue ( ( boolean ) AviatorEvaluator . execute ( "date1>date2" , env ) )
assertThat ( servletResponse , allOf ( startsWith ( "java.io.IOException" ) , containsString ( "403" ) ) )
Assert . assertTrue ( corbaBadParam )
assertEquals ( true , classUnderTest . IsZeroFill ( ) )
assertThat ( other , DateMatchers . sameMillisecondOfSecond ( date ) )
assertSame ( null , i . getStsClient ( ) )
Assert . assertEquals ( prefixes . getNsPrefixURI ( "ex" ) , query . getNsPrefixURI ( "ex" ) )
assertFalse ( subject . getSourceFrameRate ( ) . isPresent ( ) )
assertEquals ( "unknown version, could not find property foo.bar in module.properties" , result )
assertBeanValidation ( json , "query.metric[0].aggregators[0].m_divisor may not be zero" )
assertNotNull ( "Returned console reader cannot be null" , reader )
assertEquals ( "Expected another type of analyzer" , BrazilianAnalyzer . class , analyzer . getClass ( ) )
assertMandatoryElements ( targetProduct , false )
assertSame ( t , TEST_2007_07_15_12_30_40_987654321 )
assertThat ( traversal . toList ( ) , containsInAnyOrder ( likeVertex ( ) . withTimId ( "id1" ) , likeVertex ( ) . withTimId ( "id2" ) , likeVertex ( ) . withTimId ( "id3" ) ) )
assertEquals ( expected , getString ( TestScalarSubqueryImpl . example ( ) ) )
assertThat ( result . getIssues ( ) , empty ( ) )
assertFalse ( user . hasRole ( "Not A Role" , true ) )
assertEquals ( o1 , o2 )
assertThat ( result . hasErrors ( ) , is ( false ) )
arrays . assertDoesNotContainNull ( description , actual )
assertFalse ( "No collection information" , result . getParts ( ) . isEmpty ( ) )
assertEquals ( 1 , violations . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "9208675309" , parsedTelePhoneNumber )
assertArrayEquals ( "3" . getBytes ( ) , jedisCluster . get ( byteKey ) )
assertEquals ( 0 , array . length )
assertFocusModificationSanity ( context )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( "Mismatched data" , expected , res )
assertEquals ( response . getStatus ( ) , STATUS200 )
Assert . assertEquals ( button . getAttribute ( "value" ) , "Hello there" )
assertEquals ( "find(\"\\\\s+\")" , buffer . toString ( ) )
assertEquals ( "{\"a\":[0,2]}" , n )
assertEquals ( "Test message \\ab c" , result )
assertEquals ( "SELECT mat FROM SOHeader soh JOIN soh.soItem soi JOIN soi.material mat WHERE soh.buyerId = 2 AND soh.createdBy = 'Peter' AND soi.shId = soh.soId AND mat.id = 'abc' ORDER BY mat.buyerId asc , mat.city desc" , jpqlStatement . toString ( ) )
assertEquals ( "001" , this . banco . geraCodigoDeBarrasPara ( this . boleto ) . substring ( 0 , 3 ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( BIG_DATA , result )
Assert . assertEquals ( "!!bitset [\n" + "  1024,\n" + "  # 0000000000000000000000000000000000000000000000000000010000000000\n" + "\n" + "]" , wire . toString ( ) )
Assert . assertEquals ( null , _c . convert ( null ) )
assertTrue ( exceptionReport . getHTTPStatusCode ( ) == HttpServletResponse . SC_BAD_REQUEST )
assertFalse ( o . containsObjectPropertyInSignature ( df . getIRI ( "http://www.loa-cnr.it/ontologies/Plans.owl#" , "iteration-cardinality" ) ) )
assertThat ( name , equalTo ( SOME_TEXT ) )
assertTrue ( entity . getSex ( ) == 'F' )
assertEquals ( expected , loops )
assertTrue ( retDocumentProjects == mergedDocumentProjects )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertThat ( response . getStatus ( ) , is ( Response . Status . INTERNAL_SERVER_ERROR . getStatusCode ( ) ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertEquals ( "Six rules are set" , 6 , ss . size ( ) )
assertThat ( found , containsInAnyOrder ( id1 ) )
assertEquals ( "OK" , jedisCluster . scriptFlush ( byteKey ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
arrays . assertHasOnlyElementsOfTypes ( someInfo ( ) , array ( ) , types )
assertNoCause ( "value of    : myObject.grandchild\nmessage\nmyObject was: root" )
assertThat ( "��瑷�" + i + "瑕�涔���3,瑕�涔���6" , i , either ( is ( 3 ) ) . or ( is ( 6 ) ) )
assertNotNull ( image )
AssertResults . assertResults ( scanner , expectedResults )
assertThat ( markdown , containsString ( String . join ( "\n" , "### Start" , "" , tableHeader ( ) , tableEntry ( "`derived`" , linkTo ( "Derived Object" , "#derived-object" ) , "" ) , tableEntry ( "`simple`" , linkTo ( "Simple Object" , "#simple-object" ) , "" ) , "" , "### Derived Object" , "" , "A simple object used for testing" , "" , tableHeader ( ) , tableEntry ( "`aaBoolean`" , "Boolean" , "A flag" ) , tableEntry ( "`aaString`" , "string" , "A string" ) ) ) )
assertEquals ( "test" , val )
assertEquals ( counter . get ( ) , rowCount . getLiveValue ( ) )
assertEquals ( TEAM_CITY_URL + "/app/rest/server" , serverUrl )
assertNotNull ( "AppointmentAttendee is null" , entity )
Assert . fail ( e . getMessage ( ) )
assertThat ( values , contains ( endYear ) )
assertOut ( "const a:* = 42" )
assertFalse ( result )
assertTrue ( pattern . matches ( "-1.0" ) )
assertResultSet ( res )
assertNotNull ( responseContent )
assertEquals ( 1 , kieSession . fireAllRules ( ) )
assertEquals ( expected , actual )
assertTrue ( contains ( url , "?key=true" ) )
assertEquals ( Tuple4 . of ( 17.29f , 14.5 , - 0.98 , 6 ) , Iterables . getOnlyElement ( applyAggregator ( a , input ) ) )
assertTrue ( s . getRequiredSkills ( ) . containsSkill ( "skill1" ) )
assertThat ( responseObject , is ( not ( nullValue ( ) ) ) )
Assert . assertEquals ( protocoloInfo , protocolo . getProtocoloInfo ( ) )
assertFalse ( "Attribute should be false" , msg1 . getEdimap ( ) . isIgnoreUnmappedSegments ( ) )
Assert . assertNull ( WebUtil . normalizeLocale ( s ) )
Assert . assertNull ( "user group returned" , actual )
Truth . assert_ ( )
assertEquals ( "Jersey/2.0-m09 (HttpUrlConnection 1.7.0_04) from the server" , response )
assertThat ( date . getMaximum ( CommonElements . RELATED_GREGORIAN_YEAR ) , is ( 1000020533 ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertThat ( transferSuccessful , is ( true ) )
assertTwoProcessesSameDefinition ( manager )
assertNoDummyAccount ( USER_JACK_USERNAME )
assertEquals ( TYPE_FILE , ftpFiles [ 0 ] . getType ( ) )
assertNotEquals ( p , null )
Assert . assertEquals ( 1 , ( int ) conceptDatatype . getConceptDatatypeId ( ) )
assertFalse ( str . contains ( "setValue" ) )
Assert . assertEquals ( units , deserialize ( tmpDir ) )
Assert . assertTrue ( zero . isZero ( ) )
assertTrue ( "livecn contacts are empty" , contacts . size ( ) > 0 )
Assert . assertEquals ( new Long ( Long . MAX_VALUE ) , RequestObjectHelper . getEndOffset ( requestObject ) )
assertFailureLogPresent ( instance , "failingTask" )
assertThat ( parsers , is ( DdlParsers . BUILTIN_PARSERS ) )
assertThat ( spec . getImagePullPolicy ( ) , equalTo ( ALWAYS_IMAGEPULLPOLICY ) )
assertFalse ( authenticator . isAuthenticated ( "username" , "password" ) )
assertEquals ( expectedGhostTable , ghostTable )
assertThat ( store . getApiKeys ( USER_ID ) , hasItem ( record ) )
assertThat ( root , hasType ( Type . PARTIALY_SCHEDULED_SUPERELEMENT ) )
assertEquals ( previous + 1 , list . size ( ) )
assertFalse ( filter . shouldInclude ( source , "some.property" ) )
Assert . assertArrayEquals ( cplxData_mlook_EXPECTED . toDoubleArray ( ) , cplxData_mlook_ACTUAL . toDoubleArray ( ) , DELTA_08 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
assertFalse ( properties . shouldCreateNewChat ( ) )
assertTrue ( "Got parameters" , builder . getParameters ( ) . isEmpty ( ) )
assertTrue ( "Not EBV true: " + v , XSDFuncOp . booleanEffectiveValue ( v ) )
Assert . assertEquals ( "Invalid OR of " + operands , row . expected , expr . evaluate ( ) . booleanValue ( ) )
assertEquals ( expected , actual )
assertThat ( processor . getTables ( ) , is ( Arrays . asList ( DATABASE + "." + TABLE ) ) )
assertEquals ( input . label + " serialize-normal failed" , input . e1 , r )
assertTrue ( sut . getTarget ( ) . size ( ) > 0 )
assertEquals ( expectedSource , instrumentedSource )
assertThat ( ( Integer ) getter . invoke ( instance ) , is ( equalTo ( 1337 ) ) )
Assert . assertEquals ( element . getText ( ) , "click me" )
assertEquals ( 4 , stk . size ( ) )
assertThat ( reading . getQuery ( ) , is ( "limit=10" ) )
assertEquals ( 200 , tagCache . size ( ) )
assertNotNull ( p )
assertEquals ( expected , output . trim ( ) )
assertThat ( manager . getPartitionSubPath ( path ) , is ( new Path ( "partition%251" ) ) )
Assert . assertNull ( person . getAttribute ( 3 ) )
assertDegenerate ( scan )
assertEquals ( "9 3\n" , found )
assertEquals ( "Expected 0 results!" , 0 , n )
assertFalse ( JPackage . isForcePackageNameLowercase ( ) )
assertThat ( cursor . hasNext ( ) , equalTo ( false ) )
assertEquals ( "irida workflow is invalid" , buildTestWorkflowSingle ( ) , iridaWorkflowFromFile )
assertEquals ( 1 , Iter . firstIndex ( data , filter ) )
assertTrue ( true )
Assert . assertTrue ( is . available ( ) > 0 )
assertEquals ( dateFormat . format ( date ) , dateFormat . format ( response . getDate ( ) ) )
Assert . assertNotNull ( "XML parser not null" , tba1 )
assertEquals ( "immediateResume" , str )
Assert . assertEquals ( 0 , this . outputDir . listFiles ( ) . length )
assertThat ( javaDocComment , containsString ( "A description for this type" ) )
assertEquals ( 1 , bidLevel1 . compareTo ( bidLevel2 ) )
assertEquals ( expected , actual )
assertEquals ( htd . getNameAsString ( ) , deserializedHtd . getNameAsString ( ) )
assertEquals ( Time . formatTime ( time ) , DATE_FORMAT . get ( ) . format ( time ) )
assertTrue ( selectedCells . isEmpty ( ) )
Assert . assertEquals ( "var simulation gave the wrong answer" , "No trade data" , r )
assertEquals ( val2 , point . getValue ( ) )
Assert . assertTrue ( row . matches ( new Guess ( colors ) ) )
assertEquals ( 2 , position )
assertThat ( pathElement . getCompletePath ( ) , is ( "/a/b/c/d/e" ) )
assertEquals ( 13 , acc . get ( ) )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
Assert . assertEquals ( "Nodes should be considered free since run is considered old at this point " , 5 , freeThreads )
assertEquals ( "Test Group" , group . getName ( ) )
assertEquals ( value , Integer . valueOf ( testValue ) )
assertThat ( queryContext . get ( ) , is ( instanceOf ( RoutingContext . class ) ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFInfoCupomFiscalReferenciado ( ) . toString ( ) )
assertThat ( resolve ( "http://example.org/b/c" ) , is ( "./example/b/c.xsd" ) )
assertEquals ( witness , map )
assertThat ( results . size ( ) , is ( 1 ) )
assertScoreAndParse ( content , null , 1 )
assertArrayEquals ( EXPECTED_SIGN_SIGNED_BYTES , encodedBytes )
assertFalse ( kieBuilder . getResults ( ) . hasMessages ( Message . Level . ERROR ) )
assertThat ( decoderEncoder . decode ( encodedSuffix ) , equalTo ( qa [ 1 ] ) )
mockOutput . assertIsSatisfied ( )
Assert . assertEquals ( 1 , countResult ( query ) )
assertEquals ( 0 , ct . hashCode ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( returnValue , result )
assertTrue ( isElementPresent ( By . className ( "v-required-field-indicator" ) ) )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertFalse ( doc . isSameNode ( text ) )
assertEquals ( newNumber ( 6 ) , value )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , Float . valueOf ( "12.3" ) ) )
Assert . assertEquals ( "http://example.com/events/Wiesbaden?eventName=Revo+Tour&location=Schlachthof#description" , expanded . toString ( ) )
assertFalse ( session . getNode ( path ) . isLocked ( ) )
assertArrayEquals ( expected , actual , EPS )
assertEquals ( 7 , array . getInteger ( 0 ) )
assertEquals ( "0000001476147541" , nossoNumeroCompleto )
assertThat ( result , contains ( new Interval ( RangeBoundary . CLOSED , 0 , 4 , RangeBoundary . CLOSED , 0 , 0 ) ) )
assertNotNull ( Day . fetcher ( "resource_type" , "day" ) . fetch ( ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( 0 , time . getTime ( ) )
assertTrue ( "Expected HostCapacityReports" , obj instanceof Host )
assertTrue ( workReportTypeDAO . exists ( workReportType . getId ( ) ) )
assertTrue ( true )
assertEquals ( result . getUuid ( ) , newUuid )
assertEquals ( false , getAddLayerToAnimationAction ( ) . isEnabled ( ) )
assertEquals ( resp . getCode ( ) , 204 )
assertThat ( content , equalTo ( CONTENT_ANY_1 ) )
assertTrue ( packages . isEmpty ( ) )
assertTrue ( "Tx 2 write should've completed" , write2Complete . await ( 5 , TimeUnit . SECONDS ) )
assertFalse ( notifier . wasPerformed ( ) )
assertEquals ( map1 , map3 )
helper . assertAttributeValue ( EXPECT_NoAttributeValue , orderLine . getM_AttributeSetInstance ( ) , attr_Country )
Assert . assertEquals ( expected , actual . toString ( ) )
assertNotNull ( saslServer )
Assert . assertFalse ( principal1 . equals ( principal2 ) )
assertThat ( result , is ( false ) )
assertTrue ( result . getVotes ( ) . contains ( vote ) )
Assert . assertEquals ( "Compiling the Vocab failed" , 0 , result )
assertTrue ( e instanceof E_Now )
assertEquals ( "candidate took 1 millis to execute\n" + "control took 1 millis to execute\n" + "example: candidate and control both threw exceptions, but the exceptions don't match\n" , s )
Assert . assertEquals ( 1 , sub . size ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
Assert . assertTrue ( provider . isKeyword ( "SELECT" ) )
assertEquals ( getExplain ( delete , table . getSchemaName ( ) ) , "\n  Delete_Returning()\n" + "    GroupLookup_Default(Index(c.PRIMARY) -> c)\n" + "      IndexScan_Default(Index(c.PRIMARY), cid = $1)" )
assertEquals ( "header must be measured" , prefSize . width + table . getColumnMargin ( ) , columnExt . getPreferredWidth ( ) )
assertEquals ( "func code() {}" , element . getJavaScript ( ) )
assertArrayEquals ( new String [ ] [ ] { { "A" , "B" , "C" } , { "1" , "2" , "3" } } , event . getMatrix ( ) )
assertBasicProfileData ( profile )
assertEquals ( "abaac\n" , found )
assertEquals ( numCalls + 1 , newNumCalls )
Assert . assertEquals ( SslMode . ON , mode )
this . assertEditPostFormMavIsCorrect ( mav )
assertThat ( "withUriFormat field has type URI" , field . getType ( ) , equalToType ( URI . class ) )
assertTrue ( numberOfOperations == 0 )
Assert . assertTrue ( rPr . getSz ( ) . getVal ( ) . intValue ( ) == 24 )
assertEquals ( Type . PRIVACY_PREFERENCE_LIVEPOST , Type . get ( preference ) )
assertOut ( "void a" )
Assert . fail ( "Expected SQL exception" )
assertFailureValue ( "differs at index" , "[0]" )
assertNotNull ( host )
assertEquals ( "Expected ratcheting to have been updated" , 2 , config . getTypeConfigs ( ) . get ( CHECKSTYLE ) . getUnstable ( ) . intValue ( ) )
assertEquals ( 0xff , keyInfo . getSecurityDescriptor ( ) )
Assert . assertEquals ( 6 , metrics . size ( ) )
assertThat ( mapOfProperties . keySet ( ) , containsInAnyOrder ( "database.username" , "database.password" , "database.driver" , "database.url" ) )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
assertEquals ( testNewUrl , jobEntryHadoopCopyFiles . loadURL ( testUrl , testNcName , metaStore , mappings ) )
assertThat ( localization . getLocale ( ) . getLanguage ( ) , equalTo ( "pt" ) )
assertTrue ( arrayContains )
AssertJUnit . assertTrue ( "filter does not match object" , match )
assertFalse ( source . isSnapshotsDisabled ( ) )
assertThat ( noOfSolutions , is ( 2 ) )
assertEquals ( prop , unserializedProp )
assertThat ( fileContent , is ( "Hello Andrew\nGoodbye Andrew" ) )
assertEquals ( TEST_CONTENT , CharStreams . toString ( result ) )
assertObjectEquals ( "{'in':'header',name:'H',type:'string'}" , x )
Assert . assertTrue ( PublisherRSServerUtils . gpPublisherClient . publishStyle ( "STYLE_MOCK_MOCKITO" , "STYLE_MOCK_MOCKITO" , Boolean . FALSE ) )
assertEquals ( "Hello {name}" , ResponseBodyInterpolator . interpolate ( "Hello :name" , req ) )
assertThat ( diffs . toString ( ) , equalTo ( "[Diff(EQUAL,\"[a]\"), Diff(DELETE,\"[b]\"), Diff(EQUAL,\"[c]\")]" ) )
Assert . assertTrue ( pf . passesFilter ( p1 ) )
assertThat ( itemTypeDAO . getTypes ( TENANT_ID , false ) , is ( expectedTypes ) )
assertEquals ( HELLOWORLD_URI , uri . toASCIIString ( ) )
assertEquals ( 0 , rmAdminCLI . run ( args ) )
assertMismatchDetected ( true )
Assert . assertEquals ( data , rdbFileData )
assertEquals ( new File ( absBaseDir + toResolve ) , DockerPathUtil . resolveAbsolutely ( toResolve , absBaseDir ) )
Assert . notNull ( department )
assertEquals ( false , result )
assertThat ( driver . findElement ( By . id ( "halfwidth" ) ) . getAttribute ( "value" ) , is ( "A!锝憋蕉锞�锝�" ) )
assertEquals ( null , min )
Assert . assertEquals ( 6 , resultList . size ( ) )
Assert . assertTrue ( out . size ( ) > 0 )
assertThat ( classesToParse , is ( empty ( ) ) )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNull ( e . getEnableCounting ( ) )
assertEquals ( expResult , result )
assertTrue ( ws instanceof WebSocket )
assertEquals ( "" , result )
assertEquals ( experimentDeleteRequest . getUri ( baseURI ) , expectedURI )
Assert . assertTrue ( reply . isApproved ( ) )
Assert . assertFalse ( "Failure expected true" , r . getLeft ( ) )
assertRowCount ( results , 2 )
assertNotNull ( Member . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MBXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
this . assertAnalyzesTo ( _a , "{\"foo\":12}" , new String [ ] { "foo" , "12" } , new String [ ] { TypeAttribute . DEFAULT_TYPE , "<NUM>" } )
assertEquals ( renderTypesResult ( ) , result )
assertEquals ( ImmutableSet . copyOf ( DATA ) , ImmutableSet . copyOf ( unique ) )
Assert . assertEquals ( 27. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 3 ) , route ) , 0.01 )
Assert . assertEquals ( JavaVersion . v1_7 , model . getOptions ( ) . getJavaVersion ( ) )
assertEquals ( body . toString ( ) , "1test final" )
Assert . assertEquals ( 2 , violations . size ( ) )
assertions . contains ( value , index )
Assert . assertEquals ( "/test?field=a%2Cb%2Cc&user=1%2C2%2C3" , result )
assertThat ( count , is ( 0L ) )
assertTrue ( Iterables . elementsEqual ( result . getSteps ( ) , Lists . newArrayList ( new Step ( 0L , 2L , 1L , false ) , new Step ( 1L , 0L , 0L , false ) , new Step ( 1L , 1L , 2L , true ) , new Step ( 2L , 3L , 2L , true ) ) ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>" , result )
assertEquals ( "value" , exp . asDynamic ( ) . asPropertyPath ( ) . getValue ( ) )
Assert . assertNull ( caixa )
classes . assertIsPackagePrivate ( someInfo ( ) , clazz )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertThat ( selectionModel . getSelectedClass ( ) , is ( Optional . empty ( ) ) )
assertTrue ( filter . matches ( "resilient_pool-0" , poolOperation ) )
assertEquals ( expectedCookies , response . getCookies ( ) )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertTrue ( symbols . isEmpty ( ) )
assertFive ( result , testContext , async )
assertEquals ( this . toBaseString ( test ) + "[typeIsSelf=" + this . toBaseString ( test ) + ",otherType=" + test . getOtherType ( ) . toString ( ) + "]" , test . toString ( ) )
assertThat ( ( String ) registrationProperties . getValue ( ) . get ( "configuration" ) , equalTo ( "configadmin" ) )
assertEquals ( "OK" , r )
assertEquals ( 0 , new NQueens ( solution ) . attackedQueens ( ) )
Assert . assertEquals ( "1 2" , ev . get ( "a" ) )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
Assert . assertFalse ( "Management operation " + op . asString ( ) + " succeeded: " + response . toString ( ) , "success" . equals ( response . get ( "outcome" ) . asString ( ) ) )
Assert . assertEquals ( expectedValues , RheemCollections . asSet ( outputValues ) )
assertEquals ( constraint . getValue ( ) , 1 )
assertEquals ( expected , b )
assertNotEquals ( s1 , s2 )
assertThat ( reader , is ( notNullValue ( ) ) )
assertSame ( MockChooser1 . class , delegate . getClass ( ) )
assertEquals ( formatedValue , "12345-678" )
assertTrue ( FileUtil . findPatternInFile ( new File ( resultFilename ) , "Avoid empty if" ) )
assertTrue ( executor . shouldExecute ( action , javax . faces . event . PhaseId . RESTORE_VIEW , false ) )
assertEquals ( "File to string example" , fileContents )
assertEquals ( "HOMER" , exp . evaluate ( person ) )
assertOut ( "b = b + 1" )
Assert . assertEquals ( "PersonDbName" , result )
assertEquals ( - 1 , in . peekByte ( ) )
assertNull ( result )
Assert . assertSame ( Granularity . MIN_240 , gran )
assertThat ( response , containsString ( "81.80.117.237 - 81.80.117.237" ) )
assertNotNull ( result )
assertThat ( givenStories . getPaths ( ) , equalTo ( Arrays . asList ( GIVEN_STORY_PATH1 ) ) )
assertFalse ( isEditable )
assertTrue ( response . contains ( "you" ) )
assertEquals ( "Failed at " + i , reduced . getDouble ( i ) , res , 0.001 )
Assert . assertEquals ( state . IDLE , state )
Assert . isTrue ( getUser . getGroups ( ) . size ( ) == 0 )
assertLinkWithSameUnitsOk ( LinkInfo . UNIT_TYPE . PROTOCOL , units )
assertEquals ( DEFAULT_POPULATION_SIZE + evaluations , algorithm . getEvaluations ( ) )
assertEquals ( "Period of time >= 1 hour" , "1 hours" , DateTimeUtils . millisecondsToDecimalHumanTime ( period ) )
assertEquals ( "V1 Track" , wrapper . getTrack ( ) )
assertEquals ( respAction . getActionID ( ) , "40a436b1-28d1-4de6-b2c3-0a34f478e2c9" )
assertTrue ( "connectSession did not close" , closed . await ( 10 , SECONDS ) )
assertEquals ( "3 kuukautta sitten" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( "2 from now" , p . format ( new Date ( 1000 * 60 * 60 * 2 ) ) )
assertEquals ( "index--" , expr . getParameterValue ( ) )
assertEquals ( "pmTitleCfgTooltipUsesTitleTest.ContainerPm" , container . getPmTitle ( ) )
Assert . assertEquals ( config , result )
assertEquals ( "URI is not built correctly" , uri , newUri )
assertEquals ( r1 , r2 )
assertNotNull ( rs )
assertEquals ( component . getStyleName ( ) , "style1 style2" )
Assert . fail ( )
assertSame ( job , new JsonWriter ( job , file ) . getJob ( ) )
assertEquals ( expectedUrl , url )
Assert . assertEquals ( 1000 , this . sqlgGraph . getTopology ( ) . getPublicSchema ( ) . getVertexLabels ( ) . size ( ) )
assertEquals ( coder . parse ( "(2 * (-3) * (-5)) + 1 / (2 * (-3) * (-5))" ) , coder . parse ( "(s2 * s3 * s5)^2 + 1 / (s2 * s3 * s5)^2" ) )
assertEqualsIgnoreLineEnding ( output , "{ }" )
Assert . assertArrayEquals ( array , ( Object [ ] ) ArrayUtils . cloneArray ( array ) )
assertEquals ( "Value {test" , result )
assertThat ( main . getKubernetesVersion ( ) , nullValue ( ) )
assertEnvelopeEquals ( expected , actual , STRICT )
testKit . assertExceptionOnTxChainCreates ( txChain , DOMTransactionChainClosedException . class )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
assertThat ( actual , notNullValue ( ) )
assertEquals ( "/foo/bar/baz" , output )
Assert . assertTrue ( conceptService . hasAnyConceptAttribute ( conceptAttributeType ) )
assertFalse ( selector . evaluate ( source ) )
assertFalse ( "Created MulticastSocket" , context . datagramSocket instanceof MulticastSocket )
Assert . assertEquals ( "lalala" , value )
assertCard ( expectedCard , "http://magiccards.info/m14/en/230.html" , expectedCard . getRarity ( ) . toDisplayName ( ) , expectedCard . getName ( ) )
assertEquals ( 1 , request . getOauthParameters ( ) . size ( ) )
assertEquals ( "SELECT\n" + "c.id, c.name, c.tags, c.category, c.description, \n" + "c.division, c.experience_level as \"experienceLevel\", \n" + "c.locations, c.type, c.parent_id as \"parentId\", \n" + "g.latitude as \"latitude\", g.longitude as \"longitude\"\n" + "FROM campaign c\n" + "LEFT OUTER JOIN \n" + "	(SELECT DISTINCT cg.campaign, geo.latitude, geo.longitude from campaign_geo cg\n" + "	INNER JOIN geo geo on geo.id = cg.geo \n" + "	WHERE geo.latitude IS NOT NULL AND geo.longitude IS NOT NULL AND cg.createts < now() -- {}\n" + "	) g on g.campaign = c.id\n" + "ORDER BY c.createts ASC, c.id, g.latitude, g.longitude\n" + "LIMIT 100 -- {}\n" + "OFFSET 1 -- {}" , actual )
Assert . fail ( "Should not be able to generate a negative length String" )
context . assertIsSatisfied ( )
assertNull ( retry )
Assert . assertTrue ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredVersion ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertNull ( job )
Assert . assertNotNull ( evt )
assertEquals ( expResult , result )
assertEquals ( a1 , a2 )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS_UNSCALED )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { PATH , FORMAT , "group_repo" } , null ) , is ( true ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
mockery . assertIsSatisfied ( )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertOut ( "a.removeAt(2)" )
Assert . assertNull ( foundPid )
assertEquals ( asList ( Segment . SIZE , Segment . SIZE , Segment . SIZE , 1 , Segment . SIZE , Segment . SIZE , Segment . SIZE , 1 ) , segmentSizes )
assertEquals ( "theSubStart" , hpi . getStartActivityId ( ) )
assertDocument ( session . getSessionFactory ( ) , "User" , "{ '_id' : '" + user . getId ( ) + "' }" , "{ " + "'_id' : '" + user . getId ( ) + "', " + "'addresses' : {" + "'home' : '" + home . getId ( ) + "'," + "'work' : '" + work . getId ( ) + "'" + "}" + "}" )
Assert . assertEquals ( strExpected , strActual )
assertEquals ( calendar . getTime ( ) , toml . getDate ( "a_date" ) )
assertNotNull ( doc )
assertTrue ( exceptionCaught . get ( ) )
Assert . assertFalse ( validator . isValid ( new AnnotatedModel3 ( ) , context ) )
AssertJUnit . assertEquals ( expectedEdge . getEdgeId ( ) , actualEdge . getEdgeId ( ) )
runner . assertValid ( credentialsService )
Assert . assertTrue ( "output does not contain version" , listOutput . contains ( "version" ) && listOutput . contains ( "metadata" ) )
assertTrue ( "Russian alphabet not correctly reverse sorted" , result )
assertNotNull ( result )
assertEquals ( "a b\n" , found )
assertEquals ( FleetSize . INFINITE , vrp . getFleetSize ( ) )
assertEquals ( "12234545hello4512689" , res )
assertEquals ( JobStatus . ENQUEUED , job . status )
assertEquals ( expected , content )
assertEquals ( expResult , result )
assertEquals ( XML_BOOKS , writer . toString ( ) )
assertSame ( "Root is not detected: " + select . getExpression ( ) , resolver . getClassDescriptor ( "Artist" ) , select . getRootDescriptor ( ) )
ITUtils . assertReceivingDifferentRows ( proxy , key , ROW_COUNT + ROW_COUNT )
Assert . assertFalse ( p1 . isSameAs ( p2 ) )
assertRoundtrip ( input )
assertSame ( ctrlC , accelerator )
assertThat ( domain . getServer ( "server1" , "cluster1" ) . getEnvironmentVariables ( ) , containsInAnyOrder ( envVar ( "name1" , "domain" ) , envVar ( "name2" , "cluster" ) , envVar ( "name3" , "cluster" ) , envVar ( "name4" , "server" ) ) )
assertEquals ( before , after )
Assert . assertEquals ( b , a )
assertEquals ( asList ( foo2 ) , results )
assertFormat ( number , String . valueOf ( number ) )
assertThat ( converter . convert ( "10/06/2008" , Date . class , bundle ) , is ( equalTo ( new SimpleDateFormat ( "dd/MM/yyyy" ) . parse ( "10/06/2008" ) ) ) )
Assert . assertThat ( packagePath , CoreMatchers . is ( "/zemian/servlet3example/service" ) )
assertEquals ( map . keySet ( ) . size ( ) , 89 )
assertEquals ( defaults , config . getDefaults ( ) )
assertThat ( actual . compareTo ( other ) , equalTo ( - 1 ) )
Assert . fail ( "Should throw FileNotFoundException" )
assertThat ( uri . getPath ( ) , endsWith ( "testing" ) )
assertNotNull ( result )
Assert . assertEquals ( siteFinder . hasResults ( ) , true )
assertEquals ( "Expected 400 but got " + response . getStatus ( ) , 400 , response . getStatus ( ) )
assertEquals ( "Expected one PLAINTEXT endpoint for localhost" , endpoint , SchemaRegistryConfig . endpointsToBootstrapServers ( endpointsList , SecurityProtocol . PLAINTEXT . toString ( ) ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertThat ( time . with ( PlainTime . COMPONENT . roundedToFullHour ( ) ) , is ( PlainTime . of ( 23 ) ) )
Assert . assertEquals ( "John" , customer )
assertMockEndpointsSatisfied ( )
assertThat ( parsed , is ( equalTo ( original ) ) )
assertNotNull ( modelFamilyDTOs )
Assert . assertEquals ( ERROR_MESSAGE + input + '"' , expected , filter ( input ) )
Assert . assertTrue ( pss . toString ( ) . contains ( Integer . toString ( c . get ( Calendar . YEAR ) ) ) )
assertEquals ( "Did not match expected URIs" , expected , lookups )
assertEquals ( new Short ( ( short ) 3 ) , t )
assertEquals ( "test-rule-set-desc-update" , policyRuleSet . getDescription ( ) )
assertNull ( "Analyzer must be null" , mapper . analyzer )
assertEquals ( - 1 , testedValue )
Assert . assertEquals ( 0 , methodCalled . size ( ) )
assertThat ( channel . isLongString ( ) , equalTo ( true ) )
assertEquals ( HttpStatusCode . OK_200 , response . getStatus ( ) )
assertEquals ( "/parent/dir/a.txt" , path . toString ( ) )
assertTrue ( output . isIsomorphicWith ( source ) )
assertNotNull ( tlsPolicy )
Assert . assertEquals ( "(aa_change_substitution (aa_point_location (aa_char Met) 123) (aa_char Ala))" , aa_change_substitution . toStringTree ( parser ) )
assertEquals ( "" , Property . referenceBranch . getValue ( new Properties ( ) ) )
assertions . hasSize ( 5 )
assertThat ( description . toString ( ) , is ( "a future that completed to a value that is <1>" ) )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "xLabel" , Literal . class ) ) . and ( binds ( "x" , URI . class ) ) )
assertEquals ( "requests size" , 4 , requests . size ( ) )
assertEquals ( MultiLongPropertyState . createLongProperty ( "foo" , Arrays . asList ( 1L , 2L , 3L ) ) , builder . getPropertyState ( ) )
Assert . assertEquals ( json . toString ( ) , fromJson . toString ( ) )
assertEquals ( msg , "The project was cleaned." )
assertEquals ( 3 , stk . size ( ) )
assertEquals ( 1234L , get ( url ) . dateHeader ( "malformed" , 1234L ) )
assertEquals ( profilePage . getUsername ( ) , "test-admin" )
assertCalendarsEquals ( cal , ( Calendar ) orig . clone ( ) )
assertNotNull ( output . list ( ) )
Assert . assertEquals ( "java:/queue1" , result . get ( RESULT ) . asList ( ) . get ( 0 ) . asString ( ) )
assertThat ( "testUnsetPrimaryBitstreamID 0" , b . getPrimaryBitstream ( ) , equalTo ( null ) )
assertThat ( columnCombination . getSetBits ( ) , IsIterableContainingInAnyOrder . containsInAnyOrder ( fixture . getExpectedBits1 ( ) ) )
assertEquals ( next . plusMinutes ( 2 ) , shouldBeInNextHourExecution . get ( ) )
Assert . assertArrayEquals ( new byte [ ] { ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 } , actual )
Assert . assertEquals ( jdkHand , ggHand )
assertEquals ( "test.property1.value" , value . resolve ( ) . asString ( ) )
assertEquals ( AuthenticationTypeParser . SAS , parserSAS . getAuthenticationParser ( ) . getType ( ) )
assertThat ( true , equalTo ( result ) )
assertTrue ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
assertTrue ( worker . getAssignments ( ) . size ( ) == assignments . size ( ) + 1 )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertThat ( props . getProperty ( COLA_REPORT_METHOD ) , is ( GET_METHOD ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertTrue ( instanceConstraintViolationsList . toString ( ) , instanceConstraintViolationsList . size ( ) == 0 )
assertEquals ( 1 , getMessageQueueSize ( ) )
assertTrue ( jiffle . isCompiled ( ) )
assertNull ( CurrentInstance . get ( UI . class ) )
assertThat ( response , not ( containsString ( "Unreferenced" ) ) )
assertFalse ( objJPAEdmProperty . isConsistent ( ) )
Assert . assertEquals ( key1 , actual )
assertNotNull ( factoryBean . createSecureRandom ( ) )
Assert . assertEquals ( 81 , actual , 1e-10 )
assertEquals ( un , unExpected )
assertEquals ( entity . getName ( ) , d1 . getName ( ) )
assertTrue ( ex . getCause ( ) instanceof MutationsRejectedException )
Assert . assertTrue ( validator . invalidMessagesFor ( cpf ) . isEmpty ( ) )
assertEquals ( auth1 . hashCode ( ) , auth2 . hashCode ( ) )
Assert . assertEquals ( "Verify that the default registered container is returned as default" , name , container . getName ( ) )
Assert . assertTrue ( true )
assertMockEndpointsSatisfied ( )
Assert . assertFalse ( o . equals ( obj ) )
assertEquals ( "Unexpected URL address" , con . getURL ( ) . toString ( ) , ei . getAddress ( ) )
Assert . assertEquals ( driver ( ) . manage ( ) . getCookies ( ) . isEmpty ( ) , true )
Assert . assertTrue ( dictionary . createSynset ( POS . ADJECTIVE ) instanceof AdjectiveSynset )
assertIncoming ( rawbuf , "Hello" )
assertEquals ( "0123456789" , aiResponse . getSessionId ( ) )
assertHelpLines ( "Option                                       Description" , "------                                       -----------" , "--date [MM/dd/yy: your basic date pattern]   a date     " , EMPTY )
assertThat ( anyTS . isValid ( SECOND_OF_DAY , null ) , is ( false ) )
assertEqualHash ( byteBuffer , murmur3a )
assertThat ( action . equals ( other ) , is ( true ) )
assertEquals ( "Connection per hosts" , 1 , ioConfig . getMaxConnPerHost ( 100 ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( 2L , actual )
Assert . assertNull ( c . getUser ( ) )
assertTrue ( DataTypeUtils . isCompatibleDataType ( testMap , RecordFieldType . RECORD . getDataType ( ) ) )
Assert . assertNotNull ( options . getSubOptions ( LocalClass . class ) )
assertEquals ( "scheme://host.a.b/path" , uri . toString ( ) )
assertNull ( err )
assertEquals ( 2 , cf1 . childList ( ) . size ( ) )
Assert . assertTrue ( getException )
assertTrue ( Arrays . equals ( Files . readAllBytes ( helloWorldFile . toPath ( ) ) , data ) )
assertions . startsWith ( sequence )
assertEquals ( 0 , ret . size ( ) )
assertEquals ( result , subject . unmodifiableSet ( ) )
assertTrue ( thrown )
assertTrue ( extension . isUpdateContainerAllowed ( CONTAINER_ID , new KieContainerInstanceImpl ( CONTAINER_ID , KieContainerStatus . STARTED , kieContainer ) , new HashMap < > ( ) ) )
assertEquals ( 2 , nodes . size ( ) )
assertThat ( hybrid2 , is ( sameInstance ( hybrid ) ) )
assertFalse ( cache . getResourceTypeManagerCache ( ) . getResourceActivities ( ) . isEmpty ( ) )
Assert . assertEquals ( "12 位蔚��维 伪�� ���伪" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
assertOut ( "RoyaleTest_A.prototype.royaleTest_a = function() {\n  var /** @type {number} */ b = NaN;\n  var /** @type {number} */ c = NaN;\n  var /** @type {number} */ a = 1;\n  //var /** @type {number} */ b = NaN;\n  //var /** @type {number} */ c = NaN;\n}" )
assertEquals ( 1 , interceptAnnotations . size ( ) )
assertEquals ( "fa 3 segles" , t . format ( new Date ( 0 ) ) )
assertEquals ( "esting" , removeSentenceDecorator . toDisplay ( ) )
assertBeanBinding ( camelctx )
assertEquals ( "the notification handler did not receive the " + RESOURCE_REMOVED_NOTIFICATION , 1 , handler . getNotifications ( ) . size ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 10" ) )
assertTrue ( Bean81VBindMap . class . getName ( ) != null )
assertAccessorsCorrect ( multi , "minSelect" , 0 , 1 , 2 )
assertNotNull ( sut . hashCode ( ) )
assertEquals ( config . getJobEntryName ( ) , event . getValue ( ) . getNewValue ( ) )
assertNotNull ( s . iterator ( ) )
assertTrue ( consumerPrefetch . closed )
assertEquals ( "123涓���浜烘��卞����" , deserialize . readUTF ( ) )
assertFalse ( "Expected ComplexSchema hierarchy validation failure did not succeed" , hierarchySchema . validate ( hierarchyEntity ) )
assertThat ( hitCount , is ( 1 ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\\r" } } ) ) )
assertThat ( value . getId ( ) , is ( nullValue ( ) ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEqualsIgnoreWhitespace ( "System.out.println(\"some text\");drools.retract(object);" , KnowledgeHelperFixerTest . fixer . fix ( raw ) )
assertThat ( result , is ( data ) )
assertFalse ( testEntity . isNew ( ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertNotNull ( row )
assertEquals ( expectedPanel , actualPanel )
assertTrue ( "testSnappyBlockCompression error !!!" , out . toByteArray ( ) . length > 0 )
Assert . assertEquals ( ActivitySourceClassBridge . APPLICATION_PREFIX + Long . toString ( 5L ) , sut . objectToString ( activity ) )
Assert . assertEquals ( rawInput , text )
assertEquals ( expected , elements )
Assert . isTrue ( organizations . size ( ) > 0 )
assertEquals ( "the_value" , obj )
assertThat ( destination . getBodyText ( ) , is ( "Navigation Destination from : from annotation" ) )
assertEquals ( helloStringISO88591 , "name=" + value )
assertEquals ( "SRID=2908;POLYGON ((-1.7343137097220955 -0.7184643510054844, -1.7343137097220955 1.2815356489945156, 1.3174946969250207 1.2815356489945156, 1.3174946969250207 -0.7184643510054844, -1.7343137097220955 -0.7184643510054844))" , ClobType . getString ( ( ClobType ) Evaluator . evaluate ( ex ) ) )
assertThat ( result , equalTo ( "setMyField" ) )
assertEquals ( expected , model )
assertEquals ( "setter password expected" , "PaZZwor6" , user . getPassword ( ) )
assertEquals ( "root.someDefaultQueue" , policy . assignAppToQueue ( "root.default" , "user1" ) )
assertOut ( "color=\"16711680\"" )
Assert . assertEquals ( expectedIp , AgentUtils . findIpAddress ( null ) )
assertNullOrEquals ( "remark" , "Nouvelle Triangulation Fran莽aise" , crs . getRemarks ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertNull ( artistInfo )
Assert . assertEquals ( "123\n123\n" , eval ( ) )
assertThat ( view , nullValue ( ) )
assertEquals ( "Wrong size list of messages after close" , 0 , messages . size ( ) )
assertThat ( result , is ( equalTo ( ( List < String > ) of ( "AA" , "BB" ) ) ) )
assertEquals ( expResult , result )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( false ) ) )
assertNotNull ( result )
Assert . assertEquals ( string , table . getFilterVar ( ) )
assertEquals ( error , "UUID passed in cannot be null" )
assertEquals ( 0 , new NQueens ( solution ) . attackedQueens ( ) )
assertTrue ( res instanceof LinkedList )
assertEquals ( ExpressionFactory . notInExp ( "path" , Arrays . asList ( artist1 , artist2 ) ) , exp )
assertEquals ( jsonFromObject , jsonFromString )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
Assert . fail ( "Exception expected" )
assertFalse ( isValid )
assertThat ( windows ( instance , strategy ) , equalTo ( "0.0.0.0" ) )
assertFalse ( result )
assertThat ( built . getAge ( ) , is ( 16 ) )
assertThat ( request . getTimestamp ( ) , equalTo ( now ) )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertThat ( advisor . getAdvice ( ) , instanceOf ( PostTpicAsyncBeanPostProcessor . DelegateTpicToThreadInterceptor . class ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoFatura ( ) . toString ( ) )
assertSame ( ds , _poolDeviceMap . getOrCreateDS ( name , 0 , ip ) )
assertTrue ( "exp(" + arg + ") is " + vFM + " instead of " + vM , Precision . equalsIncludingNaN ( vM , vFM ) )
assertThat ( result , contains ( "Hel" , "lo " , "wor" , "ld" ) )
Assert . assertEquals ( "Hello World!" , result )
assertEquals ( - 1 , resultComparator . compare ( od1 , od2 ) )
assertEquals ( 2 , nuOfType1Vehicles )
assertEquals ( "two undecillion" , actual )
assertThat ( model2 . getMyBytesBlob ( ) , is ( value ) )
assertEquals ( "Block size" , 8 , ecipher . getBlockSize ( ) )
assertEquals ( "Compression/Decompression error" , inputLine , readLine )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( actionsTriggered . get ( ) )
Assert . assertNotNull ( pi )
assertTrue ( tested . onMayClose ( ) )
assertEquals ( CONTENT_TYPE , request . getContentType ( ) )
assertions . containsOnly ( values )
assertEquals ( "headerbodyfooter" , new String ( output ) )
arrays . assertDoesNotContain ( description , actual , null )
assertEquals ( "Unexpected status code in HTTP response." , SC_UNAUTHORIZED , statusCode )
assertFalse ( validatorLoadbalancer . validate ( meta , PUT ) . passedValidation ( ) )
assertEquals ( 20 , result )
Assert . assertThat ( dbObject . get ( "_id" ) , Matchers . is ( ( Object ) "natural key" ) )
assertEquals ( "value2" , entry . getValue ( ) )
assertEquals ( "The quick brown fox jumps over the moon." , sub . replace ( "The ${animal} jumps over the ${target}." ) )
assertNotNull ( WorkerChannel . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( "{\"@context\":\"../../$metadata#ESMixPrimCollComp(32767)/" + "PropertyComp/olingo.odata.test1.CTBase\"," + "\"@metadataEtag\":\"W/\\\"metadataETag\\\"\"," + "\"@type\":\"#olingo.odata.test1.CTBase\"," + "\"AdditionalPropertyString\":null," + "\"PropertyInt16\":111," + "\"PropertyString\":\"TEST A\"}" , resultString )
assertEquals ( "<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>" , doc . body ( ) . html ( ) )
assertTrue ( true )
assertTrue ( "Should get 'lollol'" , test . equals ( value ) )
assertEquals ( expectedOutput , timeConversion . getFormattedTime ( input . split ( ":" ) ) )
assertEquals ( id , container . getIdByIndex ( container . size ( ) - 1 ) )
assertEquals ( expResult , result )
Assert . assertTrue ( newSql . equals ( "SELECT * FROM cpcplan" + suffix + " t1, cpc" + suffix + " t2 WHERE t1.a < t2.a(+)" ) )
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\"$or\":[{\"username\":{\"$ne\":\"\"}}]}" )
assertTrue ( LibUsb . getDeviceList ( this . context , list ) >= 0 )
Assert . assertNotNull ( ex )
assertEquals ( "Null should be compatibilized to false" , false , val )
assertSerializedEquals ( attribute )
assertThat ( result , equalTo ( false ) )
assertEquals ( new ArrayList < > ( ) , tagsList )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertSame ( "wrapping renderer must use list's default on null" , renderer . getDelegateRenderer ( ) , list . getWrappedCellRenderer ( ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . resolveAccessLevel ( "unknown" ) )
assertEquals ( "Projects table should be populated by 3 projects" , 3 , usersPage . usersTableSize ( ) )
assertNull ( subject . postProcess ( "sql" , mock ( Statement . class ) , mock ( ResultSetInternalMethods . class ) , mock ( Connection . class ) , 1 , true , true , null ) )
assertEquals ( "1" , r )
org . junit . Assert . assertEquals ( expected , actual )
assertThat ( version , equalTo ( V_5_2_0 ) )
assertEquals ( PERSON_COUNT , personCount )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEquals ( TEST_MD5 , computedDigest )
Assert . assertEquals ( expected , actual )
context . assertSentrySemanticException ( statement , "create view view1 as select a from " + DB1 + ".tb1" , semanticException )
assertThat ( result , is ( Arrays . asList ( "isIsMyField" , "getIsMyField" , "getMyField" , "isMyField" ) ) )
assertThat ( specification . getUnits ( ) , is ( ONE ) )
Assert . assertEquals ( password , expected , computed , 0.000000000000001 )
assertEquals ( 0 , jobsToSubmit . size ( ) )
assertThat ( studies . size ( ) , is ( 1 ) )
assertThat ( score > 0.0f , is ( true ) )
assertNotNull ( values )
assertEquals ( "SELECT f1, f2 FROM Class" , q . toString ( ) )
assertEqualsWithoutWhiteSpaces ( "cube([10,10,10],center=true);" , cube )
Assert . assertTrue ( index >= serverCount )
assertEquals ( expected , dnsCache . toString ( ) )
assertEquals ( SchemaFromInd2AndSubfield2 . class , field . getDefinition ( ) . getFieldIndexer ( ) . getClass ( ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
assertTrue ( "Checkout method did not return true." , success )
assertThat ( estimator . getCardinality ( ) , is ( 34L ) )
assertEquals ( 1 , array . length )
assertThat ( connection , is ( notNullValue ( ) ) )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 1E-1 )
assertTrue ( lp . equals ( new LineParameters ( new Color ( 51 , 85 , 102 ) , 1.0 , .5 , "" ) ) )
assertThat ( duration1 . equals ( duration2 ) , is ( false ) )
Assert . assertTrue ( "We should get 2 documents filtered for being oversized" , count == 2 )
assertThat ( getWindowHeaderMarginRight ( ) , is ( "37px" ) )
assertThat ( elasticSearchDownloader . createQuery ( ) . toString ( ) , containsString ( "and" ) )
assertThat ( source . getRetryLimit ( ) , is ( i ) )
assertAnnotations ( 1 , Location . class , new TestEntity < > ( 0 , "London" ) )
Assert . assertEquals ( expectedResult , result )
assertHasFooMethod ( dst , dstClass )
assertEquals ( experimentDeleteRequest . getUri ( baseURI ) , expectedURI )
assertEquals ( 10 , count )
assertEquals ( "ExampleArgs{optimize=false}" , exampleArgs . toString ( ) )
assertTrue ( printError ( report ) , report . hasItems ( ) )
assertEquals ( "<add><doc><field name=\"aaa\">val_aaa</field><field name=\"bb\">val_bb</field></doc></add>" , XMLUtils . getSolrAddDocument ( pairs ) )
assertNotNull ( builder )
assertNotNull ( result )
assertNbrOfGerritEventListeners ( PluginImpl . getInstance ( ) . getServer ( PluginImpl . DEFAULT_SERVER_NAME ) )
assertEquals ( i , ringBuffer . getNewestElement ( ) . intValue ( ) )
assertEquals ( storeMock , store )
assertTrue ( serviceWadl . length ( ) > 0 )
Assert . assertNotNull ( list )
assertEquals ( expectedRegister , newRegister )
assertEquals ( expResult , result )
assertEquals ( "one million and one hundred and fifty-one" , actual )
assertNotNull ( getStdOut ( ) )
Assert . assertEquals ( times . getUsageCount ( ) , timesUnmarshalled . getUsageCount ( ) )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertTrue ( ret )
assertEquals ( "Mr. Horatio Test Hornblower" , providerAttribute . getProvider ( ) . getName ( ) )
assertThat ( out . toString ( ) , is ( String . format ( "Wrong move of Queen%s" , sep ) ) )
assertArrayEquals ( new Integer [ ] { 12345 , 54321 , 678768 } , factory . createDummy ( new ClassBindings ( ) ) )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "aClass" ) )
assertEquals ( expectedResult , result )
Assert . assertTrue ( "Capacity did not grow!" , ( ( CapacityBalancingEvictor < Integer > ) evictor ) . getCapacity ( ) > 10 )
assertEquals ( set . size ( ) , n * nThreads )
assertSameCollectionUri ( a , b )
assertEquals ( - 1 , sumIpv4Prefixes ( ipvXPrefixes ) )
assertEquals ( expResult , result )
assertThat ( sentryClient . getConnection ( ) , instanceOf ( NoopConnection . class ) )
assertFalse ( AuthzResolver . authorizedInternal ( session , "test_security_admin" ) )
assertThat ( formatter . format ( PlainDate . of ( 2015 , 11 , 19 ) ) , is ( "Nobyembre" ) )
assertTrue ( "Failed to match with compatible IPv6 address." , match )
Assert . assertNotNull ( "no result row created" , resultRow )
Assert . assertEquals ( new Long ( Long . MAX_VALUE ) , _c . convert ( "9223372036854775807" ) )
assertNotNull ( service . prepare ( query ) . asSingleEntity ( ) )
assertEquals ( "foobar" , s )
assertEquals ( "auth" , intercepted . authority ( ) )
assertThat ( status , is ( 201 ) )
assertFalse ( result )
Assert . assertNotNull ( migrationPlan )
N4CliHelper . assertExpectedOutput ( "express properties: application, request, response, Route, Router, query, static" , out )
assertEquals ( 3 , cheeses . size ( ) )
Assert . assertEquals ( expected , actual , TOl )
assertThat ( kvStore . getSet ( "field" ) , equalTo ( value ) )
assertThat ( MomentInterval . parseISO ( "2012W137T1415Z/W144T1800+02" ) , is ( expected ) )
assertTrue ( entities . size ( ) == 1 )
assertThat ( crownStreetAddress . equalsContent ( rileyStreetAddress ) , is ( false ) )
assertEquals ( "Two entries should be merged into one" , 1 , changes . size ( ) )
assertFalse ( RangeDefinition . isDocSpecific ( shardRange ) )
assertThat ( createSut ( ) . getLastAvailableConfigXml ( name ) . getFile ( ) . getPath ( ) , TUtils . pathEndsWith ( expectedSuffix ) )
assertBeanValidation ( json , "query.metric[0].aggregators[0].m_divisor may not be zero" )
assertThat ( set . size ( ) , is ( 0 ) )
assertTrue ( set . isEmpty ( ) )
assertNotNull ( document )
Assert . assertNull ( session , "No session should have been created when proxy set is empty" )
Assert . assertEquals ( expected , actual )
assertEquals ( s , r . toString ( ) )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertTrue ( Arrays . toString ( imposter . getStackTrace ( ) ) , Arrays . equals ( original . getStackTrace ( ) , imposter . getStackTrace ( ) ) )
assertEquals ( actual , expected , "Wrong substitution" )
Assert . assertEquals ( 1 , statistics . size ( ) )
assertNull ( customPanelDef . getParent ( ) )
assertions . isNotEmpty ( )
assertEquals ( "Response HTTP status code should be 200 (OK)" , clientResponse . getStatus ( ) , 200 )
assertTrue ( CollectionUtils . diff ( correctResults , results ) . isEmpty ( ) )
Assert . assertEquals ( "G9JYBOMPUXHYHKSNRNMMSSZCSHOFYOYNZRSZMAAYWDYEIMVVOGKPJBVBM9TDPULSFUNMTVXRKFIDOHUXXVYDLFSZYZTWQYTE9SPYYWYTXJYQ9IFGYOLZXWZBKWZN9QOOTBQMWMUBLEWUEEASRHRTNIQWJQNDWRYLCA" , hash )
assertEquals ( "over 3 weken" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertSame ( shouldFind , selection . multiSelect ( By . id ( "test" ) ) )
XMLAssert . assertXMLEqual ( "Invalid content received" , content , result . toString ( ) )
assertEquals ( par . getContent ( ) , "" )
assertNull ( "Check if the resource has been deleted" , searchName )
assertEquals ( resId , cache . getResId ( orgName , pkgName , resName ) )
assertThat ( value , isOneOf ( "55" , "44" , "45" , "54" ) )
assertEquals ( 1 , dao . findByIcd9 ( "250" ) . size ( ) )
assertThat ( bufferedEvents . size ( ) , equalTo ( 0 ) )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( "error message not equal" , customErrMsg , message )
assertEquals ( DummyModel . where ( new Object [ ] { "column1" , "test123" , "column2" , "test125" } ) , Arrays . asList ( model ) )
assertEquals ( actual1 , actual2 )
assertArrayEquals ( plaintext , result )
assertSeen ( visible )
assertNotEquals ( r1 , "errado" )
Assert . assertEquals ( clickMe . getText ( ) , buttonText )
assertEquals ( futurDocs . get ( ) . getResults ( ) . size ( ) , 2 )
assertEquals ( keyExpected , keyBuilt )
testRunner . assertAllFlowFilesTransferred ( EncodeContent . REL_FAILURE , 1 )
assertSame ( "control" , t . get ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( postResponse . getStatus ( ) , is ( 400 ) )
assertTrue ( checker . isFormat ( stream ) )
assertThat ( underTest . createToken ( principalCollection ) , is ( equalTo ( FORMAT + "." + TOKEN ) ) )
assertThat ( description . toString ( ) , is ( "a future that completed to a value that is <1>" ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . TEXT_PLAIN ) . get ( ) . getStatus ( ) )
Assert . isTrue ( grade . getEmployments ( ) . size ( ) > 0 )
assertSame ( uriInfo , contextParameterResolver . resolve ( parameter , applicationContext ) )
assertEquals ( 0.0 , rmsd , 0.0001 )
assertTrue ( Modifier . isPrivate ( c . getModifiers ( ) ) )
assertTrue ( toolSpec . getOutstreamIds ( ) . size ( ) == 1 )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == 0 )
assertThat ( matcher . matches ( mockResponse ) , is ( true ) )
assertEquals ( "d 42\n" , found )
assertThat ( count , is ( 6 ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertFalse ( LogicalClassifierDataGetter . getOpenflowPort ( FIRST_SF_NEUTRON_PORT ) . isPresent ( ) )
assertFalse ( HystrixPlugins . getInstance ( ) . getMetricsPublisher ( ) instanceof HystrixCodaHaleMetricsPublisher )
assertEquals ( "1 value1 value2\n\n" , drl )
assertNull ( entry )
assertFalse ( new NopolExample ( ) . isEmpty ( list ) )
assertEquals ( "<a href=\"" + BASE_URL + "#dest1?a=b&amp;c=d\">Link&amp;1</a>" + "<a href=\"http://xyz/abc?x=y&amp;z=w\">Link&amp;2</a>" , result )
Assert . assertNotNull ( json . getString ( "uid" ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertEquals ( "aTestString" , classUnderTest . getImportedFromTable ( ) )
assertCompletions ( "color:\n" + "  next:<*>" , "color:\n" + "  next: blue<*>" , "color:\n" + "  next: green<*>" , "color:\n" + "  next: red<*>" )
assertThatCellReaderWasCalled ( )
assertEquals ( "璁＄����璇�" , 31 , rs )
assertArrayEquals ( new String [ ] { "DOB_20010101" , "DOB_20020202" , "DOB_NONE" } , matches ( query , Tag . PatientID ) )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertEquals ( "/a/" , xmldbURI . resolveContext ( uri ) . toString ( ) )
assertEquals ( "Failed on i = " + i , x , ret )
Assert . assertNotNull ( out . getD13 ( ) )
Assert . assertFalse ( "Get Profile  returned no results" , json . isEmpty ( ) )
Assert . assertNotSame ( encryptedStringShouldNotBe , encryptedStringActual )
assertEquals ( "啶�啶�啷�" , t . format ( new Date ( 0 ) ) )
assertEquals ( expected , service . getTimestampInSeconds ( ) )
Assert . assertTrue ( response . getStatus ( ) == OK . getStatusCode ( ) )
assertEquals ( expected , actual )
assertFalse ( "empty data source contains records" , it . hasNext ( ) )
assertThat ( serializeWith ( dateTime , formatter ) , containsString ( dateTime . format ( formatter ) ) )
assertEquals ( "null" , s . serialize ( ( HttpPartSchema ) null , null ) )
assertEquals ( "DRIVER" , cli . driver )
Assert . assertEquals ( 2 , ret )
assertEqualsIgnoreLineEnding ( xmlString , "<?xml version='1.1' encoding='UTF-8'?><boolean>true</boolean>" )
assertFalse ( "Configuration is empty" , plist . isEmpty ( ) )
assertEquals ( null , mockPrefHandler . getPref ( PREF_KEY_LAST_TRACE_DIR ) )
assertThat ( children . isEmpty ( ) , is ( true ) )
assertThat ( result . isTemporary ( ) , is ( false ) )
assertNotNull ( result )
assertTrue ( isCorrectEnqLinkRequest )
assertEquals ( "master" , payload . getBranch ( ) )
runner . assertValid ( )
Assert . fail ( "exception expected" )
assertSelected ( get ( 0 ) )
assertEquals ( 1 , aNumber . compareTo ( bNumber ) )
assertEquals ( clip ( value ) , ra . get ( ) . get ( ) )
assertNull ( g1 )
assertNotNull ( instance . getPreferences ( ) )
assertEquals ( "a" , example . getContent ( ) )
assertEquals ( Result . FAIL , name . apply ( item , - 1 ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( "Six rules are set" , 6 , ss . size ( ) )
assertTrue ( "SecurityContext should say authenticated caller has access to /protectedServlet, but says has not." , response . contains ( "has access to /protectedServlet: false" ) )
assertNull ( "Required profiles is not null" , new KnopflerfishPlatformBuilderF200T233 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertEquals ( NaCl . Sodium . CRYPTO_SECRETBOX_XSALSA20POLY1305_KEYBYTES , key . length )
assertEquals ( "name1" , song . getName ( ) )
assertThat ( result , is ( Boolean . valueOf ( true ) ) )
assertThat ( encryptor . checkPassword ( null , encryptedPassword ) , is ( false ) )
assertTrue ( "Failed to fill Object array correctly" , d [ i ] == val )
assertEquals ( Locale . JAPANESE , metadata . getLanguage ( ) )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "400 acres" , 400 , "acre" , 400 * Area . ACRE_TO_M2 , "m^2" , "area" ) )
assertEquals ( true , results . contains ( "[UPDATE], Return=OK, 1" ) )
assertDepth ( "add" , callTree , expectResult )
assertArrayEquals ( expected , actual , DELTA )
Assert . assertNotNull ( databaseConfiguration )
assertEquals ( "nl:surfnet:diensten:hallo" , groupId )
assertEquals ( black , bs . getBlackSheep ( ) )
assertEquals ( "port=8080" , config . getString ( DEFAULT_CONTAINER , "expression" ) )
assertThat ( response . hasBody ( ) , is ( true ) )
assertCancelActionMessage ( getFirstAssignedActionId ( distributionSetAssignmentResult ) , controllerId )
assertThat ( r . hasUnrestrictedChild ( LIST , FsPath . create ( "/foo/baz" ) ) , is ( equalTo ( false ) ) )
assertEquals ( Unpooled . buffer ( ) , actual )
assertEquals ( dt . toEpochSecond ( ) , 0 )
assertFalse ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , NOT_STARTING_BYTE ) )
assertSqlCanBeParsedAndDeparsed ( statement )
Assert . assertEquals ( "Hello NAR World!" , app . sayHello ( ) )
assertEquals ( expResult , result )
assertEquals ( 1 , dataset . getDefaultModel ( ) . size ( ) )
assertEquals ( expected , cacheManager . getDefaultSizeMB ( ) , 1e-9 )
assertEquals ( "$metadata#ESAllPrim(*)" , ContextURLBuilder . create ( contextURL ) . toASCIIString ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( actualEnums , is ( expectedEnums ) )
assertThat ( deserialized , is ( nullValue ( ) ) )
assertEquals ( 1 , deployments . size ( ) )
assertEquals ( doc1 , io . getDocumentById ( id1 ) )
assertEquals ( LocalDate . now ( zone ) . getDayOfMonth ( ) , test . getValue ( ) )
assertEquals ( expected [ i ] [ y ] [ x ] , ra . get ( ) . get ( ) , 0 )
assertMessageEventDefinition ( "end" , "message" )
Assert . assertEquals ( "a" , KeyValueFormatter . formatCommaSeparatedList ( list ) )
assertEquals ( expected , actual )
assertNull ( result )
assertFalse ( ic . imageEqualToReference ( screenshotImage , referenceImage , "google1.png" , 0 ) )
mini . assertReadFile ( mini . getLocalFs ( ) , fileSpec , "1;one" , "2;two" )
Assert . assertTrue ( billingService instanceof BillingCalculation )
assertEquals ( expected , actual )
assertArgumentParserException ( args )
assertTrue ( true )
assertEquals ( tStringMap , readValue )
assertOut ( "var a:String = unescape('%25')" )
assertThat ( ( String ) FieldAccessUtil . getFieldVal ( interceptor , "profile" ) , is ( TraceeFilterConfiguration . Profile . DEFAULT ) )
assertTrue ( page . asXml ( ) . contains ( "Welcome" ) )
assertEquals ( 1 , groupsToBeProxied . size ( ) )
assertEquals ( y , result , 0.01 )
assertNull ( res )
assertTrue ( primaryType . getDefinition ( ) . isProtected ( ) )
assertThat ( isTransactionRelated , is ( false ) )
assertFalse ( subject . isReturningReferencedObjects ( ) )
assertTrue ( ( Boolean ) result )
assertThat ( ClockInterval . parseISO ( "12:20/24:00:00,000" ) , is ( interval ) )
assertEquals ( "public static void main(String[] args) {}" , actualContent )
assertThat ( injector . getInstance ( Key . get ( TestConfiguration . class ) ) , is ( expectedConfiguration ) )
assertEquals ( "Hello ^^ John" , ResponseBodyInterpolator . interpolate ( "Hello ^^ :name" , req ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( xml . matches ( "(?i)<\\?xml.*?version=\"1.1\".*?\\?>.*" ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
result . assertErrorFreeLog ( )
assertThat ( actual , is ( equalTo ( "/ab/CD/ef/GH" ) ) )
Assert . assertTrue ( "Failure expected true" , r . getLeft ( ) )
assertThat ( target , notNullValue ( ) )
assertSame ( job , new JsonWriter ( job , file ) . getJob ( ) )
assertEquals ( 0 , result . getTotalHits ( ) )
assertThat ( CollectionUtil . join ( list , ", " ) , is ( "\"Aaa\", \"Bbb\", \"Ccc\"" ) )
assertFailureValue ( "differs at index" , "[0][0]" )
assertEquals ( "endLoc" , v . getEndLocation ( ) . getId ( ) )
Assert . assertEquals ( "Hallo 'Test'" , I18N . tr ( "helloQuotesParam" , "Test" ) )
assertEquals ( "[\"one\",\"two\",\"three\",\"one\",\"two\",\"three\"]" , returnResult . get ( RETURN_RESULT ) )
assertEquals ( "one -> two [style=dotted];" , dotfileWriter . formatNodeCollection ( nodeCollection , ImmutableMap . of ( "style" , "dotted" ) ) )
assertEquals ( expecteds , actuals )
assertEquals ( "logging" , decorator . name ( ) )
assertThat ( subject . toByteArray ( ) , is ( buffer ) )
assertEquals ( "TEST." , result )
assertLife ( playerB , 15 )
Assert . assertThat ( control , is ( - 7 ) )
assertNotNull ( connection )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertEquals ( 0 , searchResultsConverter . getNoOfExecutions ( ) )
assertNull ( libSource )
assertEquals ( "region" , request . getVisitorRegion ( ) )
assertEquals ( "+0500" , actual )
assertTrue ( fs . deleteOnExit ( path ) )
assertEquals ( "unsortable column must be unsorted" , SortOrder . UNSORTED , table . getSortOrder ( identifier ) )
Assert . assertEquals ( new SimpleDateFormat ( "yyyy-MM-dd'T'HH" ) . format ( dt ) , new SimpleDateFormat ( "yyyy-MM-dd'T'HH" ) . format ( dueDate ) )
assertThat ( actual , is ( expected ) )
Assert . assertTrue ( lrsRes . getSuccess ( ) )
Assert . fail ( "Exception should have been thrown" )
assertEquals ( expected , actual )
Assert . assertEquals ( expected , actual )
assertEquals ( "{\"store\":{\"book\":[{\"category\":\"reference\",\"author\":\"Nigel Rees\",\"title\":" + "\"Sayings of the Century\",\"price\":8.95},{\"category\":\"fiction\",\"author\":\"Evelyn Waugh\"," + "\"title\":\"Sword of Honour\",\"price\":12.99}],\"bicycle\":{\"color\":\"red\",\"price\":19.95}}," + "\"arrayTest\":[1,2,3,\"value\"]}" , result . get ( RETURN_RESULT ) )
assertEquals ( "JOHN + SUPERCLASS HOOK" , object . getName ( ) )
arrays . assertStartsWith ( description , actual , sequence )
assertTrue ( result . getBounds ( ) . equals ( nonEmpty . getBounds ( ) ) )
assertSame ( expected , result )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( out . exists ( ) , is ( false ) )
assertNode ( "|" , state , false )
assertEquals ( Arrays . asList ( "a" , "b" ) , results )
assertEquals ( 9_000_000 , version )
assertNull ( m )
assertEquals ( testName , song . getName ( ) )
assertEquals ( TestClass . class . getName ( ) , service . logger . getName ( ) )
assertTrue ( sut . execute ( request ) )
assertTrue ( ChefDslHelper . hasChefAttributeInString ( rubyStringWithAttribute ) )
assertEquals ( response . getStateToken ( ) , getSiteDefaultContent ( ) . getStateToken ( ) )
Assert . assertEquals ( true , retval )
assertTrue ( isPostListSortedByDate ( postsPage . getContent ( ) , false ) )
assertEquals ( expectedPolicy , builtPolicy )
assertTrue ( true )
assertEquals ( request . toHexString ( ) , "00000000905b8d8804ce08479cb8f060824483140f000000000000000f000000520065006d006f007400650072006500670069007300740072007900000000003f000f00" )
Assert . assertEquals ( ip . getIp ( ) , rip )
assertNotNull ( entity . getId ( ) )
assertTrue ( pointContainerAccessor . declaresField ( field ) )
assertEquals ( IllegalArgumentException . class , e . getClass ( ) )
assertFalse ( permissionService . hasPermission ( 0 , null , "" ) )
Assert . assertEquals ( "API ID" , span . getApiId ( ) , API_ID )
assertEquals ( 2 , bs . capacity ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertTrue ( "past selection must be cleared" , model . isSelectionEmpty ( ) )
assertEquals ( empty , emptySerializable . asOptional ( ) )
assertEquals ( day , day2 )
Assert . assertEquals ( "" , json , an . toJSON ( ) )
assertTrue ( connection ( ) . exists ( RDFS . Resource , RDF . type , ex2 , null , false ) )
assertThat ( result , is ( sameInstance ( indexes ) ) )
Assert . assertEquals ( IsolationLevels . SERIALIZABLE , connection . getIsolationLevel ( ) )
assertSame ( first , f . apply ( first , second ) )
assertEquals ( "sun_angle" , variableName )
Assert . assertTrue ( out . verifyDigest ( digestPos , handshakeBytes , RTMPHandshake . GENUINE_FP_KEY , 30 ) )
files . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( "[" + OPERATION + "]" , EndpointUtil . decodeEndpointOperation ( result , false ) )
assertTrue ( validator . isValid ( "xxx-7992739871-x" , null ) )
assertEquals ( "Wrong list property" , list , conf . getProperty ( prop ) )
assertEquals ( "0 0 12 ? * 6 *" , result )
assertEquals ( functionImportList . size ( ) , 0 )
assertTrue ( new CronExpression ( "0 0 0 1 5 *" ) . nextTimeAfter ( after ) . equals ( expected ) )
assertThat ( LoggerFactory . getILoggerFactory ( ) , is ( expected ) )
Assert . assertFalse ( s . isEnabled ( ) )
assertArrayEquals ( result , authed )
assertEquals ( "contains condition serialization is wrong" , expected , actual )
assertEquals ( "a b\n" , found )
assertTrue ( new File ( "target/export12" ) . exists ( ) )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
assertThat ( accessor . get ( testInstance ) , is ( testInstance . testString2 ) )
assertThat ( results , is ( new String [ ] { "\"Hello, world!!\"" } ) )
assertNotNull ( metadata )
assertThat ( read ( format , written ) , contains ( 1.25f ) )
assertEquals ( 0 , ByteBufferUtil . compare ( sink . getByteBuffer ( ) , written ) )
assertEquals ( 4l , response . longValue ( ) )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( ( a , b ) -> x + a + b ) . intValue ( ) )
assertEquals ( expected , actual )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( goodTasks [ i ] , md . getTaskId ( ) )
Assert . assertEquals ( 1 , integer . get ( ) )
assertThat ( cut . getFields ( ) , contains ( field1 , field2 ) )
assertEquals ( "case when (cat.toes = ?1) then (cat.id * ?1) when (cat.toes = ?2) then (cat.id * ?2) else ?3 end" , serializer . toString ( ) )
context . assertEquals ( patternStr , pH . toString ( ) )
assertEquals ( 0 , content . refCnt ( ) )
assertEquals ( asList ( trace ( mdcValues , marker , message , arg1 , arg2 ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "The value is not correct." , date , value )
assertEquals ( times , result )
assertEquals ( 0 , configList . getBuildConfigurations ( ) . size ( ) )
assertEquals ( "Grants on " + change . getObjectName ( ) + " have been given to " + change . getRecipientList ( ) , change . getConfirmationMessage ( ) )
Assert . assertEquals ( expectedJsonTree , actualJsonTree )
assertEquals ( "TEXT" , sb . toString ( ) )
Assert . assertEquals ( expectedResult , result . getValue ( ) )
AssertEx . assertDoubleEquals ( 10.5 , dist )
assertGenerators ( result , AnInt . class , ZilchGenerator . class )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( "10" , t . toString ( ) )
assertEquals ( 2 , context . getTableCount ( ) )
assertTrue ( ! ex2 . clear ( ) . next ( true ) )
assertTrue ( allStateCapitals . length == 50 )
assertTrue ( anno instanceof Annotation )
assertEquals ( mockedListener , actualListener )
assertEquals ( "null" , sb . toString ( ) )
assertEquals ( true , result )
assertEquals ( "fooValue" , entity . getValue ( ) )
assertEquals ( 0 , result )
assertEquals ( expResult , result )
assertSerializeDeserialize ( ctx )
context . assertEquals ( 1 , types . size ( ) )
assertDecimalEquals ( dup . getValue ( 1 ) , 0 )
assertTrue ( underTest . subDoc ( "studentSectionAssociation" ) . insert ( Arrays . asList ( ssa1 , ssa2 , ssa3 ) ) )
assertNull ( rpcException . getErrorCode ( ) )
assertThat ( ClockInterval . parseISO ( "12:20/24:00:00,000" ) , is ( interval ) )
assertEquals ( d_oa . getDescription ( ) , d_dm . getValue ( ) )
assertFalse ( pgql . parse ( query ) . isQueryValid ( ) )
assertEquals ( "Expected 1 result!" , 1 , n )
assertContains ( e . getMessage ( ) , "'name'" )
assertEquals ( "100" , event . getEventValue ( ) )
Assert . assertEquals ( HiveRunnerConfig . TIMEOUT_RETRIES_DEFAULT , config . getTimeoutRetries ( ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPrivileges ( set ( "job1_2_operator" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertTrue ( "named child not found when added" , _scs . getItrChildren ( ) . contains ( METRIC_NAME ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertNull ( copy . getParameter ( "name2" , null ) )
assertEquals ( expResult , result )
assertNull ( entity . getError ( ) )
assertTrue ( ic . imageEqualToReference ( screenshotImage , referenceImage , "google1.png" , 0 ) )
Assert . assertEquals ( String . format ( "some %s" , this . html ( bb , "10" , "\ntext\n\nhere" ) ) , formatter . format ( "some [size=10]\ntext\n\nhere[/size]" , defaultOptions ( ) ) )
Assert . assertEquals ( "com.foo.bar.baz/.ActivityName" , resolved )
assertTrue ( requestResult )
Assert . assertEquals ( "should be second string" , string2 , actual )
assertTrue ( filter . shouldInclude ( source , "some.property" ) )
Assert . assertEquals ( config . getTheClazz ( ) , FooSuperList . class )
assertEquals ( "'" + quoted + "'" , Scanners . SINGLE_QUOTE_STRING . parse ( "'" + quoted + "'" ) )
Assertions . as ( assertFactory )
assertTrue ( row . equals ( otherRow ) )
iterables . assertContainsAnyOf ( someInfo ( ) , actual , array ( "Luke" ) )
assertEquals ( "_cat/segments?h=index%2Cshard%2Cprirep%2Csegment%2Cdocs.count" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertThat ( lines , hasSize ( 1 ) )
assertTrue ( SolutionListUtils . solutionListsAreEquals ( list1 , list2 ) )
assertEquals ( "Result" , dt . getDatatypeURI ( ) , RDFS . xsdfloat )
assertEquals ( "%level - %m%n" , layout . getConversionPattern ( ) )
assertTrue ( analysis . isTestPassing ( ) )
assertEquals ( "recoveredResult must be Success(42)" , recoveredResult , new Try . Success < > ( 42 ) )
assertThat ( gpx . trk , empty ( ) )
assertEquals ( 1 , drugs . size ( ) )
assertThat ( result , contains ( likeTriple ( uri ( "http://example.org/items/Bill?blah" ) , ANY , ANY ) ) )
assertTrue ( true )
assertSame ( Code . ERROR , res . code ( ) )
assertLine ( "great lakes brewery\ndog " , b , false )
assertTrue ( schemaRegistry . getHostnameVerifier ( ) . verify ( "" , null ) )
assertEquals ( msg , myMessage )
assertEquals ( RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "BasicDeclarations.rdf" ) ) , model )
assertNotNull ( cert )
assertEquals ( expecting , found )
assertSame ( MockChooser1 . class , delegate . getClass ( ) )
assertThat ( new JcrValue ( factories , cache , PropertyType . DATE , date ) . getDouble ( ) , is ( ( double ) date . getTime ( ) ) )
Assert . assertEquals ( "START TRANSACTION BEGIN;" , text )
assertEquals ( expected , statement . toString ( ) )
assertEquals ( "{\"thetag\":{\"group\":\"b\",\"name\":\"a\"}}" , s )
assertEquals ( "MyModel::de.crowdcode.test.Company" , result )
assertThat ( generated , is ( "{ {}\nUNION { ?X <eh:/P> ?v1}UNION { ?X <eh:/Q> ?v2\nOPTIONAL { ?v2 <eh:/R> ?v1 . }}}" ) )
Assert . assertTrue ( isOk )
assertEquals ( path , "/module/motechmodule/addfacility" )
assertEquals ( "tset a si siht" , out )
assertThat ( beanClass , typeCompatibleWith ( BundleInjectionProviderHelperDecorator . class ) )
assertTrue ( true )
assertThat ( lines . size ( ) , is ( 4 ) )
assertNotNull ( method )
assertEquals ( expected , passwordEncoder . encode ( plaintext ) )
assertEquals ( 1.0 , response , 0.0 )
Assert . assertEquals ( ServerParse . SAVEPOINT , sqlType )
assertEquals ( serviceName , objectInputStream . readObject ( ) )
assertEquals ( thing , newThing )
assertTrue ( builder . toString ( ) . length ( ) == 1 )
Assert . assertEquals ( "input and output must match" , bodies [ 0 ] , result )
assertSame ( content , response )
assertNotNull ( testVehicle )
Assert . assertEquals ( 2 , s . getPriority ( ) )
assertEquals ( 0 , count ( graph . vertices ( ) ) )
assertEquals ( "7::" , result )
assertNotNull ( result )
assertEquals ( Bytes . asList ( new byte [ ] { 3 } ) , bytes ( producer . getValue ( ) . next ( ) ) )
assertEquals ( expectatedMessage . trim ( ) , e . getMessage ( ) . trim ( ) )
assertEquals ( true , context . isResult ( ) )
assertFalse ( filter . matches ( record ) )
assertEquals ( "2" , getValue ( ) )
assertEquals ( 5. , Solutions . bestOf ( solutions ) . getCost ( ) , 0.01 )
assertEquals ( null , result )
assertTrue ( "Sasl authentication factory should be created" , ops . exists ( TEST_AUTHENTICATION_FACTORY_ADDRESS ) )
assertEquals ( "first" . compareTo ( "second" ) , id1 . compareTo ( id2 ) )
assertEquals ( 6 , tokens . size ( ) )
QualityExpectations . newInstance ( ) . receiptSchedule ( receiptSchedule ) . aggregatedExpectation ( ) . copyFrom ( partsExpectations . qualityExpectation ( 0 ) ) . endExpectation ( ) . newQualityExpectation ( ) . copyFrom ( partsExpectations . qualityExpectation ( 0 ) ) . endExpectation ( ) . assertExpected ( huReceiptLineCandidatesBuilder )
assertEquals ( "'" + quoted + "'" , Scanners . SINGLE_QUOTE_STRING . parse ( "'" + quoted + "'" ) )
switchyard . assertModelValid ( )
assertThat ( result , is ( 36 ) )
assertions . containsNull ( )
Assert . assertTrue ( ( byte ) 23 == _c . convert ( "23" ) )
assertEquals ( "<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
Assert . assertEquals ( "Hello! World" , result )
Assert . assertEquals ( json , writer . toString ( ) )
assertEquals ( "Options should be equal to itself" , options , options )
assertTrue ( objAssociation . getConsistentEdmAssociationList ( ) . size ( ) > 0 )
assertEquals ( "myd" , localRuntime . getDataDomain ( ) . getName ( ) )
assertFailureCatalogContains ( MultiForgetBean . class , "multiple annotations.*" + Forget . class . getName ( ) )
Assert . assertNotNull ( "File value is missing" , jsonObject . get ( "file" ) )
Assert . assertEquals ( new URI ( url + "/" + suffix ) , UriUtils . buildNewURI ( new URI ( url ) , suffix ) )
assertThat ( result , is ( true ) )
assertTrue ( check )
assertEquals ( 1 , id . getGroupIds ( ) . size ( ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertArrayEquals ( result , new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 } )
Assert . assertEquals ( "should have found read permissions" , FilePermissionEnum . READ , enumVal )
assertEquals ( "group:artifact:1.0.0:jar:compile" , model . toString ( ) )
assertTrue ( vehiclesContainDodge )
Assert . assertEquals ( "eins zwei\ndrei" , result )
Assert . assertNull ( deployment )
Assert . notNull ( wschu )
Assert . assertEquals ( String . format ( "CHAR(%s)" , i ) , type . getTypeName ( ) )
assertEquals ( DummyLayout . DUMMY , teeOut . toString ( ) )
assertTrue ( validator . validate ( certificateMapping , POST ) . passedValidation ( ) )
Assert . assertFalse ( "The error manager should not have been initialized" , TestErrorManager . INITIALIZED )
assertEquals ( "1388538000000" , partition )
assertEquals ( "<csv-set><csv-record number=\"1\"><name>Erika Mustermann</name><email>e.m@ex.org</email></csv-record><csv-record number=\"2\"><name>Max \"The Man\" Mustermann</name><email>m.m@ex.org</email></csv-record></csv-set>" , result )
assertEquals ( actDate . getTime ( ) , expDate . getTime ( ) )
assertEquals ( 2 , violations . size ( ) )
assertEquals ( URI . create ( expected ) , uri )
assertOut ( "<Button id=\"myBtn\"></Button>" )
assertEquals ( "Hello" , ( ( BizException ) read ) . getMessage ( ) )
Assert . assertEquals ( "hello" , result . hello ( ) )
assertThat ( entityFromElasticSearch , is ( nullValue ( ) ) )
assertThat ( actualAlgorithms , IsIterableContainingInAnyOrder . containsInAnyOrder ( expectedAlgorithm ) )
assertEquals ( null , wadlElementName )
Assert . assertEquals ( largeString . trim ( ) . substring ( 1 , largeString . trim ( ) . length ( ) - 1 ) , result )
assertEquals ( PaymentChannelClientState . State . NEW , channelState . getState ( ) )
assertThat ( cut . apply ( pageObject ) , is ( false ) )
assertEquals ( "updatedName" , list . get ( 0 ) . getName ( ) )
assertTrue ( "yahoo contacts are empty" , contacts . size ( ) > 0 )
assertFalse ( new NopolExample ( ) . isEmpty ( list ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( node . getClass ( ) . getName ( ) . replace ( '$' , '.' ) , is ( "com.example.SimpleFactory.Simple" ) )
assertThat ( service . countByQuery ( ) , is ( 0L ) )
assertEquals ( output , processed )
Assert . assertEquals ( vector , new Vector ( 10 , 10 , 10 ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertNull ( "Conversation was found after being deleted" , checkConversation )
assertEquals ( 37L , nodeId . getId ( ) )
assertEquals ( mockResponse , testResponse )
assertMockEndpointsSatisfied ( )
assertEquals ( 10 , result . getTotalCount ( ) )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( ) )
assertTrue ( violation )
assertEquals ( expResult , result )
assertEquals ( "74657374" , new String ( result ) )
assertEquals ( 3 , types . size ( ) )
assertEquals ( uri1 , uri2 )
assertThat ( g . toSmiles ( ) , is ( "CC=[C@@]=CC" ) )
Assert . assertEquals ( expected , pluginForREST . getElementName ( "MyTest" , false ) )
assertEquals ( deleteReason , hpi . getDeleteReason ( ) )
assertTrue ( logger . isErrorEnabled ( ) )
assertEquals ( false , Deencapsulation . getField ( amqpsConnection , "isOpen" ) )
assertEquals ( "ISA*00*          *00*          *ZZ*SENDERID       *ZZ*RECEIVERID    *030409*0701*U*00401*0000000001*0*T*:^" + "GS*1212*SENDERID*RECEIVERID*0701*000000001*X*00401^" + "ST*835*000000001^" + "BPR*DATA*NOT*VALID*RANDOM*TEXT^" + "TRN*1*0000000000*1999999999^" + "DTM*111*20090915^" + "N1*PR*ALWAYS INSURANCE COMPANY^" + "N7*AROUND THE CORNER^" + "N4*SHINE CITY*GREEN STATE*ZIP^" + "REF*DT*435864864^" + "N1*PE*FI*888888888*P.O.BOX 456*SHINE CITY*GREEN STATE*ZIP*EARTH^" + "LX*1^" + "CLP*PCN123456789**5555.55**CCN987654321^" + "CAS*PR*909099*100.00^" + "NM1*QC*1*PATIENT*TREATED*ONE***34*333333333^" + "DTM*273*20020824^" + "AMT*A1*10.10^" + "AMT*A2*20.20^" + "LX*2^" + "CLP*PCN123456789**4444.44**CCN987654321^" + "CAS*PR*909099*200.00^" + "NM1*QC*1*PATIENT*TREATED*TWO***34*444444444^" + "DTM*273*20020824^" + "AMT*A1*30.30^" + "AMT*A2*40.40^" + "SE*24*000000001^" + "GE*1*000000001^" + "IEA*1*000000001^" , x12 . toString ( ) )
assertFalse ( filter . isActive ( ) )
Assert . assertSame ( testSubject , ts )
assertThat ( ages . size ( ) , greaterThanOrEqualTo ( 3 ) )
assertEquals ( "description" , description )
assertNotNull ( logStream1 )
assertThat ( itemTypeDAO . getTypes ( TENANT_ID , false ) , is ( expectedTypes ) )
assertTrue ( syncOpt . isSyncAvoidanceEnabled ( ) )
assertThat ( read ( testFile ) , is ( equalTo ( "Helles酶y" ) ) )
assertEquals ( resourceActivities . get ( 0 ) . getPriority ( ) , Integer . valueOf ( higherPriority ) . intValue ( ) )
Assert . assertEquals ( UpperBoundClass . class , ReflectionUtils . getObjectPropertyGeneric ( myBean , myBean . getClass ( ) . getDeclaredField ( "t" ) ) )
assertEquals ( expectedResult , result , 0.00001 )
assertEquals ( "Browser size is not correct." , "1500 x 850" , $ ( LabelElement . class ) . get ( 2 ) . getText ( ) )
assertEquals ( HELLOWORLD_URI , uri . toASCIIString ( ) )
assertEquals ( "Should return lastAccessedTime from HttpSession" , 20000000l , session . lastAccessedTime ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 22 , warnings . size ( ) )
assertArrayEquals ( new String [ ] { "1" , "2" , "3" } , remaining )
Assert . assertTrue ( edOrgContextRights . isEmpty ( ) )
Assert . assertTrue ( "Number of entities: " + count , count == 2 )
assertEquals ( VALID , credentials . getStatus ( ) )
bytes . assertLessThan ( description , actual , expected )
assertEquals ( testPlaylist , playlist )
Assert . assertEquals ( expr , "H`ello \nHenrib" , value )
assertUnselectableDatesSelectedWhileHasValidSelection ( model )
Assert . assertTrue ( ValidationUtils . isNullOrEmpty ( person ) )
assertTrue ( actual . contains ( "    <fn>" + NEWLINE + "      <text>John Doe</text>" + NEWLINE + "    </fn>" ) )
Assert . assertNull ( actualValue )
assertEquals ( "aaa" , e . getVersionDirPath ( ) )
assertTrue ( "Our language is present" , vm . getLanguages ( ) . containsKey ( CoverLanguage . MIME_TYPE ) )
assertEquals ( reindex1 , reindex2 )
assertEquals ( "Concrete Action" , value . asIs ( ) )
Assert . assertTrue ( "The re-generated and the read record do not match." , k1 . equals ( k2 ) && v1 . equals ( v2 ) )
assertNotSame ( fixture , copy )
assertEquals ( s , r )
assertEquals ( "1.407" , version )
assertEquals ( file , VirtualDirTgz . getFilenameFromPath ( file ) )
assertEvidence ( evidence , 1 , 1 , 0 , 13 )
assertEquals ( request . getResponseParser ( ) . parse ( null ) , responseParser . parse ( null ) )
assertEquals ( "53544-1234" , seperatedByDash )
assertEquals ( "String-1" , foo )
assertThat ( arguments . resolve ( null , null ) , is ( emptyIterable ( ) ) )
assertTrue ( Misc . containsNulls ( collection ) )
assertEquals ( Arrays . asList ( "1970-01-01" , "1970-01-02" , "1970-01-02" ) , getOutputStrings ( ) )
assertTrue ( method . getReturnType ( ) == Priority . class )
assertions . containsOnly ( values )
rule . assertScenarioEnded ( )
assertEquals ( Integer . valueOf ( 5 ) , reference . getRetries ( ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertThat ( content , is ( nullValue ( ) ) )
assertThat ( getValues ( query ( "mIxeD" , "mntner" ) , "key" ) , contains ( "MiXEd-MNT" ) )
assertTrue ( closed . await ( 5 , SECONDS ) )
Assert . assertNotNull ( req )
assertEquals ( expectedTimestamp , actualTimestamp )
assertEquals ( "{" + value1 + ", " + value2 + "}" , expr . toString ( ) )
assertEquals ( 404 , response . statusCode ( ) )
assertEquals ( 1_000_000 , this . sqlgGraph . traversal ( ) . V ( ) . count ( ) . next ( ) , 0 )
assertEquals ( "something different" , proxy . echoBack ( "whatever" ) )
assertEquals ( i1 , i2 )
assertArrayEquals ( new Object [ 0 ] , e . toList ( ) . toArray ( ) )
assertEquals ( documentoVO , documentoCSV )
assertEquals ( 0 , report . getItems ( ) . size ( ) )
assertTrue ( constraint . fulfilled ( iContext ) )
assertCoordinates ( 0 , TOP_Y - 1 )
Assert . assertEquals ( "Node{edge=FOO, value=null, edges=[]}" , node . toString ( ) )
org . junit . Assert . assertEquals ( expected , actual )
assertEquals ( clazz , request . getTargetClass ( ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
Assert . assertNotNull ( tags )
assertions . isGreaterThan ( new Double ( 10d ) )
assertTrue ( facilitiesManagerEntry . getDirectAdmins ( sess , facility ) . contains ( u ) )
Assert . assertArrayEquals ( bytes , result )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigCaller ( ) ) . isErrorEnabled ( ) )
assertEquals ( "I heart shindig" , spec . getModulePrefs ( ) . getTitle ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( v , fit . getVelocity ( ) , 0.01 )
assertEquals ( expected , actual )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
assertFalse ( list . contains ( null ) )
Assert . assertEquals ( "_ANYFIELD_ == 'email' && ANOTHER_FIELD == 'blah' && filter:includeRegex(FIELDA, '?.*all_.*?')" , JexlStringBuildingVisitor . buildQuery ( result ) )
assertEquals ( result , "2007-12-03 - 10:15:30" )
assertSame ( injectable , injectionTarget . injectable )
assertMockEndpointsSatisfied ( )
assertNull ( loggedInUser )
assertEquals ( asList ( foo4 ) , results )
assertFalse ( v1 . equals ( v2 ) )
assertEquals ( 3 , result . get ( ) . getList ( ) . size ( ) )
assertNotNull ( dialectConverterForEveryoneElse . get ( "brat" ) )
assertThat ( type , is ( Serializable . class ) )
assertTrue ( validator . validate ( certificateMapping , POST ) . passedValidation ( ) )
assertThat ( bar , is ( 0 ) )
assertThat ( hasJsonPath . matchesSafely ( json ) , is ( true ) )
assertEquals ( CompressionType . Tar , compressionType )
assertModelEqualsFile ( DECISION_TABLE_ORIENTATION_DMN )
assertEquals ( IP_10_123_1_54_80 , StringUtils . formatSocket ( socket ) )
Assert . assertEquals ( registry1 , registry2 )
assertFalse ( myQuestion . isInactiveForOneMonth ( ) )
Assert . assertNotNull ( registry )
assertTrue ( multiMap . keySet ( ) . isEmpty ( ) )
assertTrue ( valid )
assertEquals ( expResult , result )
assertEquals ( "test" , param . getValue ( ) )
assertEquals ( "description" , description )
assertEquals ( "" , result )
Assert . assertNotNull ( rb )
assertEquals ( opponent . getMinions ( ) . get ( 0 ) . getSourceCard ( ) . getCardId ( ) , "token_skeletal_enforcer" , "The opponent should have a Skeletal Enforcer after Exampler is summoned" )
assertThat ( changes . isEmpty ( ) , is ( true ) )
assertEquals ( expected , dotfileWriter . formatPCollectionNodeDeclaration ( inputCollection , jobPrototype ) )
assertAxisEquals ( 0.000077777 , 0.000088888 , new double [ ] { 0.000078 , 0.000079 , 0.000080 , 0.000081 , 0.000082 , 0.000083 , 0.000084 , 0.000085 , 0.000086 , 0.000087 , 0.000088 } , new String [ ] { "7.8e-5" , "7.9e-5" , "8.0e-5" , "8.1e-5" , "8.2e-5" , "8.3e-5" , "8.4e-5" , "8.5e-5" , "8.6e-5" , "8.7e-5" , "8.8e-5" } , axis )
assertThatEscalationHasBeenCaught ( procId )
assertEquals ( "1f8ac10f23c5b5bc1167bda84b833e5c057a77d2" , new String ( Hex . encodeHex ( message ) ) )
assertEquals ( 19 , maximum )
assertTrue ( myMessage . toString ( ) . contains ( "52=20120922-11:00:00\00134=22\00149=foo\00156=bar" ) )
assertEquals ( 200 , response . status )
assertThat ( getResponseStatus ( DOMAIN1_CLUSTERS_HREF + "/cluster3" ) , equalTo ( HTTP_NOT_FOUND ) )
Assert . assertEquals ( 2 , events . size ( ) )
assertResultSet ( res )
assertThat ( result , is ( principalCollection ) )
Assert . assertEquals ( operator . getJobExecution ( id ) . getBatchStatus ( ) , BatchStatus . ABANDONED )
assertNotNull ( actualNativeClient )
assertBasicProfileData ( profile )
assertions . containsSequence ( ( short ) 6 , ( short ) 6 , ( short ) 8 , ( short ) 10 , ( short ) 10 )
assertEquals ( expected , actual )
assertThat ( actual , is ( expected ) )
assertThat ( response , is ( "OK" ) )
assertEquals ( expResult , result )
assertEquals ( "Mary loves the cow." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertEquals ( icms10 , icms . getIcms10 ( ) )
assertThat ( unlocked . newLockedObjectWithPrivateConstructor ( ) . getMyField ( ) , equalTo ( "initialized" ) )
assertEquals ( - 99 , result )
assertThat ( context , body . containsKey ( "time" ) , is ( true ) )
assertEquals ( 1 , i )
assertEquals ( expResult , result )
assertTrue ( "Two equal violations should result in equal nodes" , node1 . equalsNode ( node2 ) )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( "/genPath" , path )
assertFalse ( job1 . addDependingJob ( new ControlledJob ( conf ) ) )
assertThat ( results , containsInAnyOrder ( "Hello, world!" ) )
assertThat ( options . getCredentialsProvider ( ) , is ( URI . create ( "jceks://hdfs@localhost:8020/security/credentials.jceks" ) ) )
assertFalse ( annotations . isEmpty ( ) )
assertEquals ( "Hello Michael" , result )
assertThat ( underTest . matches ( context ) , is ( false ) )
assertThat ( hasJsonValue . matchesSafely ( json ) , is ( true ) )
assertTrue ( drl . indexOf ( "enabled true" ) > 0 )
assertTrue ( result )
Assert . assertEquals ( 1 , value )
Assert . assertNotNull ( browser . findElement ( By . id ( "form" ) ) )
assertEquals ( 700 , scorer . scorePosition ( board , context ) )
assertEquals ( "Call count stability check." , "{findIds=1, getItems=1}" , service . callCounter . toString ( ) )
assertEquals ( args , ImmutableList . of ( "-y" , "-v" , "error" , "-i" , "input" , "-vn" , "-an" , "-sn" , "output" ) )
assertThat ( d1 . plus ( CalendarDays . of ( 63 ) ) , is ( d2 ) )
assertQuery ( false , "deep-equal(//a/text(), //b/text())" )
Assert . assertTrue ( Math . abs ( valueMonteCarlo - valueAnalytic ) < 1E-02 )
assertEquals ( Arrays . asList ( "A" , "B" ) , list )
Assert . assertNull ( doc . getLastPublicationDate ( ) )
assertThat ( ct . getQuarters ( TextWidth . ABBREVIATED , OutputContext . FORMAT ) . print ( Quarter . Q1 ) , is ( "Q1" ) )
Assert . assertEquals ( expected , actual )
Assert . assertArrayEquals ( new byte [ ] { 1 , 2 , 3 , 4 } , pixels )
assertEquals ( "b" , r . get ( "name" ) )
assertEquals ( Arrays . asList ( LRL , LR , LRR , R ) , paths )
assertTrue ( CsrfProtectionRefererFilter . isAllowedUri ( uris , "https://54.221.210.62" , isGetRequest ) )
assertThat ( translatedStatement , is ( expectedTranslatedStatement ) )
assertThat ( provider . getSubject ( axiom ) , is ( absent ) )
assertResultSet ( res )
assertThat ( ResourcePermissions . getInstance ( systemPermissionName ) , sameInstance ( resourcePermission ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
assertEquals ( r1 , r2 )
Assert . assertEquals ( "[3, 2, 6, 4, 7, 1, 5]" , result . toString ( ) )
assertNotNull ( transaction )
assertEquals ( source , expected , UploadMojo . computeRepositoryId ( source ) )
assertTrue ( pojo . testService . interrupted . get ( ) )
assertFalse ( g1 . equals ( g2 ) )
Assert . assertEquals ( 3 , books . size ( ) )
Assert . assertEquals ( "should have returned the tag added" , 1 , irodsTagValues . size ( ) )
Assert . fail ( "Expected a handler exception due to incompatible policy" )
objects . assertIsEqualToComparingFieldByFieldRecursively ( someInfo ( ) , actual , other , noFieldComparators ( ) , defaultTypeComparators ( ) )
assertThat ( lines . size ( ) , is ( 4 ) )
Assert . assertFalse ( exists )
assertFalse ( "Handler was run" , ran . get ( ) )
assertThat ( uut . getFeatures ( ) . size ( ) , is ( 2 ) )
assertTrue ( zero . exec ( input ) )
assertTrue ( theSelectedPoolsWere ( poolsWithRackValueR0 ( ) ) )
assertCapturedMessage ( eventMessage ( "sess2" , "/topic" , "eventMessage" ) )
assertThat ( booleanProperty , is ( equalTo ( true ) ) )
Assert . assertEquals ( ServerParse . SELECT , sqlType )
assertTrue ( "Workflow should be in add mode when workflowstate is selected" , actual )
assertFalse ( b . isTrue ( ) )
assertThat ( a . overlaps ( b ) , is ( false ) )
Assert . assertEquals ( PersistenceType . HTTP_COOKIE , dataModelSessionPersistence . getPersistenceType ( ) )
assertEquals ( FileUtils . readLines ( expectedFile ) , FileUtils . readLines ( outputFile ) )
Assert . assertNotNull ( "Funding records not null" , records )
assertNull ( client . getJob ( id ) )
assertEquals ( "hello" , result . toString ( ) )
assertEquals ( Lists . newArrayList ( 1 , 2 , 3 , 4 , 5 ) , listBad )
assertThat ( tokens . matches ( BasicTokenizer . WORD , BasicTokenizer . WORD ) , is ( true ) )
assertEquals ( TEST_STRING , actual )
assertFalse ( b )
assertEquals ( expectedFont [ i ] , foInline . getAttribute ( "font-family" ) )
assertThat ( domainCreatePermissions_post , is ( domainCreatePermissions_pre ) )
Assert . assertTrue ( Precision . equals ( 5.0 , MathArrays . distance ( p1 , p2 ) , 1 ) )
assertEquals ( e . getFreeVars ( ) , "b" )
assertEquals ( HttpStatusCodes . TEMPORARY_REDIRECT . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( newName , action . getName ( ) )
VertxAssert . assertEquals ( "The retrieval of the specified document resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
Assert . assertNotNull ( summaries )
assertEqualTokenFeatureLengths ( "ahgsfdajhgsfd����涓��������������广�ㄥ�笺�般����������" , tokenizer )
assertEquals ( "find by created date not returning any events" , 1 , eventRepos . findByCreatedBetween ( now - 86400000 , now + 86400000 ) . size ( ) )
assertEquals ( e . getFreeVars ( ) , "f" )
TestCase . assertTrue ( attribute . match ( t ) )
Assert . assertTrue ( response . isSuccessful ( ) )
assertOut ( "/**\n * @export\n * @type {*}\n */\nRoyaleTest_A.prototype.a = undefined" )
assertEquals ( - 1 , fixture . readShort ( ) )
assertEquals ( "test" , val )
assertTrue ( BufferedImageComparer . isRGBSimilar ( sourceImage , img ) )
assertArrayEquals ( "a\r\n.\r\n" . getBytes ( "US-ASCII" ) , out . toByteArray ( ) )
Assert . assertEquals ( 18 , i )
assertEquals ( "c\n" , found )
assertThat ( a . getValue ( ) , equalTo ( "A1" ) )
assertThat ( endpoints , containsInAnyOrder ( ENDPOINT_1 , ENDPOINT_2 ) )
assertEquals ( new Long ( 123 ) , result )
assertFalse ( allOf . matches ( "Yoda" ) )
assertEquals ( seconds + ( ( minutes * DateUtils . MILLIS_PER_MINUTE ) + ( hours * DateUtils . MILLIS_PER_HOUR ) + ( ( aCalendar . get ( Calendar . DAY_OF_YEAR ) - 1 ) * DateUtils . MILLIS_PER_DAY ) ) / DateUtils . MILLIS_PER_SECOND , testResult )
assertThat ( resourcePermissions . isEmpty ( ) , is ( true ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( expected , result )
assertNotNull ( car )
assertSame ( toBeThrown , ex . getCause ( ) )
assertEquals ( "Bob123" , query ( ) . from ( cat ) . where ( cat . name . eq ( name ) ) . set ( name , "Bob123" ) . select ( cat . name ) . fetchFirst ( ) )
Assert . assertNotNull ( path )
assertTrue ( applications . size ( ) > 0 )
assertEquals ( IllegalArgumentException . class , e . getClass ( ) )
response . then ( ) . assertThat ( )
Assert . assertEquals ( true , retval )
assertTrue ( "objectClass should still be in the registry after move failure" , getObjectClassRegistry ( ) . contains ( OID ) )
test . assertResponse ( )
assertNotNull ( configuration )
assertEquals ( "1.2." + part , cfBundleShortVersionStringTransformer . transform ( "1.2." + part ) )
assertEquals ( "public enum Company {; String type;\n}\n" , cu . toString ( ) )
assertEquals ( in . readObject ( ) . getClass ( ) , Bean . class )
assertThat ( xoManager , notNullValue ( ) )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-bs" , "127.0.0.1:8000" , "-f" , "-l" , "1" } ) )
assertNotNull ( regions )
assertEquals ( "Type()" , builder . getResult ( ) )
assertEquals ( "A Session with an HTTPSession from the Request should have been created because create parameter " + "was set to true" , httpSession , request . session ( true ) . raw ( ) )
assertEquals ( 1 , rm . getResultsList ( ) . size ( ) )
assertEquals ( "void f(void* target) {\n" + "    ((void (*)(void)) target)();\n" + "}\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertThat ( allUserPermissions , hasItem ( permission ) )
Assert . assertTrue ( bnet . getConditionalDistributionTime0 ( var ) . equalDist ( dynamicNB . getConditionalDistributionTime0 ( var ) , 0.5 ) )
assertEquals ( "www.leveluplunch.com/java/examples/" , uri . toString ( ) )
assertTrue ( features . size ( ) > 0 )
Assert . assertEquals ( getElement ( "PID.8" ) , handler . getSex ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , query2 ) )
assertEquals ( false , result )
assertTrue ( validator . validate ( EntityNames . STUDENT_COHORT_ASSOCIATION , cohortIds ) . equals ( cohortIds ) )
Assert . assertNotNull ( result )
assertEquals ( e1 , e2 )
assertEquals ( null , record . getVersion ( ) )
assertThat ( sampleEntities . size ( ) , is ( equalTo ( 30 ) ) )
assertEquals ( ( double ) 8 , result . getDoubleWrapperValue ( ) , 0.0 )
assertMockEndpointsSatisfied ( 1 , TimeUnit . MINUTES )
assertEquals ( i , 44 )
assertNull ( lookup )
assertEquals ( 0 , rule . match ( langTool . getAnalyzedSentence ( "Walk on the footpath." ) ) . length )
assertNotNull ( connector )
assertEquals ( "<csv-set><csv-record number=\"1\"><firstname>Tom</firstname><lastname>Fennelly</lastname><gender>Male</gender><age>4</age><country>Ireland</country></csv-record><csv-record number=\"2\"><firstname>Mike</firstname><lastname>Fennelly</lastname><gender>Male</gender><age>2</age><country>Ireland</country></csv-record><csv-record number=\"3\"><firstname>Joel</firstname><lastname>Pearson</lastname><gender>Male</gender><age></age><country>Australia</country></csv-record></csv-set>" , result . getResult ( ) )
Assert . assertEquals ( "Incorrect hashCode" , text . hashCode ( ) , message . hashCode ( ) )
assertNotNull ( WebChannel . fetcher ( "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( "Got attributes" , node . getAttributes ( ) . isEmpty ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertResultSet ( res )
Assert . assertTrue ( result )
assertEquals ( 10 , map . size ( ) )
assertEquals ( true , result )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( 91 , highest )
assertFalse ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( 1 , SnowcastSequenceUtils . compareTimestamp ( sequence1 , sequence2 ) )
Assert . assertNotNull ( groupByClause )
assertEquals ( expected , uri )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "connectionNameList" , SINGLE_IBM_MQ_BROKER ) )
assertions . contains ( null , index )
assertThat ( drbdXml . getPossibleChoices ( option ) , is ( new Value [ ] { new StringValue ( ) , new StringValue ( "/usr/lib/drbd/crm-unfence-peer.sh" ) } ) )
assertFalse ( n . exists ( ) )
assertNull ( next )
assertThat ( inSignature , is ( true ) )
Assert . assertArrayEquals ( bytes , result )
assertEquals ( expectedResults . size ( ) , count )
assertNotNull ( result )
assertFalse ( collection . containsAll ( input ) )
assertNotNull ( "created node" , node )
assertNotNull ( EntityProvider . readServiceDocument ( in , "application/atom+xml" ) )
assertEquals ( 200 , response . getStatus ( ) )
assertOut ( "goog.provide('foo.bar.baz.A');\n\n/**\n * @constructor\n */\nfoo.bar.baz.A = function() {\n\tvar self = this;\n\tif (a) {\n\t\tfor (var /** @type {Object} */ i in obj) {\n\t\t\tdoit();\n\t\t}\n\t}\n};" )
assertOut ( "public class A {\n\tpublic function foo1():Object {\n\t\treturn " + "null;\n\t}\n\tpublic final function foo1a():Object {\n\t\treturn " + "null;\n\t}\n\tpublic override function foo1b():Object {\n\t\treturn " + "super.foo1b();\n\t}\n\tprotected function foo2(value:Object):void " + "{\n\t}\n\tprivate function foo3(value:Object):void {\n\t}\n\tfunction " + "foo5(value:Object):void {\n\t}\n\tfoo_bar function foo6(value:Object" + "):void {\n\t}\n\tpublic static function foo7(value:Object):void {\n\t}" + "\n\tfoo_bar static function foo7(value:Object):void {\n\t}\n}" )
assertEquals ( expected , exts )
assertThat ( restored , is ( p ) )
assertTrue ( dao . isExist ( simplePage . getId ( ) ) )
assertEquals ( queue . size ( ) , size )
Assert . assertEquals ( source , dist )
Assert . assertTrue ( count > 5000 )
assertEquals ( "3��臧� ��" , t . format ( new Date ( 0 ) ) )
assertTrue ( StringUtils . isNotBlank ( content ) )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
BaseTest . assertEqualsUnordered ( "find(gpo)" , quads1 , quads2 )
assertThat ( list . get ( 1 ) , is ( 1 ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertRequestWithCookie ( endpoint , HttpMethod . GET , name , value )
assertEquals ( 1 , tagInode . stat ( ) . getGid ( ) )
assertEquals ( 307 , cr . getStatus ( ) )
assertThat ( PlainTimestamp . of ( date , time ) . getMonth ( ) , is ( 4 ) )
assertEquals ( 0 , loaded . size ( ) )
assertEquals ( 2 , motechService . getAllDuplicatePatients ( ) . size ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertNotNull ( pathology . getId ( ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( obj2 , obj1 )
assertTrue ( validator . validate ( EntityNames . STUDENT_SCHOOL_ASSOCIATION , associations ) . isEmpty ( ) )
Assert . assertEquals ( 0 , points . size ( ) )
assertEquals ( "" , result )
assertThat ( now . getZone ( ) , is ( DateTimeZone . UTC ) )
assertEquals ( " --vanilla " , rProcessStartUpOptions . getStartUpOptionsAsCommand ( ) )
assertTrue ( Collections . disjoint ( list , evens ) )
assertEquals ( "como-faz-para-normalizar-uma-string" , slug )
assertThat ( clusterVO , is ( nullValue ( ) ) )
assertEquals ( new Utf8 ( "user" + u ) , test . value . firstName )
Assert . assertEquals ( now , now2 )
assertThat ( command . accept ( state ) , is ( true ) )
assertEquals ( "hi" , new Hello ( "hi" ) . say ( ) )
Assert . assertEquals ( factory . getFilters ( ) . get ( factory . getFilters ( ) . size ( ) - 1 ) , testFilter )
Assert . assertNull ( get )
assertNotNull ( result )
assertEvents ( context , "GreetingService not stopped or StoreReference not restarted." , true )
assertEquals ( expectedActivityCosts + expectedTransportCosts , iCosts , 0.01 )
assertEquals ( TEST_IOS_APP_METADATA , iosApp . getMetadata ( ) )
assertThat ( entityId , is ( equalTo ( ( Object ) 100L ) ) )
assertEquals ( ChannelzProtoUtil . extractChannelData ( stats ) , protoStats )
assertNull ( bundleVersion )
assertEquals ( false , CatalogTreeUtils . isCatalogReferenceNode ( notADapNode ) )
Assert . assertNotNull ( option . toString ( ) )
assertNotNull ( Conversation . reader ( ) . read ( ) )
assertEquals ( ImmutableList . of ( 4 , 6 , 7 , 8 ) , query ( ) . select ( cat . name . length ( ) . as ( length ) ) . from ( cat ) . orderBy ( length . asc ( ) ) . groupBy ( length ) . fetch ( ) )
assertEquals ( 1 , fixture . mark ( ) )
assertEquals ( NOT_DECODED , PASSWORD , object . getPassword ( ) )
assertThat ( result , is ( 7369 ) )
assertEquals ( "<table><tr><td>type</td><td>object</td></tr><tr><td>properties</td><td><table><tr><td>name</td><td><table><tr><td>type</td><td>string</td></tr></table></td></tr><tr><td>birthDate</td><td><table><tr><td>type</td><td>string</td></tr></table></td></tr><tr><td>addresses</td><td><table><tr><td>type</td><td>array</td></tr><tr><td>items</td><td><table><tr><td>type</td><td>object</td></tr><tr><td>properties</td><td><table><tr><td>street</td><td><table><tr><td>type</td><td>string</td></tr></table></td></tr><tr><td>city</td><td><table><tr><td>type</td><td>string</td></tr></table></td></tr><tr><td>state</td><td><table><tr><td>type</td><td>string</td></tr><tr><td>enum</td><td><ul><li>AL</li><li>PA</li><li>NC</li></ul></td></tr></table></td></tr><tr><td>zip</td><td><table><tr><td>type</td><td>integer</td></tr><tr><td>format</td><td>int32</td></tr></table></td></tr><tr><td>isCurrent</td><td><table><tr><td>type</td><td>boolean</td></tr></table></td></tr></table></td></tr></table></td></tr></table></td></tr></table></td></tr></table>" , s . serialize ( Person . class ) )
assertSame ( solrInputDoc , docWritableCaptor . getValue ( ) . getSolrInputDocument ( ) )
assertEquals ( expected , result )
assertEquals ( 41 , p . getAge ( ) )
assertEquals ( "[null,\"\"]" , new String ( baos . toByteArray ( ) ) )
assertEquals ( false , result )
assertEquals ( expected , response . getValue ( ) )
assertEquals ( expectedTransform , actualTransform )
assertThat ( domainPresenceInfo . getServerService ( SERVER_NAME ) , nullValue ( ) )
assertSame ( tileSize , renderingHints . get ( GPF . KEY_TILE_SIZE ) )
assertEquals ( LATIN1_STRING , response . getResponseAsString ( ) )
assertEquals ( 0.032 , gst . getSemiMinorError ( ) , 0.001 )
assertFalse ( "Calendar popup should not be opened for disabled date field" , isElementPresent ( By . className ( "v-datefield-popup" ) ) )
assertEquals ( "[null,\"\"]" , new String ( baos . toByteArray ( ) ) )
Assert . assertEquals ( 10000 , getRowCount ( ) )
Assert . assertTrue ( thriftTransportConfig . isTcpDataSenderCommandAcceptEnable ( ) )
assertThat ( value , is ( valueOfDesc2 ) )
assertEquals ( "aaa" , in . readObject ( ) )
Assert . assertEquals ( true , b )
Assert . assertNotNull ( asientoRecibido )
assertEquals ( "Hello " + name , greeterEJB . sayHello ( name ) )
assertEquals ( 1 , resultComparator . compare ( fd1 , fd2 ) )
assertEquals ( 82 , new AcceptsLambda < Integer > ( ) . accept ( l ) . intValue ( ) )
arrays . assertDoesNotContain ( description , actual , emptyArray ( ) )
assertEquals ( Unpooled . buffer ( ) , output )
assertEquals ( "OK" , r )
assertOut ( "var a:Boolean = new Boolean(1)" )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
Assert . assertTrue ( "provideRoamingNumber message (opCode 4, TCAP Begin) should be blocked by Cat2" , ! sigfw . unitTestingFlags_sendSccpMessage )
assertEquals ( period , start . until ( end ) )
Assert . assertEquals ( Arrays . asList ( post ) , postList )
assertJsonEquals ( ImmutableMap . of ( "topic" , "test-topic" , "notification" , data ) , message )
assertNull ( expression . evaluate ( record ) )
assertEquals ( m1 , m2 )
assertEquals ( result . size ( ) , 0 )
assertEquals ( true , result )
assertFalse ( table . isSelectable ( ) )
assertNull ( element . getChild ( "c" ) )
assertTrue ( log . debugEnabled ( ) )
editor . assertProblems ( "my-repo|Unused" , "other-repo|Unused" )
assertFalse ( tokenizer . hasHeader ( ) )
assertTrue ( ucd . getChild ( 0 ) instanceof ASTImplementsList )
assertEquals ( 0 , classUnderTest . getJarFileNames ( ) . length )
assertEquals ( data [ i ] [ 1 ] , Reporter . formatServiceCheckPrefix ( data [ i ] [ 0 ] ) )
Assert . assertEquals ( "wiki:XWiki.user (ip): action on wiki:Space.Page at " + c . getTime ( ) , e . toString ( ) )
Assert . assertEquals ( "processed the tick message" , result )
assertEquals ( "/projects/topic_17576/iur-service-client/target/classes" , actualObj )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "\\" , AviatorEvaluator . execute ( "'\\\\'" , env ) )
assertTrue ( filter . isSimplePnfsMatch ( ) )
Assert . assertEquals ( EventType . DELETE , eventType )
assertNotNull ( createdBreaker )
runner . assertNotValid ( )
assertSame ( newUrl , url )
assertEquals ( value , anotherValue )
assertTrue ( endpointRef . toString ( ) . equals ( expectedRef . toString ( ) ) )
assertEquals ( dbName , v . getName ( ) )
Assert . assertNotNull ( trazas )
assertNotNull ( server )
assertNotNull ( map )
assertThat ( DatastoreUtil . getOrNull ( ds , null , lock . key ) , is ( nullValue ( ) ) )
assertEquals ( "bar" , engine . compileMustache ( "cdi_rendering_context_weld_se" , "{{renderingScopedBean.name}}" ) . render ( null ) )
assertTrue ( ! result )
assertEquals ( 10.81 , fontSize , 0.1 )
Assert . assertEquals ( "A:1,B:4" , networks )
assertNull ( "Wrong result" , config . get ( Integer [ ] . class , KEY_PREFIX ) )
assertOut ( expected )
assertEquals ( "Bob123" , query ( ) . from ( cat ) . where ( cat . name . eq ( name ) ) . set ( name , "Bob123" ) . select ( cat . name ) . fetchFirst ( ) )
assertEquals ( rc . request ( ) . host ( ) , host )
Assert . fail ( "Should throw an exception here" )
assertTrue ( ml . length == 0 )
assertThat ( subject . getStatus ( preparedUpdate ) , is ( UpdateStatus . FAILED_AUTHENTICATION ) )
assertEquals ( 0 , fooDao . queryForAll ( ) . size ( ) )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
assertTrue ( result . isEmpty ( ) )
Assert . assertNull ( actual )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff21_" ) )
assertEquals ( 0 , latch . getCount ( ) )
assertThat ( json , is ( "{" + LS + "  \"foo\" : \"bar\"," + LS + "  \"super-hero\" : true" + LS + "}" ) )
assertThat ( pattern . matchAsExclusive ( "Test.class" , "method" ) , is ( false ) )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( "72:123" , commType . getString ( ) )
assertFalse ( site . login ( "email@example.com" , "password" , http ) )
assertThat ( givenProgram . getChildPrograms ( ) , contains ( stringProgram ( "0123" ) , stringProgram ( "X" ) , stringProgram ( "" ) ) )
assertNull ( new PassIfAnyInCollectionPassAuthenticator ( ) . authenticate ( USERNAME , PASSWORD , mockServerSession ) )
Assert . assertEquals ( 127 , response . getTotalHits ( ) . value )
assertTrue ( page . asXml ( ) . matches ( "(?s).*com.sun.faces.test.servlet30.faceletresourceresolver2.MyResourceResolver.*" ) )
Assert . assertEquals ( 7 , result . length )
Assert . assertEquals ( 2 , this . tester . getMessages ( FeedbackMessage . ERROR ) . size ( ) )
maps . assertHasEntrySatisfying ( info , actual , key , isNotDigits )
assertNotNull ( Balance . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expected , query . export ( ) )
assertEquals ( "POST /controllink HTTP/1.1\r\n" + "Host: fake\r\n" + "Content-Type: text/xml\r\n" + "SOAPAction: service:type#AddPortMapping\r\n" + "Connection: Close\r\n" + "Cache-Control: no-cache\r\n" + "Pragma: no-cache\r\n" + "Content-Length: 570\r\n" + "\r\n" + "<?xml version=\"1.0\"?>" + "<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" soap:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + "<soap:Body>" + "<u:AddPortMapping xmlns:u=\"service:type\">" + "<NewRemoteHost>1.2.3.4</NewRemoteHost>" + "<NewExternalPort>15</NewExternalPort>" + "<NewProtocol>TCP</NewProtocol>" + "<NewInternalPort>12345</NewInternalPort>" + "<NewInternalClient>5.6.7.8</NewInternalClient>" + "<NewEnabled>1</NewEnabled>" + "<NewPortMappingDescription>desc</NewPortMappingDescription>" + "<NewLeaseDuration>1000</NewLeaseDuration>" + "</u:AddPortMapping>" + "</soap:Body>" + "</soap:Envelope>" , bufferText )
assertTrue ( query . toString ( ) . contains ( "FROM <foo>" ) )
assertEquals ( - ONE_HOUR_IN_MILLIS , time . getTime ( ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertThat ( userObject . getTelephoneNumber ( ) , is ( equalTo ( telephoneNumber ) ) )
Assert . assertEquals ( msg , handler . getRcv ( ) . toString ( ) )
assertOut ( "var a:String = String(100)" )
assertEquals ( "geom" , ( dump ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "layer" ) )
assertEquals ( "dois decilh玫es de inteiros" , actual )
assertThat ( combined , returnsSameItems ( expectedNodes ) )
assertTrue ( emptyMap . isEmpty ( ) )
assertContains ( expect , rs . getMergedModel ( ) )
assertTrue ( resourcesManager . getAssignedGroups ( sess , secondResource ) . contains ( group ) )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertArrayEquals ( temp , ContractCheck . mustNotBeNullOrEmpty ( temp , "test" ) )
assertThat ( reference . getProperty ( Constants . SERVICE_RANKING ) , nullValue ( ) )
assertThat ( list , is ( simples ( "This is a test" ) ) )
Assert . assertEquals ( "col" , intersect . getPath ( ) )
assertTrue ( pojo . testService . interrupted . get ( ) )
assertFalse ( new NopolExample ( ) . isEmpty ( list ) )
assertEquals ( "[Cookie{name='name', value='test1', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.local], httpOnly=true, secure=false, maxAge=Optional[-1]}]" , httpRequest . getEffectiveCookies ( ) . toString ( ) )
assertTrue ( getBody ( response ) . length ( ) > 100 )
assertTrue ( cleanExit )
assertEquals ( "my title" , configuration . getSubTitle ( ) . getText ( ) )
assertEquals ( "user1,user1" , result )
Assert . assertEquals ( "did not set computechecksum" , true , transferOptions . isComputeChecksumAfterTransfer ( ) )
assertEquals ( describe , n . toJSONString ( false ) )
assertEquals ( readFile ( "src/test/resources/graal1" ) , out )
assertNotNull ( result )
assertTrue ( QueryUtil . getExplainPlan ( rs ) . contains ( "    SERVER ARRAY ELEMENT PROJECTION" ) )
assertTrue ( FstUtils . fstEquals ( nsp , fstNsp , FstUtils . LOG_REPORTER ) )
Assert . assertEquals ( result , collector . acked )
assertEquals ( newArrayList ( 2147483647 , 746384741 ) , result )
assertNotNull ( inputStream )
Assert . assertTrue ( output . contains ( "mychain" ) && output . contains ( "default" ) )
assertThat ( actual , is ( "ABC_ID_FOO" ) )
Assert . assertEquals ( config . getSet ( ) . iterator ( ) . next ( ) + "12" , config2 . getSet ( ) . iterator ( ) . next ( ) )
context . assertIsSatisfied ( )
assertEquals ( ChatStatus . locked , chat . getStatus ( ) )
assertEquals ( expected , actual )
assertTrue ( videos . contains ( video ) )
Assert . assertEquals ( expected , getString ( writer ) )
assertTrue ( connectFuture . isConnected ( ) )
assertEquals ( JSON . serialize ( result ) , "[ \"value1\" , 12]" )
Assert . assertTrue ( "Body validation failed" , isValid )
assertSame ( testTable , column . getTable ( ) )
assertValidationFailures ( deriver , config )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
assertEquals ( "Fusco" , person . getLastName ( ) )
assertTrue ( response . getStatusCode ( ) == 403 )
assertTrue ( "Task retries lower than specified via withTaskRetryLimit()" , actualAttempts == expectedAttempts || actualAttempts == expectedAttempts - 1 )
assertFalse ( ret2 . equals ( t1 ) )
assertEquals ( "Hello [request?name1] Doe" , ResponseBodyInterpolator . interpolate ( "Hello ^[request?name1] [request?name2]" , req ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertThat ( proc . context ( ) . contextAttrs ( ) . get ( "__retryCount" ) , is ( retryCount ) )
Assert . assertEquals ( 2 , failures . size ( ) )
assertEquals ( "3 乇�夭 15 爻丕毓鬲 38 丿���� 丿�诏乇" , t . format ( durations ) )
assertEquals ( ByteBuffer . wrap ( EMPTY_STRING . getBytes ( Charsets . UTF_8 ) ) , FieldParser . parse ( EMPTY_STRING , schema ) )
assertEquals ( Result . FAIL , user . apply ( item ) )
assertNotEquals ( oid1 , oid2 )
assertNotNull ( Day . fetcher ( "resource_type" , "day" ) . fetch ( ) )
assertNotNull ( result )
assertEquals ( "stage" , activityType )
Assert . assertFalse ( itemsResult . accept ( element ) )
assertEquals ( result . build ( ) . find ( ArrayElement . class , "values" ) . get ( 0 ) . getEntries ( ) , myTestInstance . distinct ( builder ) . toList ( ) )
assertSame ( mockSystemTray , systemTrayFromUiTools )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertEquals ( StandardCharsets . UTF_8 , layout . getCharset ( ) )
assertEqualsWithoutWhiteSpaces ( "translate([10,20,30]) (model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 11 ) . create ( ) ) )
assertThat ( flows , allOf ( notNullValue ( ) , hasSize ( 1 ) ) )
assertEquals ( "key2=value12 key=value1 key=value2" , m . toString ( ) )
Assert . assertEquals ( config , result )
assertNotNull ( Channel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( DateInterval . between ( start , end ) . getStart ( ) , is ( Boundary . of ( IntervalEdge . CLOSED , start ) ) )
assertEquals ( false , MapUtils . isNotEmpty ( map ) )
assertThat ( result . size ( ) , equalTo ( jedis . size ( ) ) )
assertEquals ( LockMode . WRITE , mComposite . getLockMode ( ) )
assertTrue ( "No categories returned!" , categories != null && categories . size ( ) > 0 )
assertThat ( books . getContent ( ) . size ( ) , is ( 2 ) )
assertEquals ( 2451545.0 , julDate . getJulianDate ( ) , TOLERANCE )
assertThat ( "getChildCount" , node . getChildCount ( ) , is ( 0 ) )
assertThat ( testOutcome . getResult ( ) , is ( FAILURE ) )
assertSimpleTerm ( result , "term1" , false , false )
Assert . assertTrue ( String . format ( "failed to force bad version verification error. expected message '%s ...', actual message: '%s'" , Application . VERIFY_ERROR , message ) , isErrorMessage )
Assert . assertNull ( actualDate )
assertEquals ( 0 , choice . size ( ) )
Assert . assertEquals ( "key%20with%20whitespace=value%20with%20whitespace" , getLine ( QUERY_LINE , canonicalRequest ) )
Assert . assertThat ( table . toString ( ) , is ( "Hello : World" ) )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
assertTrue ( c . isValidForSqlQuery ( ) )
runner . assertTransferCount ( PutHiveStreaming . REL_FAILURE , 1 )
assertEquals ( "{\"version\":10,\"schema\":\"string\"}" , request . toJson ( ) )
assertThat ( xml ( stream . toString ( ) ) , hasXPath ( "//soapwms:ExtendedCapabilities/soapwms:SOAP/wms:OnlineResource/@xlink:href" , nsBindings ( ) , equalTo ( postUrl ) ) )
org . junit . Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "SELECT " + fixedColumns + ",SUM(`foo.bar`) FROM v WHERE _user_ = 'me' ORDER BY `foo.bar` DESC" , sql )
assertEquals ( Status . FAIL , jxm . getStatus ( ) )
assertEquals ( "first logical column in LToR" , BasicMonthViewUI . FIRST_DAY_COLUMN , dayGridPosition . x )
assertXMLEqual ( new StringReader ( "<body><outer>text&lt;e a='v'&gt;hello &amp; welcome&lt;</outer></body>" ) , new StringReader ( html ( processed ) ) )
assertEquals ( expected , actual )
assertThat ( predicate . getPartitionPredicateLimit ( ) , is ( ( short ) 10 ) )
Assert . assertTrue ( exceptionThrown )
assertEquals ( 0L , num )
assertEquals ( "$5$abc$HbF3RRc15OwNKB/RZZ5F.1I6zsLcKXHQoSdB9Owx/Q8" , Sha2Crypt . sha256Crypt ( buffer , "$5$abc" ) )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
Assert . assertEquals ( "Session Application-Id should be the same as indicated." , SH_APPID , sessionAppId )
assertEquals ( expResult , result )
assertEquals ( expResult , result )
assertThat ( states , should ( containStateFor ( Constants . Keys . ALL ) ) . whileWaitingUntil ( timeoutHasExpired ( 3000 ) ) )
assertEquals ( "Testing for correct handling of nil component " , true , ls5424pb . parseLine ( syslogWithNilComponent ) )
assertThat ( editor . getValue ( ) , is ( getExistingObject ( ) ) )
assertEquals ( "wrong message" , "Test message" , dut . getMessage ( ) )
assertEquals ( 'd' , ex . charAt ( s , 12 ) )
Assert . assertEquals ( "Invalid result" , false , predicate . test ( new Object ( ) ) )
assertNull ( recursiveType . getArrayElementType ( ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertEquals ( expResult , result )
assertEquals ( employees . size ( ) , empIds . length )
assertEquals ( test . getStrings ( ) , ImmutableList . of ( "A" , "B" ) )
assertEquals ( "^(a 3)b 5\n" , found )
assertEquals ( response . getStatus ( ) , Status . SUCCESS . getValue ( ) )
Assert . assertEquals ( targetedVocabs , this . extension . getTargetVocabularyIds ( ) )
assertEquals ( "Result should be null" , null , result )
assertTrue ( context . getClientNamedGroupsList ( ) . isEmpty ( ) )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR . code , response . getStatus ( ) )
assertEquals ( "Testing Course" , courses . get ( 0 ) . getName ( ) )
assertTrue ( arr . every ( callbackfn ) )
assertFalse ( net . getPlaces ( ) . contains ( place ) )
assertTrue ( syn instanceof JavassistMethodSynthesizer )
assertSame ( fieldVar , result )
Assert . assertEquals ( 32 , msg . hashCode ( ) )
assertEquals ( URI . create ( "http://localhost:8080/base/resource" ) , u )
assertArrayEquals ( "Option value" , new String [ 0 ] , commandLine . getMultipleOption ( "array" ) )
assertTrue ( validator . isValid ( resource , MetadataSection . COLLECTIONS_SECTION ) )
assertNull ( err )
Assert . fail ( e . getMessage ( ) )
assertTrue ( "There should be errors" , countErrors ( chain ) > 0 )
assertEquals ( new HashSet < String > ( Arrays . asList ( "staff1" , "staff2" , "staff3" ) ) , underTest . filterConnectedViaCohort ( new HashSet < String > ( staffIds ) , e ) )
assertEquals ( LocalDateTime . of ( 2012 , 7 , 6 , 0 , 0 ) , test )
Assert . assertFalse ( activeLedgers . containsKey ( lh . getId ( ) ) )
assertEventEqualAfterSerializeDeserialize ( receiptScheduleCreatedEvent )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
assertThat ( results , samePaths ( new File ( root , "a.txt" ) , new File ( root , "b.txt" ) , new File ( root , "c.txt" ) ) )
assertThat ( result , is ( "123" ) )
assertEquals ( DomainExpressionBuilderRegistry . class , reg . getRegistrationType ( ) )
assertThat ( agreement . getName ( ) , is ( lease . getName ( ) ) )
assertEquals ( expectedQuery , actualQuery )
Assert . fail ( "Every deployment should have defined its own logging profile. But found this line in logs: " + line )
assertEquals ( result , range . exclude ( other ) )
assertEquals ( "bMethod" , response )
assertEquals ( input , EwsUtilities . parse ( input . getClass ( ) , input ) )
assertEquals ( "Expected exactly one occurrence of " + expected + " in the language versions of its language" , 1 , count )
assertEquals ( true , check . isRequired ( ) )
assertFalse ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
this . assertOneMatcher ( is ( instanceOf ( HeaderRequestMatcher . class ) ) )
assertEquals ( Status . NO_CONTENT . getStatusCode ( ) , r . getStatus ( ) )
assertNull ( result )
assertEquals ( 10 , i )
assertEquals ( Sets . newHashSet ( "table2" ) , service . getTablesToRepair ( cluster , unit ) )
assertEquals ( i , e . getSource ( ) )
Assert . assertEquals ( projectorForward . getTranscriptStartingAtCDS ( ) , resultTranscript )
assertTrue ( globalDomainAccessControlListEditorSubject . removeOwnerRegistrationControlEntry ( USER_ID , DOMAIN , INTERFACE_NAME ) )
assertEquals ( mockResponse , testResult )
assertEquals ( 0 , cacheStorage . size ( ) )
assertEquals ( Top . class , instanceIdentifier . getTargetType ( ) )
assertEquals ( expected , elements )
assertTrue ( "Workflow is not in an error state" , workflowStatus . errorOccurred ( ) )
assertEquals ( testResponse , response . get ( 0 ) )
assertEquals ( expResult , result )
Assert . assertTrue ( ops . exists ( TEST_SOCKET_BINDING_ADDRESS ) )
assertEquals ( expect , cpcClass . standardize ( ) )
assertNull ( g1 )
assertSimpleTerm ( result , "term% term_ %term_" , false , true )
assertTrue ( allow )
assertThat ( errors , not ( hasFieldErrors ( "familyNameSuffix" ) ) )
Assert . assertTrue ( intersect instanceof SegmentRange )
assertFalse ( isEmoji )
assertThat ( result . size ( ) , is ( 2 ) )
assertTrue ( ex . isPrime ( 97 ) )
assertEquals ( identifiable , result )
assertEquals ( qn , qnExpected )
assertTrue ( features . size ( ) > 0 )
assertEquals ( this . unpacked , unpacked )
Assert . assertNull ( ips . listPropertyNames ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 , ?_c3 }" )
assertPorts ( "port-offset" , DEFAULT_COMMAND_API_PORT + offset , DEFAULT_INTERNAL_API_PORT + offset , DEFAULT_MONITORING_API_PORT + offset )
assertEquals ( 2 , filteredMatches . size ( ) )
Assert . assertEquals ( expected , new String ( encoded ) )
assertTrue ( "Something wrong. Returned wadl length is not > 0" , applicationWadl . length ( ) > 0 )
assertEquals ( 1. , end . getTheoreticalEarliestOperationStartTime ( ) , 0.01 )
Assert . assertEquals ( Option . of ( Integer . valueOf ( 23 ) ) , a0 . optionalInteger ( ) )
assertThat ( confirmation . getStatus ( ) , equalTo ( remoteStartStopStatus ) )
assertEquals ( 2 , tool . heapCaculation ( ) )
assertEquals ( setOfStrings ( "silver gold" ) , all )
assertThat ( target . getDescriptionClass ( ) , equalTo ( ExporterDescription . class ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertFalse ( checker . isZipInputStream ( bufferedInputStream ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPrivileges ( set ( "producer_group1" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertNull ( array )
assertEquals ( resp , no )
Assert . assertEquals ( "{\"row\":\"row1\", \"cells\": [" + "{\"fam\":\"" + FAM1 + "\",\"qual\":\"" + QUAL1 + "\",\"val\":\"" + VAL1 + "\",\"ts\":" + TS1 + "}, " + "{\"fam\":\"" + FAM2 + "\",\"qual\":\"" + QUAL2 + "\",\"val\":\"" + VAL2 + "\",\"ts\":" + TS2 + "}]}" , json )
assertEquals ( true , ( ( DropDownImageListEditor ) presenter ) . isEditMode )
Assert . assertEquals ( demoService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) , helloService . getExportedUrls ( ) . get ( 0 ) . getPort ( ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertTrue ( doc . getAliases ( ) . isEmpty ( ) )
this . assertIndices ( im ( 0 , - 1 ) , im ( 1 , 0 ) , im ( 2 , 1 ) , im ( 3 , 2 ) )
assertThat ( codePoints . containsAll ( "��" ) , is ( false ) )
assertTrue ( ref != null )
assertEquals ( NOT_ACCEPTABLE , argumentCaptor . getValue ( ) . getStatusInfo ( ) )
assertNull ( found )
assertNotFound ( client . executePost ( "/foo" , "{}" , ContentType . TEXT_PLAIN ) )
Assert . assertNull ( obs . getValueAsBoolean ( ) )
assertEquals ( 0.44117773230576596 , vRatio . value ( 0.5 ) , 1e-16 )
assertSame ( iterator , sut . iterator ( ) )
assertNull ( demarcator . nextOffsetInfo ( "hello" . getBytes ( ) ) )
Assert . assertTrue ( true )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "p" , URI . class ) ) . and ( binds ( "pLabel" , Literal . class ) ) )
Assert . assertEquals ( false , fr . isSuccess ( ) )
assertEquals ( "x" , new Experiment ( ) . doIt ( "x" ) . join ( ) )
assertEquals ( "helloworld" , FileUtils . readFileToString ( testFile , Charset . forName ( "UTF-8" ) ) . trim ( ) )
assertEquals ( expected , formatted )
Assert . assertThat ( ExceptionCodeMapping . MissingParameterException . getExceptionIdentifier ( ) , is ( Integer . valueOf ( fromJson . getValue ( ) ) ) )
Assert . assertEquals ( - 2147483648 , res )
assertFalse ( problem )
Assert . assertEquals ( "42" , node . getTextContent ( ) )
assertEquals ( INT_FIELD_VALUE , storedValue )
assertThat ( nonInfo , hasSize ( 2 ) )
assertTrue ( sba instanceof ThickSBA )
assertEquals ( "OK" , response . getTitle ( ) )
Assert . assertEquals ( "A" , defaultDeployment . getName ( ) )
assertNull ( recursiveType . getArrayElementType ( ) )
Assert . assertTrue ( failedAsExpected )
assertEquals ( 4 , obj . foo )
assertArrayEquals ( Arrays . copyOf ( os . toByteArray ( ) , 4 ) , MAGIC_LITTLE_ENDIAN )
assertEquals ( "Please input method name, eg: \r\ninvoke xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"})\r\ninvoke XxxService.xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"})\r\ninvoke com.xxx.XxxService.xxxMethod(1234, \"abcd\", {\"prop\" : \"value\"})" , result )
Assert . assertFalse ( itemsResult . accept ( element ) )
assertThat ( instance . getValue ( ) , equalTo ( TEST_VALUE ) )
assertArrayEquals ( packet , Proto . arraylist_to_array ( payload ) )
Assert . assertEquals ( row . length , 0 )
assertTrue ( Configurator . compareFs ( fs1 , fs2 ) )
assertEquals ( insertNum , results . size ( ) )
assertEquals ( "Common exception" , ms . getText ( ) )
assertEquals ( 1 , destroyed . get ( ) )
assertEquals ( Character . valueOf ( '\001' ) , CsvBulkImportUtil . getCharacter ( conf , "conf.key" ) )
Assert . assertEquals ( "toto" , os . toString ( "UTF-8" ) )
assertEquals ( 5 , context . getTableCount ( ) )
assertFalse ( validator . validate ( EntityNames . STAFF , ids ) . equals ( ids ) )
assertEquals ( field . getName ( ) , NameUtils . canonicalizeForEnumTypes ( realm . getRealmId ( ) ) )
AssertUtil . assertNoJSError ( )
assertEquals ( dto . getSignature ( ) , null , "Signature is not null" )
Assert . assertTrue ( tags . size ( ) >= 1 )
assertEquals ( 80 , sumOfType1Cap )
assertDirectories ( "directories" , "foo" , "bar" )
Assert . assertEquals ( expected , super . parse ( " good.path.here" ) )
assertEquals ( 10. , newVrp . getInitialVehicleRoutes ( ) . iterator ( ) . next ( ) . getDepartureTime ( ) , 0.01 )
assertE ( "#######" + "       " + "    == " + "��      " + "====   " + "       " + "#######" )
assertEquals ( ".test(1, 2, 3)" , callChainTest . toJavaSrc ( ) )
assertEquals ( jobService . getJobServers ( namespace , jobName ) . size ( ) , 1 )
assertNotNull ( Conference . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "Configuration 'ogm-config' is applied to the cache" , "ogm-config" , configuration )
assertThat ( errors . toString ( ) , containsString ( "No response found for required item with id = 'link0'" ) )
assertThat ( copy ( array ) , is ( equalTo ( array ) ) )
assertNotNull ( cmp . getRecords ( ) )
assertNotNull ( reader )
assertEquals ( expResult , result )
MatcherAssert . assertThat ( "Instance reusedExistingDatabase should be false." , ! instances . reusedExistingDatabase ( ) )
Assert . assertEquals ( dto . getState ( ) , entity . getState ( ) )
assertNotNull ( editCap )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertFalse ( integer2 == integer3 )
assertEquals ( expResult , result )
Assert . assertEquals ( "U39tKvVEn9E=" , Salsa20 . createInstance ( bytes ) . encrypt ( "Password" ) )
assertTrue ( conn != null )
assertElementsOfIterator ( new BooleanValueRange ( ) . createRandomIterator ( workingRandom ) , Boolean . TRUE , Boolean . TRUE , Boolean . FALSE , Boolean . TRUE )
assertNotNull ( injector )
assertEquals ( 1.0 , instance . inclusiveHypervolume ( ind ) , 0.0 )
Assert . assertEquals ( EnumAttrPOJO . STRING , pojo2 . getStringMap ( ) . get ( "abc" ) )
assertEquals ( 1 , count )
Assert . assertNotNull ( str )
Assert . assertEquals ( configuration , result )
assertTrue ( md . getDocument ( ) == null )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( "[0, 2, 4, 6, 8]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertFalse ( "Should produce different random bytes" , Arrays . equals ( new Random ( ) . randomBytes ( ) , new Random ( ) . randomBytes ( size ) ) )
Assert . assertEquals ( "SELECT pet.id, pet.num, pet.name, pet.age, pet.cate, pet.master_id, pet.user_id FROM t_pet pet  ORDER BY id" + fieldAdd + " DESC LIMIT 0, 2 ;" , sql )
assertTrue ( result > 0 )
assertTrue ( "Wrong info: " + result . info , result . info . startsWith ( "1 document" ) )
assertThat ( studies . size ( ) , is ( 0 ) )
assertEquals ( 2 , ( int ) formField . getFormFieldId ( ) )
assertThat ( getMatchingContainerEnv ( domainPresenceInfo , jobSpec ) , hasEnvVar ( "item1" , END_VALUE_1 ) )
FixtureAsserts . assertStringMatchesJsonFixture ( "Supplier retrieve their User as HAL+JSON" , actualResponse , "/fixtures/hal/user/expected-supplier-retrieve-user.json" )
assertEquals ( cliSchemaJob . getJobSpec ( ) , createSchemaSpec ( ) )
assertNotNull ( "Previous step failed" , uri_userInstance )
assertNotNull ( Credential . reader ( ) . read ( ) )
assertEquals ( "{\"a\":{\"b\":1}}" , n )
assertEquals ( "Parsing of integer option does not match expected result." , PROPERTY_INT_EXPECTED , parseResult )
Assert . assertEquals ( expected , returned )
assertEquals ( "no-cache" , wrapper . getFirstHeader ( "Cache-Control" ) . getValue ( ) )
runner . assertValid ( service )
assertEquals ( "{\"data\":[{\"x\":80,\"y\":80,\"name\":80},{\"x\":20,\"y\":20,\"name\":20}]}" , toJSON ( containerSeries ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( expected , actual )
assertThat ( node , isBrowseNodeWith ( contentRepository , null , "foo" , "foo" , null , component ) )
assertFalse ( fieldAccessor . fieldIsTransient ( ) )
assertEquals ( true , out . firstElement ( ) . get ( ) )
assertTranslatedSizeCacheIsReset ( workingCopy )
assertEquals ( master . evaluate ( combined , percentile ) , randomMaster . reduce ( percentile , aggregates ) , Double . MIN_VALUE )
Assert . assertEquals ( NUM_SHIRT_THREADS , collector . size ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( DEFAULT_PROPERTIES , createSchema ( map , 0 ) . convert ( ) . getProperties ( ) )
assertEquals ( expected , getString ( TestQueryImpl . example ( true ) ) )
assertParseTree ( rootNode ( "helloworld" , stringNode ( "greeting" , "hello" , stringNode ( "hi" , "hello" ) ) ) , tree )
assertThat ( parseArguments . size ( ) , is ( 2 ) )
Assert . assertEquals ( ans [ i ] , count )
assertEquals ( "" , contactEditText . getText ( ) . toString ( ) )
assertEquals ( before , after )
Assert . fail ( "Missing required input" )
assertThat ( relevant , is ( true ) )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertThat ( DateInterval . parseISO ( "2012-W01-1/W05-4" ) , is ( expected ) )
Helpers . assertJson ( result , VALID_JSON )
assertThat ( actual , is ( expected ) )
assertFalse ( retryPolicy . getRetryCondition ( ) . shouldRetry ( null , e , 1 ) )
assertEquals ( 0.945f , result , 0.001f )
assertId ( item , result )
assertEquals ( "Incorrect number of RevObjects in BatchObjects response" , expectedNumRevObjects , actualNumRevObjects )
assertTrue ( "Node is a versioned node." , testObj . isVersionedNode ( mem , createURI ( "a/b/c" ) ) )
assertTrue ( app . toString ( ) . matches ( pattern ) )
assertTrue ( sets . contains ( message2 ) )
assertFalse ( rs . next ( ) )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertTrue ( instantiator instanceof ObjenesisClassInstantiator )
Assert . assertEquals ( "ignas@aaa.com" , user . getEmail ( ) )
assertEquals ( 0 , objects . size ( ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "putValue" , region . get ( "putKey" ) )
Assert . assertEquals ( msg , n )
Assert . assertEquals ( 1l , handler . convertIdentifier ( v ) )
assertEquals ( "Should get entry with METHOD_NOT_ALLOWED" , HttpStatus . METHOD_NOT_ALLOWED , response . getResponseStatus ( ) )
Assert . assertEquals ( BatchStatus . COMPLETED , exec . getStatus ( ) )
Assert . assertArrayEquals ( bytes , result )
assertTrue ( p . getStatusSimple ( ) . toString ( ) . equals ( "active" ) )
assertTrue ( "Comparator did not reorder the List correctly" , orderedList . equals ( randomList ) )
assertThat ( result , equalTo ( "Hello" ) )
files . assertHasSizeInBytes ( info , notAFile , 36L )
Assert . assertFalse ( itemsResult . accept ( element ) )
assertEquals ( NetPlan . getNetworkElementByAttribute ( Arrays . asList ( n1 , n2 , n3 ) , "att" , "2" ) , n2 )
assertArrayEquals ( new int [ ] { - 3 } , counts )
assertTrue ( videos . contains ( video ) )
assertEquals ( check . getValue ( ) , actual )
assertEquals ( "class CompanyException {\n" + "  public CompanyException(  String message,  Throwable cause){\n" + "    super(message,cause);\n  }\n" + "}\n" , td . toString ( ) )
Assert . assertNotNull ( addressResultsDto )
assertThat ( context . statement ( ) , is ( "'b \\' c'" ) )
assertFalse ( str . endsWith ( "\0" ) )
Assert . assertTrue ( "Sub-menu should have been added to group" , group . getMenuItems ( ) . contains ( subMenu ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertThat ( underTest . equals ( null ) , is ( false ) )
assertTrue ( found )
PicOutAssert . assertDocIdPicOutsEquals ( expectedOutputDocIdPicOuts , actualOutputDocIdPicOuts )
assertSingleResult ( op , Statistic . MEAN , expMean )
assertEquals ( value2 , configurationState . value )
assertTrue ( result )
assertEquals ( String . valueOf ( now . atZone ( DateUtils . zone ( ) ) . getYear ( ) ) , DateUtils . formatYear ( ) )
assertEquals ( 1 , count )
assertThat ( base . thenComposeCancelledCancelled ( composeSupplier ) , is ( new ImmediateFailed < > ( caller , cause ) ) )
Assert . assertEquals ( 40. , solution . getCost ( ) )
Assert . assertFalse ( result )
assertEquals ( expected . build ( ) , doc )
assertEquals ( expected , actual )
assertTrue ( tasks . size ( ) == 10 && tasks . get ( 0 ) . getId ( ) == 5 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
assertParseOneDoc ( editor , "DOC(0): " , "  KEY(0): hello:" , "    KEY(2): world:" , "      RAW(4): message" , "      RAW(-1): " )
assertLoadBalanced ( restTemplate )
Assert . assertNotNull ( "null data object, was not found" , dataObject )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( "een ogenblik geleden" , t . format ( new Date ( 0 ) ) )
assertArrayEquals ( bytes , decoded )
Assert . assertEquals ( expected , rows . next ( ) . toString ( ) )
assertEquals ( i , list . head ( ) . get ( ) )
assertNotNull ( w )
assertNotSame ( 0 , count )
context . assertFalse ( handled , "GET Request to configuration resource should not be handled" )
assertThat ( response . getStatus ( ) , is ( Response . Status . OK . getStatusCode ( ) ) )
assertThat ( uut . getFeatures ( ) . isEmpty ( ) , is ( false ) )
Assert . assertTrue ( log . contains ( "(@DisabledGroup(value=foo bar))" ) || log . contains ( "(@DisabledGroup(value=\"foo bar\"))" ) )
assertThat ( RpslAttributeFilter . getValueForShortHand ( subject . getValue ( ) ) , is ( " foobar" ) )
assertEquals ( 0 , result . size ( ) )
Assert . assertEquals ( "{\"" + entityType . getPropertyNames ( ) . get ( 0 ) + "\":{" + "\"type\":\"MultiLineString\",\"coordinates\":[" + "[[1.0,1.0],[2.0,2.0],[3.0,3.0],[4.0,4.0],[5.0,5.0]]," + "[[99.5,101.5],[150.0,151.25]]]}}" , IOUtils . toString ( serializerNoMetadata . entity ( metadata , entityType , entity , null ) . getContent ( ) ) )
assertTrue ( "queued.push() blocks" , ( time2 - time1 ) < delay )
assertThat ( response . buildURI ( ) , is ( "http://zazz.bg/?code=987654321" ) )
Assert . assertEquals ( "Error while getting Thesaurus By Id !" , expectedResponse , actualResponse )
assertPostEdgeProducesJson ( response , false , false )
Assert . assertEquals ( "1.23E+08" , result . getText ( ) )
assertProcessInstanceFinished ( processInstance , ksession )
assertMockEndpointsSatisfied ( )
assertEquals ( "quux" , result )
assertEquals ( "Exclude pattern" , Arrays . asList ( ".*" , ".*ha" ) , ruleSet2 . getExcludePatterns ( ) )
assertNotNull ( regRequest )
assertTrue ( inventory . containsExactly ( mat , amount ) )
Assert . assertTrue ( ( ( Person ) result [ 0 ] ) . equals ( ( Person ) array [ 0 ] ) )
Assert . assertEquals ( "[1, 2, 3, ...(1)]" , small )
assertTrue ( page . getBody ( ) . getTextContent ( ) . contains ( "Username or email" ) )
assertEquals ( ( Integer ) 0 , map . getPartitionEntries ( ) . get ( 0 ) . getShard ( ) )
assertEquals ( 1 , testList . size ( ) )
assertEquals ( "should be the same age in weeks" , expected . intValue ( ) , result . intValue ( ) )
Assert . assertNull ( nullValue )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertThat ( repository . activeSessions ( ) . size ( ) , is ( 0 ) )
assertThat ( MockI18n . passthrough . text ( str ) , is ( str ) )
assertTrue ( actual . entrySet ( ) . containsAll ( expected . entrySet ( ) ) )
assertEquals ( 0 , FileChunkUtil . getNumberOfChunks ( file , - 1 * TestFileConfiguration . CHUNK_SIZE ) )
assertThat ( strategy , is ( instanceOf ( SubjectDefinitionLocationStrategy . class ) ) )
Assert . assertEquals ( ValidationResult . Result . ERROR , sink . validate ( null ) . getStatus ( ) )
assertEquals ( "" , result )
assertEquals ( "" + "************\n" + "************\n" + "************\n" + "**++++++++++\n" + "++++++++++++\n" + "++++++++++++\n" , raster . toString ( ) )
Assert . assertEquals ( expResult , result )
Assert . assertEquals ( 2 , result . length ( ) )
assertEquals ( "Hello World" , output )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
assertEquals ( 1 , server . getRequstCount ( ) . get ( ) )
assertTrue ( param . isRequired ( ) )
assertEquals ( "processTask" , activityType )
assertEquals ( "straks" , t . format ( date ) )
assertEquals ( builder . buildResponse ( ) . getDataErrors ( ) . size ( ) , 0 )
assertSame ( reply , myTestInstance . runCommand ( "command" , "name" , options . build ( ) ) )
assertNotNull ( result )
assertEquals ( 1 , slice . events . size ( ) )
assertEquals ( 0 , size )
assertFalse ( fixture . eof ( ) )
assertEquals ( "expect bookie idx 2 first" , expectedSet , reorderSet )
assertThat ( archetypeCatalog , not ( nullValue ( ) ) )
Assert . assertTrue ( returnT . getCode ( ) == ReturnT . SUCCESS_CODE )
assertFalse ( "Testing ModuleNotFoundException" , everything . contains ( "ERROR" ) )
assertEquals ( "0FFFFF212" , Evaluator . evaluate ( ex ) )
assertTrue ( text , text . startsWith ( "Listing of directory successfully finished, 1 files found:\r\n" + "${fname} = /tmpFile1_" ) )
assertEquals ( builder . type . toString ( ) , SAVE_MODEL . toString ( ) )
assertNotNull ( orderToDiscontinue . getDateStopped ( ) )
assertTrue ( asyncTask . get ( ) )
assertThat ( userId , is ( Optional . empty ( ) ) )
assertTrue ( downloader . waitForReportReady ( ) )
assertEquals ( ALL_ONE_BYTES , b . toString ( ) )
assertEquals ( 3 , pendingPosts . size ( ) )
assertEquals ( Permissions . TASK_WORK , testProcessEngineCfg . getDefaultUserPermissionForTask ( ) )
assertFalse ( "The getChanges() method reported a change" , hasChange )
assertTrue ( emptyList . isEmpty ( ) )
assertThat ( families , arrayContaining ( ProcessingFamilyDefinition . NAME ) )
assertEquals ( testUserProvider . getTestUserInfo ( ) . getIndividualGroup ( ) . getId ( ) , aa . getAccessorId ( ) )
assertEquals ( "3 vuotta sitten" , t . format ( new Date ( 0 ) ) )
assertNotNull ( EndUser . reader ( ) . read ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( 2 , packetIn . getCount ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertEquals ( 5l , d . asInt8 ( ) )
assertEquals ( expected , actualQuery )
Assert . assertNotNull ( json . getString ( "uid" ) )
Assert . assertNotNull ( registry )
assertTrue ( "Should have thrown exception of MyException class" , exception instanceof MyException )
assertThat ( Utils . max ( values ) , is ( "99" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( 2 , numberOfUsers )
Assert . assertEquals ( Arrays . asList ( "0" , "1" , "2" , "3" , "4" , "5" , "6" , "7" , "8" , "9" ) , collected )
assertOut ( "this.b = this.b + 1" )
Assert . assertTrue ( id == 1 )
assertEquals ( "There should be 3 lights" , 3 , lights . size ( ) )
assertEquals ( 3 , task . dataSent . size ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
Assert . assertTrue ( "Bad cost - expected " + 12.0 + " but was " + cost , cost == 12.0d )
assertEquals ( Atom . of ( "killed" ) , result )
assertArrayEquals ( TEObjectUtil . TE_LSP_REQUIRED_ATTRIBUTES , ByteArray . getAllBytes ( output ) )
Assert . assertEquals ( "" , json , ios . toJSON ( ) )
assertUpdateAttributesMessage ( sendMessage )
assertThat ( new LnImpl ( ) . formatArgs ( s ) , equalTo ( expected ) )
assertFalse ( hasPermission )
assertEquals ( expected , actual )
Assert . assertThat ( textFile , is ( "�械薪蟹邪\n�芯�泻胁邪\n�懈�械�\n" ) )
assertTrue ( method . equals ( newMethod ) )
assertEquals ( JSON_OBJECT , json )
Assert . assertEquals ( "{\"alice\":{\"edgar\":[\"bob\"],\"charlie\":[\"bob\"]}}" , writer . toString ( ) )
assertExceptionContainsCorrectMessage ( ( ) -> userTaskAdminClient . reassignWhenNotStarted ( CONTAINER_ID_ALIAS , task . getId ( ) , "2s" , reassign ) , "Container '" + CONTAINER_ID_V2 + "' is not associated with alias '" + CONTAINER_ID_ALIAS + "'" , "Container '" + CONTAINER_ID_V2 + "' is not associated with alias '" + CONTAINER_ID_ALIAS + "'" )
assertArrayEquals ( "repl and repl is repl" . getBytes ( ) , actuals )
assertThat ( markedWord , is ( "louper" ) )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . NOT , TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . GTE , v , TERM_FACTORY . getConstantLiteral ( "3" , XSD . LONG ) ) ) , translation . get ( 0 ) )
assertThat ( path , is ( "../foo-1.0-SNAPSHOT.woa/Contents/test" ) )
assertEquals ( BuilderFactory . start ( ) . addMinKey ( "a" ) . build ( ) , doc )
assertEquals ( lgcd . monic ( ) , intrp . monic ( ) )
assertThat ( command . accept ( state ) , is ( false ) )
assertThat ( PlainTimestamp . of ( 2014 , 4 , 21 , 9 , 15 ) . with ( MILLI_OF_SECOND , 999 ) , is ( PlainTimestamp . of ( date , time ) ) )
assertContentType ( actual )
assertEquals ( testGenre , album . getGenre ( ) )
assertNull ( getParameterRepositoryService ( ) . getParameterValueAsString ( key ) )
assertThat ( ( Integer ) getter . invoke ( instance ) , is ( equalTo ( 1337 ) ) )
assertEquals ( "  hello" , b . asString ( ) )
assertThat ( hostConfig . restartPolicy ( ) , is ( HostConfig . RestartPolicy . always ( ) ) )
assertTypeListsEqual ( params , expectedParams )
assertArrayEquals ( expected , actualContents )
assertThat ( comparator . compare ( axiom3 , axiom1 ) , is ( greaterThan ( 0 ) ) )
assertFalse ( actual )
assertTrue ( contentAsString . indexOf ( fieldFontSetting ) > 0 )
Assert . assertTrue ( contains )
assertEquals ( "To is not properly parsed" , lsdf . parse ( "2015/02/28 01:02:03.004 GMT" ) , mapper . readTo ( columns ) )
assertTrue ( result instanceof HTTPRawSampler )
Assert . assertNotNull ( tasks )
assertEquals ( reservationName , "res_1" )
assertTrue ( "no exception was thrown" , exception )
assertThat ( database . isClean ( ) , is ( false ) )
Assert . assertEquals ( "Unexpected distinct name" , "simple-foo-bar" , jBossWebMetaData . getDistinctName ( ) )
assertTrue ( Files . isRegularFile ( target ) )
assertEquals ( 0 , searcher . search ( query , 100 ) . totalHits )
Assert . assertNull ( person . getAttribute ( 3 ) )
Assert . assertEquals ( "Test template val1 and val2" , output )
Assert . assertEquals ( "hey" , searchRequestBuilder . request ( ) . routing ( ) )
assertNotNull ( res )
Assert . assertEquals ( obj , target )
assertThat ( parseArguments . size ( ) , is ( 2 ) )
assertNull ( item . getList ( ) )
assertNull ( descriptor )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "aClass" ) )
assertEquals ( Integer . valueOf ( 2 ) , Integer . valueOf ( list . size ( ) ) )
assertThat ( rendering , is ( "1st September 2011" ) )
assertFalse ( d1 . equals ( d2 ) )
assertEquals ( "RFC 2617 string should be properly formatted" , "Signature keyId=\"unit\",algorithm=\"hmac-sha1\",headers=\"Content-Type Date\",signature=\"yIy5ujWnGZ0pKVR7vY6Qv08WfLE=\"" , formatted )
assertThat ( output , containsString ( "<text><status value=\"generated\"/><div xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"hapiHeaderText\">John <b>SMITH </b>" ) )
Assert . assertEquals ( window2 , window1 )
Assert . assertEquals ( 1001 , total )
assertEquals ( ClassWithPrivateAndProtectedMethodInSeparatePackage . RESULT , result )
assertTrue ( "unable to set/or return vo attribute we created" , retAttr . contains ( attributes . get ( 0 ) ) )
assertNull ( doc )
assertTrue ( results . size ( ) > 1 )
assertEquals ( joinResponseTimeBo , JoinResponseTimeBo . EMPTY_JOIN_RESPONSE_TIME_BO )
assertTrue ( plugin . getPlayerMuteStorage ( ) . getMute ( player . getUUID ( ) ) . isSilent ( ) )
assertNotEquals ( insertAction , retractAction )
assertEquals ( NodeValue . FALSE , r )
assertEquals ( 2 , numberOfElephants )
assertThat ( def . isMultiple ( ) , is ( true ) )
assertNotNull ( bindingDOMDataTreeProducerAdapter . createProducer ( ImmutableSet . of ( ) ) )
assertTrue ( elapsed < 2 * SECOND )
Assert . assertEquals ( getCssFileContents ( cmpFile ) , styleSheet . toString ( ) )
assertEquals ( Version . valueOf ( "1.0.0-alpha+build" ) , builder . build ( ) )
assertEquals ( 0 , secondRun . size ( ) )
context . assertIsSatisfied ( )
assertNotNull ( instance . getSoftwareIdentifiers ( ) )
assertEquals ( "service" , s . getType ( ) )
assertEquals ( "TT:12" , x . toString ( ) )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertThat ( result . getChapSession ( ) , is ( Optional . < ChapSession > empty ( ) ) )
assertEquals ( LifecycleState . CONNECTED , node . connect ( ) . toBlocking ( ) . single ( ) )
assertCompletionsDisplayString ( "spring:\n" + "  http:\n" + "    converters:\n" + "      preferred-json-mapper: <*>\n" , "gson" , "jackson" )
Assert . assertNull ( queryResult . getExplanations ( ) )
Assert . assertNull ( "Invalid result [" + result + "]" , result )
assertMapping ( node , 0 , 0 , 0 , 0 , 0 , 8 )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( asList ( Segment . SIZE , Segment . SIZE , Segment . SIZE , 1 , Segment . SIZE , Segment . SIZE , Segment . SIZE , 1 ) , segmentSizes )
assertThat ( fe , notNullValue ( ) )
assertEquals ( 1 , response . getEntry ( ) . size ( ) )
assertThat ( itr . next ( ) , is ( 2 ) )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
Assert . assertNotNull ( addressResultsDto )
assertTrue ( tasks . size ( ) == 50 && tasks . get ( 0 ) . getId ( ) == 1 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
assertFalse ( response . isHasMoreItems ( ) )
assertThat ( wrapper . get ( 0 ) , is ( ( short ) 0x2423 ) )
assertThat ( output , containsString ( "<text><status value=\"generated\"/><div xmlns=\"http://www.w3.org/1999/xhtml\"><div class=\"hapiHeaderText\">John <b>SMITH </b>" ) )
assertThat ( renderer . getShortForm ( entity ) , is ( "xsd:unsignedShort" ) )
assertThat ( versionedIdsOf ( units ) , bagEquals ( versionedIdList ( LAUNCHER_FEATURE , LAUNCHER_FEATURE_JAR , LAUNCHER_BUNDLE , LAUNCHER_BUNDLE_LINUX ) ) )
assertEquals ( "select cat\nfrom Cat cat\n  right join cat.mate as cat1" , query . toString ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) >= 'literal'" ) )
assertEquals ( 1 , SnowcastSequenceUtils . compareSequence ( sequence1 , sequence2 ) )
assertTrue ( s . isEmpty ( ) )
assertEquals ( "WARN: message" , error . toString ( ) )
assertEquals ( vNum , intsNum )
assertTrue ( equals ( statEntity , nativeEntity ) )
Assert . assertEquals ( topic , testTopic )
assertEquals ( "UPDATE myTableName SET myTableName.customDateColumn = ? WHERE myTableName.customNameId = ?" , Utils . singleLine ( sql ) )
assertEquals ( "CrossReference[c={CrossReference@" + identityHashCode ( b ) + "}]" , logAdapter . asString ( a ) )
assertEquals ( Arrays . asList ( "http://somelink" ) , new JsonLinkConsumer ( ) . readLinks ( reader , null ) )
Assert . assertEquals ( "aa%3D%23user" , encodeUrl )
assertEquals ( "1 :: 1 :: 2 :: 3 :: 5 :: 8 :: 13" , grid . getCell ( 0 , 0 ) . getText ( ) )
assertEquals ( "getRuntimeVersion timeout" , latch . getCount ( ) , 0 )
assertEquals ( false , result )
assertEquals ( 0 , suggestedConfigUpdates . size ( ) )
assertNotNull ( tables )
Assert . assertTrue ( out . size ( ) > 0 )
assertThat ( returned . getX ( ) , is ( 2l ) )
assertEquals ( ( new SparseSet ( "+a -b" ) ) . getPattern ( ) , set . getPattern ( ) )
assertEquals ( "Failed on rows: [" + rows + "], columns: [" + columns + "], iteration: [" + i + "]" , 1.0f , res , 0.01f )
assertThat ( interceptor . accepts ( withoutConstraint ) , is ( false ) )
CheckstyleTestUtils . assertSimilarXmlWithResource ( "/org/sonar/plugins/checkstyle/CheckstyleProfileExporterTest/" + "alwaysSetSuppressionCommentFilter.xml" , sanitizeForTests ( writer . toString ( ) ) )
service . callCounter . assertCalls ( "{findIds=2, getItems=6}" )
Assert . assertTrue ( true )
Assert . assertEquals ( 1 , timers . size ( ) )
assertObject ( args )
Assert . assertEquals ( TimeValue . NEG_ONE_MILLISECOND , d )
assertThat ( CompositeBlobStore . getStoreSuitabilityCheck ( ) , equalTo ( CompositeBlobStore . StoreSuitabilityCheck . EXISTING ) )
assertInEqualsOut ( )
assertEquals ( "artifactId" , mavenId )
assertTrue ( emptyList . isEmpty ( ) )
assertEquals ( expected , 0 )
assertEquals ( "" + "************\n" + "************\n" + "************\n" + "************\n" + "************\n" + "************\n" , raster . toString ( ) )
assertTrue ( "Failed to recognize DOI in item metadata." , doi . equals ( provider . getDOIOutOfObject ( item ) ) )
assertFalse ( target . isModify ( newSettings ) )
assertTrue ( gl . size ( ) > 0 )
assertEquals ( "EXEC \"DIAL\" \"SIP/1234|30\"" , execCommand . buildCommand ( ) )
assertNull ( mediaType . charset ( ) )
assertUserSettingsCount ( )
assertEquals ( "expected" , decoded )
assertEquals ( 1 , preloaded . size ( ) )
Assert . assertTrue ( expect ( o , false ) )
assertMakeImageCanReadImage ( imageData )
Assert . assertNull ( character . getData ( ) )
assertEquals ( 0 , app . executeApplication ( args ) )
Assert . assertEquals ( "6 minuti from now" , result )
assertThat ( request . getConnectorId ( ) , equalTo ( positive ) )
Assert . assertEquals ( "Wrong order found for " + name1 + " vs " + name2 , trueOrder , order )
assertEquals ( testString , avroField . convertToKettleValue ( array , schema , mock ( Schema . class ) , false ) )
Assert . assertEquals ( i , o )
arrays . assertContainsOnly ( someInfo ( ) , actual , emptyArray ( ) )
assertIsAborted ( tx )
Assert . fail ( "unregistered prefix accepted" )
assertTrue ( PropUtil . getBooleanProperty ( props , "test" , true ) )
Assert . assertNotNull ( factory )
assertEquals ( result , expectedResult )
assertEight ( result , testContext , async )
assertNotSame ( unexpected , actual )
assertEquals ( exp , arrayZ )
assertEquals ( "some referer" , mockResult . included ( "returnPath" ) )
assertE ( "----------" + "|        |" + "|        |" + "|        |" + "|        |" + "|    o   |" + "|        |" + "|        |" + "|        |" + "----------" )
assertNotNull ( executor )
Assert . assertTrue ( intersect instanceof SegmentRange )
assertNotNull ( result )
assertEquals ( "[{key:value},{key:value}]" , target . toString ( ) )
assertEquals ( expected , result )
GAssert . assertEquals ( expected , actual )
assertEquals ( "hello, wor" , out )
assertNotEmpty ( token )
assertEquals ( Arrays . asList ( "x=1" ) , results )
assertTrue ( Bytes . equals ( opened , data ) )
Assert . assertEquals ( 1234 , multicastSocket . getLocalPort ( ) )
assertEquals ( "a" , example . firstChild ( ) . firstChild ( ) . getContent ( ) )
assertEquals ( result , expected )
assertEquals ( expected , result )
Assert . assertNotEquals ( udf1 . getKey ( embedding ) , udf2 . getKey ( embedding ) )
Assert . assertEquals ( 76.875 , tdCosts . getBackwardTransportTime ( loc ( "from" ) , loc ( "to" ) , 100. , null , null ) , 0.01 )
assertEquals ( Lists . newArrayList ( 1 ) , listBad )
assertThat ( result . getBinNumber ( ) , equalTo ( 2 ) )
Assert . assertTrue ( "Optimal coverage: " + best . getCoverage ( ) , best . getCoverage ( ) < 0.99 )
assertSame ( "Mismatched best match for " + matches , expected , actual )
assertTrue ( results . size ( ) > 1 )
assertFalse ( DataBundles . isValue ( DataBundles . getPorts ( inputs ) . get ( "test" ) ) )
assertArrayEquals ( sentBytes , new byte [ ] { 0x17 , 0x03 , 0x03 , 0x00 , 0x04 , 0 , 1 , 2 , 3 } )
assertEquals ( "" , result )
assertions . containsSequence ( ( short ) 6 , ( short ) 6 , ( short ) 8 , ( short ) 10 , ( short ) 10 )
assertEquals ( "void dest5(int, @B int)" , toString ( dest ) )
Assert . assertTrue ( "Duplicate file types should not be honored" , CollectionUtils . isEqualCollection ( expected , widget . getFileTypes ( ) ) )
Assert . assertThat ( job . sendCommand ( "test command" ) , is ( false ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( rescaled ) , equalTo ( new double [ ] { - 5.0 , - 2.5 , 0 , 2.5 , 5.0 , 7.5 } ) )
assertThat ( options . getCredentialsProvider ( ) , is ( URI . create ( "jceks://hdfs@localhost:8020/security/credentials.jceks" ) ) )
assertEquals ( column , fromProto )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
Assert . assertTrue ( "There should be no GREService if no gre unit is configured" , greServices . isEmpty ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( array ) , equalTo ( new double [ ] { 0 , 1 , 2 , 3 , 4 , 5 } ) )
assertThat ( f . format ( time ) , is ( "17:45 PDT" ) )
Assert . assertTrue ( "Did not expect optimal coverage: " , best . getCoverage ( ) < 1 )
Assert . assertEquals ( "SELECT CONV('a', 16, 2);" , text )
assertTrue ( filteredEvidenceItemMap . isEmpty ( ) )
assertEquals ( 0 , errors . size ( ) )
Assert . assertEquals ( "id2 [" + id2 + "] - id [" + id + "]" , ( id2 - id ) , ( long ) MIN_BLK_SIZE )
assertTrue ( ! plan1 . equals ( plan2 ) )
assertTrue ( size < BUFFER_SIZE )
assertFalse ( Futures . getUnchecked ( collector ) )
assertThat ( propertyVariable , is ( "alex" ) )
assertSame ( test . b , test . toInjectOneTarget . m1 )
assertNotNull ( study )
assertNotNull ( bean )
assertTrue ( retCode == 0 )
assertFalse ( usersRoles . isEmpty ( ) )
assertEquals ( 2 , branches . size ( ) )
assertThat ( supplier . authForSwarm ( ) , matchesAccessToken ( accessToken ) )
assertTrue ( unprocessed . getHasUnprocessed ( ) )
assertEquals ( HttpStatus . SC_NOT_FOUND , response . getStatus ( ) )
assertFalse ( kbuilder . getErrors ( ) . toString ( ) , kbuilder . hasErrors ( ) )
Assert . assertTrue ( "should be a readable file" , target . canRead ( ) )
assertTrue ( clas . getClass ( ) . getName ( ) , clas instanceof Integer )
runner . assertAllFlowFilesTransferred ( PublishKafka_1_0 . REL_SUCCESS , 3 )
Assert . assertNull ( tags )
assertEquals ( "Max Mustermann" , result )
assertTrue ( result . length ( ) > 0 )
assertEquals ( map1 , map2 )
Assert . assertEquals ( "org.jboss.as:jboss-as-arquillian-container-domain-managed:7.1.1.Final" , adapter . dependencies ( ) [ 0 ] )
assertThat ( offsetDateTime , is ( OffsetDateTime . parse ( "1969-07-21T12:56:00+10:00" ) ) )
assertEquals ( "<b>1</b>\n<p><b>2</b>3</p>" , doc . body ( ) . html ( ) )
assertEquals ( "immediateResume" , str )
assertEquals ( 1 , res . getInt ( "nbHits" ) )
Assert . assertEquals ( "2011-11-01 00:00:00" , formater . format ( date . getTime ( ) ) )
Assert . assertTrue ( "server should supoort case-insensitive" , isSupport )
assertEquals ( Arrays . asList ( new CalculatedDatum < Map < String , Integer > > ( "assessments" , "HighestEver" , "ACT" , "aggregate" , highestEver ) ) , data . getCalculatedValues ( ) )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
Assert . assertTrue ( newSql . equals ( "SELECT * FROM cpcplan" + suffix + " t1, cpc" + suffix + " t2 WHERE t1.a < t2.a(+)" ) )
assertThat ( getRecordedDomain ( ) , hasCondition ( Failed ) . withStatus ( "True" ) )
assertNotNull ( text )
assertThat ( problems . size ( ) , is ( 0 ) )
assertEquals ( - 150 , scorer . scorePosition ( board , context ) )
Assert . assertEquals ( 0 , repository . size ( ) )
assertTrue ( mapper . getOntologyIRIs ( ) . contains ( df . getIRI ( "http://owlapitestontologies.com/thesubont" ) ) )
Assert . assertEquals ( resp . getStatus ( ) , HttpServletResponse . SC_UNAUTHORIZED )
assertTrue ( getInflatedAuthnRequest ( action . getLocation ( ) ) . contains ( "ForceAuthn=\"true\"" ) )
assertEquals ( "image" , IOUtils . readStringFromStream ( ds . getDataSource ( ) . getInputStream ( ) ) )
Assert . assertEquals ( setBoolean , "" )
assertSame ( out , impl . invoke ( c ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( latch . await ( WAIT_SEC , TimeUnit . SECONDS ) )
Assert . assertTrue ( result . toString ( ) , result . isSuccessful ( ) )
assertEquals ( fakeResolver , factory . newNameResolver ( new URI ( "bbb://foo" ) , Attributes . EMPTY ) )
assertEquals ( expected , got )
assertNotNull ( "Therapy object was null" , therapy )
AssertiveInstance . init ( )
Assert . assertFalse ( userService . isSecretAnswer ( user , "not the answer" ) )
ctx . assertTrue ( topics . contains ( "topicToDelete" ) )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertEquals ( inc . get ( ) . get ( ) , outRA . get ( ) . get ( ) )
assertTrue ( parameter . isNamed ( ) )
assertEquals ( 0 , out . size ( ) )
assertEquals ( 1 , placemarkManager . getAll ( ) . size ( ) )
Assert . assertTrue ( this . manager . connectAll ( this . person1 , Arrays . asList ( this . family1 , this . family2 , this . family3 ) ) )
assertArrayEquals ( new byte [ ] { 1 , 2 , 3 , 4 } , sink . toByteArray ( ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertEquals ( result , MessageFormat . format ( "{0,date,short} {0,time}" , min + high ) )
assertEquals ( value , returned )
assertEquals ( "1.17549E-38" , sb . toString ( ) )
assertThat ( unmarshal ( sb ) , allOf ( hasEntry ( "mdc" + HACK_ATTEMPT , "mdc value" ) , hasEntry ( "explicit" + HACK_ATTEMPT , "explicit value" ) ) )
assertEquals ( "NOT (x LIKE '%4WD%')" , c . toString ( ) )
assertNotNull ( jobProperties )
assertEquals ( 0 , fields . size ( ) )
assertThat ( crossEstimator . getCardinality ( ) , is ( ae1bEstimator . getCardinality ( ) * ce2dEstimator . getCardinality ( ) ) )
Assert . assertEquals ( "Application name" , "TestAliasApp" , dag . getAttributes ( ) . get ( com . datatorrent . api . Context . DAGContext . APPLICATION_NAME ) )
assertEquals ( IP_10_123_1_54_80 , StringUtils . formatSocket ( socket ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertTrue ( vret . isPassed ( ) )
assertSelect ( tq , binding ( vars , "\"Alice\"" , "\"Smith\"" ) )
assertEquals ( expected , location )
assertTrue ( column . isIdentity ( ) )
assertThat ( OUT . isEmpty ( ) , is ( true ) )
assertEquals ( 404 , connection . getResponseCode ( ) )
assertEquals ( "tpc/incoming/2014/02/01/03" , path )
assertEquals ( ipResourceSet , parser . derToIpAddressChoice ( IpResourceType . IPv4 , Asn1Util . decode ( ENCODED_IPV4_RESOURCES ) ) )
assertThat ( p1 , is ( p2 . inverse ( ) ) )
assertTrue ( lineOffsetExpected . equals ( lineOffset ) )
assertEquals ( m1 , m2 )
assertEquals ( "http://example.org/{X}/{Y}/{X}" , URITemplates . getUriTemplateString ( f1 ) )
assertEquals ( 1 , result )
assertTrue ( "Expected comparison result " + comparisonResult + " to be greater than 0" , comparisonResult > 0 )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( expected , cls )
Assert . assertEquals ( str , obs . getValueAsString ( Locale . US ) )
assertEquals ( end - start , 100 , 50 )
assertTrue ( element . getElements ( ) . isEmpty ( ) )
Assert . assertEquals ( "42" , ( ( Foo ) result ) . getName ( ) )
Assert . assertEquals ( 1 , result . intValue ( ) )
assertEquals ( HttpStatus . CREATED , statusCode )
assertThat ( renderer . getShortForm ( entity ) , is ( "owl:topDataProperty" ) )
assertEquals ( "auditActionType must not be null." , e . getMessage ( ) )
assertEquals ( "First 80" , col0 . getText ( ) )
HeadlessTestUtils . assertHeadlessNot ( $ . driver ( ) . get ( ) )
assertNull ( result )
Assert . assertTrue ( expected . similar ( actual ) )
assertEquals ( CAFEBABE_SHA1_HEX , DigestUtils . bestHex ( bytes ) )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "adm2Name" ) )
Assert . assertEquals ( "123\n--\n[0:1,1:2,2:3]" , html )
assertEquals ( wktRDD . rawSpatialRDD . count ( ) , 103 )
assertEquals ( "weather thing default_value" , steps . get ( FIRST_STEP_PATH ) . getOutputs ( ) . get ( "kuku" ) )
assertThat ( response , containsString ( "wab version :" ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
assertEquals ( new URL ( rootAppbase + "42/" ) , app . getRemoteURL ( "" ) )
assertEquals ( 2 , traceBuilder . size ( ) )
assertNotNull ( response )
assertThat ( foundResources , contains ( p2id . getValue ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expected , result )
assertTrue ( actual . isEmpty ( ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getPriorityClassName ( ) , is ( "PriorityClassName" ) )
assertEquals ( "Pattern matches for all parameters " , true , lslp . parseLine ( pattern , 1 , 2 , 2 , 2 , 2 , "(username):.COMMAND=nub" ) )
assertTrue ( result . contains ( "The specified host configuration file already exists" ) )
assertTrue ( encoded . indexOf ( "\r\n" ) == encoded . lastIndexOf ( "\r\n" ) )
assertEquals ( "[(foobar:1>7)>(AppNode:file:10>14)]" , sn . stringify ( true ) )
assertTrue ( result )
this . assertEditPostFormMavIsCorrect ( mav )
assertEquals ( 1 , map . size ( ) )
assertThat ( result , is ( true ) )
Assert . assertEquals ( 0 , queue . size ( ) )
Assert . assertEquals ( 0 , violations . size ( ) )
assertEquals ( "Find by UOM label not returning a list with one value descriptor" , 1 , valueDescriptors . size ( ) )
assertThat ( results , is ( Arrays . asList ( "A" , "B" , "C" , "D" ) ) )
Assert . assertNull ( this . component . resolveEntity ( NONEXISTENT_ID ) )
assertEquals ( "pom.xml: application/xml" , buffer . toString ( UTF_8 . name ( ) ) . trim ( ) )
assertThat ( cut . apply ( pageObject ) , is ( true ) )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT * FROM A UNION SELECT * FROM B" ) )
assertThat ( renderingComparator . compare ( axiom1 , axiom2 ) , is ( 0 ) )
assertEquals ( "a<V>\n" , found )
assertTrue ( event . getId ( ) > - 1 )
Assert . assertTrue ( Models . isomorphic ( expected , actual ) )
Assert . assertTrue ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
assertEquals ( 0.167 , dataSet . collect ( ) . get ( 0 ) , 0.001 )
assertThat ( stringWriter . toString ( ) , is ( "\"SUPERADMIN\"" ) )
Assert . assertEquals ( 1 , a . getNumberOfProtectedMethods ( ) )
assertTrue ( rs1 . hasNext ( ) )
assertThat ( strings , contains ( "hello" , "world" ) )
assertThat ( c1 . call ( 1 , 2 , 3 ) , returns ( 19823 ) )
assertEquals ( 5.25D , toml . getDouble ( "double" ) . doubleValue ( ) , 0.0 )
Assert . assertThat ( _bad , Matchers . notNullValue ( ) )
assertEquals ( d1 , d2 )
assertThat ( ListNumbers . toListNumber ( array ) , equalTo ( ( ListNumber ) new ArrayFloat ( array ) ) )
assertArrayEquals ( data , stream . toByteArray ( ) )
Assert . assertNotNull ( addressResultsDto )
assertArrayEquals ( params , instance . getParams ( ) )
Assert . assertEquals ( xmlEsperado , icms51 . toString ( ) )
assertNotNull ( Query . fetcher ( "UAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "UHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 01" ) )
authRule . assertScenario ( scenario )
assertThat ( result , is ( false ) )
assertTrue ( "isLoaded should return true if only element not displayed is not required when " + "RequireAll annotation is used." , testView . isLoaded ( ) )
Assert . assertEquals ( CentralPivotingStrategy . class , getUnivariateStatistic ( ) . getPivotingStrategy ( ) . getClass ( ) )
assertEquals ( DecodeQualification . SUITABLE , readerPlugIn . getDecodeQualification ( stReader ) )
assertEquals ( HttpStatusCode . OK . code , response . getStatus ( ) )
Assert . assertEquals ( "AroundConstructPostConstruct" , bean . getMessage ( ) )
AsserterWithLazyInitialisationAlgorithm . ASSERTER . assertImmutable ( klasse )
assertTrue ( ! branch_conditions . isEmpty ( ) )
assertTrue ( "Expected Node" , obj instanceof Node )
assertNotNull ( factory . createContext ( file . toURI ( ) ) )
assertThat ( underTest . isValid ( Collections . singleton ( "dx27e${\"gggggggggggggggggggggggggggggggggggggggggggz\".toString().replace(\"g\", \"q\")}yv5rm" ) , context ) , is ( false ) )
assertThat ( channelDTO , nullValue ( ) )
assertEquals ( expResult , result )
assertEquals ( "I am Service 1" , service . sayHello ( ) )
assertEquals ( context . getBean ( SingleBean . class ) , builder . build ( ) )
assertEquals ( true , victim . getConfiguration ( ) . isDebug ( ) )
assertTitleEquals ( "resourceReference" , "WMS specification" , getSingleton ( resource . getResourceReferences ( ) ) )
assertTrue ( "Something wrong with empty deletedRoomData list!" , json . contains ( "nr_Building\"}}}]}}" ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEquals ( "job" , manager . getType ( ) )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
assertEquals ( 10 , result )
assertEquals ( v , v1 )
assertEquals ( "Generator should have been called once" , 1 , generator . callCount )
assertThat ( infos . length , is ( 0 ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( fieldSet ) instanceof WFieldSetRenderer )
assertEquals ( new EntityTuple ( entity ) . get ( "col1" ) , "val1" )
Assert . assertEquals ( "8080" , result )
assertOperation ( ( ) -> roleClient . getSpace ( name ) )
assertFalse ( credentials . isPresent ( ) )
Assert . assertEquals ( numTestEntities , list . size ( ) )
assertFalse ( tokenizer . next ( testString ) )
assertUrl ( url , "https" , "localhost" , 443 , "/" )
Assert . fail ( )
Assert . assertNull ( loadedModule )
assertEquals ( tagList1 , tagList2 )
assertTick ( 2 )
assertEquals ( 0.433 , new StandardError < > ( x , y ) . getStandardError ( ) , 0.001 )
assertTrue ( file . getEncoding ( ) != null )
assertEquals ( "encoded/decoded long do not match" , value , decoded )
given ( ) . header ( "Origin" , "http://127.0.0.1:8888" ) . when ( ) . get ( "tests/gateleen/cors/TestResource" ) . then ( ) . assertThat ( )
Assert . assertTrue ( "Serialized StaticRouteCollection is not equals to the expected one." , XmlHelper . compareXMLStrings ( expectedXml , xml ) )
assertEqualsIgnoreWhitespace ( expectedDRL , RuleModelDRLPersistenceImpl . getInstance ( ) . marshal ( model ) )
Assert . assertTrue ( futures . size ( ) == 1 )
assertThat ( result . endsWith ( "[groupId=12345]" ) , is ( true ) )
assertEquals ( sqe , convertResult . get ( 0 ) )
assertOut ( expected )
assertEquals ( ints , ints2 )
assertEquals ( timezone , "Asia/Seoul" )
assertThat ( arguments . getResources ( ) , contains ( FIRST_RESOURCE_URI , SECOND_RESOURCE_URI ) )
assertEquals ( 6 , query ( ) . from ( cat ) . orderBy ( cat . mate . kittens . get ( 0 ) . name . asc ( ) ) . fetch ( ) . size ( ) )
assertEquals ( Arrays . asList ( "/dest/test1.txt" , "/dest/woo/test2.txt" ) , walker . paths )
Assert . assertNotNull ( stream . read ( ) )
assertEquals ( ProductData . TYPE_INT8 , tiffIFD . getBandDataType ( ) )
assertEquals ( "Must be equal" , instanceIdentifierList . getTargetType ( ) . getName ( ) , Topology . class . getName ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS_UNSCALED )
assertFalse ( instance . isIncludePathColors ( ) )
assertThat ( RpslObjectFilter . diff ( original , updated ) , is ( "@@ -1,4 +1,2 @@\n" + " mntner:         UPD-MNT\n" + "-description:    descr\n" + "-mnt-by:         UPD-MNT\n" + " source:         TEST\n" ) )
assertEquals ( expResult , result )
assertTrue ( Initialize . isInitialized ( fs , sconf , conf ) )
assertEquals ( "DefaultExtension" , defaultExtension . toString ( ) )
assertEquals ( 0 , elements . size ( ) )
assertEquals ( "a/b/c" , SAXUtil . getXPath ( c ) )
assertEquals ( JodaBeanUtils . mapValueTypeTypes ( test , Person . class ) , expected )
Assert . assertEquals ( "1:2" , ret . toString ( ) )
assertTrue ( result . contains ( "CURRENT LOG APPENDER" ) )
assertThat ( mockFilterChain . actualMdcPutValue , is ( "123456789012345678901234567890123" ) )
Assert . assertTrue ( dictionary . createSynset ( POS . ADJECTIVE ) instanceof AdjectiveSynset )
assertTrue ( unwrapClass . isAssignableFrom ( unwrappedCache . getClass ( ) ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( 2 , servers . size ( ) )
Assert . assertEquals ( resourceContent , writer . toString ( ) )
assertNotNull ( SyncListPermission . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( buf . toString ( ) , "{\"a\":\"aa\",\"b\":{\"bb\":\"bbb\"},\"c\":\"cc\"}" )
assertTrue ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertEquals ( object , cache . get ( url , clazz , mediaType ) )
assertEquals ( CUSTOM_PAYLOAD , testConfig . getPayload ( ) )
assertUnderflow ( ( long ) x - ( long ) y , result )
assertEquals ( "axyz" + OptionHelper . _IS_UNDEFINED , result )
assertEquals ( "user2" , result )
assertFalse ( "This test failed unless you got EXTREMELY unlucky." , allSame )
assertNull ( parsedArg )
assertEquals ( Long . valueOf ( 5 ) , id )
assertEquals ( 2 , all . size ( ) )
assertEquals ( Minutes . of ( - 4 ) , test12 . dividedBy ( - 3 ) )
assertThat ( results , hasSize ( 0 ) )
Assert . assertEquals ( polygon , result . getValue ( ) )
assertTrue ( sut . writeList ( newArrayList ( new TestObject ( ) , new TestObject ( ) ) ) )
assertSame ( reply1 , reply2 )
assertEquals ( "{\"store\":{\"book\":[{\"category\":\"reference\",\"author\":\"Nigel Rees\",\"title\":" + "\"Sayings of the Century\",\"price\":8.95},{\"category\":\"fiction\",\"author\":\"Evelyn Waugh\"," + "\"title\":\"Sword of Honour\",\"price\":12.99}],\"bicycle\":{\"color\":\"red\",\"price\":19.95," + "\"newName\":\"\"}},\"arrayTest\":[1,2,3]}" , result . get ( RETURN_RESULT ) )
Assert . assertEquals ( expected , outValue )
Assert . assertEquals ( TEXT1 + TEXT2 , PdfTextExtractor . getTextFromPage ( new PdfDocument ( new PdfReader ( new ByteArrayInputStream ( bytes ) ) ) . getPage ( 1 ) , createRenderListenerForTest ( ) ) )
arrays . assertContains ( description , new byte [ 1 ] , null )
assertNotNull ( node . findComponentsByID ( ctxVars . get ( "comp" ) ) )
assertEquals ( 0L , runtimeService . createProcessInstanceQuery ( ) . involvedGroups ( Collections . singleton ( "nonInvolvedGroup" ) ) . count ( ) )
assertThat ( rendered , is ( test [ 1 ] ) )
Assert . assertEquals ( rtpPacket . getTimestamp ( ) , 0xF0DF , "Timestamp should be 0xF0DF." )
assertMockEndpointsSatisfied ( 1 , TimeUnit . MINUTES )
assertEquals ( arr , resultArr )
assertEquals ( input . parseObjectKey ( ) , expected )
assertEquals ( expected , Sets . newHashSet ( directedGraph . incomingEdgesOf ( "C" ) ) )
Assert . assertEquals ( Object . class , t . getType ( ) )
assertNull ( TYPE_HANDLER . getResult ( rs , 1 ) )
assertEquals ( Arrays . asList ( 1 , 2 , 3 ) , c )
assertNotNull ( user )
assertThat ( archetypeDAO , notNullValue ( ) )
Assert . assertEquals ( PingCommand . PONG , result )
assertTrue ( hmsPaths . findAuthzObject ( new String [ ] { "user" , "hive" , "warehouse" } ) . contains ( "default" ) )
assertFalse ( call ( dao -> dao . unlinkAsset ( asset ) ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( fullyQualified , full )
Assert . assertNotNull ( "MultiRFileOutputFormatter constructor failed to create an instance." , uut )
assertEquals ( 0 , tasks . size ( ) )
assertFalse ( results . getAttribute ( ValidationActionTypeService . VALIDATIONS_ACTION_ATTRIBUTE ) == null )
assertThatListContainsOneElement ( "foo" )
assertEquals ( "km" , s )
Assert . assertTrue ( InstanceValidationUtil . hasErrorPartitions ( mock . dataAccessor , TEST_CLUSTER , TEST_INSTANCE ) )
assertTrue ( "Failed to match with compatible IPv6 address." , match )
assertOutput ( expected )
assertEquals ( "The ensemble should change when a bookie is readonly even if we delay ensemble change." , 2 , lh . getLedgerMetadata ( ) . getAllEnsembles ( ) . size ( ) )
assertTrue ( o . description ( ) . startsWith ( "(overridden) " + "<j_org_robovm_objc_CustomClassTest$SubClass1: 0x" ) )
assertTrue ( consumerFile . exists ( ) )
assertEquals ( "31.Jul.2014 14:33:01 UncaughtException in thread: main (id 1, priority 5)\n" + "java.lang.RuntimeException: Second\n" + "\tat SecondClass.secondMethod(SecondClass.java:12)\n" + "\tat SecondClass.firstMethod(SecondClass.java:10)\n" + "\n" + "31.Jul.2014 13:58:14 UncaughtException in thread: main (id 1, priority 5)\n" + "java.lang.RuntimeException: First\n" + "\tat FirstClass.secondMethod(FirstClass.java:12)\n" + "\tat FirstClass.firstMethod(FirstClass.java:10)\n" , exceptionTextPane . getText ( ) . replaceAll ( "\\r\\n" , "\\\n" ) )
assertNotNull ( object )
assertEquals ( "" , value )
assertNull ( date )
datesWithCustomComparisonStrategy . assertIsInThePast ( someInfo ( ) , actual )
assertEquals ( 3 , record . size ( ) )
Assert . assertEquals ( "Region (RS Index)" , command . getLoad ( ) . getLevelClass ( ) . getLevelTypeString ( ) )
assertEquals ( table . getColumn ( 0 ) . getIdentifier ( ) , adapter . getColumnIdentifierAt ( 0 ) )
assertThat ( ( Integer ) prop0 . getClass ( ) . getMethod ( "getSeedRatio" ) . invoke ( prop0 ) , is ( 1500 ) )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( results , is ( new String [ ] { "A\tB" , "C\tD" } ) )
assertEquals ( "1.17549E-38" , sb . toString ( ) )
assertThat ( fe , notNullValue ( ) )
SetSpanReceiver . assertSpanNamesFound ( expectedSpanNames )
assertSame ( response , builder . create ( ) )
Assert . assertNotNull ( connection . getClientInfo ( ) )
assertNotNull ( ConfigUtils . newInstance ( this , "testProperty" , LocalClass . class ) )
assertThat ( formatterOutput , sameJSONAs ( expected ) )
Assert . assertEquals ( expected , result )
Assert . fail ( "Exception should be thrown" )
assertThat ( actualResults , equalTo ( expectedResponses ) )
assertNotNull ( presenter . listEditor )
Assert . assertEquals ( "after_each cmd" , Iterables . getLast ( commandList . getCommands ( ) ) )
assertEquals ( TypeScriptLanguage . LANGUAGE_KEY , desc . languages ( ) . iterator ( ) . next ( ) )
assertTrue ( outAny . equal ( inAny ) )
assertEquals ( result , StatusConverter . convertToStringList ( Status . values ( ) ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
AssertiveInstance . init ( )
assertTrue ( str . contains ( "rdf:type a rdf:Property , rdfs:Resource ; rdfs:label \"X\"^^xsd:string ." ) )
assertTrue ( config . isAdvancedClusterConfigSet ( ) )
assertFalse ( newVrp . getJobs ( ) . containsKey ( "4" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( expected , actual )
Assert . assertNull ( ewd )
Assert . assertEquals ( Redirect . Status . USE_PROXY . intValue ( ) , response . status )
Assert . assertEquals ( collectorChild . getFirstRecord ( ) . getFirstValue ( "field2" ) , new BigDecimal ( 10 * 4 ) )
Assert . assertEquals ( 1 , list . size ( ) )
assertNotNull ( containers )
assertDecorate ( serviceProps , EMPTY , RES_SD0 )
assertEquals ( "{\"d\":{\"EntitySets\":[" + "\"Employees\",\"Teams\",\"Rooms\",\"Managers\",\"Buildings\"," + "\"Container2.Photos\"]}}" , getBody ( response ) )
assertEquals ( expected , result )
assertEquals ( "https://java.example.com/foo/1/100/true/bar" , got . toString ( ) )
assertThat ( ChatColor . stripColor ( subject . toString ( ) ) , is ( expected . toString ( ) ) )
Assert . assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
assertEquals ( "foo" , ( String ) ext . getValue ( null , obj ) )
assertEquals ( value , bean . getIsTurkish ( ) )
assertNotNull ( "columnControl must load lf-specific icon" , UIManager . getInsets ( ColumnControlButton . COLUMN_CONTROL_BUTTON_MARGIN_KEY ) )
assertNull ( this . g2 . getClipBounds ( ) )
assertNotNull ( connectorInstanceTO )
assertThat ( ruleManager . get ( id [ 0 ] ) , is ( code [ 1 ] ) )
assertEquals ( previous , propertiesConfigurationProperties . put ( key , value ) )
Assert . assertEquals ( TimeZone . getTimeZone ( "America/Sao_Paulo" ) , config . getTimeZone ( ) )
assertEquals ( TEST_2007_07_15_PONE , t )
assertSuccess ( services . executeOperation ( udpOperation ) )
Assert . assertTrue ( compatibilityResult . isCompatible ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 }" )
Assert . assertFalse ( testFailed )
assertNull ( "Expected null privacy policy, but it is not." , privacyPolicy )
assertNull ( transaction )
Assert . assertEquals ( "null" , writer . toString ( ) )
Assert . assertEquals ( new ArrayNode ( ) . add ( new TextNode ( "field1" ) ) . add ( new IntNode ( 1 ) ) , node )
assertContains ( indels , 100 , "GNNNNNN" , "G" )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertMockEndpointsSatisfied ( )
assertNotNull ( objJPAEdmProperty . getEdmSimpleProperty ( ) )
assertEquals ( tropo . text ( ) , "{\"tropo\":[{\"record\":{\"url\":{\"url\":\"http://sendme.com/tropo\"},\"beep\":true,\"interdigitTimeout\":5.0,\"maxTime\":300.0,\"asyncUpload\":true}}]}" )
Assert . assertEquals ( new Partition ( "0-0" ) , partition )
assertBridJFaster ( bridJFaster , 20 )
assertSame ( error , failingStream . getError ( ) )
assertEquals ( expectedQuery , actualQuery )
tc . assertEquals ( thread , Thread . currentThread ( ) . getName ( ) )
assertThat ( result . getRequest ( ) . getSession ( false ) , nullValue ( ) )
assertTrue ( ex . isPrime ( 13 ) )
assertEquals ( "projects/settings/pages/associated_edit" , editAssociatedProjectsForProject )
assertThat ( result , is ( subscribedBolt ) )
assertEquals ( "[9, 8, 7, 6, 5, 4, 3, 2, 1]" , Arrays . toString ( dataReversed ) )
Assert . assertEquals ( NormalizeUtils . isSimpleField ( list ) , true )
assertEquals ( "foo --bar=" , connection . getOutputBuffer ( ) )
assertNotEquals ( cfg1 , cfg2 )
assertEquals ( assertion , linspace )
assertEquals ( "192.168.0.123/24" , event . getIp ( ) . getAddress ( ) )
verifier . assertFilePresent ( GENERATED_SCHEMA )
assertEquals ( "Expected another type of analyzer" , BrazilianAnalyzer . class , analyzer . getClass ( ) )
assertThat ( helloBleprintJson , notNullValue ( ) )
assertTokenStreamContents ( ts , new String [ ] { "vitajt" , "wikip茅di" } , new int [ ] { 0 , 11 } , new int [ ] { 7 , 20 } , null , new int [ ] { 1 , 2 } , null , 20 , null , true )
assertReflectionEquals ( actual , group )
Assert . assertEquals ( msg , result )
assertEquals ( expectedResult , verifyDrugref . invoke ( audit ) )
assertScenario ( )
Assert . assertEquals ( "<th>type</th> \n" + "<th>name</th> \n" + "<th>website</th>" , title )
assertEquals ( 2. , matrix . getTransportCost ( loc ( 1 ) , loc ( 2 ) , 0.0 , null , null ) , 0.1 )
assertEquals ( "100" , r )
Assert . assertNotNull ( o )
assertEquals ( FORMAT_JSON , queryParams )
assertEquals ( "Local changes" , ( Integer ) 1 , copyRef . deref ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( instance , AbstractEntity . get ( MyEntity . class , 3L ) )
assertEquals ( s1 , s2 )
Assert . areEqual ( 0 , st . getInt ( 1 ) , "验证无数据" )
assertEqualsIgnoreWhitespace ( expected , real )
assertNotNull ( patient )
Assert . assertNull ( actual )
assertThat ( response . getEntitySearchResults ( ) . get ( 0 ) . getHandle ( ) , equalTo ( "ORG-TEST1-TEST" ) )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'object',additionalProperties:{type:'object',properties:{f1:{type:'string'}}},description:'org.apache.juneau.jsonschema.JsonSchemaGeneratorTest$BeanMap<java.lang.Integer,org.apache.juneau.jsonschema.JsonSchemaGeneratorTest$SimpleBean>'}}}" , s . getSchema ( BeanMap [ ] [ ] . class ) )
Assert . assertEquals ( iiDesc , desc2 )
assertTrue ( "Filter should have executed" , FILTERED [ 0 ] )
assertThat ( TestI18n . testMessage2 . text ( "Test" , "Message" ) , is ( "Message Test" ) )
assertTrue ( pid > 0 )
assertTrue ( dd . isHeaderGroup ( NoHops . FIELD ) )
assertSamples ( )
this . assertVerification ( )
assertProcessInstanceCompleted ( processInstance )
Assert . assertEquals ( "First option should be optionA" , optionA , SelectListUtil . getFirstOption ( options ) )
assertEquals ( 1 , tokens . size ( ) )
assertEquals ( 5.0 , FrontUtils . distanceToNearestPoint ( point1 , front ) , EPSILON )
assertEquals ( "" , toml . getString ( "a" ) )
assertTrue ( "Make sure test.short is gone!" , ! cc . containsKey ( "test.short" ) )
assertTrue ( Double . isNaN ( percentile . evaluate ( emptyArray ) ) )
Assert . assertTrue ( bundle instanceof TimeFormatProvider )
assertEquals ( expectedBase64Result , new String ( result ) )
assertTrue ( true )
assertEquals ( expected , transformed )
assertNull ( ExpressionUtils . extract ( builder ) )
assertThat ( bomb . state ( ) , is ( "kaboom!" ) )
assertNotNull ( asociado . getId ( ) )
Assert . assertEquals ( urlEsperada , nota . getInfoSuplementar ( ) . getQrCode ( ) )
assertTrue ( StoreParams . sameValues ( p , pDft ) )
assertEquals ( true , p . getActive ( ) )
assertFalse ( dbCon . contains ( "some_id" ) )
assertTrue ( "Successful permission check was not logged" , loggedSuccessfulPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertEquals ( 0 , userList . indexOf ( user ) )
assertNull ( stream )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . GTE , v , TERM_FACTORY . getConstantLiteral ( "1" , XSD . LONG ) ) , translation . get ( 0 ) )
mockery . assertIsSatisfied ( )
Assert . assertNull ( new CompareTool ( ) . compareXmp ( destinationFolder + fileName , sourceFolder + "cmp_" + fileName , true ) )
assertEquals ( "ThinkTime(, )" , result )
Assert . assertEquals ( "��瑁�|��|��瑁�" , words )
assertEquals ( cells . size ( ) , 1 )
assertEquals ( expResult , result )
assertEquals ( stat , fromJson )
assertEquals ( ConnAckMessage . UNNACEPTABLE_PROTOCOL_VERSION , m_returnCode )
assertTrue ( e . getMessage ( ) . startsWith ( this . getClass ( ) . getName ( ) + " does not implement Filter" ) )
assertFalse ( validator . isValid ( resource , MetadataSection . PHYSICAL_SECTION ) )
assertEquals ( "Wrong string" , "EventType [ TEST ]" , s )
Assert . assertEquals ( URLDecoder . decode ( dest , "utf-8" ) , src )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
Assert . assertEquals ( "testHello" , receivedTestMessage )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertFalse ( "Expected ComplexSchema integer validation failure did not succeed" , schema . validate ( integerEntity ) )
assertEquals ( "Junit error" , "FFFFFF00" , color . toString ( ) )
assertThat ( "isSame must not return true for locations created with identical paths and different properties" , locationA1 . isSame ( locationA2 ) , is ( false ) )
assertEquals ( "Failed injecting literal with load()" , "\"foo\".toUpperCase()" , s )
assertTrue ( file . exists ( ) )
assertEquals ( a , vertice )
assertEquals ( expecting , found )
assertEquals ( unitTestTablePojoRead . isBooldata ( ) , false )
assertEquals ( expResult , result )
assertEquals ( dog , ExternalizableHelper . fromBinary ( binDog , v1 ) )
Assert . assertEquals ( relativeDate , reloaded . ttl , 5 )
assertThat ( changes . size ( ) , is ( 1 ) )
assertTrue ( result )
assertFalse ( multiMap . isEmpty ( ) )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 0 ) )
assertEquals ( "foo" , this . testClass . getUrl ( ) )
assertThat ( xray . getConstructors ( ) , hasSize ( 0 ) )
assertEquals ( expResult , result )
Assert . assertTrue ( "User should be logged in!" , browser . findElements ( By . xpath ( "//li[contains(text(), 'Welcome')]" ) ) . size ( ) > 0 )
assertThat ( versionedIdsOf ( units ) , bagEquals ( versionedIdList ( REFERENCED_BUNDLE_V1 , OPTIONAL_BUNDLE ) ) )
assertThat ( response . getStatus ( ) , is ( 200 ) )
assertTrue ( testResults . getInvoked ( ) )
Assert . assertEquals ( 1 , term . getConceptReferenceTermMaps ( ) . size ( ) )
assertNotNull ( resultMap )
assertTrue ( cv . supports ( Date . class ) )
assertEquals ( 0.0 , score , 0 )
assertEquals ( 8215 , i )
assertEquals ( 10 , toTest . deserialize ( ) )
Assert . assertNull ( result )
assertNull ( "Duplicate revision" , duplicate [ 0 ] )
assertElementsText ( "H1" , "URL's visited" )
assertEquals ( 1 , interceptAnnotations . size ( ) )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
assertEquals ( 654321 , ws . getSendBufferSize ( ) )
assertFalse ( outputGraphExecutor . equals ( nullOutput ) )
Assert . assertEquals ( 404 , ex . getContext ( ) . getProperty ( HttpContextMapper . HTTP_RESPONSE_STATUS ) . getValue ( ) )
assertEquals ( query . singleResult ( ) . getId ( ) , job . getId ( ) )
assertFalse ( "isDisplayed should return false if a number of elements less than specified " + " as required are displayed." , element . isDisplayed ( ) )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "aClass" ) )
assertEquals ( Sets . newHashSet ( testWorkflow1v1 , testWorkflow1v2 ) , iridaWorkflows )
assertArrayEquals ( TEObjectUtil . TE_LSP_REQUIRED_ATTRIBUTES , ByteArray . getAllBytes ( output ) )
assertArrayEquals ( Doubles . toArray ( huginProbabilities ) , Doubles . toArray ( amidstProbabilities ) , 0.025 )
assertEquals ( "FDN Communications" , ispl . getOrg ( "70.46.123.145" ) )
assertTrue ( smsSettings . isConfigured ( ) )
assertThat ( pages . isCurrentPageAt ( ApacheHomePage . class ) , is ( true ) )
Assert . assertEquals ( 4 , result )
assertFactorization ( poly , UnivariateSquareFreeFactorization . SquareFreeFactorization ( poly ) )
assertFalse ( "There should not be any row" , listParser . nextRow ( ) )
assertEquals ( "TGVhcm4uIEVhdC4gQ29kZS4=" , encodedPhrase )
assertTrue ( emptySet . isEmpty ( ) )
assertEquals ( createChildListing ( "child1" ) , future . get ( ) . getResult ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , expectedQuery ) )
Assert . assertTrue ( users . size ( ) >= 0 )
Assert . assertEquals ( "Unexpected coverage: " , 2d / 3d , best . getCoverage ( ) , 0.001 )
assertTrue ( permissionEvaluator . hasBranchPermission ( authentication , "project" , "branch" , Permission . EDIT_PAGE ) )
Assert . assertEquals ( "" , InfluxDbPoint . map2String ( map ) )
assertEquals ( "test" , JsonbProvider . provider ( ) . create ( ) . build ( ) . fromJson ( new StringReader ( json ) , SimpleProperty . class ) . value )
assertSame ( t . minus ( Duration . ZERO ) , t )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertEquals ( 0 , treeMap . size ( ) )
assertTrue ( userCanSubmitChangeRequest )
assertTrue ( timeline . getFetchCount ( ) > 0 )
assertEquals ( "Select scripts are not the same" , expectedMergeSourceInDifferentSchema ( ) , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( "1:xxxy;\n" , found )
assertEquals ( expected , bos . toString ( ) )
org . junit . Assert . assertEquals ( expected , tHandler . getLastRecord ( ) . getThrown ( ) )
assertThat ( outputFile . length ( ) , is ( fileLen ) )
assertNumEquals ( 0d , mdd . calculate ( series , tradingRecord ) )
Assert . assertEquals ( 2 , violations . size ( ) )
assertEquals ( "{\"hello\":[1,2]}" , writer . toString ( ) )
assertNotNull ( key )
assertRoundtrip ( input )
assertEquals ( 0. , violation , 0.01 )
assertEquals ( Boolean . valueOf ( true ) , result )
assertNotNull ( sKey , aCSS )
assertTrue ( "Should get valid parser" , parser != null )
assertTrue ( rule . shouldProceed ( userSession , request ) )
assertEquals ( displayer . isRefreshOn ( ) , true )
assertAnnotations ( 2 , Quantity . class , new TestQuantity ( 0 , "400 square yards" , 400 , "yd^2" , 400 * Area . YD2_TO_M2 , "m^2" , "area" ) , new TestQuantity ( 1 , "400yd^2" , 400 , "yd^2" , 400 * Area . YD2_TO_M2 , "m^2" , "area" ) )
assertTrue ( true )
Assert . assertFalse ( "multipart/byteranges" . equalsIgnoreCase ( elt . getName ( ) ) )
assertNull ( email )
assertEquals ( 0 , manager . getAll ( ) . size ( ) )
assertFalse ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
assertNull ( lookUpManager . lookUpWorkingObjectOrReturnNull ( object ) )
assertEquals ( l1 , l2 )
assertEquals ( "|one |two |three    |\n" + "|four|five|siiiiiiix|\n" , tabulator . tableOf ( data ) )
assertEquals ( attributes , repositoryRecord . getCurrent ( ) . getAttributes ( ) )
assertEquals ( expected , sanitized )
assertTrue ( res . toString ( ) . contains ( "HEALTHY" ) )
assertEquals ( "Expected response not seen." , 404 , response . getStatus ( ) )
assertThat ( ( String ) Whitebox . invokeMethod ( target , "getDestinationPath" , path ) , is ( "topology/nodes" ) )
assertThat ( instance , notNullValue ( ) )
assertEquals ( "Merged history event should have a type of " + HistoryEvents . MERGED_TYPE , HistoryEvents . MERGED_TYPE , mergedHistoryMap . get ( fields . getHistoryType ( ) ) )
assertNull ( person2 )
assertNotNull ( "IDPSSODescriptor is not null" , sp )
context . assertIsSatisfied ( )
Assert . assertEquals ( Redirect . Status . USE_PROXY . intValue ( ) , response . status )
assertEquals ( "Darwin" , os )
assertTrue ( i + ", " + src . getAbsolutePath ( ) , src . delete ( ) )
assertEquals ( 1024L , FutureUtils . result ( future ) . longValue ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertThat ( result , is ( "((item.lastmodified:[" + escapedFromDate ( DATE ) + " TO *]))" ) )
Assert . assertEquals ( "should have updated info" , testUser , updatedUser . getInfo ( ) )
assertTrue ( AcceptanceTestUtil . isInterested ( peerComponent , remoteWorkerOID . getServiceID ( ) , remoteWorkerMonitorOD . getDeploymentID ( ) ) )
assertEquals ( 1.0 , ( ( DoubleValue ) ( ( SelectExpressionItem ) ( ( PlainSelect ) select . getSelectBody ( ) ) . getSelectItems ( ) . get ( 0 ) ) . getExpression ( ) ) . getValue ( ) , 0 )
assertTrue ( "Found nested declarations" , nested == null || nested . isEmpty ( ) )
assertEquals ( "Should have been authenticated." , nonAdminTestingAccountEmail , answer . getReturnVal ( ) )
assertEquals ( true , ( allTopics . size ( ) > 0 ) )
assertTrue ( trashState )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response body is: <xml />" ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destName + ".pdf" , sourceFolder + "cmp_" + name + ".pdf" , destinationFolder , "diff_" ) )
assertEquals ( "" , result )
assertFalse ( iter . hasNext ( ) )
assertThat ( partitionKeyValue . toJson ( ) , equalTo ( mapper . writeValueAsString ( Collections . singletonList ( Collections . EMPTY_MAP ) ) ) )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertEquals ( NOT_FOUND . getStatusCode ( ) , status )
Assert . assertEquals ( "http://localhost" + SonarNavigator . RESOURCE_PATH + "123" , url )
assertThat ( "missing owner not detected" , validation . hasErrorAbout ( "no" , "owner" ) )
assertEquals ( testSet , monitorNames )
assertThat ( findFeature ( features , "ChangeAvailability" ) , is ( instanceOf ( ChangeAvailabilityFeature . class ) ) )
assertEquals ( "twitter/tweet/_search" , search . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertReplacement ( input , regex , replacement , lookBehind , capacityCharBuf , expectedOutput , flags )
assertEquals ( V8Value . V8_OBJECT , type )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
Assert . assertTrue ( isValid , "Poll with empty title and empty items must be valid" )
assertEquals ( expected , toJSON ( series ) )
assertEquals ( "3 n盲dalat tagasi" , t . format ( new Date ( 0 ) ) )
assertEquals ( clazz , request . getTargetClass ( ) )
assertEquals ( null , params . getString ( new Parameter ( "a.b.c.k" ) , null ) )
assertThat ( o , nullValue ( ) )
Assert . assertEquals ( entity . publicValue , actualValue )
assertTrue ( result == true || result == false )
assertEquals ( builder1 . hashCode ( ) , builder2 . hashCode ( ) )
Assert . assertNotNull ( cu )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_copyFields01.pdf" , destinationFolder , "diff_" ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertTrue ( Arrays . equals ( data , ( boolean [ ] ) deserialize . readObject ( boolean [ ] . class ) ) )
assertions . startsWith ( sequence )
assertEquals ( expected , actual )
assertEquals ( expResult , result )
Assert . assertTrue ( learn != null )
assertThat ( errors , not ( hasFieldErrors ( "givenName" ) ) )
Assert . assertEquals ( 0 , stat )
assertFalse ( schema . hasIndices ( ) )
Assert . assertEquals ( 1 , new QueryRunner ( this . em ( ) . unwrap ( DataSource . class ) ) . query ( "SELECT COUNT(*) FROM Foo" , new SingleValueHandler < Number > ( ) ) . intValue ( ) )
assertTrue ( ints . get ( i ) == null )
assertNotNull ( table )
assertLongArrayEquals ( expected , toLongArray ( splits ) )
assertEquals ( "Must be Equal" , interfaceTypeClass , InterfaceTypeVxlan . class )
Assert . assertEquals ( 2 , tables . size ( ) )
assertThat ( val , is ( equalTo ( "something" ) ) )
assertEquals ( a . getAllAliases ( ) , expected )
assertEquals ( "float: 1.2" , b . primitiveFloat ( 1.2f ) )
assertGameOver ( )
assertThat ( getInst ( ) . getMasterNode ( ) , equalTo ( masterNode ) )
assertNull ( "An empty byte array should be translated to null" , ser . fromByteBuffer ( ByteBuffer . wrap ( new byte [ 0 ] ) ) )
assertFalse ( isAuthenticated )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
Assert . assertTrue ( queueResponse . isOk ( ) )
assertEquals ( 1.0 , instance . inclusiveHypervolume ( ind ) , 0.0 )
assertEquals ( OTHER_TITLE , metadata . getTitle ( ) )
Assert . assertTrue ( comparator . compare ( cell2 , cell1 ) == 1 )
assertEquals ( expResult , result )
assertEquals ( expected , IbUtils . getDefaultTagList ( ) )
assertThat ( ret , is ( notNullValue ( ) ) )
assertEquals ( expectedResult , verifyTomcat . invoke ( audit ) )
Assert . assertEquals ( "SELECT * WHERE { <http://example.org> <http://predicate> \"A \\\"test\\\" string\" . }" , query . toString ( ) )
Assert . assertTrue ( ! seenKeys . contains ( pwmSetting . getKey ( ) ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
assertEquals ( asList ( "A" , "B" , "HELLO" ) , collected )
assertFederatedServiceResource ( resource )
Assert . assertEquals ( icmsSetado , icms . getIcms60 ( ) )
assertContains ( e . getMessage ( ) , "'id'" )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertEquals ( true , objectSet . isEmpty ( ) )
assertThat ( browser . stream ( ) . map ( b -> ( WebDriverBrowser ) b ) . map ( WebDriverBrowser :: getWrappedDriver ) . map ( TargetedWebDriver :: getWebDriverTarget ) . collect ( Collectors . toList ( ) ) , containsInAnyOrder ( WebDriverTargets . window ( "hasView" ) , WebDriverTargets . window ( "alsoHasView" ) ) )
assertNotNull ( productRepository )
Assert . isTrue ( true )
assertEquals ( 0 , ShadowToast . shownToastCount ( ) )
assertEquals ( expected , loopingGraph . getVertices ( ) )
assertEquals ( "theuser" , impp . getHandle ( ) )
assertEquals ( "Select with descending order by" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertEquals ( 0 , analyser . getWaitingTimeAtActivity ( route . getStart ( ) , route ) , 0.01 )
Assert . assertEquals ( "center" , cell . getHorizontalAlign ( ) )
assertThatSql ( query , is ( "SELECT nodes.col1,nodes.col2 FROM table AS nodes" ) )
assertEquals ( 5.3 , result , 0.00001 )
assertThat ( end . toZonalTimestamp ( tz . getID ( ) ) , is ( PlainTimestamp . of ( 2011 , 12 , 31 , 0 , 0 ) ) )
repository . findByFirstnameAndLastname ( Single . just ( "Walter" ) , "White" ) . test ( ) . awaitCount ( 1 ) . assertNoErrors ( )
Assert . assertEquals ( h2 . get ( "key" ) , h . get ( "key" ) )
Assert . assertEquals ( IntNode . valueOf ( 1 ) , result )
assertTrue ( "Path for added node is wrong: actual=" + listener . getEvents ( ) . get ( 0 ) . getPath ( ) + ", expected=" + addedNode . getPath ( ) , containsPath ( listener , addedNode . getPath ( ) ) )
assertTrue ( page . asXml ( ) . contains ( "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;" ) )
Assert . assertNull ( file )
Assert . assertEquals ( "Unexpected number of locks created" , _lockIDs . size ( ) , _locks . size ( ) )
assertEquals ( vr . getValidity ( ) , Validity . VALID )
assertEquals ( 0 , testResults . getDeliveries ( ) )
Assert . assertEquals ( 10 , statusTuples . size ( ) )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
Assert . assertEquals ( 0 , terms . size ( ) )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertEquals ( 0 , ( ( char [ ] ) instance . encode ( obj ) ) . length )
assertViolationsThat ( report . getValidationViolations ( ) , equalTo ( "Root definition has no documentation" ) , equalTo ( "baseUriParameter 'path' in Root definition has no description" ) , equalTo ( "resource(/bla/{param}) has no description" ) , equalTo ( "baseUriParameter 'path' in resource(/bla/{param}) has no description" ) , equalTo ( "uriParameter 'param' in resource(/bla/{param}) has no description" ) , equalTo ( "action(GET /bla/{param}) has no description" ) , equalTo ( "baseUriParameter 'actioninvalid' in action(GET /bla/{param}) has no description" ) , equalTo ( "queryParameter 'ok' in action(GET /bla/{param}) has no description" ) , equalTo ( "header 'ok' in action(GET /bla/{param}) has no description" ) , equalTo ( "formParameter 'Form' in action(GET /bla/{param}) mime-type('application/x-www-form-urlencoded') has no description" ) , equalTo ( "action(GET /bla/{param}) response(200) has no description" ) , equalTo ( "header 'ok' in action(GET /bla/{param}) response(200) has no description" ) )
assertTrue ( nodes . split ( "\n" ) . length > 0 )
assertEquals ( 2 , eventSubscriptions . size ( ) )
assertThat ( issues , is ( empty ( ) ) )
assertEqualDoubleVectors ( pyinv , inv , epsilon )
assertEquals ( "" , date )
assertSomeDataGuessed ( expected , actual )
assertEquals ( newValue , presenter . getValue ( ) )
assertEqualsIgnoreWhitespace ( expectedDRL , RuleModelDRLPersistenceImpl . getInstance ( ) . marshal ( model ) )
assertEquals ( "hello hasse" , normalizer . normalize ( value ) )
assertNull ( v8 . getData ( "foo" ) )
Assert . assertTrue ( zippath . endsWith ( "\\org\\onetwo\\common\\excel\\bus_copy.zip" ) )
assertTrue ( manager . isEndOfStreamMarked ( ) )
assertThat ( subject . getFormattedKey ( ) . toString ( ) , is ( "[mntner] DEV-ROOT-MNT" ) )
Assert . assertEquals ( "95686bc0483262afe170b550dd4544d1" , result . toStringUtf8 ( ) )
assertEquals ( 4 , extension . getHandlersForExceptionType ( IllegalArgumentException . class , bm , qualifiers , TraversalMode . BREADTH_FIRST ) . size ( ) )
Assert . assertEquals ( lastModificationTimeMs , inodeDirectory . getLastModificationTimeMs ( ) )
assertEquals ( expResult , result )
assertEquals ( null , extractedName )
assertTrue ( "testCanEditBooleanAuth2 0" , collectionService . canEditBoolean ( context , collection ) )
assertEquals ( 1 , cache . listPrivileges ( null , null , null , new Server ( "server1" ) , new Database ( "db1" ) ) . size ( ) )
assertEquals ( expected , actual )
assertEquals ( 80 , cli . getHostConfiguration ( ) . getProxyPort ( ) )
assertEquals ( "package org.kissmda.test.junit;\n" + "import java.util.Collection;\n" + "import java.util.List;\n" + "public abstract class ClazzName {\n" + "  public <T>List<T> asList(  Collection<T> values){\n" + "    return null;\n" + "  }\n" + "}" , cu . toString ( ) . trim ( ) )
assertTrue ( victim . accept ( request ) )
assertEquals ( true , attributes . isRegularFile ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( f1 , f2 )
assertEquals ( expecteds , actuals )
assertFalse ( "InetSocketAddress should be recreated" , inetSocketAddress1 == inetSocketAddress2 )
assertTrue ( job . getClassLoader ( ) instanceof Fake_ClassLoader )
assertEquals ( packet , p )
assertEquals ( 1.234 , empty . getDeviation ( ) , 0.001 )
assertEquals ( WeakCipherBlackList . RSA_EXPORT_WITH_RC2_CBC_40_MD5 , weakCipher )
assertEquals ( "Hello ^^ John" , ResponseBodyInterpolator . interpolate ( "Hello ^^ :name" , req ) )
assertArrayEquals ( expected , result )
assertEquals ( "file://localhost/etc/password" , one . absUrl ( "href" ) )
assertEquals ( new Coordinate ( 48.5 , 11.5 ) , l . center )
assertThat ( domain . getValidationFailures ( resourceLookup ) , contains ( stringContainsInOrder ( "managedServers" , "ms1" ) ) )
assertEquals ( TestEnum . TWO , readValue )
assertTrue ( isValidExistingSymbol ( ) )
assertTrue ( latch . await ( 15 , TimeUnit . SECONDS ) )
assertNotNull ( "Previous step failed" , uri_sessionInstance )
assertEquals ( expected , actual )
assertEquals ( Proxy . NO_PROXY , result . get ( 0 ) )
assertReflectionEquals ( marker , result )
assertEquals ( expected , out )
assertEquals ( expected , actual )
assertThat ( mFileHelper . mImageFile , is ( nullValue ( ) ) )
assertNull ( store . pull ( key1 ) )
assertThat ( matcher . matches ( "{\"number\":1}" ) , is ( true ) )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertThat ( duration . isNegative ( ) , equalTo ( false ) )
assertEquals ( "* :123: Arthur Dent\n" , toWikiText ( note ) )
assertEquals ( expResult , result )
assertThat ( port , is ( equalTo ( ResourcePublisher . DEFAULT_PORT ) ) )
Assert . assertTrue ( "expecting the false positive rate to be lower than 3%" , falsePositiveRate < 0.03d )
assertNull ( cfg . nullValue ( ) )
assertThat ( e . getCause ( ) , Matchers . instanceOf ( ArangoDBException . class ) )
assertNull ( delete . getErrorResponseBody ( ) )
assertEquals ( content , "Line1\nLine2" )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . OK , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertEquals ( 0 , inclusionTerms . size ( ) )
assertEquals ( logs . get ( i ) , message )
Assert . assertEquals ( expectedResult , resultString )
assertThat ( DateInterval . parseISO ( "P775D/2014-02-14" ) , is ( expected ) )
assertions . doesNotContain ( values )
assertEquals ( 8 , result . size ( ) )
assertThat ( tracker . getAll ( ) [ firstElementOfArray ] , is ( item ) )
assertNotNull ( IndexWriter . getCommitter ( env ) )
assertEquals ( 2 , ksession . fireAllRules ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertThat ( output , containsString ( "FHIR resource search results:" ) )
assertEquals ( "5" , exec . getNumReduceTasks ( ) )
assertFalse ( fixture . hasSubscriptionId ( ) )
assertParseOneDoc ( editor , "DOC(0): " , "  KEY(0): world:" , "    KEY(2): europe:" , "      KEY(4): france:" , "        RAW(6): cheese" , "      KEY(4): belgium:" , "        RAW(2): beer" , "    KEY(2): canada:" , "      KEY(4): montreal: poutine" , "      KEY(4): vancouver:" , "        RAW(6): salmon" , "  KEY(0): moon:" , "    KEY(2): moonbase-alfa:" , "      RAW(4): moonstone" , "      RAW(-1):" )
Assert . assertArrayEquals ( "original array not equals compress/decompressed array" , result , bytes )
assertThat ( status , equalTo ( GGDataSource . Status . ABEND ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfAnnotationLinkAllParams.pdf" , sourceFolder + "cmp_xfdfAnnotationLinkAllParams.pdf" , destinationFolder , "diff_" ) )
assertEquals ( "true" , result . getResource ( 0 ) . getContent ( ) . toString ( ) )
assertThat ( count , is ( 1L ) )
assertTrue ( possibleOutcomes . isEmpty ( ) )
assertThat ( action , is ( Matchers . not ( new SetProjectPrefixDeclarationsAction ( projectId , otherDecls ) ) ) )
assertNotNull ( result )
assertForbiddenResponse ( response )
assertTrue ( true )
assertArray2dEquals ( expecteds , actuals )
assertEquals ( expected , uri . toString ( ) )
assertXMLIdentical ( new Diff ( result , combineWithIdKey ( recessive , dominant ) ) , true )
assertEquals ( lines - 1 , results )
assertTrue ( ndefMessage . getNdefRecords ( ) . length == 2 )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
assertEquals ( "Wrong result" , value , interpolator . interpolate ( value ) )
Assert . assertFalse ( countries . isEmpty ( ) )
Assert . assertEquals ( 1 , dependences . size ( ) )
Assert . assertNull ( "Should be null for option with null code" , SelectListUtil . getOptionWithMatching ( options , "A" ) )
assertMatch ( alertConfiguration , alert )
assertTrue ( node . equals ( node ) )
assertThat ( testResponse , is ( expectedResponse ) )
assertTrue ( o . description ( ) . startsWith ( "(overridden) " + "<j_org_robovm_objc_CustomClassTest$SubClass1: 0x" ) )
assertTrue ( contains )
assertTrue ( result . isFailure ( ) )
assertEquals ( BAD_REQUEST_400 , response . getStatus ( ) )
assertEquals ( 5 , calculator . getResult ( ) )
assertSuccessOrCancelled ( response )
assertXMLIdentical ( new Diff ( result , combineWithIdKey ( recessive , dominant ) ) , true )
assertNull ( res )
assertEquals ( "[{key:value},{key:value}]" , target . toString ( ) )
assertThat ( resultedQuery , is ( expectedQuery ) )
assertNull ( "Clinical data is not null for ID" , clinicalData )
clusterSetup . assertLocationsEqualError ( )
assertEquals ( new Rectangle ( 0 , 11 , 100 , 10 ) , pos )
assertTrue ( r1 instanceof PublicCloneable )
assertTrue ( raises )
assertEquals ( "cast('2003-12-31' AS date)" , helpGetString ( func ) )
assertEquals ( 400 , r . getStatus ( ) )
assertEquals ( "select cast('a''c' AS b)" , result )
assertEquals ( 2 , in . getByteCount ( ) , 0L )
Assert . assertNotNull ( actual )
Assert . assertNotNull ( testSession )
assertArrayEquals ( new long [ ] { 3 } , result )
Assert . assertEquals ( 3 , vertices . size ( ) )
assertTrue ( map . containsKey ( JSR166TestCase . six ) )
Assert . assertEquals ( true , config . isDebug ( ) )
assertOut ( "/**\n * @private\n * @type {number}\n */\nRoyaleTest_A.prototype.foo" )
assertTrue ( commiters . isEmpty ( ) )
Assert . assertEquals ( "There is no item here." , responseResult . getText ( ) )
Assert . fail ( "ClassCastException expected" )
assertThat ( "getValue" , node . getValue ( ) , is ( 1 ) )
assertEquals ( "HELLO WORLD!\n" , scriptContent . evaluate ( build , listener , ScriptContent . MACRO_NAME ) )
assertEquals ( "foo" , classifier . classify ( new Bar ( ) ) )
assertEquals ( expecting , found )
assertEquals ( Result . PASS , type . apply ( item ) )
assertEquals ( 1 , testList . size ( ) )
Assert . assertNotNull ( selfInjected )
assertEquals ( "3 giorni fa" , t . format ( new Date ( 0 ) ) )
assertEquals ( sampleIn . doNotRemoveNarrowingCast2 ( oi ) , sampleOut . doNotRemoveNarrowingCast2 ( oi ) )
assertThat ( events [ 0 ] , instanceOf ( OrientCleanupPolicyCreatedEvent . class ) )
Assert . assertEquals ( otfLength , reparsedFont . header . totalSfntSize )
assertMockEndpointsSatisfied ( )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaParameterTypeDefinition ( "" , "(.*)" , method , false , false , false , lookup ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertEquals ( expected , sb . toString ( ) )
assertTrue ( "Returned object should be a SynchronizedSortedBag." , bag instanceof SynchronizedSortedBag )
assertThat ( target . onConnectionChangedAddedPre ( msg ) , is ( false ) )
assertThat ( res . toString ( ) , is ( equalTo ( "My friend Rokko is 30 years old." ) ) )
Assert . assertEquals ( getPerson . getFieldValues ( "name" ) . get ( 0 ) . toString ( ) + getPerson . getFieldValues ( "hometown" ) . get ( 0 ) . toString ( ) , getPerson . getFieldValues ( "newCalName" ) . get ( 0 ) . toString ( ) )
assertDepth ( "add" , callTree , expectResult )
assertThat ( "Event did not return correct event type" , listener . getEvents ( ) . get ( 0 ) . getType ( ) , is ( Event . NODE_ADDED ) )
assertFalse ( lock . tryLock ( new RtlSdrListener2 ( ) ) )
assertEquals ( counter . getValue ( ) , 0 )
assertEquals ( expectedAst , ast . dump ( "" ) )
assertTrue ( "Got only " + words . size ( ) + " words" , words . size ( ) > 50_000 )
assertThat ( condition . isSatisfied ( ) , is ( false ) )
assertEquals ( ( Double ) 0d , getTarget ( results , "high_time" ) )
assertEquals ( 1 , a1 . getValues ( ) [ 0 ] )
assertEquals ( 1 , targets . size ( ) )
assertNotNull ( result )
Assert . assertEquals ( sum . getSum ( ) , 0.0 , 0.001 )
assertTrue ( celebration . after ( superBowlXLV ) )
assertNotNull ( result )
assertEquals ( expResult , result )
assertTrue ( connectFuture . isConnected ( ) )
assertEquals ( "SSS:1234trueW:5" , x . toString ( ) )
assertTrue ( uuid . length ( ) == urlToken . length ( ) )
assertNull ( out )
assertEquals ( 1 , g . size ( ) )
assertTrue ( key . isComplete ( ) )
Assert . fail ( "testCreateSymlink - expected exception is not thrown" )
Assert . assertTrue ( translateService . isTranslated ( field ) )
assertEquals ( "abc,xyz" , sw . toString ( ) )
assertArrayEquals ( expectedBytes , serializer . serialize ( ) )
assertEquals ( 6 , s )
assertThat ( signature , containsInAnyOrder ( entityA , entityB ) )
assertEquals ( "http://localhost:80/" , httpEndpoint )
assertEquals ( new String ( result ) , "test parsed" )
Assert . assertNull ( ArrayUtils . get ( array , 1 ) )
assertFalse ( problem )
assertThat ( sampledValue . getPhase ( ) , equalTo ( phase ) )
assertTrue ( text . contains ( "Seam Reports Rocks" ) )
assertEquals ( expectedValues , DurationsConverter . convertFromNanos ( input , SECONDS ) )
Assert . assertFalse ( AddonUtils . isListWithKeyAndDisplayValues ( properties ) )
given ( ) . param ( "expand" , 1 ) . when ( ) . get ( "resources/" ) . then ( ) . assertThat ( )
Assert . assertTrue ( count == 0 || count == runs )
assertTrue ( "Should return true because collection is empty" , CollectionUtils . isEmpty ( testCollection ) )
assertThat ( currentSessionManager . getMeasurementStreams ( ) . size ( ) , equalTo ( 1 ) )
assertNull ( outbound ( writeTarget ) )
assertThat ( result , is ( "a,b," ) )
assertEquals ( domTreeEntry , domRpcEntry )
Assert . assertEquals ( expected , actual )
assertEquals ( "tR3+Ty81lMeYAr/Fid0kMTYa/WM=" , signer . sign ( request , params ) )
assertEquals ( "Incorrect string generated" , String . format ( "%n    - Set bar to foo from ExampleData and OtherTable, joined on x is y" ) , HumanReadableStatementHelper . generateAliasedFieldAssignmentString ( field ) )
assertDateEquals ( new DateTime ( 2013 , 5 , 20 , 15 , 3 , 0 , 0 ) , date )
assertArrayEquals ( bytes , field . getBytes ( ) )
assertEquals ( "SELECT @version as alias FROM C" , q . toString ( ) )
assertAllCommandsUsed ( )
assertThat ( allUsedBindings ( result ) , containsInAnyOrder ( "$p" ) )
assertNull ( fileOperationMap . getOperation ( operation . getPnfsId ( ) ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( i , fromList )
assertEquals ( expectedQuery , query )
assertThat ( result , is ( false ) )
Assert . assertTrue ( pattern2 . matcher ( employee . getName ( ) ) . matches ( ) )
assertThat ( actual , is ( Key . create ( CounterData . class , TEST_COUNTER_NAME ) ) )
Assert . assertTrue ( rawClass . isArray ( ) )
assertNull ( query . singleResult ( ) )
Assert . assertEquals ( expected , tested . listRequestInit ( ) )
assertSame ( "requestsCount" , 1 , ejbCounter . getRequestsCount ( ) )
assertEquals ( msg , client2MessageReceived . get ( ) )
assertEquals ( OTHER_GRAPHITE_IPPORT , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( ( byte ) i , bytes [ i ] )
assertEquals ( actualMime , "test/test-mime" )
assertEquals ( 3.0 , costs , 0.01 )
AssertionUtils . multiAssertEquals ( createAsDocument11 , response7 . getResponseObject ( ) )
assertThat ( changeList . getResult ( ) , is ( subject ) )
Assert . assertTrue ( returnedVisibilities . isEmpty ( ) )
assertNotSupported ( result )
assertEquals ( "numhits is wrong" , 1104 , res . getNumhits ( ) . intValue ( ) )
assertThat ( actual , is ( equalTo ( "test" ) ) )
assertThat ( MDC . get ( "FOO" ) , equalTo ( "BAR" ) )
assertThat ( thrown , instanceOf ( MaximumTimeLimitExceededException . class ) )
assertEquals ( 2 , map . size ( ) )
assertThat ( result , is ( new String [ ] [ ] { { "Hello\r\nworld!" } } ) )
assertThat ( structTypeInfo . getTypeName ( ) , is ( new StringBuilder ( ) . append ( "struct<" ) . append ( "col0:string," ) . append ( "col1:boolean," ) . append ( "col2:tinyint," ) . append ( "col3:smallint," ) . append ( "col4:int," ) . append ( "col5:bigint," ) . append ( "col6:float," ) . append ( "col7:double," ) . append ( "col8:timestamp," ) . append ( "col9:date," ) . append ( "col10:char(1)," ) . append ( "col11:varchar(1)," ) . append ( "col12:decimal(2,1)," ) . append ( "col13:array<string>," ) . append ( "col14:map<string,string>," ) . append ( "col15:struct<col0:string>" ) . append ( ">" ) . toString ( ) ) )
assertTrue ( syn instanceof JavassistMethodSynthesizer )
assertEquals ( "22-16157603-G-C" , argument . getValue ( ) . getTranscript_consequences ( ) . iterator ( ) . next ( ) . getVariant_id ( ) )
Assert . assertEquals ( "SELECT -10 IS true;" , text )
assertEquals ( 0 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertTrue ( humanName . hasGiven ( "test" ) )
assertEquals ( 900 , subject . getMaximumTimeDifference ( ) . get ( ) . intValue ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "header grid position must return null date" , null , ui . getDayInMonth ( month , BasicMonthViewUI . DAY_HEADER_ROW , BasicMonthViewUI . LAST_DAY_COLUMN ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?><alice><bob>charlie</bob><bob>david</bob></alice>" , result . toString ( ) )
assertEquals ( "_cat/nodes" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( "aaaeaeoeoeueaaaeaeoeoeuess" , result )
assertNthArgumentGeneratesXPath ( - 2 , nthNegative2XPathExpression )
assertEquals ( n , counter . getCount ( ) )
assertEquals ( 3 , objmap . size ( ) )
assertEquals ( "(LIST<W> a<V> b<V> c<V>)\n" , found )
assertEquals ( expectedNodeTemplate , actualNodeWithConcreteDA )
assertEquals ( "result" , controller . postFormEasy ( "test" , model ) )
assertEquals ( "Test message" , new String ( stream . toByteArray ( ) , "utf-8" ) )
Assert . fail ( "Test encountered an unexpected exception." )
Assert . assertTrue ( futures . size ( ) == 1 )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( individual ) )
assertSuccess ( taskAfter . getResult ( ) )
Assert . assertEquals ( random , byId . getPublishInfo ( ) )
assertEquals ( 56 , x )
assertEquals ( expected , actual )
assertNotNull ( expectedRequester )
assertEquals ( "[message: hello0, message: hello1]" , broadcasts . toString ( ) )
assertResponse ( outputStream , expected )
assertFalse ( features . isPresent ( ) )
assertArrayEquals ( new byte [ ] { 1 , 2 , 3 } , transportHandler . getSendByte ( ) )
assertEquals ( getMessage ( MessageKeys . LABEL_TR_MENU_MENUMESSAGE ) , driver . findElement ( By . id ( "messagesArea" ) ) . getText ( ) )
assertThat ( output . readValuesToList ( ) , equalTo ( inputValues ) )
assertThat ( output , StringContains . containsString ( "<div class=\"hapiHeaderText\"> Untitled Diagnostic Report </div>" ) )
Assert . assertEquals ( "The default domain" , localDomain , gmx . getProperty ( "defaultDomain" ) )
assertThat ( d . getMetric ( ) , equalTo ( "m" ) )
assertFalse ( spellCheckerIndexer . buildIndex ( SpellCheckerDictionaryNames . getDefault ( ) ) )
assertTrue ( attributeDesc . isLob ( ) )
assertNull ( impl . getFeature ( "activemq" , org . apache . karaf . features . internal . model . Feature . DEFAULT_VERSION ) )
assertEquals ( "https://image.eveonline.com/Render/22436_32.png" , urlString )
assertEquals ( "/2012/2012-04-20T16%3A20%3A00.000-0400" , uri )
assertEquals ( "Larry" , person . getName ( ) )
assertEquals ( json . toString ( ) , sc . schemaConfAsJSON ( ) )
assertEquals ( BINARY_CONTENT , result )
assertEquals ( 1 , col . count ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( componentName , "replicate" )
assertEquals ( 2 , nLink )
assertDefaults ( filter )
assertEquals ( "https://login.microsoftonline.com/6731de76-14a6-49ae-97bc-6eba6914391e" , config . getSite ( ) )
assertThat ( PlainTime . axis ( ) . getBaseUnit ( MILLI_OF_SECOND ) , is ( unit ) )
assertTrue ( isVisibleForAuthor )
assertNotNull ( result )
assertTrue ( true )
Assert . assertEquals ( "f1:2.5" , ret . toString ( ) )
assertSame ( mockStrategy , myTestFactory . getReconnectStrategy ( ) )
assertThat ( "testGpValue" , is ( functions . globalProperty ( "testGpName" , "" ) ) )
assertEquals ( "\n<p>This is <strong>bold</strong>!</p>\n" , html )
assertTrue ( Files . exists ( tmpFile ) )
assertEquals ( "hammer" , descriptor . getListId ( ) )
assertEquals ( Lists . newArrayList ( "a" , "b" , "c" ) , mConfiguration . getList ( PropertyKey . WEB_THREADS , "," ) )
assertFalse ( entity . isValid ( ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatus ( ) )
assertEquals ( "Mexican Rigatoni and Cheese" , microdata . getFirstProperty ( "name" ) )
assertEquals ( expectedProfile . getSid ( ) , resultantProfile . getSid ( ) )
Assert . assertTrue ( Responses . ERROR . getData ( ) , l == 4 )
assertEquals ( "DoubleIt isn't working with negative numbers" , - 16 , response )
assertTrue ( "Stream contains data" , stream . size ( ) > 10 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "jranalyst" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( array ) , equalTo ( new double [ ] { 0 , 1 , 2 , 3 , 4 , 5 } ) )
assertExtractEquals ( Lists . newArrayList ( "ABB:value ABB" , "ABC:value ABC" ) , extractor . extract ( result ) )
runner . assertNotValid ( )
assertEquals ( undefined1 . hashCode ( ) , undefined2 . hashCode ( ) )
Assert . assertEquals ( "Basic Reference not escaped correctly" , in , WebUtilities . percentEncodeUrl ( in ) )
assertThat ( otherThreadContext . get ( ) , is ( "a" ) )
Assert . assertThat ( bufferCount , is ( 6L ) )
assertThat ( "Initator methionine wrong" , initMet . toString ( ) , is ( "M" ) )
assertEquals ( tropo . text ( ) , "{\"tropo\":[{\"say\":[{\"value\":\"1234\"}]}]}" )
assertThat ( result , isFailedCommand ( ) )
assertThat ( customer , sameInstance ( anotherCustomer ) )
assertArrayEquals ( "The branch name array is incorrect" , new String [ ] { "override-branch" } , scm . getBranchNames ( EMPTY_VARIABLE_RESOLVER ) )
assertEquals ( 1 , userRunners . size ( ) )
assertTrue ( found )
assertEquals ( 0 , annotatedTypes . size ( ) )
assertEquals ( "xsd:NMTOKEN" , prefixedName )
assertTrue ( true )
Assert . assertFalse ( AddonUtils . isListWithKeyAndDisplayValues ( properties ) )
assertSame ( 3 , result . getAppIds ( ) . size ( ) )
assertThat ( result , is ( "Id" ) )
assertTrue ( learned . isEquivalentTo ( given , ba ) )
assertEquals ( "abc" , value )
assertEquals ( input , result . getTuples ( 0 ) )
assertEquals ( ManipulationScope . COLUMN , manipulation . getManipulationScope ( ) )
assertTrue ( integrationApp . isOnLowMemory ( ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertEquals ( Json . pretty ( model ) , "{" + NEWLINE + "  \"properties\" : {" + NEWLINE + "    \"byteArray\" : {" + NEWLINE + "      \"type\" : \"array\"," + NEWLINE + "      \"items\" : {" + NEWLINE + "        \"type\" : \"string\"," + NEWLINE + "        \"format\" : \"binary\"" + NEWLINE + "      }" + NEWLINE + "    }" + NEWLINE + "  }" + NEWLINE + "}" )
assertTrue ( val == 0 )
assertFalse ( Arrays . equals ( bytes , new byte [ 100 ] ) )
editor . assertHoverContains ( "aggregate" , "Performs the given steps in parallel" )
assertEquals ( "ouch!" , t . getMessage ( ) )
assertTrue ( fortyNinersSuck . isAfter ( superBowlXLV ) )
Assert . assertEquals ( null , actualDate )
assertEquals ( "Invocation" , event . getDataId ( ) )
assertEquals ( "upperContext fieldValidationError" , classNameForPropertyInputField )
assertions . isNotEqualTo ( null )
Assert . assertTrue ( sdk23 . getAaptPath ( ) != null && ! sdk23 . getAaptPath ( ) . equals ( "" ) )
assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getStatus ( ) )
assertNotSame ( bundle1 . lastModified ( ) , bundle2 . lastModified ( ) )
assertEquals ( Collections . singletonList ( NEW_VALUE ) , group . getValue ( ) )
assertTrue ( filter . shouldInclude ( source , "some.property" ) )
assertEquals ( FleetSize . FINITE , vrp . getFleetSize ( ) )
assertEquals ( 10 , map . size ( ) )
assertEquals ( expected , AuthorizationsUtil . minimize ( expected ) )
assertTrue ( actualResult )
assertCapturedMessage ( eventMessage ( "sess1" , "/foo" , "message1" ) , eventMessage ( "sess2" , "/foo" , "message1" ) )
assertPushPromiseFrame ( frame , streamId , promisedStreamId , Unpooled . EMPTY_BUFFER )
assertTrue ( stripped_sp . contains ( "size:64" ) )
assertThat ( actual , is ( "${formatter.format('%1.1f',validatedValue)}����{min}锝�10��绡��层�у�ュ����������������" ) )
assertEquals ( expected , result )
assertTrue ( bodyTypeAdapter instanceof TextBodyTypeAdapter )
assertTrue ( foundMethods != null && foundMethods . size ( ) == 5 )
assertEquals ( VALUE , credentials . getToken ( ) )
Assert . fail ( "Expecting MathIllegalArgumentException" )
assertEquals ( 101l , idSource . getNextId ( ) )
assertThat ( wrapper . startAsync ( ) , instanceOf ( LoggingAsyncContextImpl . class ) )
Assert . assertEquals ( 0. , analyser . getWaitingTimeAtActivity ( route . getEnd ( ) , route ) , 0.01 )
assertTrue ( closed . await ( 2 , SECONDS ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Gather>" + "<Say language=\"arb\" loop=\"1\" voice=\"man\">message</Say>" + "<Pause length=\"1\"/>" + "<Play digits=\"digits\" loop=\"1\">https://example.com</Play>" + "</Gather>" , elem . toXml ( ) )
assertEquals ( "{\"test123\":{}}" , json )
assertThat ( result . statusCode , is ( Response . OK ) )
assertFalse ( matcher . match ( msg , rule ) )
Assert . assertEquals ( "OK" , result )
assertEquals ( "" , sw . toString ( ) )
assertThereIsABoundFactFor ( "$a" )
assertThat ( indexPage . nameRadioButtons . getSelectedValue ( ) . get ( ) , is ( "1" ) )
ProtoTruth . assertThat ( QueryResponseToProto . buildMessage ( TestProto . Proto1 . getDefaultInstance ( ) , ImmutableMap . of ( "id" , "abc" , "intField" , 123 , "testProto" , ImmutableMap . of ( "innerId" , "abc_inner" , "enums" , ImmutableList . of ( "FOO" ) ) ) ) )
assertFalse ( wlsClusterConfig . checkUpdateDynamicClusterSizeJsonResult ( "{ xyz }" ) )
assertResponse ( DataMockery . createREQMODWithGetRequestNoBody ( ) , request )
assertTrue ( output . startsWith ( "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">" ) )
Assert . assertNotNull ( cu )
assertEquals ( testDialect . convertStatementToSQL ( testStatement ) , expectedJoinOnEverything ( ) )
assertThat ( userStoryClass . getName ( ) , is ( MyUserStories . PurchaseNewWidget . class . getName ( ) ) )
assertThat ( request . getListVersion ( ) , equalTo ( i ) )
assertNotNull ( "Social Followers (JSON STRING)" , friends )
assertSuccess ( validationResult )
assertNotNull ( result )
Truth . assertThat ( callable . call ( 1 ) )
assertArrayEquals ( IOUtils . toByteArray ( tin ) , IOUtils . toByteArray ( sparseFileInputStream ) )
assertEquals ( 1007164800000L , d . getFirstMillisecond ( calendar ) )
assertTrue ( sqlString . contains ( "sqlname.name" ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , defaultOutbound )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertEquals ( g1 , g2 )
Assert . assertNotNull ( menu )
assertEquals ( 0 , serverConfig . getNetworkAccessPoints ( ) . size ( ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertEquals ( 1 , branch_conditions . size ( ) )
arrays . assertHasSize ( description , null , 8 )
assertThat ( actual , not ( containsString ( "78ef6f64c2f2" ) ) )
assertEquals ( firefoxDriver , defaultDriver )
assertTrue ( text . contains ( Integer . toString ( size ) ) )
assertEquals ( 4 , result . getProperties ( ) . size ( ) )
assertTrue ( "Empty job should work" , success )
assertNoTaint ( arrayData [ 2 ] )
assertTrue ( set . size ( ) >= 1000000 * 0.99 )
Assert . assertEquals ( "����|��宸�|澶у��" , words )
assertNotNull ( "AppointmentAttendee is null" , entity )
assertComparisonFailure ( "Fichier produit en erreur : " + toFilePath ( "FileAssertWithBoldStyle_expected.xls" ) )
assertTrue ( true )
assertEquals ( "Patch" , book . getName ( ) )
assertThat ( errors , hasSize ( 1 ) )
assertFalse ( results . hasNext ( ) )
assertion . satisfies ( "is not hunk" )
assertEquals ( notNull , presentSerializable . asOptional ( ) . get ( ) )
assertThat ( consoleStepListener . toString ( ) , is ( expectedSteps ) )
assertEquals ( expected , query . export ( ) )
assertValueEqualsResultSet ( rs , Arrays . < Object > asList ( ROW7 , ROW8 , ROW9 ) )
assertSame ( url2 , url1 )
assertNotNull ( result )
assertEquals ( "?a=b" , qs . toQueryString ( ) )
Assert . assertArrayEquals ( new byte [ ] { ( byte ) 0xa4 , ( byte ) 0xee , ( byte ) 0xba , ( byte ) 0x8e , 0x63 , 0x3d , 0x77 , ( byte ) 0x88 , 0x69 , ( byte ) 0xf5 , 0x68 , ( byte ) 0xd0 , 0x5a , 0x1b , 0x3d , ( byte ) 0xc7 , 0x2b , ( byte ) 0xfd , 0x4 , ( byte ) 0xdd } , r )
assertTrue ( singleton == clonePojo ( singleton , s ) )
Assert . assertFalse ( this . manager . disconnect ( this . family1 , this . person1 ) )
assertEquals ( "This is a test." , Tools . correctText ( "This is an test." , tool ) )
assertEquals ( expected , IbUtils . getDefaultTagList ( ) )
assertEquals ( propertyValue , p . getValue ( ) )
assertEquals ( EXPECTED_GET_APPLY_DETAILS_PATH , path )
Assert . assertEquals ( "did not find the one metadata value" , 1 , collections . size ( ) )
Assert . assertEquals ( 2 , SimpleClassWithSynchronized . class . getDeclaredFields ( ) . length )
assertThat ( result , equalTo ( true ) )
assertEquals ( "foo=lt=2011-03-02" , ret )
assertEquals ( "tenant1" , auth . getTenant ( ) )
Assert . assertThat ( dump , equalTo ( "UnionTypeExpressionNode: string | Person (Start: 0 , End: 20, On: [artificial node])\n" + "    NativeTypeExpressionNode: \"string\" (Start: 0 , End: 6, On: [artificial node])\n" + "    NamedTypeExpressionNode Person -> {null} (Start: 14 , End: 20, On: [artificial node])" ) )
assertTrue ( x . equals ( y ) )
assertEquals ( expected , query . export ( ) )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "18 months" , 18 , "month" , 0 , null , "time" ) )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 0f ) )
assertEquals ( "@|bold|@" , str )
assertThat ( revisions , contains ( revision ) )
Assert . assertEquals ( expected , new String ( encoded ) )
assertTrue ( true )
assertEquals ( expectedValue , result )
assertNotNull ( user )
Assert . assertThat ( result , is ( testResult ) )
assertTrue ( tt2 == tt )
Assert . assertArrayEquals ( new byte [ ] { 0 , 0 , 0 , 't' , 'e' , 's' , 't' } , result )
assertPostFails ( "3" , role , OntopiaRestErrors . MANDATORY_OBJECT_IS_NULL )
assertEquals ( "Revision null ()" , nullRevision . toString ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( groupByClause , Deencapsulation . getField ( querySpecificationBuilder , "groupBy" ) )
assertEquals ( expected , actual )
assertEquals ( "<table class=\"table-documentr table-bordered table-striped table-condensed\"></table>" , removeTextRange ( html ) )
assertSame ( connection , incrementPoolOnTimeoutConnectionAcquiringStrategy . getConnection ( connectionRequestContext ) )
assertNull ( result . getDecisionResultByName ( "time" ) . getResult ( ) )
assertEquals ( expResult , result )
assertEquals ( itemDocumentFiltered , filter . filter ( itemDocument ) )
assertThat ( unmarshalPrefixed ( sb , "prefix" ) , hasEntry ( "some key" , "some value" ) )
assertEquals ( a , b )
assertEquals ( "(34 55)\n" , found )
assertEquals ( 3 , violations . size ( ) )
assertEquals ( "<body><span id=\"test\">a</span><span id=\"test\">b</span></body>" , result )
Assert . assertArrayEquals ( str , xaConfigUtil . roles )
assertEquals ( this , vRef )
assertEquals ( "OKCoin REST Spot Trading API v1" , exchangeAdapter . getImplName ( ) )
Assert . assertEquals ( String . format ( "some %s" , this . html ( bb , "10" , "\ntext\n\nhere" ) ) , formatter . format ( "some [size=10]\ntext\n\nhere[/size]" , defaultOptions ( ) ) )
assertSendBodyReceivesCorrectPayload ( new ByteArrayInputStream ( data ) , expectedBody )
assertEquals ( "Firemaking(9)" , screenshotPlugin . parseLevelUpWidget ( LEVEL_UP_LEVEL ) )
Assert . assertTrue ( testPackage . getPackage ( ) . contains ( "Workflow" ) )
assertThat ( getEntityBody , is ( "something" ) )
assertTrue ( result . length ( ) > 0 )
assertEquals ( Deencapsulation . getField ( twinCollection , "version" ) , VERSION )
assertEquals ( expected , response . getValue ( ) )
assertEquals ( "The test{\" key does not exist in JavaScript object!" , result . get ( RETURN_RESULT ) )
assertEquals ( "Skipped I_S constraints" , 0 , skipped )
assertPoint ( - 40 , 0 , change )
Assert . assertEquals ( expectedPos , actualPos )
assertEquals ( "" , toml . getString ( "a" ) )
Assert . assertEquals ( "SELECT * WHERE { \"with ? mark\" \"with ? mark\" \"test\" . }" , query . toString ( ) )
assertTrue ( result > 0 )
Assert . assertEquals ( codigoEvento , infoEventoManifestacaoDestinatario . getCodigoEvento ( ) )
assertThat ( result , is ( "this is a test\n" ) )
assertEquals ( - 1 , result )
assertTrue ( rec_cnt == 3 )
assertEquals ( sc , actualConfig . getSamplerConfiguration ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "geom" , ( dump ( ( Node ) r . get ( "node" ) ) ) . getProperty ( "layer" ) )
Assert . assertTrue ( Arrays . equals ( entry . getBytes ( ) , fmt . toBytes ( e ) ) )
assertThat ( mimetype , is ( TEXT_MIMETYPE ) )
assertEquals ( "Hello Camel in action" , reply )
assertEquals ( 5f , new TruncateDecimal ( ) . exec ( tuple ) )
assertEquals ( HttpStatusCodes . FOUND , response . getStatus ( ) )
assertions . isGreaterThan ( expected )
Assert . assertTrue ( "Incorrect suffix" , hdfsWriter . getOpenedFilePath ( ) . endsWith ( Long . toString ( testTime + 1 ) + suffix + ".tmp" ) )
Assert . assertTrue ( lbService . isLoadBalancerLimitReached ( accountId ) )
assertEquals ( 0 , callable . call ( ) )
assertThat ( concat , is ( equalTo ( denyAll ) ) )
assertEquals ( expected , result )
assertEquals ( ReadConcern . MAJORITY , parsedReadConcern )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPermissions ( authorizables , list ( "jranalyst" ) ) . values ( ) ) . toString ( ) )
assertToStringJoinEquals ( "&,&,&" , s )
assertNotNull ( testVehicle )
Assert . assertEquals ( 20 , result )
assertEquals ( "(1963 printing)" , map . get ( "Date of manufacture" ) . get ( 0 ) )
assertEquals ( new JsonObject ( ) , event . getBodyAsJson ( ) )
assertThat ( result , empty ( ) )
assertEquals ( "New Album renamed !" , itemClient . getItem ( createdAlbumId ) . getEntity ( ) . getTitle ( ) )
assertOutMessageBodyEquals ( response , "Joe" )
Assert . assertNotNull ( ex )
Assert . assertTrue ( "Optimal coverage was not achieved " , best_fitness == 0.0 )
assertTrue ( perun . getDatabaseManager ( ) . getTimeOfQueryPerformance ( sess ) > 0 )
assertTrue ( Arrays . equals ( message . toByteArray ( ) , message2 . toByteArray ( ) ) )
Assert . assertFalse ( channel . isOpen ( ) )
assertArrayEquals ( document . keySet ( ) . toArray ( ) , new Object [ ] { KEY1 , KEY2 , KEY3 } )
Assert . assertTrue ( "Item was stale" , ! item . isStale ( newDate ( ) ) )
assertFalse ( preferences . isEnabled ( "true" ) )
assertBundleEvent ( BundleEvent . STARTED , "org.knowhowlab.osgi.testing.it.test.bundle" , 5 , TimeUnit . SECONDS )
assertEquals ( "value" , keyInfo . getKey ( ) )
assertTrue ( "Models are not isomorphic" , isomorphic ( m0 , m ) )
assertEquals ( "Hell0 worl bye" , bytes . parseUtf8 ( CONTROL_STOP ) )
Assert . assertEquals ( "" , WebUtil . getContextPath ( ) )
assertSame ( filter , derive ( filter , "g:a:1" ) )
assertEquals ( Collections . singleton ( TestEnum . ONE ) , select . getSelectedItems ( ) )
assertThat ( result , empty ( ) )
assertEquals ( expected , AuthorizationsUtil . minimize ( expected ) )
assertException ( "FEEL-01015" , "''" , "< ''" , "'camunda'" , "< 'camunda'" , "false" , "< true" , "'12.2'" , "< '12.2'" , "\"12.2\"" , "< \"12.2\"" )
Assert . assertEquals ( "3 ��蔚� ��喂谓 伪��" , t . format ( new Date ( System . currentTimeMillis ( ) - 1000 * 60 * 60 * 3 ) ) )
Assert . assertEquals ( 2 , result . length ( ) )
assertThat ( referenceSet . getReferencingOntologyAnnotations ( ) , hasItem ( annotation ) )
assertThat ( target . onNodeDeletePre ( ORIGINAL_NW_ID , node1 ) , is ( false ) )
assertFalse ( accepted )
assertTrue ( versionFileApp . exists ( ) )
assertEquals ( expected , actual )
assertThat ( indexPage . checkbox . isSelected ( ) , is ( true ) )
assertEquals ( x , result , 0.01 )
assertThat ( r . reduce ( Arrays . asList ( null , 5.0 , 1.0 , 4.0 ) ) , equalTo ( 5.0 ) )
Assert . assertEquals ( " SELECT id, name FROM  t_pet pet  " , sql )
assertFalse ( routeSpecification . isSatisfiedBy ( itinerary ) )
assertEquals ( Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ) , numbers )
assertThat ( existingName , is ( "lowercasefxml.fxml" ) )
assertThat ( response , containsString ( "invalid range: Not within 1-1" ) )
assertFalse ( result )
Assert . assertTrue ( set . add ( eTag ) )
assertEquals ( "foo" , s )
assertTrue ( resultComparator . compare ( fd1 , fd2 ) > 0 )
Assert . assertNotNull ( compilationArtifact )
Assert . assertFalse ( result . isValid ( ) )
Assert . assertEquals ( "ebc23db37df07069db39ad728288f5ef252298b8" , JGitUtil . latestCommit ( folder . toPath ( ) ) . getId ( ) . getName ( ) )
assertEquals ( "Hello World!" , result )
assertEquals ( twoEltList , list ( new ListGenerator < Integer > ( twoEltList ) ) )
Assert . fail ( )
Assert . assertEquals ( string , parse ( "    \t\r\n" + string + "  \t\r\n  " ) )
assertEquals ( constraint . getValue ( ) , 0 )
Assert . assertEquals ( "format does not produce expected output" , "2013-04-01T19:36:31.207Z" , JSONEventLayoutV1 . dateFormat ( timestamp ) )
assertEquals ( - 1 , resultComparator . compare ( fd1 , fd2 ) )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertEquals ( 400 , code )
assertThat ( matcher . matches ( value ) , is ( true ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertEquals ( code , transformer . fromEbXML ( ebXML ) )
Assert . fail ( "build listing failure" )
assertNotNull ( ExecutionTime . forCron ( parser . parse ( "* * * * $ ?" ) ) )
assertEquals ( "" , json , ios . toJSON ( ) )
assertEquals ( "myd" , localRuntime . getDataDomain ( ) . getName ( ) )
assertEquals ( ChangeLevel . NONE , parseAndRun ( "ALTER TABLE c DROP INDEX IF EXISTS x" ) )
assertTrue ( feature . isEnabled ( configuration ) )
Assert . assertEquals ( "true" , result )
assertEquals ( 1.0 , response , 0.0 )
assertEquals ( TAGS [ i ] , ElementDictionary . tagForKeyword ( KEYWORDS [ i ] , null ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
Assert . assertEquals ( "Parameter has different value than that specified" , null , config . getLogging ( ) . getFile ( ) )
assertThat ( podConfiguration . getNodeSelector ( ) . get ( "key" ) , containsString ( "value" ) )
assertFalse ( userAuthorizedToAccess )
assertTrue ( validator . validate ( EntityNames . GRADE , grades ) . containsAll ( grades ) )
assertEquals ( new SimpleDateFormat ( "yyyy" ) . format ( dt ) , new SimpleDateFormat ( "yyyy" ) . format ( dueDate ) )
Assert . assertEquals ( expResult , result )
assertNotNull ( tomcatProcessorQuery )
assertEquals ( test . numberOfArithmeticSlices ( input ) , 3 )
assertEquals ( propertyClass , TSnowflakeOutputProperties . class )
assertAmount ( actual , expected )
assertThat ( widgetset , is ( Constants . DEFAULT_WIDGETSET ) )
assertEquals ( getExpectedSchemaAndValue ( OPTIONAL_INT64_SCHEMA , message , expectedValue ) , result )
assertEquals ( searchScroll1 , searchScroll1Duplicate )
assertEquals ( 2 , victim . tocNumberOfPages ( ) )
assertEquals ( "abcde" , result )
assertNotNull ( producer . getAccessorForEntitySet ( "Cell" ) )
assertEquals ( true , request . getPluginWindowsMedia ( ) )
assertEquals ( 1 , result . size ( ) )
assertEquals ( windowSize * windowSize * products . length * coordinates . length , measurementList . size ( ) )
assertEquals ( BULK_STATEMENT_COUNT , triplesAfter - triplesBefore )
assertArrayEquals ( bMessage , bEncrypted )
assertTrue ( latch . await ( 4 , SECONDS ) )
Assert . assertThat ( this . mojo . schemaCompatibility , IsEqual . equalTo ( expectedVersions ) )
Assert . assertEquals ( 6 , locations . size ( ) )
assertEquals ( "SpringBeanLifecycleTracker" , "[setProperty, setMuleContext, springInitialize, start, stop, springDestroy]" , springLT . getTracker ( ) . toString ( ) )
assertThat ( ids , containsInAnyOrder ( id1 , id2 ) )
Assert . assertEquals ( 2 , this . em ( ) . getMetamodel ( ) . getEntities ( ) . size ( ) )
assertThat ( fe , notNullValue ( ) )
assertThat ( result . isHealthy ( ) , is ( true ) )
assertThat ( duration , equalTo ( EffortDuration . zero ( ) ) )
assertNotNull ( result )
Assert . assertNotNull ( connection . getClientInfo ( ) )
Assert . assertFalse ( result )
Assert . assertEquals ( "P0DT2H30M59.0S" , EwsUtilities . getTimeSpanToXSDuration ( timeSpan ) )
assertFalse ( folder . isOpen ( ) )
assertSearchYields ( index , "foo = bbb" , "b" )
assertThat ( statusCodeOf ( response ) , is ( HttpServletResponse . SC_FORBIDDEN ) )
Assert . assertEquals ( this . msg , entity1 )
assertThat ( fmt . parse ( "20141000" ) , is ( PlainDate . of ( 2014 , 10 , 4 ) ) )
assertEquals ( 1 , extensionList . size ( ) )
assertTrue ( "Wrong list delimiter handler" , config . getListDelimiterHandler ( ) instanceof DisabledListDelimiterHandler )
assertEquals ( f1 . hashCode ( ) , f2 . hashCode ( ) )
assertEquals ( response . asString ( ) , CANCELLED , response . get ( OUTCOME ) . asString ( ) )
assertThat ( "sessionIds should not have the same prefix" , ! sessionId1 . regionMatches ( 0 , sessionId2 , 0 , 30 ) )
assertEquals ( Arrays . asList ( 1 , 2 , 3 ) , c )
Assert . assertThat ( affordance . getVariableNames ( ) , Matchers . contains ( "id" ) )
assertNotNull ( Service . reader ( ) . read ( ) )
assertSimpleTerm ( result , "term\\*" , false , false )
assertTrue ( getStdErr ( ) . indexOf ( "The ftp URI scheme is not allowed" ) != - 1 )
Assert . assertThat ( ( Boolean ) PropertyUtils . getProperty ( result , "started" ) , is ( false ) )
assertTrue ( lost . contains ( new ItemStack ( ItemID . SHADOW_SWORD , 1 ) ) )
assertEquals ( explicit , fr . getNamespace ( ) )
Assert . fail ( )
assertEquals ( entityA . getIntProperty ( ) , copy . getIntProperty ( ) )
assertE ( "�尖�尖�尖�尖��" + "�尖��  ��" + "��   ��" + "��   ��" + "�尖�尖�尖�尖��" )
Assert . assertEquals ( avulsa , notaInfo . getAvulsa ( ) )
assertMethod ( methodParser , null , null , null , testCase . status , testCase . payload , "response" )
assertEquals ( "Failed on iteration " + i , z1 , z2 )
assertTrue ( OAuthUtils . validateScopes ( requestScopes , registeredScopes , true ) )
assertThat ( elementFacade . getTextValue ( ) , is ( "value" ) )
assertNull ( TYPE_HANDLER . getResult ( rs , 1 ) )
assertEquals ( buildValue ( i ) , new String ( value . getBytes ( ) , 0 , value . getLength ( ) ) )
Assert . assertEquals ( "2 hours ago" , t . format ( new Date ( new Date ( ) . getTime ( ) - 6543990 ) ) )
Assert . assertEquals ( 2 , qr . getRank ( 1.0e-16 ) )
assertEquals ( 70 , integer . getInteger ( ) . intValue ( ) )
assertEquals ( stream , op . getContentStream ( ) )
assertNull ( client . lastBatch )
assertIncluded ( node )
assertSame ( "wrapping renderer must use list's default on null" , renderer . getDelegateRenderer ( ) , list . getWrappedCellRenderer ( ) )
Assert . assertTrue ( isValid ( resp , FORMAT_JSON , false ) , "Response is not valid" )
assertEquals ( "msg" , sut . getMessage ( ) )
assertEquals ( "Should respond with 500" , 500 , responseContext . getStatus ( ) )
assertEquals ( 7 , s1 . getClausesCount ( ) )
assertDurationEquals ( new DayTimeDurationValue ( "-PT5H30M" ) , ( AtomicValue ) v1 . getTimezone ( ) )
assertEquals ( p1 , p2 )
assertTrue ( out . toString ( ) . contains ( "Total size" ) )
assertEquals ( Double . valueOf ( 0 ) , Double . valueOf ( value . asDouble ( ) ) )
assertNull ( obj . getLatest ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertThat ( toUnqualifiedVersionlessIdValues ( myObservationDao . search ( map ) ) , containsInAnyOrder ( toValues ( id1 ) ) )
assertEquals ( true , result [ 0 ] )
Assert . assertTrue ( "La firma CAdES explicit no es valida" , CAdESValidator . isCAdESValid ( cades , AOSignConstants . CMS_CONTENTTYPE_SIGNEDDATA , true ) )
assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( 200 ) )
assertEquals ( numDocs , results . size ( ) )
context . assertTrue ( event . succeeded ( ) )
assertTrue ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , true )
assertThat ( generatedReportText , isSimilarTo ( expectedReport , "timestamp" ) )
assertEquals ( reg . getSoftwareVersion ( ) , reg2 . getSoftwareVersion ( ) )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( levelFile ) ) )
assertTrue ( collection . isEmpty ( ) )
assertEquals ( PATH , asset . name ( ) )
arrays . assertContains ( description , new byte [ 1 ] , null )
assertEquals ( "(foo void ;)\n" , found )
assertTrue ( validator . validate ( EntityNames . STAFF , staffId ) . equals ( staffId ) )
assertEquals ( EthiopicDate . of ( 2004 , 2 , 5 ) , test )
assertFootersJoined ( )
strings . assertDoesNotContain ( someInfo ( ) , "Practice makes perfect" , values )
assertTrue ( shootist . responses . size ( ) > 10 )
assertGetCredentialsFailsWithAuthRequired ( setupIndirectKerberosClient ( ) , context , "Performing a 401 HTTP action" )
assertEquals ( description , activity . getProperty ( PROPERTY_ACTIVITY_DESCRIPTION ) )
Assert . assertEquals ( "List is empty" , 0 , list . size ( ) )
assertTrue ( veh1 . getSkills ( ) . containsSkill ( "skill2" ) )
assertFalse ( result )
assertThat ( url . toString ( ) , is ( "http://localhost?a=b" ) )
Assert . assertEquals ( 720 , result )
assertNull ( lock )
assertTrue ( keysMap . isValidKey ( getArtifact ( "test.group" , "test" , "1.1.1" ) , null , null ) )
assertSame ( "wrapping renderer must use list's default on null" , renderer . getDelegateRenderer ( ) , list . getWrappedCellRenderer ( ) )
assertEquals ( "WIFI:S:some weird SSID;U:Spock;P:aintNoSecret;E:PEAP;PH:MS-CHAPv2;H:true;" , wifi . toString ( ) )
assertions . startsWith ( sequence )
assertThat ( sulfuras . getQuality ( ) , is ( initialQuality + 2 ) )
assertTrue ( shipment . getToAddress ( ) . getResidential ( ) )
assertEquals ( clientConfig . getRegion ( ) . getRegionName ( ) , location )
assertTrue ( tap13Representer instanceof Tap13Representer )
assertThat ( model , nullValue ( ) )
assertNotNull ( this . commandFacade . exists ( SwitchFullScreenCommand . class , key ) )
assertEquals ( 1 , classFileDefinitions . size ( ) )
assertEquals ( "unsortable column must be unsorted" , SortOrder . UNSORTED , table . getSortOrder ( identifier ) )
assertThat ( set . size ( ) , is ( 3 ) )
assertEquals ( intermediateSubject , certificateChain . get ( 1 ) . getSubject ( ) )
Assert . assertNotNull ( klass . getDeclaredField ( "MIN_VALUE" ) )
assertNotNull ( results )
assertTrue ( true )
Assert . assertEquals ( "Should retrieve type set" , int . class . getName ( ) , node . getType ( ) )
assertEquals ( getConnectionDecoratorFactoryClass ( ) , factory . getClass ( ) )
assertThat ( actualShardNumber >= 0 && actualShardNumber < 3 , is ( true ) )
assertTrue ( dbStopped )
assertContentSame ( rs , rc , columnParam1 )
assertNotNull ( "Could not load generated class." , cls )
assertTrue ( expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
assertNotNull ( taskDefinitionRepository . findByTaskName ( "demo" ) )
assertEquals ( Arrays . asList ( child ) , instance . getChildren ( ) )
assertEquals ( null , Iter . last ( iter , filter ) )
assertThat ( result , equalTo ( "/path#fragment" ) )
assertEquals ( expected , statement . toString ( ) )
assertTrue ( comp . started )
AssertUtil . assertSucceeded ( serviceResponse )
assertEquals ( "millisekunti sitten" , t . format ( new Date ( 0 ) ) )
assertTrue ( out . equals ( "G12/12.123" ) )
assertRequest ( "POST" , "Conference/%s/Member/%s/Mute/" , confId , memberId )
assertTrue ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertFalse ( controller . isSortable ( 0 ) )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
assertSelection ( false )
assertThat ( searchResults , is ( empty ( ) ) )
assertEquals ( "a=c" , m . getHeader ( "cookie" ) )
assertEquals ( rows - 1 , sorter . convertRowIndexToView ( rows - 1 ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Gather action=\"https://example.com\" actionOnEmptyResult=\"true\" bargeIn=\"true\" debug=\"true\" finishOnKey=\"finish_on_key\" hints=\"hints\" input=\"dtmf\" language=\"af-ZA\" maxSpeechTime=\"1\" method=\"GET\" numDigits=\"1\" partialResultCallback=\"https://example.com\" partialResultCallbackMethod=\"GET\" profanityFilter=\"true\" speechModel=\"default\" speechTimeout=\"speech_timeout\" timeout=\"1\"/>" , elem . toXml ( ) )
assertThat ( factory . getRefString ( ref , "test" ) , nullValue ( ) )
assertEquals ( expected , actual )
assertNull ( map )
assertThat ( address , hasKey ( firstLine ) )
Assert . assertTrue ( "Expected MEDIUM cipher suites, got null" , resolved != null && resolved . size ( ) != 0 )
assertEquals ( origDatagrams [ testIdx + 1 ] , d )
assertEquals ( 5 , _service . getNumberOfUsers ( ) )
assertTrue ( v1 . getSkills ( ) . containsSkill ( "skill2" ) )
assertEquals ( 220777L , opts . getScans ( ) . get ( 0 ) . getTimeRange ( ) . getMin ( ) )
assertNull ( reader . get ( 0 , new RandomDatum ( ) ) )
assertEquals ( true , result . getObject ( "isEmpty" ) )
assertEquals ( 2 , col . size ( ) )
assertEquals ( rs2 , rs )
assertEquals ( "2\n" , found )
assertFalse ( groups . hasNext ( ) )
assertPrehandle ( "methodFeatureTwo" , false , METHOD_FEATURE_TWO_RESPONSE_STATUS )
assertThat ( "getValue" , node . getValue ( ) , is ( false ) )
assertEquals ( "A string with two expressions 4 and 15 set" , handler . expandExpressions ( "A string with two expressions ${here} and ${there} set" , null ) )
Assert . assertFalse ( graphUtil . hasCycle ( graph ) )
assertEquals ( "The attribute value is changed." , expectedNewValue , pm . stringAttr . getValue ( ) )
assertTrue ( err < .1 )
assertThat ( resolved , is ( nullValue ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "linkAnnotation02.pdf" , sourceFolder + "cmp_linkAnnotation02.pdf" , destinationFolder , "diff_" ) )
assertArrayEquals ( fixed . bytes ( ) , ( ( GenericData . Fixed ) r . get ( "fixed1" ) ) . bytes ( ) )
Assert . assertEquals ( 0 , userList . size ( ) )
assertEquals ( "_cat/allocation?v=true" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( 200 , tagCache . size ( ) )
Assert . assertTrue ( ra . run ( "ab" ) )
assertThat ( description . toString ( ) , is ( "x y" ) )
assertThat ( iData . getSelectedVehicle ( ) , is ( veh2 ) )
assertFalse ( view . needsLoading ( item ) )
assertThat ( inputStream , notNullValue ( ) )
assertThat ( taskService . createTaskQuery ( ) . taskAssignee ( "demo" ) . count ( ) , is ( 1L ) )
assertEquals ( "val2val1" , result )
assertThat ( freezeStatusXO . getFrozen ( ) , is ( true ) )
assertEquals ( "warn:My message with 3 parameters : 1, 2, 3" , output )
assertThat ( result , is ( true ) )
assertEquals ( 0L , result )
Assert . fail ( "expected IllegalArgumentException" )
Assert . assertNotNull ( bean )
assertThat ( result , isFailedCommand ( ) )
assertEquals ( 0.0 , feasibilityRatio ( solutionList ) , 0.00000000001 )
Assert . assertNotNull ( victim . create ( ) )
assertRightOrder ( nodes , results )
Assert . assertEquals ( AccessValidator . DEVICE_WITH_REQUESTED_ID_NOT_FOUND , result )
assertThat ( scoreDocs . length , is ( 4 ) )
assertEquals ( new BigDecimal ( "29.950" ) , entity . getN73 ( ) )
Assert . assertEquals ( - 1 , trackable . read ( new byte [ 16 ] , 0 , 8 ) )
Assert . assertEquals ( 4 , sum )
assertHost ( "specific-hosts" , "myHost" , "gatewayHost" , "commandHost" , "internalHost" , "monitoringHost" )
assertThat ( "getValue" , node . getValue ( ) , is ( "123" ) )
Assert . assertArrayEquals ( expected , actual )
context . assertIsSatisfied ( )
assertThat ( base . thenComposeCancelledCancelled ( composeSupplier ) , is ( future ) )
Assert . assertEquals ( uri1 , uri2 )
assertNull ( newTransports . poll ( ) )
assertThat ( result , is ( jsonString ( "foo" ) ) )
assertions . isLessThan ( new Integer ( 2 ) )
assertTrue ( dispatcher . isUsingPerformanceMeasurementServer ( ) )
assertFalse ( violation )
assertEquals ( "redirect:/board/vasia" , jsp )
assertEquals ( "one or two null values" , result )
assertEquals ( "domain" , info . toString ( ) )
assertEquals ( MCRFile . MD5_OF_EMPTY_FILE , md5 )
Assert . assertEquals ( 0 , errors . size ( ) )
assertNotNull ( createActivity )
assertFalse ( "Edits dir exists already - it shouldn't" , fs . exists ( regionEdits ) )
assertThat ( result . iterator ( ) . next ( ) . getString ( "value" ) , is ( "myValue01" ) )
assertEquals ( 403 , response . getStatus ( ) )
assertTrue ( PropUtil . getBooleanProperty ( props , "test" , true ) )
Assert . assertTrue ( secure )
assertOut ( "var a:Boolean = new Boolean(1)" )
assertEquals ( expectedQuery , actualQuery )
assertThat ( cut . apply ( hasText ) , is ( false ) )
assertEquals ( EXPECTED_STOPWORDS , stopwords )
assertNotNull ( NonTerminal . IF_COMMAND . buildAbstractSyntaxTree ( tokenStream ) )
assertEquals ( "       _ _____       __     __ " + LINE_ENDING + "      (_) __(_)___ _/ /__  / /_" + LINE_ENDING + "     / / /_/ / __ `/ / _ \\/ __/" + LINE_ENDING + "    / / __/ / /_/ / /  __/ /_  " + LINE_ENDING + " __/ /_/ /_/\\__, /_/\\___/\\__/  " + LINE_ENDING + "/___/      /____/              " + LINE_ENDING , asciiArt )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
assertTrue ( _comp . isEquals ( json , expected ) )
assertTrue ( lines . contains ( "longest-mention: Bill Clinton" ) )
assertThat ( formatter . percentage ( 0.16789 , 1 ) , is ( "16.8%" ) )
arrays . assertDoesNotContain ( description , actual , null )
assertTrue ( param2 . getValue ( ) . get ( 0 ) instanceof QueryParam )
assertEquals ( "?p1=v1&p2=v2" , query . toString ( ) )
assertEquals ( o , counter )
assertEquals ( RPCTransport . DEFAULT_MAX_XMIT_FRAG , transport . getMaxXmitFrag ( ) )
assertNotNull ( buildClientWithDefaults ( clientBuilder , "http://localhost" ) )
assertThat ( unit . filterDeniedParams ( unfiltered , Channel . IncomingRequest ) , equalTo ( unfiltered ) )
assertEquals ( 446 , count )
assertThat ( baos . toString ( ) , startsWith ( String . format ( "" + "Failed scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "Ambiguous scenarios:%n" + "path/file.feature:3 # Scenario: scenario_name%n" + "%n" + "4 Scenarios" ) ) )
assertEquals ( 2 , warnings . size ( ) )
assertThat ( "There should be no tray matching anymore" , trayMatchings . isEmpty ( ) , is ( true ) )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
assertEquals ( expected , actual )
assertFalse ( error . get ( ) )
assertEquals ( "Base for strings is wrong" , Integer . valueOf ( 2 ) , parsed )
assertThat ( allUsedBindings ( result ) , containsInAnyOrder ( "$p" ) )
assertThat ( min . get ( ) , is ( "1" ) )
assertThat ( job . getFailedActivityId ( ) , is ( "theTask" ) )
assertEquals ( 0 , constraints . length )
assertTrue ( result . length ( ) > 0 )
Assert . assertEquals ( "second" , res . getStringData ( ) )
assertThat ( options . getFeaturePaths ( ) , contains ( URI . create ( "classpath:com/example.feature" ) ) )
assertNotNull ( getStdOut ( ) )
assertTrue ( isAuthenticated )
assertEquals ( 10 , list . size ( ) )
Assert . assertNull ( caixa )
arraysWithCustomComparisonStrategy . assertIsSorted ( someInfo ( ) , actual )
assertThat ( result . toBase64Encode ( ) , is ( "bnVsbDpudWxs" ) )
assertFalse ( noneExistingFile . exists ( ) )
assertEquals ( betweenness [ index4 ] , 1.0 )
assertEquals ( job . jobId , sameJob . jobId )
assertEquals ( "object" , result )
assertEquals ( Character . valueOf ( '&' ) , formatWithEscape . getEscape ( ) )
assertEquals ( "linux" , PlatformDetector . OS . getName ( ) )
assertNull ( array )
assertNotNull ( "Process message with no part wsdl error" , output )
assertEquals ( "" , 6 , actual . size ( ) )
assertThat ( monthsWithLengthFour . values ( ) , contains ( "June" , "July" ) )
assertEquals ( "fa 3 dies" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( "This is a very very very very very very very very very very very very very =\r\nvery very long line" , toString ( bos . toByteArray ( ) ) )
Assert . assertFalse ( MultiPathSupportUtil . isTableTypeSupported ( this . constraints , AFI_SAFI ) )
assertEquals ( counter . getValue ( ) , 0 )
assertEquals ( expected , result )
assertTrue ( "All unread messages are moved to trash." , client . getUnreadMessages ( ) . isEmpty ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( "High-Performance Java Persistence" , book . getTitle ( ) )
assertPaths ( finder . findAllPaths ( graph . getNode ( "a" ) , graph . getNode ( "j" ) ) , "a,g,h,i,j" )
assertFalse ( cb . isElementPresent ( By . vaadin ( "#popup" ) ) )
assertTrue ( urlWithPathAndParam . equals ( urlString ) || urlWithPathAndParam1 . equals ( urlString ) )
assertTrue ( ferp . isReadable ( MultivaluedMap . class , null , null , null ) )
assertTrue ( WroUtil . matchesUrl ( request , "wroApi/test" ) )
assertThat ( getAllMessages ( ) , hasSize ( 0 ) )
assertTrue ( p . test ( null ) )
Assert . assertEquals ( 10 , result . getResultSize ( ) )
Assert . assertEquals ( null , actualValue )
Assert . assertTrue ( loader . size ( ) > 0 )
assertTrue ( m . nextInt ( ) > - 1 )
Assert . assertFalse ( this . manager . connect ( this . person1 , this . family1 ) )
MatcherAssert . assertThat ( PodHelper . isReady ( pod ) , is ( false ) )
assertEquals ( 2 , myPm . minLen2 . getMinLen ( ) )
assertThat ( lines , is ( Arrays . asList ( "This is a long linethatcannotfitonasingleline-" , "andcouldbe wrapped" ) ) )
assertEquals ( Arrays . asList ( "setValue" , "getAttributeDescriptor" , "verifyAndConvert" , "isReadOnly" , "set" , "customAction" ) , events )
assertTrue ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertTrue ( true )
assertEquals ( " --vanilla " , rProcessStartUpOptions . getStartUpOptionsAsCommand ( ) )
assertNull ( oneElt ( x ) )
assertEquals ( "Wrong URL" , file . getAbsoluteFile ( ) , FileLocatorUtils . fileFromURL ( url ) . getAbsoluteFile ( ) )
assertEquals ( p1 , p2 )
Assert . fail ( )
assertThat ( DateInterval . atomic ( date ) . withOpenEnd ( ) . isFinite ( ) , is ( true ) )
assertEquals ( "All received messages are correct." , 0 , messageVerifier . getFailures ( ) )
assertEquals ( BPResultType . NO_DATA , testResult . getResultType ( ) )
assertThat ( result , is ( false ) )
assertEquals ( sessionInfo . getIdentity ( ) . getIdentifier ( ) , username )
assertEquals ( "RESPONSE_VALUE_MODIFIED" , rsp . getHeaderField ( ModifyHeadersProxyServlet . RESPONSE_HEADER ) )
assertEquals ( "Expected another type of analyzer" , BrazilianAnalyzer . class , analyzer . getClass ( ) )
assertGalleriesPhoto ( galleries )
assertResult ( session )
Assert . assertEquals ( "{\"value\":null,\"message\":null,\"success\":true}" , json )
assertEquals ( result1 , result2 )
assertEquals ( 0 , engineRule . getHistoryService ( ) . createUserOperationLogQuery ( ) . count ( ) )
assertNull ( statusFail )
assertOrder ( order , length , comparator )
assertEquals ( HttpStatusCodes . OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "sampleLib1.js" , functionLibrary . getFunctionLibraryName ( ) )
assertEquals ( "Count.getReplacementCommand" , expected , actual )
assertTrue ( DataSourceTypeRegistry . getAllSupportedDataSourceTypes ( ) . size ( ) > 0 )
assertTrue ( encoded . indexOf ( "\n" ) == encoded . lastIndexOf ( "\n" ) )
Assert . fail ( "MathIllegalArgumentException expected" )
Assert . assertEquals ( 10 , KafkaConsumerUtils . INSTANCE . getNumRead ( ) )
assertFalse ( shouldVote )
assertEquals ( future , underTest . doEventuallyCollectEmpty ( consumer , supplier ) )
assertEquals ( "2\n" , found )
Assert . assertEquals ( 11 , patients . size ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertNull ( dt )
files . assertHasDigest ( INFO , actual , digest , expected )
Assert . assertEquals ( FileUtils . readFileToString ( file0 , Charset . forName ( "UTF-8" ) ) , expected )
assertEquals ( "" , result )
assertSame ( value , result )
Assert . assertEquals ( "Incorrect type" , WTabSet . TYPE_LEFT , tabset . getType ( ) )
assertEquals ( 1 , parser . getParameterCount ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , allOf ( hasEnvVar ( "ADMIN_USERNAME" , null ) , hasEnvVar ( "ADMIN_PASSWORD" , null ) ) )
assertEquals ( AppConfigProperties . DEFAULT_HELP_URL , spyAppConfigProperties . getHelpUrl ( ) )
assertEquals ( "my-path-to-java" , JavaLocator . findExecutableFromToolchain ( toolchain ) )
assertions . isNotLessThan ( expected )
assertStat ( result )
Assert . assertEquals ( "monkey" , mAuthenticator . getAuthToken ( ) )
assertEquals ( "" , result . toString ( ) )
assertFalse ( CycleDetection . hasCycle ( TestGraphFactory . createDirectedNew ( data ) ) )
assertEquals ( 4 , count )
assertEquals ( "Logs" , this . taskExecutionService . getLog ( taskDeployment . getPlatformName ( ) , taskDeploymentId ) )
assertTypeEquals ( expected , actual )
assertFalse ( "Permission denied" , updateSamplesFromAnalysisSubmissionPermission . isAllowed ( authentication , analysisSubmission ) )
assertEquals ( expectedDatetime , strategy . getNextBusinessDay ( ldt ) )
assertEquals ( 0 , issues . size ( ) )
editor . assertProblems ( "key|extraneous input" )
assertEquals ( "http://server/articlepath/abc:%C3%84%C3%B6%C3%BC_%C3%9F%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8" , underTest . provideLink ( "abc:�枚眉 ��°�ゃ�炽���笺��" ) )
assertNotNull ( u . getId ( ) )
assertEquals ( 19 , maximum )
assertEquals ( 3 , expandedValueSet . getExpansion ( ) . getContains ( ) . size ( ) )
assertNotNull ( Balance . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertEquals ( result , collector . output . get ( Utils . DEFAULT_STREAM_ID ) )
assertThat ( key . verify ( Algorithm . HMAC_SHA512 , "hello" . getBytes ( UTF_8 ) , sig ) , is ( false ) )
assertEquals ( expected , loopingGraph . getVertices ( ) )
Assert . assertEquals ( "3.9" , s )
assertEquals ( 1 , results . getWarnings ( ) . size ( ) )
assertNotNull ( scriptStatement )
Assert . assertEquals ( 1.0 , n , 0.001 )
Assert . assertEquals ( 3L , sync ( log . count ( ) ) . longValue ( ) )
assertNull ( links )
assertEquals ( list , collection . getValue ( ) )
Assert . assertEquals ( null , _c . convert ( null ) )
assertEquals ( expected , elements )
assertEquals ( Result . ERROR , source . validate ( container ) . getStatus ( ) )
Assert . assertFalse ( nodeService . areAddressesValidForUse ( nodes2 , lb ) )
Assert . assertNotNull ( registry )
assertTrue ( "Error config not empty" , setUpErrorConfig ( ) . isEmpty ( ) )
assertEquals ( "jdbc:hive2://testhost:21050/;ssl=true" , connectionString )
assertEquals ( 0.0 , diff . getValue ( METERS ) , 500 )
Assert . assertEquals ( rtpPacket . getVersion ( ) , 3 , "Expect version = 3" )
Assert . assertEquals ( "Error updating private community file" , file . getVersion ( ) , version + 1 )
assertEquals ( 7 , reader . readFields ( ) . size ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "" , result )
context . assertIsSatisfied ( )
Assert . assertNotNull ( lookup )
assertNull ( expression . evaluate ( record ) )
ImgLib2Assert . assertImageEquals ( expected , image )
assertThat ( headlineOf ( view ) , is ( "2 builds have failed since Ben, Connor and Daniel committed their changes" ) )
assertTrue ( "Expect mapping generated by WithinMapper to be equal to reference mapping" , mapper . getMapping ( s , t , "?x" , "?y" , "top_within(x.asWKT, y.asWKT)" , 1.0d ) . equals ( referenceMapping ) )
assertEquals ( env . get ( "PATH" ) , config . value ( "PATH" ) . get ( ) )
assertEquals ( 1 , adapter . data . size ( ) )
assertEquals ( "/" + ORCID + "/funding/123" , x . getFundingGroup ( ) . get ( 0 ) . getFundingSummary ( ) . get ( 0 ) . getPath ( ) )
assertEquals ( "PONG" , status )
assertEquals ( 4 , exceptions )
assertEquals ( 1 , logs . size ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertNotNull ( getStdOut ( ) )
assertThat ( output , is ( Bytes . toArray ( asList ( 0 ) ) ) )
assertThat ( jexlSelector . getType ( ) , is ( CselSelector . TYPE ) )
assertFalse ( shouldVote )
assertFalse ( "hasFacet should return false" , hasFacet )
assertTrue ( setCookie . startsWith ( sessionCookieName + "=" ) )
Assert . assertEquals ( voiceName , m . getName ( ) )
Assert . assertEquals ( 0 , chronicle . getNumEvents ( 0 , 2000 ) )
assertEquals ( Address . of ( "one" ) , fixture . removeSuffix ( 2 ) )
assertEquals ( "val2val1" , result )
assertNotNull ( pathology . getId ( ) )
assertEquals ( 2 , classUnderTest . getId ( ) )
Assert . assertEquals ( num_to_hash , b [ 0 ] )
assertEquals ( "string1" , ObjectUtils . getValue ( object , "string1" ) )
assertEquals ( 5 , documentCount )
assertEquals ( result , expectedResult )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( expResult , result )
assertEquals ( "" , result )
assertThat ( metaData . getPropertyColumn ( "a" , "age" ) , is ( 0 ) )
assertEquals ( 1 , breakpointID )
assertTrue ( convertedBytes != null && convertedBytes . length == 1 && convertedBytes [ 0 ] == testByte )
Assert . assertEquals ( EJB_INTERCEPTED , bean . test ( ) )
assertEquals ( 1 , executedActionCount . get ( ) )
assertEquals ( result , expecting )
assertEquals ( "[1]" , writer . toString ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "12攵� ��" , t . format ( new Date ( 0 ) ) )
assertNotNull ( "Expected a non-null response" , result1 )
assertThat ( argument . getValue ( ) . getName ( ) , is ( "step_with_parameters: <span class='step-parameter'>[1, 2, 3]</span>" ) )
assertions . isNotEqualByComparingTo ( actual )
assertTrue ( binlogEvent . equals ( EventFactory . dml ( 1 , 1 , "f.1" , 1 , "a" , "b" , false , false , DMLType . INSERT ) ) )
assertXMLEqual ( new StringReader ( "<body></body>" ) , new StringReader ( html ( processed ) ) )
assertNull ( gavSchema . versionSuffix )
assertTrue ( context . updateAndGetGameOver ( ) )
assertCollectionProperty ( "explicitCollectionField" , true , false , Collection . class , true , property )
Assert . assertEquals ( person . getSex ( ) , Sex . MALE )
assertEquals ( in , out )
assertFalse ( HttpMessageUtils . isJson ( message ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertEquals ( "TestHello" , result )
assertThat ( actual , is ( expected ) )
assertTrue ( "Login too long" , constraintViolations . size ( ) == 1 )
assertTrue ( collection . containsAll ( input ) )
assertEquals ( doc1 , io . getDocumentById ( id1 , true ) )
assertThat ( traversal . toList ( ) , containsInAnyOrder ( VertexMatcher . likeVertex ( ) . withTimId ( "1" ) , VertexMatcher . likeVertex ( ) . withTimId ( "2" ) ) )
Assert . assertFalse ( fire ( "/sakai-ws/rest/login/login" , params , null ) )
assertFalse ( isSymbolicLink )
assertElementsAtLeast ( results , JBOSS_RESULTS )
assertTrue ( matches )
assertThat ( response1 , is ( response2 ) )
assertNotNull ( result )
editor . assertCompletions ( INDENTED_COMPLETION , "spring:\n" + "  application:\n" + "    name: chatter-web-ui\n" + "  cloud:\n" + "    stream:\n" + "      bindings:\n" + "        output:\n" + "          destination: chat\n" + "        input:\n" + "          destination: chat\n" + "  jackson:\n" + "    locale: <*>" )
assertEquals ( expected , result )
Assert . assertEquals ( 0.0 , a . multiplyTransposed ( b ) . subtract ( a . multiply ( b . transpose ( ) ) ) . getNorm ( ) , 1.0e-15 )
assertArrayEquals ( componentPropertiesClasses , new Class [ ] { SnowflakeConnectionProperties . class , SnowflakeTableProperties . class } )
assertEquals ( 6 , count )
assertEquals ( 2 , artists . size ( ) )
assertEquals ( expected , result )
assertTrue ( MatrixUtils . equals ( p , pinvRnk1 , 0.05 ) )
assertCompilationMessage ( diagnostics , Kind . ERROR , 15 , 8 , "Found more than one @WorkbenchPanel with isDefault=true." )
assertActionKey ( HttpVerb . PUT , "parent-root-collection-params" , true , keys . get ( 0 ) )
assertFalse ( hasPermission )
Assert . assertEquals ( false , retval )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 800: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 800 )
Assert . assertFalse ( "No Tags found" , jsonList . isEmpty ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( new File ( f , "src/xcode" ) , FolderLayout . getSourceFolder ( project ) )
assertEquals ( 4L , count )
Assert . assertEquals ( HttpStatus . SC_BAD_REQUEST , lockingService . lockPatient ( ( Patient ) null ) )
Assert . assertEquals ( "user.zone" , info . toString ( ) )
assertThat ( result , is ( Arrays . toString ( ( byte [ ] ) input ) ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertEquals ( "user" , info . toString ( ) )
assertTrue ( readRequestMethod . getReturnType ( ) == AwsProxyHttpServletRequest . class )
assertEquals ( 1 , application . informAttributeAdded . get ( ) )
assertThat ( result , is ( sameInstance ( dropPartitionsRequest ) ) )
assertEquals ( "Expected that after deleting a gadget, it's still tied to the " + "tab, the gadgetIndex is null," + " and the gadget is marked as deleted" , true , deletedFlag . booleanValue ( ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( list , parser ( "// comment\n ( str)" ) . object ( "" ) )
assertEquals ( 3 , itemsets . size ( ) )
assertEquals ( - 1 , r . peekChar ( ) )
assertEquals ( "Hong-Thai Nguyen" , metadata . get ( TikaCoreProperties . CREATOR ) )
Assert . assertEquals ( "https://foo.com:8080/things/123/456?param1=value1&param2=value2&param3=value3&param4=value4#value5,value6" , result )
assertFalse ( like . passesFilter ( "id" , item ) )
assertThat ( schema , containsString ( "}\n\ntype TypeMutations {\n" + "  create(uri: String! entity: TypeCreateInput!): Type @createMutation(dataSet: \"rootType\" typeUri: \"" + TYPE_URI + "\")\n" + "  edit(uri: String! entity: TypeEditInput!): Type @editMutation(dataSet: \"rootType\")\n" + "  delete(uri: String! entity: TypeDeleteInput): RemovedEntity! @deleteMutation(dataSet: \"rootType\")\n" ) )
assertVisitorSatisfied ( )
assertThat ( actual , is ( notNullValue ( ) ) )
assertEquals ( 1 , inverses . size ( ) )
assertNull ( result . getItem ( COSName . R ) )
Assert . assertEquals ( CLOUD_SDK_HOME , sdk . getPath ( ) )
assertNotSame ( 0 , userDao . getUserCount ( ) )
Assert . assertEquals ( ClassLoader . getSystemClassLoader ( ) , session . getClassLoader ( NAME1 ) )
Assert . assertEquals ( users . stream ( ) . filter ( user -> TestConfig . LOGIN . equals ( user . getLogin ( ) ) ) . count ( ) , 1 )
assertEquals ( asList ( "FRED" , "JOSEPH" , "MARMADUKE" ) , list )
Assert . assertTrue ( IntrospectUtil . hasCollectionType ( typeClass ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( "Foo" , metrics . baseName ( ) )
assertEquals ( FOLDER_DELETE_ID , container . getComponentData ( TEST_CONTAINER , getStudioName ( GoogleDriveDeleteDefinition . RETURN_FILE_ID ) ) )
assertEquals ( 0 , serverStatus . getBitrate ( ) )
assertThat ( "This test must runs without an error, because we can not guarantee that this test method run as first. " + res , res , greaterThan ( 0 ) )
Assert . assertEquals ( "{" + "\"@context\":\"../$metadata#ESAllPrim(32767)/PropertyDecimal\"," + "\"@metadataEtag\":\"W/\\\"metadataETag\\\"\"," + "\"value\":\"34\"}" , resultString )
assertEquals ( expResult , result )
Assert . assertTrue ( true )
assertEquals ( 0 , p . getMaskGroup ( ) . getNodeCount ( ) )
assertEquals ( 15663 , HttpUtil . readChunkSize ( new ByteArrayInputStream ( s . getBytes ( ) ) ) )
assertTrue ( s . isSubTree ( a , b ) )
Assert . assertTrue ( "Should exeed - " + LONG_TEXT_3 . getBytes ( ) . length , payload . isGlobalExceedLength ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( false , options . isRecursive ( ) )
assertNotNull ( tlsPolicy )
assertEquals ( "insert() Text Is TeTestst" , Text . valueOf ( "TeTestst" ) , _text )
assertEquals ( header . getTitle ( ) , getTitleLabel ( header ) . getText ( ) )
assertEquals ( " Actual doesn't match with expected. " , new Integer ( 0 ) , new Integer ( cs . getRow ( ) ) )
assertArrayEquals ( pkgClasses . toArray ( ) , defaultClasses . toArray ( ) )
assertThat ( response . getDateHeader ( "aaa" ) , is ( 1000L ) )
assertEquals ( 0 , rpt . size ( ) )
assertEquals ( "vhtml" , bindings . get ( "_suffix" ) )
assertThat ( paginate , is ( not ( nullValue ( ) ) ) )
assertEquals ( witness , tl )
assertTrue ( emptyList . isEmpty ( ) )
JSONAssert . assertEquals ( expected , response . getBody ( ) , false )
assertFalse ( listOutput . isEmpty ( ) )
Assert . assertEquals ( rgTime_EXPECTED , rgTime_ACTUAL , eps05 )
assertEquals ( 2 , numberOfSimilarWords )
assertEquals ( result , "10.2" )
Assert . assertTrue ( map . toIdentityString ( ) . contains ( "foo" ) )
assertEquals ( "field.keys()" , p . toString ( ) )
assertEquals ( UNPROCESSEABLE , response . getStatus ( ) )
Assert . assertEquals ( "(aa_change_indel (aa_point_location (aa_char Cys) 123) del ins)" , aa_change_indel . toStringTree ( parser ) )
Assert . assertEquals ( 1 , find . getCount ( ) )
Assert . assertEquals ( "08/10/2016 17:57:49 GMT-04:00" , time )
assertEquals ( "Cookie{name='foo', value='bar', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.localdomain], httpOnly=true, secure=false, maxAge=Optional[-1]}\n" + "Cookie{name='cat', value='dog', version='VERSION_0_NETSCAPE', path=Optional[/], domain=Optional[localhost.local], httpOnly=true, secure=false, maxAge=Optional[-1]}\n" , CollectionFormatter . table ( httpRequest . getEffectiveCookies ( ) ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertEquals ( expectedTimelineSegments , timeline . getTimelineSegments ( ) )
Assert . assertEquals ( rows * numProjections , projectedData . eq ( projectedDataCheck ) . sum ( ) , Math . ulp ( rows * cols ) )
assertNotNull ( model )
assertEquals ( "Find by label not returning a list with one reading" , 1 , readings . size ( ) )
assertEquals ( null , extractedName )
assertTrue ( out . contains ( "User [owner] is not authorized to view the logs for entity" ) )
assertEquals ( 2 , nodes . size ( ) )
assertThat ( MODEL . getStartTransition ( utc ) , is ( SUMMER_START_1947 ) )
assertEquals ( expResult , result )
Assert . assertTrue ( returnedVisibilities . isEmpty ( ) )
assertEquals ( "master" , result . get ( ) )
Assert . assertEquals ( 2 , segments . size ( ) )
Assert . assertEquals ( healthnumber , handler . getHealthNum ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "A" , 0.234 , 1.0 ) ) )
assertEquals ( "0" , result )
assertMockEndpointsSatisfied ( )
assertEquals ( count1 . get ( ) , count2 . get ( ) )
assertEquals ( USERNAME , profile . getId ( ) )
assertTrue ( arrayType . isArray ( ) )
Assert . fail ( "distcp failure" )
assertTrue ( p . getProperties ( ) != null )
assertSame ( servletRequest , contextParameterResolver . resolve ( parameter , applicationContext ) )
assertFalse ( exists )
assertEquals ( sortedSinged , result )
assertEquals ( body . toString ( ) , POST_VAL )
assertEquals ( expResult , result )
assertSame ( t , TEST_2007_07_15 )
assertEquals ( "[[\"a\",\"b\"],[\"c\",\"d\"]]" , new String ( baos . toByteArray ( ) ) )
assertFalse ( status . equals ( HardActivityConstraint . ConstraintsStatus . FULFILLED ) )
Assert . assertTrue ( pointQuadTrees . contains ( nodeQuadTree ) )
assertNull ( "Not null type is returned for property ''" , container . getType ( "" ) )
Assert . assertTrue ( irodsFileForSecondaryUser . canRead ( ) )
assertEquals ( "{\"version\": \"3.0.0\", \"gauges\": {\"foobar\": {\"value\": 5}}, \"counters\": {}, \"histograms\": {}, \"meters\": {}, \"timers\": {}}" , bson . toJson ( writerSettings ) )
assertEquals ( 2 , parent . getChildren ( ) . size ( ) )
assertEquals ( 0 , result . size ( ) )
assertNotSame ( simplePage . getName ( ) , "" )
assertNotNull ( sizes )
Assert . assertEquals ( 8 , patientIdentifiers . size ( ) )
assertEquals ( 0 , attributeList . size ( ) )
assertEquals ( 2 , variable )
assertThat ( principals , hasItem ( new UserNamePrincipal ( "user" ) ) )
JSONAssert . assertEquals ( expected , result . getResponse ( ) . getContentAsString ( ) , false )
assertFalse ( existentFile . exists ( ) )
assertEquals ( 1.0 , result , 0.1 )
assertEquals ( expectedValue , generatedValue )
assertThat ( kitId , is ( suffixSettings . getKitId ( ) ) )
assertEquals ( expected , actual )
assertThat ( url . toString ( ) , is ( "http://localhost/foo/bar" ) )
assertThat ( listener . getPartitionSpecFilter ( ) , is ( "(p1='val1' AND p2=val2) OR (p1='val11' AND p2=val22) OR (p1='val111' AND p2=val222)" ) )
Helpers . assertJson ( result , json )
assertEquals ( new ModelId ( "Test" , "com.bosch" , "1.0.0" ) , ModelId . fromPrettyFormat ( modelId ) )
assertEquals ( testValue . replaceAll ( "\\s" , "" ) , result )
assertEquals ( 1 , auc . updatesSize ( ) )
assertThat ( records . processRecordsInput ( ) . millisBehindLatest ( ) , equalTo ( response . millisBehindLatest ( ) ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
Assert . assertFalse ( t . sameContent ( ) )
assertEquals ( "193d2ad9-e671-4d66-9211-7f75f6380231" , orderId )
Assert . assertTrue ( isEqual ( distance , 0.25 ) )
assertNotNull ( service )
assertThat ( result , is ( false ) )
assertEquals ( expectedPrefix , actualPrefix )
assertNotNull ( regRequest )
assertEquals ( obj , value )
assertSequence ( db . iterator ( ) , immutableEntry ( "a" , "va" ) )
assertMockEndpointsSatisfied ( )
assertThat ( cr . title ( ) , is ( "Comune Amministrativo-1.2.3" ) )
assertEquals ( "\"" , s )
assertTrue ( "Should get 'lollol'" , test . equals ( value ) )
Assert . assertEquals ( 0 , timeZoneDefinition . compare ( first , first ) )
assertOrecValue ( orec , orecValue )
assertEquals ( new SchemaAndValue ( schema , struct ) , avroData . toConnectData ( avroSchema , avroRecord ) )
assertEquals ( CudaGridExecutioner . MetaType . NOT_APPLICABLE , executioner . getMetaOpType ( opB ) )
Assert . assertNotNull ( cu )
assertEquals ( 0 , issues . size ( ) )
assertTrue ( board . isWin ( ) )
Assert . assertEquals ( false , objectSet . isEmpty ( ) )
assertEquals ( "Jachym" , mustache . render ( new JsonParser ( ) . parse ( new StringReader ( "{ \"foo\": { \"name\": \"Jachym\"}}" ) ) ) )
assertEquals ( "1b5b33316d611b5b6d" , Hex . encodeHexString ( TextUtils . red ( "a" ) . getBytes ( ) ) )
assertEquals ( s , x . asString ( ) )
assertEquals ( stat , stat2 )
assertEquals ( singleton ( "not" ) , unwrapped . keySet ( ) )
assertFalse ( "No cast information!" , result . isEmpty ( ) )
assertTrue ( authz . parseEntityReference ( "/realm/" , ref ) )
assertEquals ( Level . FINE . toString ( ) , level . toString ( ) )
assertTranslatedSizeCacheIsReset ( workingCopy )
assertFalse ( MethodChecksUtils . hasAssertion ( nameNodes , SYSTEM_ASSERT_PATTERN ) )
Assert . assertEquals ( "*3*5*7*9*" , result )
assertThat ( comparator . compare ( axiom1 , axiom2 ) , is ( 0 ) )
assertEquals ( "jede sekunde" , t . describe ( cron ) )
assertEquals ( 0.0 , r )
assertEquals ( expected , successors )
assertEquals ( asList ( arguments ) , options . nonOptionArguments ( ) )
Assert . assertFalse ( userService . isSecretAnswer ( user , "not the answer" ) )
assertFalse ( "No results expected." , iter . hasMoreResources ( ) )
Assert . assertEquals ( new URI ( "./mypath" ) , uri )
assertEquals ( CompressionType . Zip , compressionType )
assertFalse ( shell . disposed )
assertEquals ( expected , actual )
assertEquals ( results , metrics )
Assert . assertEquals ( "Should retrieve type set" , int . class . getName ( ) , node . getType ( ) )
assertEquals ( timeFrameView , timeFrameEditor . view )
assertEquals ( expectedNode , actualNode )
Assert . assertEquals ( replacedExpected , new CompareTool ( ) . convertProducerLine ( initial ) )
assertThat ( outcome . getFormattedIssues ( ) , is ( "(#ISSUE-123)" ) )
assertTrue ( ! result . hasErrors ( ) )
assertEquals ( 2 , messageEventRepository . findByParentURI ( atom2 . getAtomURI ( ) ) . size ( ) )
Assert . assertTrue ( "Capabilities should match" , first . matchesCapabilities ( map ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertEquals ( "1.0 * SINGLECLOSED(+A) + 1.0 * SINGLECLOSED(+B) = 1.0 ." , rule . toString ( ) )
assertTrue ( output , output . matches ( "(?s).*Usage: dolines.*" ) )
assertTrue ( "Keystore setter is not working correctly" , delegate . getKeystore ( ) . equals ( "testKey" ) )
assertFalse ( new JavaAssistClass ( fakeClass ) . canInstantiate ( fakeClass ) )
assertThat ( f . toString ( ) , is ( "function fred()" ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0xc0 } , actuals )
assertNotNull ( metadata )
Assert . assertFalse ( this . manager . isConnected ( this . person1 , this . family1 ) )
assertEquals ( fixture , this . libshout . getProtocol ( ) )
assertEquals ( "vehLoc" , route . getEnd ( ) . getLocation ( ) . getId ( ) )
assertEquals ( expecting , found )
assertJson ( "{'value': 1}" , serialize ( bean ) )
assertionsSuccess ( resultMap )
assertNotNull ( entry )
assertEquals ( lastValue , "EndNode1" )
assertSystemMessageEquals ( TestSystemMessagesProvider . EXPIRED_BY_TEST )
assertEquals ( expectedMap , map )
assertEquals ( "Hello John Doe" , ResponseBodyInterpolator . interpolate ( "Hello :firstName :lastName" , req ) )
assertFalse ( listOutput . isEmpty ( ) )
assertEquals ( trieSingle . getRootHash ( ) , trie2 . getRootHash ( ) )
assertEquals ( CONTRIBUTED_PATH , cp )
assertEquals ( abort . isUserSpecificReason ( ) , duplicate . isUserSpecificReason ( ) )
Assert . fail ( )
assertThat ( stringOf ( sut . toDevice ( msg ) ) , is ( lua ( powerPinMessage ( anyDigitalPin . pinNum ( ) , "HIGH" ) ) ) )
assertOut ( "RoyaleTest_A.prototype.royaleTest_a = function() {\n" + "  var self = this;\n" + "  function a() {\n" + "  };\n" + "  \n" + "}" )
assertEquals ( "Testing Course" , courses . get ( 0 ) . getName ( ) )
Assert . assertEquals ( ( Float ) 1.0f , res )
assertSearchYields ( index , "" , "fooaaa" , "foobbb" )
arrays . assertDoesNotContain ( description , null , other )
Assert . assertEquals ( functionColumn , ( ( String [ ] ) result ) [ 0 ] )
assertTrue ( success )
assertNotNull ( runtimeService . startProcessInstanceByKey ( "TestProcess" , variables ) )
assertEquals ( string , StreamHelper . toString ( rafis ) )
assertNotNull ( error )
assertEquals ( 0 , n )
sensei . assertWriteText ( property )
assertSame ( expr . accept ( visitor ) , visitResult )
assertPutFails ( role , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertEquals ( "path" , file . getName ( ) )
Assert . assertEquals ( "2004-02-29" , result )
assertFalse ( Futures . getUnchecked ( collector ) )
assertThat ( requestParameter ( UNDEFINED_PARAMETER , mockMatcher ) . retrieveValue ( req ) , is ( nullValue ( ) ) )
assertPartialOrdered ( storeWithoutCommitThenDelete_expected ( stored , deleted ) , readLatestJournalEntries ( ) )
Assert . fail ( )
assertEqualsJson ( expected , actual )
assertEquals ( "Wrong number of visited nodes" , nodeCount , visitor . getVisitedNodes ( ) . size ( ) )
assertEquals ( "total = 77" , result . getValue ( ) )
assertEquals ( resultMock , result )
assertTrue ( result . isEmpty ( ) )
assertNotSame ( list . toString ( ) , g . toString ( ) )
assertEquals ( "5421" , arr . reduceRight ( callbackfn ) )
context . assertIsSatisfied ( )
assertNull ( bucket )
assertEquals ( xs , ys )
assertThat ( compatibility . getIncompatibility ( ) , both ( containsString ( "abcde" ) ) . and ( containsString ( "cdefg" ) ) )
Assert . assertEquals ( "1" , result )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
assertEquals ( "2016-06-01T21:22:43.123Z" , result )
assertEquals ( text . getText ( ) , "" )
Assert . assertEquals ( 10L , wrapped . call ( ) . longValue ( ) )
Assert . assertTrue ( 0.0 < regression . getSignificance ( ) && regression . getSignificance ( ) < 1.0 )
assertEquals ( "Select script should match expected" , expectedConcatenationWithFunction ( ) , result )
assertFactorization ( poly , UnivariateSquareFreeFactorization . SquareFreeFactorization ( poly ) )
assertNotNull ( constraints . getExpiryTime ( ) )
assertArray ( new double [ ] { 0.01 , 0.038 , 0.028 , 0.075 , 0.139 , 0.222 , 0.194 , 0.295 } , scaleDouble ( 3 , node1 . getPotentials ( ) ) )
assertEquals ( expected , loopingGraph . getVertices ( ) )
assertNotNull ( kidless )
assertEquals ( hashMap , CollectionsFactory . createMap ( TMap . entry ( 1 , "one" ) , TMap . entry ( 2 , "two" ) , TMap . entry ( 3 , "three" ) ) )
assertEquals ( t1 , t2 )
assertNull ( retrievedState )
assertEquals ( original , other )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
assertEquals ( response , "{\"aStringArray\":[\"a string value\"],\"anIntegerArray\":[99]}" )
assertEquals ( expected , actual )
Assert . assertEquals ( "null" , writer . toString ( ) )
Assert . assertEquals ( "true" , result )
assertNotNull ( entity . getId ( ) )
UmaTestUtil . assert_ ( pat )
Assert . assertEquals ( bundleContext , factory . bundleContext )
assertEquals ( expResult , result )
Assert . assertArrayEquals ( doubles , topoPhase . demPhase [ i ] , DELTA_04 )
assertThat ( infos . length , is ( 0 ) )
assertEquals ( objList . get ( 2 ) , "insert_after_menu2" )
assertTrue ( retryPolicy . getRetryCondition ( ) . shouldRetry ( null , e , 1 ) )
assertThat ( f1 . get ( ) , not ( equalTo ( 55 ) ) )
assertEquals ( s , r . toString ( ) )
assertTrue ( processor . canProcessEvent ( event ) )
assertTrue ( result )
assertEquals ( ( float ) now , Float . valueOf ( output ) , 100 )
assertEquals ( 0 , result . getMappingsCount ( ) )
assertEquals ( 1 , count )
assertEquals ( "next value for myseq" , new SQLSerializer ( new Configuration ( new DerbyTemplates ( ) ) ) . handle ( nextval ) . toString ( ) )
assertEquals ( "bar" , yamlConfiguration . getString ( "foo" ) )
Assert . assertEquals ( null , new CompareTool ( ) . compareByContent ( output , cmp , outputPath , "diff" ) )
Assert . fail ( "Test encountered an unexpected exception." )
assertEquals ( new ModelId ( "Test" , "com.bosch" , "1.0.0" ) , ModelId . fromPrettyFormat ( modelId ) )
assertEquals ( "TokenValue passed into constructor not returned by getTokenValue()" , "imsurethiswillwork" , sut . getTokenValue ( ) )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , true , "test" , null ) . property ( "fubar" ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( expected , actual )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( "foo" , s )
assertEquals ( result , true )
assertDtoAndMapConstructorAreSame ( 0 )
assertJsonEquals ( ImmutableMap . of ( "topic" , "test-topic" , "notification" , data ) , message )
assertThrows ( IllegalStateException . class , funnel :: run )
assertEquals ( 4 , result . getProperties ( ) . size ( ) )
assertBrownGCD ( gcd , a , b )
assertEquals ( "Base for strings is wrong" , "2001:db8:2de:0:0:0:0:e13" , parsed )
assertEquals ( 1.5f , entry . getEffectiveDurationHours ( ) , Float . MIN_NORMAL )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "onekey1val1val5|key2val2|" , hash )
Assert . assertEquals ( 2 , batches . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertAnnotations ( 2 , Coordinate . class , new TestCoordinate ( 0 , "51.507, -0.125" , "dd" , TYPE_POINT_COORDINATES_0_125_51_507 ) , new TestCoordinate ( 1 , "-3.2,56" , "dd" , TYPE_POINT_COORDINATES_56_3_2 ) )
Assert . assertFalse ( context . getResult ( ) )
runner . assertAllFlowFilesTransferred ( AbstractBigQueryProcessor . REL_SUCCESS , 1 )
Assert . assertFalse ( campo . getDeclaredAnnotation ( Element . class ) . required ( ) )
assertEquals ( CREATOR_ID , task . getCreator ( ) . getUserId ( ) )
Assert . assertEquals ( newSize , counter . get ( ) )
assertEqualsAndParses ( deltaDecl , d )
assertTrue ( createNode instanceof CreateTableNode )
assertTrue ( e . getCause ( ) . getMessage ( ) . contains ( "ELY05125" ) )
tester . assertInfoMessages ( "Username and password are correct!" )
mock . assertIsSatisfied ( )
assertThat ( satisfiesConstraints ( prop , new Value [ ] { value } ) , is ( false ) )
assertEquals ( 0 , tableNames . size ( ) )
assertNotNull ( error )
assertEquals ( expected , result , 0.000001d )
assertEquals ( 1 , reslut )
Assert . assertTrue ( "Single namespace is not supported by protobuf" , false )
org . junit . Assert . assertEquals ( expected , actual )
assertTrue ( album1 . equals ( album2 ) )
assertTrue ( newRecipe . getTags ( ) . isEmpty ( ) )
assertEquals ( "https://localhost.jenkins/git/notifyCommit?" + "url=http%3A%2F%2Fsome.stash.com%2Fscm%2Ffoo%2Fbar.git" + "&branches=refs%2Fheads%2Fmaster" + "&sha1=sha1&TARGET_BRANCH=master" , captor . getValue ( ) . getURI ( ) . toString ( ) )
assertNotNull ( injector )
assertEquals ( expResult , result )
assertTrue ( ( ( BooleanType ) respParam . getParameter ( ) . get ( 0 ) . getValue ( ) ) . booleanValue ( ) )
assertEquals ( 1 , causes . length )
assertEquals ( "Echo Tex.get()t Doesn't Match!" , "echo this..." , response . get ( ) . getMessageBody ( ) )
assertEquals ( "A" , z )
Assert . areEqual ( 0 , notException , "not Exception" )
assertThat ( result , contains ( rpslObjectInfo ) )
assertTrue ( "Snapshot with lesser timestamp is lessert" , lesserSnapshot . compareTo ( snapshot ) < 0 )
assertThat ( bolt . delimiter , is ( '\t' ) )
assertTrue ( sba instanceof ThickSBA )
Assert . assertTrue ( "The test file " + out + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertEquals ( "Hello there 镁母�" , s )
assertEquals ( item . getType ( ) , result )
assertEquals ( expected , result )
assertEquals ( getLabel ( ) , 0.0 , prod . minus ( b ) . getRMS ( ) , TOLERANCE )
assertions . containsOnly ( values )
assertThat ( os . size ( ) , not ( 0 ) )
assertEquals ( "float mapper serialization is wrong" , expected , actual )
assertTrue ( new File ( "DCPSetupMaker-1.2.1.jar" ) . exists ( ) )
assertEqualLines ( "invalid updating" , definedContent , newContent . toString ( ) )
assertEquals ( "healthy" , string0 )
assertEquals ( "UNI___was" , orgSectionHasher . hash ( section ) )
assertEquals ( Orientation . typeOf ( 2 ) , orientation )
Assert . assertEquals ( expResult , result )
assertTrue ( closeLatch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( expected , consts )
Assert . assertTrue ( Models . isomorphic ( expected , actual ) )
assertThat ( f . toString ( ) , is ( "function fred()" ) )
assertSame ( instance . getBit ( i ) , false )
assertEquals ( "8.1.0" , revision )
helper . assertAttributeValue ( EXPECT_NoAttributeValue , invoiceLine . getM_AttributeSetInstance ( ) , attr_Country )
assertEquals ( "method returns 1+2+3 = 6" , 6 , ret )
assertEquals ( "id should be 3" , new Long ( 3 ) , read . getId ( ) )
assertFalse ( this . it . hasNext ( ) )
assertEquals ( input . acceptString ( ) , expected )
Assert . assertEquals ( "100 Elements should be checked" , 100 , manager . numberOfExaminedElements ( ) )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "movies/TheMatrixRevolutions" , "movies/TheMatrixReloaded" , "movies/TheMatrix" ) )
assertTrue ( Arrays . equals ( getPacketData ( "00 00 00 04" ) , version . serialize ( ) ) )
Assert . assertEquals ( 0 , a . getMaxNestedBlocks ( ) )
assertEquals ( sb . toString ( ) , whereSb . toString ( ) )
assertEquals ( str , "\"string\"" )
assertTextEquals ( "[S2]|k2 = v2|" , cm )
assertTrue ( true )
assertEquals ( registryAuth , fixedRegistryAuthSupplier . authFor ( "doesn't matter" ) )
assertEquals ( NUM_WRITERS * ENTRIES , countHLog ( logfile , fs , conf ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertFalse ( translationResult . getResult ( ) . booleanValue ( ) )
assertEquals ( 0 , r . avalie ( avaliaveis , null ) . getReal ( ) , 0.0001f )
assertEquals ( 1 , shacl . nbResult ( gg ) )
assertTrue ( entity . isValid ( ) )
assertThat ( description . toString ( ) , is ( "got <2> sheet(s) expected <1>" ) )
assertEquals ( anchorListItem , workbenchMenuStandardNavBarView . getMenuItemContextWidgetMap ( ) . get ( menuId ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . FUNDING_READ_LIMITED )
mock . assertIsSatisfied ( )
assertThat ( target . getIpTtl ( ) , is ( new Integer ( 1234 ) ) )
assertEquals ( "Hello Tim" , resp . getResponseBody ( ) . trim ( ) )
Assert . assertEquals ( expected , actual )
assertSelectResultKeys ( selector , "edf" )
assertEquals ( sendRequest . memo , sendRequest . tx . getMemo ( ) )
assertNotNull ( Interaction . reader ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "KCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( 2 , batches . size ( ) )
assertEquals ( expected , actual )
assertEquals ( JPATypeMock . class , jpaEntity . getClass ( ) )
assertEquals ( "Using print writer response" , str )
assertThat ( ConnectionHeaders . fromString ( " \b\t\n\r\f{ \b\t\n\r\f\"key\" \b\t\n\r\f: \b\t\n\r\f\"value\\/other\" \b\t\n\r\f, \b\t\n\r\f\"foo\" " + "\b\t\n\r\f: \b\t\n\r\f\"bar\\\\manchu\" \b\t\n\r\f} \b\t\n\r\f" ) , is ( expected ) )
assertTrue ( events . size ( ) == 3 )
assertEquals ( "ChuckNorris" , victim . readLine ( ) )
assertTrue ( acceptor . validate ( controllerMethod , controllerInstance ) )
assertNotNull ( result )
assertThat ( result , is ( equalTo ( "Hello World!" ) ) )
assertThat ( tester . request . getParameterValues ( "aaa" ) , is ( array ) )
assertEquals ( expected , result )
Assert . assertTrue ( pinyinSet1 . size ( ) > 1 )
assertEquals ( PropUtil . getIntProperty ( props , "test" , 1 ) , 2 )
assertTrue ( error )
assertEquals ( ManipulationScope . COLUMN , manipulation . getManipulationScope ( ) )
assertEquals ( 6 , outSize )
assertTrue ( learner . getModelFinal ( equiv ) != null )
assertThat ( pathsInSource , hasItems ( pathInSource ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( out , cmp , destinationFolder ) )
assertEquals ( "1 event should be returned" , 1 , events . size ( ) )
Assert . assertEquals ( 2 , count . get ( ) )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertTrue ( "Syslog audit log should be created" , ops . exists ( TEST_SYSLOG_AUDIT_LOG_ADDRESS ) )
Assert . assertEquals ( 1 , comparator . compare ( id1 , id2 ) )
assertEquals ( 0 , argList . size ( ) )
Assert . assertTrue ( conn . isClosed ( ) )
assertEquals ( exp , rc . getReplicaSelector ( ) )
assertEquals ( "pong!" , reply . body ( ) )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertNotNull ( result )
assertEquals ( generatedJavascript , expectedJavascript )
assertNotNull ( oracleEngine )
assertTrue ( anc . isEmpty ( ) )
assertNotNull ( result )
assertFalse ( "isPresent should return false if only element actually present is not " + "required when RequireAll annotation is used." , testView . isPresent ( ) )
assertNull ( future . get ( ) )
Assert . assertEquals ( 2000 , JSONUtils . getLong ( jsonObject , "salary" ) )
assertEquals ( BODY_CONTENT , rewrite ( gadget , BODY_CONTENT ) )
Assert . assertEquals ( 1 , metaUpdate . addKeepers ( dc , cluster , new ShardTbl ( ) . setShardName ( shard ) ) )
Assert . fail ( "Expecting MathIllegalStateException" )
assertTrue ( 12345.0d == d . asFloat8 ( ) )
assertThat ( actual , is ( matcher ) )
assertTrue ( evaluator . evaluate ( ae ) )
assertEquals ( Result . STOP , or . apply ( pathData ) )
assertEquals ( 1 , x . size ( ) )
assertThat ( results , contains ( mrId ) )
assertTrue ( versionFileLib . exists ( ) )
assertThat ( versionManager . isCheckedOut ( child2 . getPath ( ) ) , is ( false ) )
assertEquals ( "Should contain 2 paths" , 2 , pathstrings . size ( ) )
assertEquals ( "hello world" , result )
assertThat ( root . getString ( ( NamespaceRegistry ) null , encoder , encoder ) , is ( "/" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( 0 , intList . size ( ) )
assertEquals ( "a.b.C" , constructor . getParameterTypes ( ) . get ( 0 ) . getFullyQualifiedName ( ) )
assertObjectEquals ( "{'in':'header',name:'If-Match',type:'string'}" , pi )
Assert . assertEquals ( "" , result )
assertThat ( target . getData ( ) , is ( value ) )
assertEquals ( 1 , type . getCapacityDimensions ( ) . getNuOfDimensions ( ) )
assertGraph ( "" + "digraph G1 {\n" + "  CoffeeMaker -> Heater [style=dotted;color=red];\n" + "  CoffeeMaker -> Pump;\n" + "  CoffeeMaker [shape=box];\n" + "}\n" )
assertFalse ( loadconstraint . fulfilled ( context ) )
Assert . assertNotNull ( "AbstractTableConfigHelper.cTor failed to create an instance" , uut )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertTrue ( barrier . isAborted ( ) )
assertThat ( specification . getUnits ( ) , is ( ONE ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEquals ( 3 , paragraphElement . getElementCount ( ) )
assertEquals ( "Both filters should be used" , 17 , sizeWithUnfilteredQuery ( ) )
Assert . assertEquals ( Status . BAD_REQUEST . getStatusCode ( ) , resp . getStatus ( ) )
assertEquals ( new SchemaAndValue ( Schema . FLOAT64_SCHEMA , 12.0 ) , avroData . toConnectData ( avroSchema , 12.0 ) )
assertTrue ( result . contains ( "\"1-0-v0\":{\"type\":\"LCD\",\"values\":[\"\\u0000\"]}" ) )
Assert . assertEquals ( true , 0 == partition . calculate ( "2014-01-01 12:00:03" ) )
Assert . fail ( "Expected failure due to missing service name on message" )
assertEquals ( "obj != deserialize(serialize(obj))" , comp , dest )
Assert . assertEquals ( expected , name )
Assert . assertEquals ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "foo" , this . classifier . classify ( new IllegalStateException ( "Foo" ) ) )
assertFalse ( attributes . isModified ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( "[0.0, 1.0, 2.0, 3.0, 4.0]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertEquals ( 144. , violation , 0.01 )
assertEquals ( Double . valueOf ( 81.56891 ) , testVal )
assertNull ( expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
Assert . assertTrue ( "RunJar failed" , outFile . exists ( ) )
assertThat ( generated , is ( "{ {}\nUNION { ?X <eh:/P> ?v1}UNION { ?X <eh:/Q> ?v2\nOPTIONAL { ?v2 <eh:/R> ?v1 . }}}" ) )
assertEquals ( expResult , result )
assertTrue ( details . hasClosed ( ) )
assertFalse ( "Location defined" , handler . isLocationDefined ( ) )
assertThat ( "interface inherited default method" , obj , equalTo ( 4 ) )
Assert . assertTrue ( "No results when search for community full text search" , success )
assertTrue ( fr . getAuthors ( ) . isEmpty ( ) )
assertEquals ( "var" , exp . s )
assertTrue ( result . isSuccess ( ) )
assertEquals ( expectedResult , actualResult )
assertEquals ( "Failed to generate for loop with initializer" , FOR_INITIALIZER_NO_COUNTING_EXP_EMPTY , s )
assertTrue ( result )
assertThat ( actual , is ( "ABC_ID_FOO" ) )
assertEquals ( "Base for strings is wrong" , Double . valueOf ( 3.2d ) , parsed )
assertEquals ( TOKEN , profile . getId ( ) )
assertEquals ( 3 + 1 , getCount ( ) )
assertEquals ( 1 , books . size ( ) )
assertEquals ( expected , got )
Assert . assertEquals ( 0 , getCountingDummyPersister ( ) . getSaveCount ( ) )
assertEquals ( 500 , fixedRate )
assertThat ( testOutcome . getUserStory ( ) . getName ( ) , is ( "My user story" ) )
assertEquals ( "Frozen column count not updated" , i , grid . getFrozenColumnCount ( ) )
assertTrue ( isSorted )
Assert . assertTrue ( res . isEmpty ( ) )
assertTrue ( ! result . isEmpty ( ) )
assertEquals ( "Float value does not match" , bookmark . getVisitRatio ( ) , loadedBookmark . getVisitRatio ( ) )
assertThat ( result , containsInAnyOrder ( "Jane" , "Adam" ) )
assertEquals ( expect , r . toString ( ) )
Assert . assertTrue ( myRecordList . size ( ) == 0 )
Assert . assertNull ( "Should be null for option with null code" , SelectListUtil . getOptionWithMatching ( options , "A" ) )
assertNull ( sessionFactory . getCurrentSession ( ) . get ( TaskElement . class , task . getId ( ) ) )
assertArrayEquals ( "odd terminated compact encode fail" , expectedData , CompactEncoder . packNibbles ( test ) )
assertEquals ( new Folder ( ) , result )
assertEquals ( "{}" , result )
assertThat ( spiLoader , hasItem ( isA ( SimpleFileIOComponentFamilyDefinition . class ) ) )
AssertJUnit . assertTrue ( result . isSuccess ( ) )
assertNotNull ( AssignedAddOn . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "PNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNull ( expected . getParents ( ) )
Assert . assertEquals ( record . getId ( ) , TEST_ZNRECORD . getId ( ) )
Assert . assertSame ( o , p . getExpectedValue ( ) )
assertTrue ( "incorrect value" , aNumber . toString ( ) . equals ( result ) )
Assert . assertEquals ( expected , actual )
assertTrue ( model . getObjects ( ModificationFeature . class ) . size ( ) == 1 )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-domain-remote:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertFalse ( resp )
Assert . assertEquals ( Rfc1349TrafficClass . IPTOS_LOWCOST . value ( ) , socket . getTrafficClass ( ) )
Assert . assertTrue ( repeatableTask . execute ( ) )
assertEquals ( true , classUnderTest . getShowErrorLogMessages ( ) )
assertEquals ( 0 , encounter . getOrders ( ) . size ( ) )
assertEquals ( expResult , result )
assertEquals ( r1 , r2 )
assertCorrectBinaryString ( data , expected )
assertEquals ( DEFAULT , clusterStatus . getCluster ( false , TEST ) )
assertEquals ( "raw() content-type-header=[application/x-www-form-urlencoded; charset=UTF-8] accepts-header=[*/*]" , actual )
Assert . assertEquals ( element . getText ( ) , "click me" )
Assert . assertEquals ( "Empty IPTarget must not have a host" , null , ip . getHost ( ) )
assertEquals ( result , userDetails )
assertFalse ( rs . next ( ) )
Assert . assertTrue ( c . isChecked ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( "DragMe" , destination . getText ( ) )
assertNotNull ( Balance . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertThat ( "should not register user with existing mail address" , registered , is ( false ) )
assertTrue ( "unexpected value" , value )
assertNull ( result )
assertInvocations ( invocations )
assertThat ( builder , is ( CoreMatchers . any ( BaseWssSocketBuilder . class ) ) )
TestUtils . assertEquals ( anexo , anexoCreado )
assertThat ( testExecutor . invokeTest ( 1000L , ImmutableMultimap . of ( "force" , "whatever" ) ) , is ( true ) )
assertEquals ( transformedQuery , query )
assertThat ( po . get ( ) . getRunningCount ( ) , is ( 200 ) )
assertEquals ( "Expected HTTP response status code not seen." , 404 , response . getStatus ( ) )
Assert . assertNull ( prewriteSingleRow ( ) )
assertEquals ( expResult , result )
assertNotNull ( createActivity )
assertTrue ( true )
assertThat ( axioms , hasItem ( axiom ) )
assertEquals ( tags , taggedMetric . getTags ( ) )
assertEquals ( expected , json )
assertNotNull ( payString )
assertTrue ( sut . isEnabled ( ) )
assertFalse ( ( boolean ) testedMethod . invoke ( tasksManagerImpl , NOT_STARTING_BYTE ) )
assertEquals ( "(5)" , asSequenceStr ( result ) )
assertTrue ( traceHeaderLatch . await ( 5 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "Class should not be considered: " , false , new DifferenceAccumulatingHandler ( inclusionSet , exclusionSet ) . isClassConsidered ( "de/test/java/regex/classImpl" ) )
assertTrue ( rs . next ( ) )
Assert . assertTrue ( count > 0 )
Assert . assertEquals ( fsAccess . serviceHadoopConf . get ( "foo" ) , "FOO" )
assertThat ( output . format ( "notPerformed" , "" , "not performed" ) , Matchers . is ( "\033[35mnot performed\033[0m" ) )
Assert . fail ( "Was able to create two fields with conflicting names/aliases" )
assertThat ( sortDependencies . toString ( ) , is ( "DependencySortOrder{childElementNames=[groupId, scope]}" ) )
assertThat ( msg , nullValue ( ) )
Assert . assertEquals ( 0 , distance . compute ( a , a ) , 0d )
assertTokensEqual ( of ( integer ( 12 ) ) , lastSeenTokens . get ( ) )
assertThat ( result , is ( 1 ) )
assertEqualsQL ( A , ql . factor ( new DenseMatrix ( A ) ) )
assertThat ( writer . toString ( ) , equalTo ( "onetwothree" ) )
assertEquals ( expectedPosition , actualPosition , 0 )
assertEquals ( "Server returned response code " + r , HttpStatus . BAD_REQUEST_400 , r )
Assert . assertEquals ( resultEntity , entity )
arrays . assertDoesNotContain ( description , actual , other )
assertNotNull ( historicDetail . getActivityInstanceId ( ) )
assertTrue ( opts . isDirectWrite ( ) )
assertTrue ( future . isDone ( ) )
assertEquals ( "/user/role/index" , view )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
assertMultilinesEquals ( "EPSG: Mercator (variant A) (9804)\n" + "EPSG: Mercator (1SP)\n" + "OGC:  Mercator_1SP\n" + "���������������������������������������������������������������������������������������������も�����������������も�������������������������も�������������������������������も��������������������������������\n" + "�� Name                                        �� Type   �� Obligation �� Value domain  �� Default value ��\n" + "���������������������������������������������������������������������������������������������尖�����������������尖�������������������������尖�������������������������������尖��������������������������������\n" + "�� EPSG: Latitude of natural origin鹿 (8801)    �� Double �� Mandatory  ��  [-80 �� 84]掳  ��        40.0掳  ��\n" + "�� OGC:  latitude_of_origin                    ��        ��            ��               ��               ��\n" + "���������������������������������������������������������������������������������������������尖�����������������尖�������������������������尖�������������������������������尖��������������������������������\n" + "�� EPSG: Longitude of natural origin (8802)    �� Double �� Mandatory  �� [-180 �� 180]掳 ��       -60.0掳  ��\n" + "�� OGC:  central_meridian                      ��        ��            ��               ��               ��\n" + "���������������������������������������������������������������������������������������������尖�����������������尖�������������������������尖�������������������������������尖��������������������������������\n" + "�� EPSG: Scale factor at natural origin (8805) �� Double �� Mandatory  ��    (0 �� ��)    ��         1.0   ��\n" + "�� OGC:  scale_factor                          ��        ��            ��               ��               ��\n" + "���������������������������������������������������������������������������������������������尖�����������������尖�������������������������尖�������������������������������尖��������������������������������\n" + "�� EPSG: False easting (8806)                  �� Double �� Optional   ��   (���� �� ��) m  ��      5000.0 m ��\n" + "�� OGC:  false_easting                         ��        ��            ��               ��               ��\n" + "���������������������������������������������������������������������������������������������尖�����������������尖�������������������������尖�������������������������������尖��������������������������������\n" + "�� EPSG: False northing (8807)                 �� Double �� Optional   ��   (���� �� ��) m  ��     10000.0 m ��\n" + "�� OGC:  false_northing                        ��        ��            ��               ��               ��\n" + "���������������������������������������������������������������������������������������������р�����������������р�������������������������р�������������������������������р��������������������������������\n" + "鹿 This parameter is shown for completeness, but should never have a value different than 0 for this projection.\n" , text )
Assert . assertTrue ( newPointAvailable )
assertEquals ( 0 , statistics . size ( ) )
assertTrue ( gt . interpret ( Version . valueOf ( "1.2.3" ) ) )
assertThat ( result , is ( false ) )
assertXsltOutput ( "P" , "T" )
assertEquals ( "Count of customer" , 2 , res )
Assert . assertEquals ( "3 dekade dari sekarang" , t . format ( new Date ( 315569259747L * 3L ) ) )
Assert . assertEquals ( 1 , s . x )
assertEquals ( HttpStatus . SC_MOVED_PERMANENTLY , response . getStatus ( ) )
assertEquals ( 1 , r2 . compareTo ( r1 ) )
assertFalse ( Intersects . lineIntersectsCircle . call ( a , c ) )
Assert . assertTrue ( pss . toString ( ) . contains ( Integer . toString ( Calendar . getInstance ( ) . get ( Calendar . HOUR_OF_DAY ) ) ) )
assertEquals ( acceptor , typedMap . get ( accKey ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><aType><three xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/><four xsi:nil=\"true\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"/></aType>" , sw . toString ( ) )
assertNotNull ( result )
assertEquals ( "', \"'" , tk . next ( ) )
arrays . assertContainsSequence ( description , null , new short [ 2 ] )
assertSecurityGroupExistsWithRules ( SecurityGroups . getByName ( context . getApi ( ) , SECURITY_GROUP_NAME ) , ingressRules )
assertTrue ( list . hasNext ( ) )
assertEquals ( signatureValue , clonedCertificate . getSignature ( ) )
Assert . assertTrue ( hasIndexHashKeyEqualCondition )
assertNotNull ( "Date cannot be null" , date )
assertEquals ( expected , actual )
assertThat ( result . size ( ) , is ( 1 ) )
rule . assertScenarioEnded ( )
assertEquals ( url , urlString )
assertRows ( filePath , 6 , TEST_COLUMNS )
assertNull ( changeEvent [ 0 ] )
assertTrue ( entity . getId ( ) > 0 && entity . getArea ( ) == - Double . MIN_VALUE )
Assert . assertEquals ( VAL12 [ j ] [ 0 ] + "->" + j , VAL12 [ j ] [ 1 ] , result . getText ( ) )
assertEquals ( JacksonSerializer . class , serializer . getClass ( ) )
Assert . assertEquals ( null , LdapUtil . auth ( user , password ) )
assertNotNull ( result )
ConstraintViolationAssert . assertThat ( violations )
assertEquals ( 2 , dataStore . getIndices ( MOCK_DATA_TYPE_1 ) . length )
assertSame ( expected , ck . defaultKeyBundle ( ) . getEncryptionKey ( ) )
assertEquals ( expected , filterAclEntriesByAclSpec ( existing , aclSpec ) )
assertThat ( html , is ( "" ) )
Assert . assertFalse ( "no MarshallingMethodEndpointAdapter found" , result . isEmpty ( ) )
assertEquals ( "^~(.+)$" , pattern )
assertTrue ( h . getNewURL ( ) . equals ( "/NewSimpleRegex" ) )
assertArrayEquals ( new String [ ] { "1.2.40.0.13.1.1.99.27.1.1" } , matches ( query , Tag . SOPInstanceUID ) )
assertTrue ( cloned [ 0 ] == cloned [ 1 ] )
assertTrue ( ok )
assertTrue ( TEST_UTIL . getHBaseAdmin ( ) . isTableEnabled ( TABLENAME ) )
assertEquals ( 2 , context . getAssociatedActivities ( ) . size ( ) )
assertResolvedModelIsNull ( )
assertEquals ( "Subject\nText" , mail . getTemplate ( ) )
assertTrue ( "wrong field order" , data . contains ( "453=1\001448=TraderName" ) )
assertEquals ( "http://test.com/1?a=&b=" , HttpRequest . append ( "http://test.com/1" , params ) )
assertNull ( patientInfo . getAddress ( ) )
assertEquals ( expected , header . getValue ( ) )
Assert . assertTrue ( json . has ( CONTROLLER_NAME ) )
assertLog ( Log . INFO , "test info argument argument2" )
Assert . assertArrayEquals ( expected , actual . toArray ( ) )
Assert . assertTrue ( "raml: " + c . getLastReport ( ) . toString ( ) , c . getLastReport ( ) . isEmpty ( ) )
assertEquals ( "192.168.1.24" , clientInfoService . getClientIp ( remoteIp , xForwardedFor ) )
assertTrue ( metricsService . metricsNames ( ) . size ( ) > 0 )
assertFalse ( "No Longer Contains Test1" , _fastTable . contains ( "Test1" ) )
assertThat ( cloths , IsIterableWithSize . < String > iterableWithSize ( 4 ) )
assertEquals ( i , fromList )
assertNotNull ( testObj . getFieldDataManager ( ) )
assertEquals ( "should have fired twice" , 2 , list . size ( ) )
assertEquals ( expectedReprovisionPolicy , enrollmentGroup . getReprovisionPolicy ( ) )
assertNullOrEquals ( "remark" , "Fundamental point: Meade��s Ranch KS, latitude 39掳13'26.686\"N, longitude 98掳32'30.506\"W." , crs . getRemarks ( ) )
assertTrue ( emptyMap . isEmpty ( ) )
assertPlanMatches ( project )
Assert . assertTrue ( _c . canConvertTo ( Date . class ) )
assertTrue ( criteria . getResultList ( ) . containsAll ( criteriaCTO . getResultList ( ) ) )
assertEquals ( 4 , result . get ( ) . getList ( ) . size ( ) )
assertEquals ( expected , splitter . split ( expression ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.protocol.rev130731.BarrierInput" , key1 . toString ( ) )
assertTrue ( Pattern . matches ( HTableDescriptor . VALID_USER_TABLE_REGEX , tn ) )
Assert . assertTrue ( task . isInitialized ( ) )
assertIterationsEqual ( out1 , out2 )
assertThat ( subject . size ( ) , is ( nullValue ( ) ) )
assertions . contains ( )
assertTrue ( functionsWithName . isEmpty ( ) )
assertEquals ( expected , uri . toString ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( "num metrics in registry" , 3 , r . metrics ( ) . size ( ) )
assertEquals ( "true" , propertyValue )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertEquals ( setOf ( new KeyStatistics < String > ( "Ford" , 6 ) , new KeyStatistics < String > ( "Honda" , 6 ) , new KeyStatistics < String > ( "Toyota" , 6 ) , new KeyStatistics < String > ( "BMW" , 2 ) ) , keyStatistics )
Assert . assertEquals ( dim . batchSize ( ) , 100 * 200 )
assertTrue ( action . isExecuted ( ) )
assertTrue ( dataset . getContext ( ) . get ( SpatialQuery . spatialIndex ) instanceof SpatialIndexLucene )
assertTrue ( lock . lockConnection . getMetaData ( ) . getURL ( ) . contains ( database ) )
assertEquals ( "{\"type\":\"GeometryCollection\",\"geometries\":[{\"type\":\"Point\",\"coordinates\":[4.0,6.0]},{\"type\":\"LineString\",\"coordinates\":[[4.0,6.0],[7.0,10.0]]}]}" , ClobType . getString ( c ) )
assertEquals ( dummyResource . getSourcePath ( ) , "Dummy 100%" )
assertEquals ( arr , resultArr )
assertEquals ( r4 , mostRelevantResource )
assertThat ( httpResponseBody , equalTo ( "Hello World" ) )
assertEquals ( "bar" , jedis . get ( "foo2" ) )
assertNotNull ( query )
Assert . assertEquals ( "Date " + date + " was not correctly truncated to month" , dateTruncExpected , dateTruncActual )
assertNotNull ( Member . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CHXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><root>" + "<firstArray><value>firstArrayValue0</value><secondArray><value>secondArrayValue0-0</value>" + "<thirdArray><value>thirdArrayValue0-0-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-0-1</value></thirdArray></secondArray>" + "<secondArray><value>secondArrayValue0-1</value><thirdArray><value>thirdArrayValue0-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-1</value></thirdArray>" + "<thirdArray><value>thirdArrayValue0-1-2</value></thirdArray></secondArray></firstArray>" + "<firstArray><value>firstArrayValue1</value><secondArray><value>secondArrayValue1-0</value>" + "<thirdArray><value>thirdArrayValue1-0-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue1-0-1</value></thirdArray>" + "<thirdArray><value>thirdArrayValue1-0-2</value></thirdArray></secondArray>" + "<secondArray><value>secondArrayValue1-1</value><thirdArray><value>thirdArrayValue1-1-0</value></thirdArray>" + "<thirdArray><value>thirdArrayValue1-1-1</value></thirdArray></secondArray></firstArray>" + "<firstArrayRenamed><secondArrayRenamed><thirdArrayRenamed><value>thirdArrayValue0-0-0</value></thirdArrayRenamed>" + "<thirdArrayRenamed><value>thirdArrayValue0-0-1</value></thirdArrayRenamed></secondArrayRenamed>" + "<secondArrayRenamed><thirdArrayRenamed><value>thirdArrayValue0-1-0</value></thirdArrayRenamed>" + "<thirdArrayRenamed><value>thirdArrayValue0-1-1</value></thirdArrayRenamed>" + "<thirdArrayRenamed><value>thirdArrayValue0-1-2</value></thirdArrayRenamed></secondArrayRenamed>" + "</firstArrayRenamed><firstArrayRenamed><secondArrayRenamed>" + "<thirdArrayRenamed><value>thirdArrayValue1-0-0</value></thirdArrayRenamed>" + "<thirdArrayRenamed><value>thirdArrayValue1-0-1</value></thirdArrayRenamed>" + "<thirdArrayRenamed><value>thirdArrayValue1-0-2</value></thirdArrayRenamed></secondArrayRenamed>" + "<secondArrayRenamed><thirdArrayRenamed><value>thirdArrayValue1-1-0</value></thirdArrayRenamed>" + "<thirdArrayRenamed><value>thirdArrayValue1-1-1</value></thirdArrayRenamed></secondArrayRenamed>" + "</firstArrayRenamed></root>" , output )
assertNull ( out )
assertThat ( allResourceCreatePermissionsForResourceClassAndDomain . isEmpty ( ) , is ( true ) )
assertThat ( "��瑷�璇ヨ�淇��规��浣�涓��卞奖��浜�3琛�" , effect , equalTo ( 3 ) )
assertNull ( field . getBasePanel ( ) )
Assert . assertTrue ( "this should be a file" , irodsFile . isFile ( ) )
assertEquals ( 1 , count . get ( ) )
Assert . assertNotNull ( pojo . testManager )
Assert . assertEquals ( entity , result )
org . junit . Assert . assertArrayEquals ( inBytes , codecBytes )
assertFalse ( "Escaping not performed: \"" + output + '\"' , output . contains ( "<script>alert(" ) )
assertEquals ( "2007-12-03 - 10:15:30" , result )
assertTrue ( true )
Assert . assertEquals ( FileType . MZML , fileType )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
org . junit . Assert . assertEquals ( 1 , count . get ( ) )
assertNoNode ( "/sequenced/pdf/" + filename )
Assert . assertEquals ( "test" , description . getPattern ( ) )
assertTrue ( result . passedValidation ( ) )
Assert . assertNotEquals ( x . hashCode ( ) , y . hashCode ( ) )
assertEquals ( "[1, 2]" , algorithm . getQuestions ( ) . toString ( ) )
assertThat ( getProcessingError ( ) , containsTypeError ( "imagePullSecrets" , "slice" , "bool" ) )
assertTrue ( "Record should be valid" , isValid )
assertEquals ( expResult , result )
assertEquals ( 2 , commentlList . size ( ) )
assertEquals ( arr , resultArr )
assertThat ( ( double ) stopwatch . getAverageDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 100 , 50 ) ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( value , genericSolutionAttribute . getAttribute ( solution ) )
assertEquals ( 1 , selectJobByProcessInstanceId ( processInstance . getId ( ) ) . getRetries ( ) )
assertThat ( converter . toJavaObject ( new HiveCharWritable ( hiveChar ) ) , is ( ( Object ) "a" ) )
assertEquals ( Subscription . State . PENDING , subscription . getState ( ) )
assertThat ( mid , is ( not ( - 1 ) ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . createNewPatient ( ) )
assertEquals ( "abc" , result )
assertEquals ( type , header . getFileType ( ) )
runner . assertValid ( )
Assert . assertEquals ( SessionPersistence . HTTP_COOKIE . name ( ) , client . getPool ( poolName ( ) ) . getProperties ( ) . getBasic ( ) . getPersistenceClass ( ) )
Assert . assertFalse ( "Invalid response from interceptor" , result )
assertEquals ( Integer . valueOf ( 5 ) , attrs . get ( "someInt" , Integer . class , null ) )
assertE ( "�尖�尖�尖�尖��" + "��111��" + "��131��" + "��121��" + "�尖�尖�尖�尖��" )
assertEquals ( name , result )
Assert . assertEquals ( "Error updating private file" , file . getVersion ( ) , version + 1 )
assertEquals ( "GBP 125.34" , test . toString ( ) )
assertTrue ( container . expr . get ( ) instanceof AssignExpr )
assertSame ( reply1 , reply2 )
assertEquals ( new Long ( 1 ) , usage )
assertEquals ( 2 , resultComparator . compare ( cucc1 , cucc2 ) )
assertEquals ( new Dimension ( 50 , 50 ) , ac . getValue ( ) . getSize ( ) )
assertEquals ( 0 , n )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertFalse ( executableHelper . overrides ( subType , superType ) , "Literature#getAuthor() is private. It should not be possible to override it." )
assertSingleIssue ( issues , 4 , "Function def." , "5min" )
assertDtos ( expected , actual )
assertEquals ( Hive2SimbaDatabaseMeta . ODBC_DRIVER_CLASS_NAME , hive2SimbaDatabaseMeta . getDriverClass ( ) )
assertEquals ( "base64Binary" , shortForm )
assertEquals ( "Expected 4 results!" , 4 , count )
assertEquals ( "ALTER TABLE testtable ADD IF NOT EXISTS PARTITION (country='US')" , query )
assertThat ( books , hasItems ( new Book ( "The Hobbit" , 293 ) ) )
assertNull ( "no item should have been found" , item )
assertTrue ( idx . toString ( ) . contains ( "2" ) )
assertEquals ( DataTransferStatus . ACCEPTED , response . getStatus ( ) )
Assert . assertEquals ( "false" , tree . getMajorityLabel ( data ) . getName ( ) )
Assert . assertEquals ( result . toStringWithoutTime ( ) . trim ( ) , expectedResult . trim ( ) )
assertNotNull ( res )
assertEquals ( 0 , foo . _long )
Assert . assertNotNull ( referrers )
assertEquals ( "Must parse 1 element" , 1 , message . getObservations ( ) . size ( ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\r" } } ) ) )
assertNotNull ( result )
assertEquals ( result . size ( ) , 2 )
assertEquals ( "{\"relationship\":\"SELF\",\"url\":{\"value\":\"http://orcid.org\"},\"workExternalIdentifierType\":\"DOI\",\"workExternalIdentifierId\":{\"content\":\"peer-review:subject-external-identifier-id\"}}" , converter . convertTo ( peerReview . getSubjectExternalIdentifier ( ) , null ) )
assertEquals ( Sets . newHashSet ( "table2" ) , service . getTablesToRepair ( cluster , unit ) )
Assert . assertFalse ( bundleFile . exists ( ) )
assertTrue ( result . isResultOK ( ) )
Assert . assertTrue ( result . isEmpty ( ) )
assertArrayTest ( form )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertNull ( "empty translation is not worth a review. The UI spots that alone" , review )
assertEquals ( "{\"value\":\"test\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( simple ) )
assertEquals ( expResult , result )
assertThat ( "Incorrect row height." , cell . getSize ( ) . height , greaterThan ( 30 ) )
assertNameToken ( ast , "bwahaha" )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertObjectEquals ( "{name:'foo'}" , t )
assertTrue ( LibUsb . getVersion ( ) . major ( ) > 0 )
assertEquals ( "010203ff" , formatter . encodeAsString ( new byte [ ] { 1 , 2 , 3 , ( byte ) 255 } ) )
Assert . assertTrue ( patient . getPersonVoided ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "vtFrom" ) )
validator . assertValid ( value )
assertThat ( errors , hasFieldErrors ( "givenName" , "Patient.names.required.given.family" ) )
assertEquals ( newArrayList ( new Locale ( "en" , "GB" ) , new Locale ( "en" ) ) , containerRequest . getAcceptableLanguages ( ) )
assertEquals ( expected , actual , TestDataManager . DELTA_DOUBLE )
assertEquals ( 2 , rpt . size ( ) )
assertTrue ( actual instanceof SimpleJaxb )
assertNull ( validatingPlugin )
assertEquals ( "4.0" , response . getHeader ( HttpHeader . ODATA_VERSION ) )
Assert . assertEquals ( "oldId" , newActualId )
Assert . assertEquals ( 0 , solution . getUnassignedJobs ( ) . size ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertIsAborted ( tx )
Assert . assertEquals ( TestModel . C1 . class , aClass )
assertNotNull ( "could not find contract resource" , url )
assertTrue ( folder . getProgressState ( ) == ProgressState . IN_PROGRESS )
assertEquals ( result , AuthenticationStatus . AUTHENTICATED , "Authentication not existing user with correct credentials should be successful." )
Assert . fail ( "Exception should be thrown" )
Assert . assertThat ( QueryBuilder . getInstance ( ) . buildFilterQuery ( co , "" , 0 , 1 , 0 , 0 , null ) , equalTo ( expected ) )
assertNull ( new RandomNodeSelector ( ) . selectNode ( database ) )
assertBatchResponse ( responses , interceptor , 2 , 0 )
assertFalse ( model . contains ( parent , child ) )
assertEquals ( "base64Binary" , shortForm )
assertThat ( sw . toString ( ) , is ( equalTo ( "    a\n    b" ) ) )
assertSeq ( new String [ ] { "<a/>" , "a" , "b" , "c" } , "remove((/top/*, 'a', 'b', 'c'), 2)" )
assertThat ( asset . formatAttributes ( ) . get ( "author" ) , is ( "Foo <foo@example.com> (http://www.example.com/foo)" ) )
assertEquals ( 1 , entry . getTotalResults ( ) )
assertThat ( result , containsString ( "<DataSourceName>Provider=Mondrian</DataSourceName>" ) )
assertMatches ( written , resolved )
assertEquals ( expected , result )
assertEquals ( expectedAst , ast . dump ( "" ) + "\n" )
assertEquals ( "" , digest )
Assert . assertTrue ( entryList . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "There should only be one entity" , 1 , result . size ( ) )
assertThat ( result , is ( false ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertArrayEquals ( u , MathArrays . unique ( x ) , 0 )
assertNull ( myTestInstance . restart ( mockCallback , b ) )
assertEquals ( "" , wire . toString ( ) )
Assert . assertEquals ( env . get ( "java.naming.provider.url" ) , "dns://1.1.1.1" )
assertEquals ( "http://listener:2000/foo/bar" , url )
assertEquals ( msg . getVersion ( ) , "12" )
assertEquals ( expected , cls )
assertThatFeatureIsInContext ( context , "feature_test" , Configuration . getDefault ( ) . enabledStatus )
assertEquals ( String . valueOf ( ReturnCode . NO_DIGITS . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "rc" ) )
assertThat ( name . getQualifiedName ( ) , is ( "aaa.bbb.server.meta.ccc.DddMeta" ) )
assertEquals ( request . getRemoteUser ( ) , result )
Assert . assertEquals ( hello , helloFromIrods )
assertTrue ( isDisabled )
assertNotNull ( result )
assertEquals ( true , classUnderTest . isFileOpenInSpecifiedDir ( ) )
assertThat ( box . has ( thing ) , is ( true ) )
runner . assertValid ( )
assertMockEndpointsSatisfied ( )
assertTrue ( stringArray . length == 3 )
assertEquals ( TextUtil . readUTF8 ( path ) , generator . getResult ( ) )
assertEquals ( "Translation failed" , UnavailableException . class , pelopsException . getClass ( ) )
Assert . assertTrue ( contains )
assertEquals ( arr , resultArr )
Assert . assertEquals ( sum , 39555 )
assertFalse ( Strings . isNullOrEmpty ( resp ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertTrue ( output . getColumnByIndex ( 0 ) . getValue ( ) instanceof Double )
assertEquals ( "Failed to parse: @[5,50]" , pe . getMessage ( ) )
assertEquals ( expected , actual )
assertEquals ( 1 , resultComparator . compare ( fd1 , fd2 ) )
assertNotNull ( "testDeleteFile error !!!" , writer )
assertEquals ( g1 , g2 )
assertFalse ( matchResult )
assertThat ( description . toString ( ) , is ( "cell at \"B1\" contained <TRUE> expected <FALSE> sheet \"Sheet1\"" ) )
assertFalse ( sta . validateGraphic ( new PieChart ( ) ) )
assertThat ( supplier . authForSwarm ( ) , matchesAccessToken ( accessToken ) )
assertEquals ( SimpleScore . of ( - 42 ) , scoreDirector . calculateScore ( ) )
Assert . assertEquals ( "��" , HtmlToXMLUtil . unescapeToXML ( testString ) )
Assert . assertEquals ( expected , rows . next ( ) . toString ( ) )
assertCollection ( response )
assertEquals ( "redirect:/reset-password?expired=true" , modelAndView . getViewName ( ) )
assertEquals ( "abc" , injected . val . get ( ) )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) )
assertEquals ( 4 , roleListWrapper . getRoles ( ) . size ( ) )
Assert . fail ( "expected exception. Found " + resource )
Assert . assertEquals ( "涓�|浠�涔�" , words )
assertThat ( reportGenerator . generateTextSingleJob ( usageStatistic ) , equalTo ( "Usage statistic for job 'job_1481485063251_20052'\n" + "\n" + "Project : fire\n" + "Start time : 12.01.2017 17:03:40\n" + "Finish time : 12.01.2017 17:33:06\n" + "Total time : 00:29:26\nStatus :  SUCCEEDED\n" + "Total file writing (MB) : 89\n" + "Total file reading (MB) : 262\n" + "Total CPU time spent : 00:29:58\n" + "Total Memory used (MB s) :  7,500,170\n" + "Total vCores used (vCore s) :  1,762\n" ) )
assertThat ( entityId , is ( equalTo ( ( Object ) 100L ) ) )
assertNull ( historyService . createHistoricTaskInstanceQuery ( ) . taskId ( taskId ) . singleResult ( ) )
assertEquals ( "2008-02-07_00" , s )
assertEquals ( 0 , logRecordList . size ( ) )
assertThat ( sortedAgeList , contains ( 21 , 22 , 22 , 26 , 27 , 28 , 32 , 35 , 36 , 38 ) )
assertNotNull ( geoPlatformInfo )
assertEquals ( entities , entities2 )
assertEquals ( expected , actual )
Assert . assertEquals ( expected , wire . read ( ) . text ( ) )
assertTrue ( pass )
assertEquals ( n , c )
assertEquals ( 460L , m_img . get ( rect ) )
assertEquals ( "select straight_join survey.NAME from SURVEY survey order by survey.NAME asc" , toString ( query ) )
Assert . assertEquals ( assets , loadedAssets )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( 1 , resultado )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( schema , schema2 )
assertTrue ( b )
assertEquals ( expected , actual )
Assert . assertEquals ( PriorityBean . PRIORITY , job . getPriority ( ) )
Assert . assertTrue ( concept . isEmpty ( ) )
assertEquals ( "|Monday|Tuesday|Wednesday|Thursday|Friday" , days )
Assert . assertEquals ( createArrayNode ( 1 , 2 , 3 ) , result )
assertFalse ( matcher . match ( msg , rule ) )
assertEquals ( "Hello World" , testObject . getMessage ( ) )
assertEquals ( "Hello" , sub . receiveMessage ( ) . popString ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( combiSet . nbOfCombinations ( 2 ) == 3 )
assertFalse ( victim . isValid ( box , null ) )
Assert . assertEquals ( invokers , fileredInvokers )
assertEquals ( DispatcherType . FORWARD , dispatcherType )
assertTrue ( toString . contains ( AnyByteMatcher . class . getSimpleName ( ) ) )
assertNotNull ( "uri cannot be null" , uri )
assertNotNull ( result )
assertTrue ( tag1 . equals ( tag2 ) )
assertEquals ( "returned parsed text value was incorrect" , expectedReturn , StringUtils . searchAndColor ( text , searchText , dummyColorInt ) )
Assert . assertNotNull ( victim . create ( ) )
Assert . assertFalse ( "RowIdList should never be empty" , list . isEmpty ( ) )
mock . assertIsSatisfied ( )
assertTrue ( true )
assertEquals ( mod , modSer )
assertE ( "�尖�尖�尖�尖��" + "��   ��" + "�� �� ��" + "�� �� ��" + "�尖�尖�尖�尖��" )
assertThat ( r , hasEntry ( "int" , ( Object ) 3 ) )
Assert . assertTrue ( count > 0 )
assertEquals ( "Input key/value json should match output key/value json" , objectMapper . readTree ( inputJson ) , objectMapper . readTree ( outputJson ) )
assertEquals ( VerifyFailType . STOP , pluginParameters . verifyFailType )
assertEquals ( " = " , result )
Assert . assertEquals ( "test create schema with dollar prefixed object property" , HttpStatus . SC_CREATED , resp . getStatus ( ) )
assertMetric ( "Total_Accesses" , "1006508" )
Assert . assertTrue ( Arrays . deepEquals ( expected , s . paintFill ( screen , x , y , newColor ) ) )
assertNotNull ( result )
assertEquals ( "hello" , b2 . name )
assertThat ( taxFactor , equalTo ( TaxService . DEFAULT_TAX_FACTOR ) )
assertEquals ( "Using print writer response" , str )
assertEquals ( 1 , lintresult . getIssues ( ) . size ( ) )
assertEquals ( "Main" , pathConnector . getDisplayName ( ) )
assertStack ( new Object [ ] { Integer . valueOf ( 3 ) , null , Long . valueOf ( 1 ) , null , Long . valueOf ( 1 ) , null } , stack )
Assert . assertTrue ( index >= serverCount )
assertThat ( ShortTypeValidator . INSTANCE . validate ( parameters , "aaa" ) , is ( nullValue ( ) ) )
assertScriptEquality ( expectedScript , actualScript )
assertEquals ( "http://apache.org/shindig?foo#hello=world" , builder . toString ( ) )
assertArrayEquals ( expectedArray , hexArray )
assertEquals ( expected , actual )
assertEquals ( emptyList ( ) , result )
files . assertIsDirectoryContaining ( INFO , actual , JAVA_SOURCE )
Assert . assertEquals ( 100. , time , 0.01 )
assertEquals ( response . getStatus ( ) , Status . SUCCESS . getValue ( ) )
assertNotNull ( uMapping )
assertEquals ( null , testSet . getFooter ( ) . getComment ( ) )
Assert . isTrue ( true )
Assert . assertEquals ( path , "dir" + File . separatorChar + "dir2" )
assertThat ( sw . toString ( ) , is ( equalTo ( "    bcd\n    test" ) ) )
assertNotNull ( manager )
assertEquals ( "High-Performance Java Persistence" , post . getTitle ( ) )
assertThat ( strings , contains ( "hello" , "world" ) )
assertTrue ( "Should get 'lollol'" , test . equals ( value ) )
assertEquals ( "" + QueryMessages . outputFilterNotice ( ) + "\n" + "organisation:   FOO-ORG\n" + "source:         RIPE\n" + "\n" + "organisation:   BAR-ORG\n" + "source:         RIPE\n" + "\n" , response )
Assert . assertEquals ( Integer . class , clazz )
assertTrue ( ex . getMessage ( ) . equals ( "Fail failsafe crawl!" ) )
assertEquals ( 404 , responseGet . getStatus ( ) )
assertEquals ( DataStatus . VOID , empty . getStatus ( ) )
assertThat ( effect , is ( 1 ) )
assertThat ( validations . getErrors ( ) , hasSize ( 0 ) )
assertFalse ( syncOpt . doesLspDbMatch ( ) )
assertNotNull ( rejectData . getId ( ) )
assertTrue ( exceptionMsg , exceptionMsg . contains ( "No such file or directory" ) )
assertEquals ( "a<V>\n" , found )
assertThat ( referenceSet . getReferencingOntologyAnnotations ( ) , hasItem ( annotation ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>" , result )
Assert . assertNotNull ( "did not find collection" , collection )
assertEquals ( 3 , groupMembers . size ( ) )
assertEquals ( expected , result )
assertEquals ( "HOMER" , exp . evaluate ( person ) )
assertEquals ( SAMPLE_ITEM_NAME , returnedDomainEntity . getItemName ( ) )
assertEquals ( JBossSAMLURIConstants . NAMEID_FORMAT_PERSISTENT . get ( ) , nameIDPolicy . getFormat ( ) . toString ( ) )
assertEquals ( delegatingMetaStore , diConfig . getMetaStore ( ) )
assertEquals ( "4" , cPropManager . getValue ( appdefVal , "numCpus" ) )
assertThat ( mqttClient . getMessages ( ) , is ( Arrays . asList ( new Message ( topic ( "A8" ) , "9" ) ) ) )
assertEquals ( "getZoneIndex() doesn't return the same value as the previous setZoneIndex(5281)" , zoneIndex , gadget . getZoneIndex ( ) )
assertEquals ( "suryagaddipati/cancan" , fullName )
assertEquals ( STRING_VALUE , type . getValue ( ) )
assertEquals ( pos . getErrorIndex ( ) , 0 )
assertThat ( l , contains ( nullValue ( ) ) )
assertEquals ( parser . parse ( expectedOutput ) , devent . payload )
assertEquals ( expected , got )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_width01_" ) )
assertEquals ( "12352.678" , resStr )
assertThat ( html , is ( "<input type=\"hidden\" name=\"w1\" id=\"w1\" onChange=\"changeFunc\"  value=\"2014-10-01\" />" ) )
assertEquals ( 14 , res )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , Right . VIEW , this . doc ) )
assertEquals ( m1 , m2 )
assertEquals ( ElasticSearchIndexProvider . ES_TEXT_TYPE , type )
assertEquals ( "Wrong decoded value" , decodedValue , config . getEncodedString ( KEY_PREFIX , decoder ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( classExpression ) )
assertEquals ( message , date , activity . getUpdated ( ) )
assertEquals ( expResult , result )
assertEquals ( "i" , decl . getName ( ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . ORCID_BIO_EXTERNAL_IDENTIFIERS_CREATE )
assertEquals ( 0 , p . getPoints ( ) . size ( ) )
assertEquals ( BuilderFactory . start ( ) . addBinary ( "a" , ( byte ) 5 , "The quick brown fox jumped over the lazy dogs." . getBytes ( "US-ASCII" ) ) . build ( ) , doc )
assertThat ( result , is ( "\"" + ID + "\"" ) )
assertEquals ( 1 , service . prepare ( query ) . countEntities ( fo ) )
assertEquals ( 0 , mana . getRed ( ) )
assertEquals ( Boolean . TRUE , blade . environment ( ) . getBooleanOrNull ( ENV_KEY_GZIP_ENABLE ) )
assertEquals ( "test" , namedCluster . getHostNameParsed ( null ) )
Assert . assertNotNull ( personStructure )
assertNull ( target . getDataManager ( ) . get ( new Parameters ( ) . setLocationKey ( locationKey ) . setContentKey ( contentKey ) ) )
assertEquals ( Arrays . asList ( "col1" , "col2" ) , subset . getProperty ( "key5" ) )
Assert . assertFalse ( isNewRequired )
assertTrue ( "Waited less than 700ms: " + waited , waited < 700 )
Assert . assertEquals ( TASK_NAME , argument . getAllValues ( ) . get ( 0 ) )
assertNotEquals ( ctx1 , ctx2 )
assertTrue ( purchase . getTicket ( ) . isDiscount ( ) )
assertEquals ( 12 , metadata )
assertFalse ( validator . validate ( Meta , POST ) . passedValidation ( ) )
assertEqualMarginals ( fg , bf , bp )
assertOut ( "/**\n * @export\n */\nB.prototype.http_$$ns_apache_org$2017$custom$namespace__b = function() {\n  var self = this;\n  function c(f) {\n  };\n  c(org.apache.royale.utils.Language.closure(this.http_$$ns_apache_org$2017$custom$namespace__b, this, 'http://ns.apache.org/2017/custom/namespace::b'));\n}" )
assertTrue ( roles . size ( ) > 0 )
Assert . isTrue ( grades . size ( ) > 0 )
assertNull ( item . getList ( ) )
assertEquals ( 6. * 3600. + 6. * 60. , sec , 0.01 )
assertEquals ( ius , st )
assertThat ( result . getPayload ( ) , is ( instanceOf ( String . class ) ) )
assertOut ( "/**\n * @export\n */\nB.prototype.b = function() {\n  var self = this;\n  function c(f) {\n  };\n  c(org.apache.royale.utils.Language.closure(this.b, this, 'b'));\n}" )
assertEquals ( ( short ) 0x0009 , s . m0_0 ( ) )
assertEquals ( expected , sanitized )
Assert . assertTrue ( true )
assertEquals ( expectedSpec , opts . getIndexingSpecification ( ) )
assertTrue ( "Primitive(false) entity validation failed" , schema . validate ( booleanEntity ) )
assertEquals ( expected , AuthorizationsUtil . mergeAuthorizations ( null , userAuths ) )
assertTrue ( resolver . resolve ( ) == null )
assertThat ( arguments . getResources ( ) , contains ( FIRST_RESOURCE_URI , SECOND_RESOURCE_URI ) )
assertCaret ( 2 )
TestUtils . assertEquals ( "simple covariance test" , rCov , cov . getResult ( ) , 10E-7 )
assertThat ( output , containsString ( "Info type: PHONE_NUMBER" ) )
assertEquals ( WEBJAR_URL_PREFIX + "validate.js/0.8.0/validate" , jsonNoCdn . get ( "validate.js" ) . get ( "paths" ) . get ( "validate-js" ) . get ( 0 ) . asText ( ) )
assertThat ( dto . isLegacyUser ( ) , is ( true ) )
assertTrue ( userCanSubmitChangeRequest )
assertEquals ( base . plusDays ( 1 ) . withTime ( 11 , 0 , 0 , 0 ) , absoluteTime )
Assert . assertTrue ( handle )
assertEquals ( refPoint , testPoint )
assertNull ( e . abortShutdownReason ( ) )
assertEquals ( 1 , p . getThisPage ( ) )
assertNotNull ( estado )
Assert . assertTrue ( authenticator . logout ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertNotNull ( overrideResolver )
assertArrayEquals ( expected , readAllBytes ( gfs . getPath ( "/dir/file.txt" ) ) )
assertTrue ( testResults . getInvoked ( ) )
assertEquals ( false , result )
assertNotNull ( criteria )
assertEquals ( expectedSubsequenceLength , count )
assertThat ( d , is ( nullValue ( ) ) )
arrays . assertContainsOnly ( someInfo ( ) , actual , array ( "Luke" , "Yoda" , "Leia" , null ) )
assertThat ( JDBCAdapter . SQL_TIMESTAMP . translate ( ts ) , is ( PlainTimestamp . of ( 2012 , 7 , 1 , 0 , 0 , 0 ) . plus ( 210 , ClockUnit . NANOS ) ) )
assertEquals ( rdiv , answer )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertSame ( createdBreaker , secondBreaker )
assertNotNull ( object )
assertFalse ( result . passedValidation ( ) )
assertThat ( encoded , containsString ( "{\"linkId\":\"value123\",\"_linkId\":{\"extension\":[{\"url\":\"http://123\",\"valueString\":\"HELLO\"}]}}" ) )
assertEquals ( objectName , expectedObjectName )
assertThat ( actualShardNumber , is ( 2 ) )
assertThat ( underTest . isValid ( new TestObj ( "parentRole" , Collections . singleton ( "childRole" ) ) , context ) , is ( true ) )
assertThatSql ( query , is ( "SELECT t1.c1, t2.c2 FROM table1 AS t1 " + "INNER JOIN table2 AS t2 " + "CROSS JOIN table3 AS t3 ON t1.c0 = t3.c0 ON t1.c0 = t2.c0" ) )
assertEquals ( "configName" , fixture . getConfig ( ) . getName ( ) )
TestUtils . assertStatusCode ( "Should Return List" , 200 , list )
assertEquals ( song1 . hashCode ( ) , song2 . hashCode ( ) )
assertEquals ( field . getValue ( ) , entityField . get ( IndexingUtils . FIELD_DOUBLE ) )
assertEquals ( "IDX" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "/b/c/d" , result )
assertEquals ( "getHelper() returns the correct helper" , formatterHelper . getName ( ) , ( ( HelperInterface ) command . getHelper ( "formatter" ) ) . getName ( ) )
assertEquals ( "SELECT * FROM ARRAYTABLE(ROWS ((1, 'a'), (2, 'b'), (3,)) COLUMNS x integer, y string) AS x" , QueryParser . getQueryParser ( ) . parseCommand ( sql ) . toString ( ) )
assertEquals ( "3" , result )
assertEquals ( 16 , model . getPowerValue ( ) )
Assert . assertEquals ( 4 , supportedLanguages . length )
assertEquals ( c , clone ( ( c ) ) )
assertEquals ( testUser , user )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
assertEquals ( typeDeclaration . toString ( ) , "public class CompanyException extends de.test.SuperCompanyException {\n}\n" )
assertTrue ( actualBoolean )
assertEquals ( "jdbc:phoenix:myzkclient:2181" , jdbcUrl )
Assert . assertEquals ( "ExacRecord [chrom=1, pos=13371, id=., ref=G, alt=[C], filter=[], " + "alleleCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], SAS=[2], ALL=[2]}, " + "alleleHetCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], SAS=[0], ALL=[0]}, " + "alleleHomCounts={AFR=[0], AMR=[0], EAS=[0], FIN=[0], NFE=[0], OTH=[0], SAS=[1], ALL=[1]}, " + "alleleHemiCounts={}, " + "chromCounts={AFR=770, AMR=134, EAS=254, FIN=16, NFE=2116, OTH=90, SAS=5052, ALL=8432}, " + "alleleFrequencies={AFR=[0.0], AMR=[0.0], EAS=[0.0], FIN=[0.0], NFE=[0.0], OTH=[0.0], SAS=[3.95882818685669E-4], ALL=[2.3719165085388995E-4]}]" , record . toString ( ) )
assertNotNull ( expression )
assertEquals ( false , result )
assertEquals ( 10 , results . getTotal ( ) )
assertTrue ( epollID > 0 )
Assert . assertEquals ( 0.0 , a . maxInRow ( 2 ) , Vectors . EPS )
assertThat ( referenceSet . getReferencingAxioms ( ) , hasItem ( annotationAssertionAxiom ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_READ_LIMITED )
assertEquals ( "Wrong Query Extra URL" , expResult , result . toString ( ) )
Assert . assertEquals ( 1 , analysis . getErrors ( ) . size ( ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
Assert . fail ( "Should throw BadRequestException" )
assertEquals ( expectedAst , ast . dump ( "" ) + "\n" )
assertThat ( averagePriceForAllItems , is ( 2000 * 5 ) )
assertEquals ( GOOD_API_KEY , response )
assertEquals ( exepcted_individual , returned_individual )
assertEquals ( "Permission type doesn't match" , expectedPerm , e . getPermission ( ) )
assertThat ( SpringFacesIntegration . isInstalled ( this . externalContext ) , is ( true ) )
assertNull ( x . getActualDeliveryDateValue ( ) )
assertEquals ( "Select using a where not clause" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertArrayEquals ( VALUE . toArray ( ) , dataItems . toArray ( ) )
Assert . assertEquals ( "paths do not match" , targetIrodsCollection + '/' + testFileName , actualPath )
assertEquals ( "Queue length for no op executor should always be 0." , 0 , eventIngestionExecutor . queueLength ( ) )
assertEquals ( true , classUnderTest . isFileOpenInSpecifiedDir ( ) )
assertTrue ( timestamp2 - timestamp1 >= 100 )
Assert . assertEquals ( "aBoolean" , prop . getPropertyName ( ) )
Assert . assertNull ( "No se deber�a haber encontrado la aplicaci�n" , aplicacion )
Assert . assertFalse ( subscriptionsGet . accept ( element ) )
org . junit . Assert . assertEquals ( 4 , count . get ( ) )
Assert . assertEquals ( "[]" , r )
assertEquals ( "_cat/aliases/testIndex" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertAppearanceFontSize ( dest , 6.83f )
assertEquals ( 1 , task . call ( ) . intValue ( ) )
assertTrue ( "Failed to skip to correct position" , new String ( buf1 , 0 , buf1 . length ) . equals ( fileString . substring ( 1000 , 1010 ) ) )
assertStreamEquals ( expectedBackoffs , policy . toBackoffs ( ) )
assertSame ( conf , table . getConfiguration ( ) )
assertEquals ( 5. , serviceActivity . getEndTime ( ) , 0.01 )
assertEquals ( AuthorizationResult . ACCESS_DENIED , permission . getResult ( ) )
assertEquals ( "coap://127.0.0.1:12354/lwm2m/3/0/1" , coapRequest . getURI ( ) )
this . assertLoadBlob ( departments , true , false )
assertFalse ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertEquals ( true , result )
assertPayloadEqual ( payload )
assertEquals ( true , result )
Assert . assertTrue ( "Native cipher failed to load!" , loaded )
assertNotNull ( edm )
assertEquals ( "custom-name" , getClusterName ( client ) )
assertSseResponse ( sseResponse , "data:regandsub" )
assertEquals ( Patient . class , bundle . getEntry ( ) . get ( 0 ) . getResource ( ) . getClass ( ) )
Assert . assertNotNull ( userDTO )
assertEquals ( "Wrong file name" , "file:///test/path/test.txt" , handler . getFileLocator ( ) . getFileName ( ) )
assertThat ( name , is ( NAME ) )
assertNotNull ( AuthRegistrationsCredentialListMapping . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "CLXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertTrue ( "Tag not valid" , constraintViolations . size ( ) == 0 )
assertions . isEqualTo ( true )
assertThat ( action . getChanges ( ) . size ( ) , equalTo ( expected ) )
Assert . assertNotNull ( "description should be present" , actualDescription )
assertEquals ( expected , actual )
assertEquals ( expected , actual )
assertTrue ( info . isEmpty ( ) )
assertThat ( cf . parse ( "30. Februar, AD 1712 00:00 +02:00" ) , is ( PlainDate . of ( 1712 , 3 , 11 ) . atStartOfDay ( ) . at ( ZonalOffset . ofHours ( OffsetSign . AHEAD_OF_UTC , 2 ) ) ) )
Assert . assertEquals ( "" , KeyValueFormatter . formatCommaSeparatedList ( list ) )
assertFalse ( matchResult )
assertEquals ( CollectorFormatter . class , f . getClass ( ) )
assertEquals ( "float: 1.2" , b . primitiveFloat ( 1.2f ) )
assertNotNull ( u . getId ( ) )
assertEquals ( 3 , Util . getResultsSize ( result ) )
assertSame ( filter , derive ( filter , "g:a:1" ) )
assertEquals ( HttpServletResponse . SC_OK , response . getStatus ( ) )
assertEquals ( "aTestString" , classUnderTest . getName ( ) )
assertEquals ( original , restored )
result . assertIsSatisfied ( )
assertEquals ( 2 , ps . size ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( expectedSubsequenceLength , count )
assertEquals ( nodeReply , reply )
assertHasInterface ( interfaceClass , dst . toClass ( ) )
Assert . fail ( "Should not be able to send successfully with no recipients." )
result . assertIsSatisfied ( )
assertEquals ( 1 , patient . getIdElement ( ) . getExtension ( ) . size ( ) )
assertEquals ( 1 , constructors . length )
assertEquals ( lineOriginal , lineNew )
assertCommit ( writeTx . submit ( ) )
assertFalse ( order . hasSameOrderableAs ( otherOrder ) )
Assert . assertNull ( ex )
assertEquals ( 2 , affectedRowsNbr )
Assert . assertEquals ( sortStringToList ( getElement ( "OBR.16" , "XCN.1" ) ) , sortStringToList ( handler . getClientRef ( ) ) )
assertEquals ( DataTypeManager . getArrayType ( DefaultDataClasses . OBJECT ) , c . getType ( ) )
assertNotNull ( dispatcher . getLastMeasurementHistory ( ) )
AssertAnnotations . assertNamedEntity ( ne , select ( jcas , NamedEntity . class ) )
assertEquals ( "Both rich groups should be same" , richGroup , groupsManagerBl . convertGroupToRichGroupWithAttributes ( sess , group ) )
assertResult ( )
assertEquals ( Constants . DEFAULT_FILE_SYSTEM_MODE , mode . toShort ( ) )
assertEquals ( expResult , result )
assertTrue ( ! nnList . isEmpty ( ) )
assertEquals ( "konradokonski.com_sawdust" , ripper . getAlbumTitle ( url ) )
Assert . assertEquals ( result . getResultSize ( ) , 0 )
assertEquals ( inClass , Post . class )
assertEquals ( 2 , logs . size ( ) )
assertTrue ( delta < delay + overhead )
assertEquals ( "base64Binary" , shortForm )
Assert . assertTrue ( state [ i ] == expected )
assertTrue ( failedAsExpected )
assertEquals ( 2 , calculator . add ( 1 , 1 ) , "1 + 1 should equal 2" )
assertEquals ( "123" , rp . toStringParam ( ourCtx ) . getValue ( ) )
assertResultList ( target )
assertResult ( )
assertEquals ( expected , out )
assertEquals ( "Unexpected result" , "<Map>\n  <Entry key=\"key\">val</Entry>\n</Map>" , sb . toString ( ) )
assertEquals ( PersonGenderCodeType . UNKNOWN , output . getRegularCPRPerson ( ) . getPersonGenderCode ( ) )
assertEquals ( "es" , contentRetrieved . getLanguage ( ) . getCode ( ) )
assertEquals ( TimeUtil . parseTime ( time , TimeUtil . TimeFormat . LONG_DATE_PATTERN_DOUBLE_SLASH ) , "2014\\11\\11 10:11:11" )
assertTrue ( latch . await ( 1 , TimeUnit . MINUTES ) )
assertEquals ( "aTestString" , classUnderTest . getImportedFromTable ( ) )
assertTrue ( example . consume ( sentence ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Number byoc=\"BYXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\" method=\"GET\" sendDigits=\"send_digits\" statusCallback=\"https://example.com\" statusCallbackEvent=\"initiated\" statusCallbackMethod=\"GET\" url=\"https://example.com\">+15017122661</Number>" , elem . toXml ( ) )
TestUtils . assertEquals ( "Kendall's correlation matrix" , createRealMatrix ( rData , 5 , 5 ) , correlationMatrix , 10E-15 )
assertEquals ( "select entity_0.code, count(entity_0.code) from Entity entity_0" , select . getQuery ( ) )
assertEquals ( 5 , returnValues . getOutputs ( ) . get ( "port" ) . get ( ) )
assertThat ( getDomainPresenceInfo ( dp , UID ) . getServerService ( "admin" ) , equalTo ( service ) )
assertSame ( val , ConfigUtils . getObject ( config , val , "no-value" ) )
assertNull ( spanType )
assertEquals ( "find by name not returning any readings" , 1 , readings . size ( ) )
assertThat ( domain . getSpec ( ) . isDomainHomeInImage ( ) , is ( false ) )
assertEquals ( "Ghost moved" , tileAt ( g , 1 , 0 ) , theGhost . getTile ( ) )
assertThatSerializedRawPublicKeyMessageCompliesWithRfc7250 ( )
assertEquals ( 2 , pairs . size ( ) )
assertThat ( renderer . score ( context , QueryResult . from ( exception ) ) , is ( MAXIMUM_HEADER_SCORE + ERROR_EXTRA_SCORE ) )
assertEquals ( "^aa$" , result )
assertThatSelectedTabIndexIs ( index )
assertEquals ( a1 , a2 )
assertEquals ( blockBuildWhenUpstreamBuilding , CascadingUtil . getBooleanProjectProperty ( childProject , AbstractProject . BLOCK_BUILD_WHEN_UPSTREAM_BUILDING_PROPERTY_NAME ) . getOriginalValue ( ) )
context . assertIsSatisfied ( )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertTrue ( "Must be valid" , signed . verify ( verifier ) )
Assert . assertEquals ( "Should return exactly one variable" , 1 , response . jsonPath ( ) . getMap ( "" ) . size ( ) )
Assert . assertTrue ( "瑙ｆ��姝ｅ父HTTP GET璇锋��ㄤ�" , 1 == rst )
assertThat ( ( double ) stopwatch . getAverageDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 100 , 50 ) ) )
assertTrue ( isValid )
assertEquals ( zpk1 , zpk2 )
assertThat ( parseCompileEvaluate ( complexContext ) , is ( mapOf ( entry ( "an applicant" , mapOf ( entry ( "home address" , mapOf ( entry ( "street name" , "broadway st" ) , entry ( "city" , "New York" ) ) ) ) ) , entry ( "street" , "broadway st" ) ) ) )
assertFalse ( "writeskew detected" , writeSkewEncountered . get ( ) )
assertThat ( classes . size ( ) , is ( 2 ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE UPPER(NAME(nodes)) = $literal" ) )
assertNotNull ( tree . context ( ) )
assertThat ( xray . getConstructors ( ) , hasSize ( 0 ) )
Assert . fail ( )
assertThat ( streetAddressNumber , matchesRegularExpression ( "[0-9]+" ) )
assertThat ( sink . toString ( ) , is ( "" ) )
assertions . isNotEqualTo ( expected )
assertTrue ( testDecryptWithGluuDecrypter ( encryptedJweProducedByGluu ) )
assertEquals ( null , sut . transform ( null ) )
assertTrue ( r1 instanceof PublicCloneable )
assertThat ( serializeWith ( year , formatter ) , equalTo ( expected ) )
assertEquals ( "/projects/topic_17576/iur-service-client/target/classes" , actualObj )
assertEquals ( 28000 , readValue . getMp3Bitrate ( ) )
assertCollectionCanBeSerialised ( collection , TreSource . ExtendedHeaderData , 2 )
Assert . assertEquals ( 32 * 256 , mySpatialBinProcessor . numObs )
assertEquals ( 5 , wlsClusterConfig . getMaxClusterSize ( ) )
Assert . assertEquals ( 0 , sFsShell . run ( "mount" , mountPoint . toString ( ) , ufsPath ) )
assertThat ( stdOutContent . toString ( ) , equalsIgnoringOSSpecificLineSeparators ( "1.7.2-SNAPSHOT\n" ) )
assertTrue ( "Got " + function . getCallCount ( ) + ", expected 20 <= x <= 40" , 20 <= function . getCallCount ( ) && function . getCallCount ( ) <= 40 )
assertAccessorsCorrect ( menu , "selectedItems" , Collections . EMPTY_LIST , Arrays . asList ( itemA ) , Arrays . asList ( itemB ) )
assertNotNull ( audio )
assertEquals ( Arrays . asList ( str1 , str2 ) , constructor . getArgs ( ) )
assertFalse ( glass . accept ( point , 0 , 1 ) )
assertEquals ( "V2 AlbumArtist" , wrapper . getAlbumArtist ( ) )
assertThat ( result , is ( ofpFlowAction . getClass ( ) ) )
Assert . assertEquals ( "test1; test2; test3" , string )
Assert . assertEquals ( "2011-11-01 00:00:00" , formater . format ( date . getTime ( ) ) )
assertEquals ( "shard-key" , r . getHeader ( "X-Shard-Key" ) )
Assert . assertNotNull ( "The TestCases should not be null" , singleTestCase )
assertTrue ( "Walked too far astray: " + walk + "\nNote: This " + "test will fail randomly about 1 in 100 times." , FastMath . abs ( walk ) < FastMath . sqrt ( N ) * 2.576 )
assertTrue ( "Description empty" , constraintViolations . size ( ) == 1 )
assertEquals ( Health . GREEN , manager . getHealth ( ) )
assertEquals ( " --vanilla " , rProcessStartUpOptions . getStartUpOptionsAsCommand ( ) )
assertTrue ( unit . isValid ( null , null ) )
assertEquals ( "\"NAME\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertEquals ( PrimitiveTypeUsage . ALL . size ( ) , exceptions )
assertTrue ( ValidationUtilities . validateRegExp ( regex , "abc\n def" ) )
assertEquals ( "Base value is not properly parsed" , "10126.9999" , parsed )
Assert . assertNotNull ( str )
assertFalse ( "Listener setup problem occurred." , logContainsText ( "AssertionError: Value change listeners" ) )
assertArrayEquals ( bytes , x )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . fail ( "Xfdf files are not equal" )
Assert . assertTrue ( compareArrays < 0 )
assertTrue ( entity . getCount ( ) == 3456789 )
Assert . assertEquals ( "a, 1234567890...(11), ...(3)" , result )
assertEquals ( Sets . newHashSet ( g . getEnd ( ) ) , g . getStart ( ) . getFollow ( ) )
Assert . assertFalse ( s . isExpandedByDefault ( ) )
assertEquals ( timeAmount . getQuantity ( ) , 11 )
Assert . assertEquals ( 4 , i )
assertTestRunFails ( testPlan )
assertEquals ( MemoryCacheStrategy . class , actual . getClass ( ) )
assertEquals ( expected , this . output . toString ( ) )
assertEquals ( "anonymous" , targetBean . getPrincipalName ( ) )
Assert . fail ( )
assertNotNull ( store )
assertEquals ( ( byte ) 8 , result . getByteValue ( ) )
assertEquals ( "LOCAL:     \nFrau\nUserFN UserLN\naddr2\naddr1\n121212 City1\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null ) )
Assert . assertNotNull ( activityId )
assertEquals ( "12345" , operator . trace )
assertEquals ( expected , actual )
Assert . assertEquals ( "2.0 kB" , actual )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Refer/>" , elem . toXml ( ) )
assertFalse ( "Document should not contain language" , doc . hasContentField ( "test_pdf_language" ) )
assertNotNull ( constraints )
Assert . assertEquals ( esperado , obtido )
assertEquals ( "Objects{integerValue=100}" , objects . toString ( ) )
checker . assertEquals ( msg , exp , act )
assertEventEqualAfterSerializeDeserialize ( materialDemandEvent )
assertEquals ( Integer . valueOf ( lastOne . getId ( ) + 1 ) , result . getId ( ) )
assertEquals ( 1 , result )
assertEquals ( expected , result )
Assert . assertEquals ( "0,10.3,1" , lines [ 0 ] )
assertTrue ( reference . get ( ) > 1 )
Assert . assertEquals ( new Integer ( 1 ) , _c . convert ( "1" ) )
assertFalse ( scriptEngine . executeFilter ( msg ) )
assertEquals ( simple . getName ( ) , find . getName ( ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<rdf:RDF\n" + "\txmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n" + "\n" + "</rdf:RDF>" , descriptionFile )
assertAssignedRole ( userAfter , ROLE_CONTROLLING_1_OID )
Assert . assertTrue ( dependency1 . equals ( dependency2 ) )
Assert . assertEquals ( result . getResultSize ( ) , 10 )
assertEquals ( mockResponse , response )
assertListTEquals ( listT , 42 )
assertThat ( weightedCucumberScenarios . scenarios , contains ( MatchingCucumberScenario . with ( ) . featurePath ( "simple_table_based_scenario.feature" ) . feature ( "Buying things - with tables" ) . scenario ( "Buying lots of widgets" ) . tags ( "@shouldPass" ) , MatchingCucumberScenario . with ( ) . featurePath ( "simple_table_based_scenario.feature" ) . feature ( "Buying things - with tables" ) . scenario ( "Buying more widgets" ) . tags ( ) ) )
assertTrue ( result . getErrorMessage ( ) , result . isSucceeded ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertThat ( result , is ( Collections . singletonList ( "setMyField" ) ) )
assertTrue ( ! result )
Assert . assertEquals ( hl7XML . getElementsByTagName ( "OBR" ) . getLength ( ) , handler . getOBRCount ( ) )
assertEquals ( test . getStrings ( ) , null )
PositionCollectorTestUtil . assertEmpty ( collector2 )
assertThat ( result , equalTo ( true ) )
assertEquals ( 0 , sut . computeSearchGoalBonus ( current ) )
assertNotNull ( context . getBean ( "snsOutboundChannelAdapter.snsExecutor" , SnsExecutor . class ) )
assertThat ( array2 , equalTo ( new int [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) )
Assert . assertEquals ( 3 , qy . size ( ) )
assertEquals ( true , conn . isAvailable ( ) )
assertTrue ( "Returned object should be a PredicatedBag." , bag instanceof PredicatedBag )
assertEquals ( "Johannes" , nameField . getValue ( ) )
assertNull ( response . getException ( ) )
assertEquals ( expecteds , actuals )
arrays . assertContainsOnly ( description , actual , other )
assertEquals ( Arrays . asList ( new Point ( 0 , 0 ) , new Point ( 0 , 1 ) , new Point ( 1 , 1 ) , new Point ( 2 , 1 ) , new Point ( 2 , 2 ) ) , s . findPath ( grid ) )
assertEquals ( expectedAwql , serviceQuery . toString ( ) )
assertThat ( removedWeight . get ( ) , is ( MAXIMUM / 2 ) )
assertEquals ( on ( 6 , 3 ) , next )
assertEquals ( new Integer ( "2147483647" ) , result )
assertArrayEquals ( ArrayConverter . hexStringToByteArray ( "33ad0a1c607ec03b09e6cd9893680ce210adf300aa1f2660e1b22e10f170f92a" ) , expand )
assertMockEndpointsSatisfied ( )
assertTrue ( g1 instanceof PublicCloneable )
assertThat ( cursor . proceedTo ( 'b' ) , is ( true ) )
assertEquals ( "9be3e0a3" , rec . get ( "SUM" ) )
assertTrue ( matchLength )
assertTrue ( comparator . isDifferent ( lhs , rhs ) )
assertEquals ( "foobar" , instance . getProperty ( element ) )
assertEquals ( result , expected , 0.0000001 )
assertDelete ( )
Assert . assertEquals ( "John" , customer )
Assert . assertEquals ( String . format ( "search %s in google" , this . html ( bb , "java" ) ) , formatter . format ( "search [GoogLE]java[/gooGle] in google" , defaultOptions ( ) ) )
assertEquals ( and , cloned )
assertThat ( result . isCompletedExceptionally ( ) , is ( true ) )
assertEquals ( expected , actual )
assertEquals ( 3 , g . queryDescendants ( obj ) . size ( ) )
assertThat ( result . statusCode , is ( Response . NO_CONTENT ) )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( expected , replacing . transform ( subject ) . getType ( ) )
assertTrue ( set . contains ( m_libraryName ) )
assertEquals ( "Value should be eq" , null , experiment )
assertEquals ( expect , result )
assertEquals ( 0 , buffer . completeSegmentByteCount ( ) )
assertEquals ( 10 , atAct . get ( 0 ) )
Assert . assertEquals ( m , TestUtils . serializeAndRecover ( m ) )
assertTrue ( pool . isClosed ( ) )
Assert . assertEquals ( c1 , c2 )
assertThat ( subject . getFormattedKey ( ) . toString ( ) , is ( "[mntner] DEV-ROOT-MNT" ) )
assertXMLEqual ( expected , actual )
Assert . assertTrue ( ref . get ( ) )
strings . assertEqualsIgnoringCase ( mock ( Description . class ) , s , s )
assertEquals ( "test" , echo . echo ( "test" ) )
assertBreadcrumbsAreEqual ( actualList , expectedList )
Assert . assertTrue ( result )
context . assertNotNull ( ip )
assertEquals ( Double . valueOf ( 0 ) , Double . valueOf ( value . asDouble ( ) ) )
assertTrue ( collector . isMessageComplete ( ) )
assertEquals ( false , result )
assertEquals ( "raw servlet" , response )
assertThat ( date , is ( expected ) )
assertTrue ( "The properties authz in security realm should be created" , ops . exists ( TEST_SECURITY_REALM_PROPERTIES_AUTHZ_ADDRESS ) )
assertOutputContains ( "you are not connected" )
assertFalse ( Files . exists ( child ) )
assertEquals ( "/order/" + PROVIDER_ID , rc . getPath ( ) )
testContext . assertEquals ( WebsocketRejectedException . class , ws . cause ( ) . getClass ( ) )
assertions . contains ( null , index )
assertThat ( matches . size ( ) , is ( 1 ) )
Assert . assertTrue ( validator . valid )
assertTrue ( exceptionThrown )
assertFalse ( actual instanceof ConditionalSchema )
assertEquals ( "Must return self" , sut , result )
assertNull ( method )
assertEquals ( expected , actual )
assertThat ( allEvents . stream ( ) . skip ( index ) . limit ( events . size ( ) ) . collect ( toList ( ) ) , containsInOrder ( events ) )
assertEquals ( mboss . getCar ( ) . getBrand ( ) , "缇�浜鸿惫" )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'\\'true\\'',h:'\\'123\\''}" , r )
assertTrue ( BooleanIndexing . or ( array , Conditions . greaterThan ( 1e-6f ) ) )
Assert . assertEquals ( "beeline --verbose FAILED." + results . get ( "outputStream" ) , true , consoleMsg . contains ( "issuing: !connect jdbc:hive2:" ) && ! consoleMsg . contains ( "error" ) && ! consoleMsg . contains ( "exception" ) )
Assert . assertEquals ( result . getResultSize ( ) , 0 )
Assert . assertEquals ( "A one." , output )
assertTrue ( sub . getRow ( subEdges . get ( 0 ) ) . get ( CyNetwork . SELECTED , Boolean . class ) )
Assert . assertEquals ( "Invalid csv line" , "1,DEVICE0,METRIC0,0,20150203235809-0500,UNDEFINED,1,13.31" , line )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertNotNull ( certificate )
assertEquals ( expectedDDL , ddl )
assertEquals ( "Message: 123" , ResponseBodyInterpolator . interpolate ( "Message: [request.major]" , req ) )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . createNewPatient ( ) )
Assert . assertEquals ( config . getEncoders ( ) . size ( ) , 2 )
Assert . assertEquals ( true , connectionManager . exists ( CONNECTION_NAME ) )
assertTrue ( "Comparator did not reorder the List correctly" , orderedList . equals ( randomList ) )
assertFalse ( pub == newPub )
assertEquals ( "Mercury" , map . findNext ( null , null , Pattern . compile ( Pattern . quote ( "cury" ) ) , true , null ) . getText ( ) )
assertEquals ( result , "repository/image" )
assertNotNull ( fileOperationMap . getOperation ( operation . getPnfsId ( ) ) )
test . assertValue ( expected )
assertTest1 ( )
assertEquals ( "fallback" , value )
assertEquals ( "text/html" , requestImpl . accepts ( "test/test" , "text/html" ) )
assertEquals ( 3 , result )
assertEquals ( "hello world !" , result )
assertResourceWasAdaptedToModel ( )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( "over 3 eeuwen" , t . format ( new Date ( 3155692597470L * 3L ) ) )
assertEquals ( "value1" , ( ( TextValue ) value1 ) . getValue ( ) )
assertBrownGCD ( gcd , a , b )
assertEquals ( 0 , array . length )
assertEquals ( NOT_DECODED , object , new ColorTransform ( decoder , context ) )
Assert . assertEquals ( rel . getEndNode ( ) , nodes . iterator ( ) . next ( ) )
assertEquals ( 10 , classUnderTest . getGeneralCompletionConfig ( ) )
assertTrue ( invalid . subInterval ( someDate , someDate . plusDays ( 2 ) ) . isNotValid ( ) )
Assert . assertEquals ( Arrays . toString ( new int [ ] { 0 , 2 , 2 , 2 } ) , Arrays . toString ( this . getCounts2 ( ) ) )
assertArrayEquals ( data , ( int [ ] ) deserialize . readObject ( int [ ] . class ) )
assertThat ( propertyValues , Matchers . hasItem ( PropertyAnnotationValue . get ( propertyData , clsData , State . ASSERTED ) ) )
testRunner . assertAllFlowFilesTransferred ( PutCassandraQL . REL_SUCCESS , 1 )
assertFalse ( AutnumUtil . isValidAutnum ( validAutnum ) )
Assert . assertEquals ( query . lastIndexOf ( '?' ) , questMarkIndex )
assertEquals ( "Rewritten command was not expected" , rewritProc , procReturned )
assertTrue ( result . size ( ) == 35 )
assertThat ( found , is ( notNullValue ( ) ) )
assertEquals ( - 1 , song . getId ( ) )
assertEquals ( 0 , allZeroWeightCount )
assertSame ( name , expected , ASN1Type . fromName ( name ) )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertNull ( query . singleResult ( ) )
assertTrue ( sut . isEnabled ( ) )
objects . assertIsInstanceOfAny ( mock ( Description . class ) , actual , null )
assertEquals ( false , isOpened )
assertNotNull ( result )
assertFalse ( target1 . equals ( target2 ) )
assertEquals ( 2000L , pipeline . getTotalBuildTime ( ) )
assertEquals ( 3 , filterStrings . size ( ) )
assertThat ( configuration . getLoggerContext ( ) , is ( notNullValue ( ) ) )
Assert . assertEquals ( 0 , testHelper . snapshotAfterMigration . getVariables ( ) . size ( ) )
assertThat ( response , containsString ( "<object type=\"person\">" ) )
assertNull ( arrayFirst )
Assert . assertEquals ( "Value is incorrect" , map ( "3141-05" , "test" ) , value )
assertEquals ( "MurmurHash.hash(String) returns wrong hash value" , expectedHash , actualHash )
assertTrue ( comparator . isDifferent ( lhs , rhs ) )
Assert . assertNotNull ( sqlDate )
assertTrue ( result . contains ( "CURRENT LOG APPENDER" ) )
assertNotSame ( StringValues . EMPTY . getString ( f ) , StringValues . FILE_TYPE . getString ( f ) )
assertThat ( actual , hasSize ( 10 ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
Assert . assertEquals ( "999999999999.99" , produto . getValorTotalBruto ( ) )
assertEquals ( "test" , param . getValue ( ) )
assertFalse ( version . isReleased ( ) )
assertThat ( converted , equalTo ( expected ) )
Assert . assertSame ( EDIT_ACCESS , this . component . getAccessLevel ( this . entity , COLLABORATOR ) )
assertTrue ( inv0 . equals ( inv1 ) == false )
Assert . assertEquals ( expected , component )
assertEquals ( DependendencyStatus . UNKNOWN , oracle . assess ( access ( "bar" , "foo" ) ) )
assertFalse ( predicate . test ( pickle ) )
context . assertIsSatisfied ( )
assertEquals ( "Number of threads is not set correctly." , numThreads , ThreadsEngine . getNumberOfThreads ( ) , 0 )
assertEquals ( Object . class , e . getListenerClass ( ) )
Assert . assertFalse ( "no query result returned" , result . isEmpty ( ) )
Assert . assertNotNull ( "Languages are null." , languages )
assertEquals ( "One throwing parameter: [Throwing i=1337 s=null]-throws IllegalStateException(msg)" , f . format ( ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" + "<dummyNode eh=\" 'a &amp;> b&quot; \" foo=\"bar\" ohio=\"4\">\n" + "    <dummyNode o=\"ha\" />\n" + "    <dummyNode />\n" + "</dummyNode>\n" , out . toString ( ) )
assertTrue ( arrayType . isArray ( ) )
Assert . assertTrue ( contains )
Assert . fail ( "Mechanism name could not be null" )
Assert . assertTrue ( irodsFile . canWrite ( ) )
assertNull ( request . getStub ( ) )
assertEquals ( "Select with descending order by" , expectedSelectOrderByNullsFirstDesc ( ) , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( dto , dto2 )
assertNull ( "Intersection between lines is incorrect" , pi )
assertEquals ( 119999L , m . getLastMillisecond ( ) )
assertTrue ( rec_cnt == 10 )
assertEquals ( "\"2014-03-10T23:32:47+00:00\",42,hello\n" , csv )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expected , actual )
assertTrue ( PureEvaluator . isUnpureCacheEmpty ( ) )
assertEquals ( model , actual )
Assertions . assertFalse ( result )
assertThat ( new JcrValue ( factories , PropertyType . LONG , 0L ) . getDate ( ) . getTimeInMillis ( ) , is ( expectedValue . getTimeInMillis ( ) ) )
Assert . assertEquals ( 0 , memberships . size ( ) )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
Assert . assertTrue ( context . getResult ( ) )
Assert . assertEquals ( 11 , cnt . getCount ( ) )
Assert . assertTrue ( Arrays . equals ( new int [ ] { 1 , 0 } , this . getCounts1 ( ) ) )
Assert . assertEquals ( 400 , response . getStatus ( ) )
Assert . assertEquals ( true , config . isDebug ( ) )
assertEquals ( expectedMsg , faultSoap11 )
assertEquals ( "Default working directory" , "runner" , config . getWorkingDirectory ( ) )
Assert . assertArrayEquals ( expected , actual )
assertEquals ( 400 , ( int ) caller . getSentError ( ) )
Assert . assertEquals ( options . getTargetPath ( ) , new Path ( "hdfs://localhost:8020/target/" ) )
assertThat ( "Combined vars" , IteratorUtils . transformedIterator ( combined . iterator ( ) , VarDef :: getPathName ) , visitsMembers ( "Color.Hue" , "Color.Lightness" , "Color.Saturation" , "Shape" ) )
Assert . assertEquals ( 100. , tdCosts . getTransportTime ( loc ( "from" ) , loc ( "to" ) , 0. , null , null ) , 0.01 )
Assert . assertArrayEquals ( expected , values )
assertThat ( getServers ( ) , allOf ( hasItem ( "ms1" ) , hasItem ( "ms2" ) ) )
Assert . assertEquals ( "\"name=name\" \"event_id=event-id\" \"key=129\"" , event . toString ( ) )
Assert . assertArrayEquals ( b , a , MathUtils . EPSILON )
assertEquals ( "ñòó" , result )
assertThat ( extractMonitorables ( timerAdapter ) . get ( COUNT ) . get ( ) , Matchers . < Object > is ( newCount ) )
assertEquals ( expectedSource , instrumentedSource )
assertNotNull ( results )
Assert . assertEquals ( "file://thathost/stuff" , URIUtils . rewriteURI ( URI . create ( "http://thishost:80/stuff#crap" ) , target , true ) . toString ( ) )
assertThat ( registry . getActiveUniqueSearchParams ( "Patient" ) , Matchers . empty ( ) )
assertTrue ( failedAsExpected )
assertEquals ( expected , filterAclEntriesByAclSpec ( existing , aclSpec ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1_WITH_INFIX_AND_SUFFIX , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1_WITH_INFIX_AND_SUFFIX , CORRECT_PASSWORD , SC_OK ) )
assertEquals ( expResult , result )
assertThat ( unescaped , is ( "hello world\n" ) )
assertGridIndexes ( data , new boolean [ ] { false , true , true , true } , new boolean [ ] { false , false , false , false } , new Expected [ ] [ ] { { Expected . build ( false , 1 , true ) } , { Expected . build ( true , 3 , false ) } , { Expected . build ( true , 0 , false ) } , { Expected . build ( true , 0 , false ) } } )
assertEquals ( "test" , echo . echo ( "test" ) )
assertFalse ( constraint . fulfilled ( iContext ) )
assertEquals ( 4.0 , median , 0.0000001 )
assertNotSame ( listener . getEvent ( ) , null )
Assert . assertEquals ( datahoraRecebimento , dados . getDatahoraRecebimento ( ) )
Assert . assertEquals ( "1" , eventoCancelamento . getIdLote ( ) )
Assert . assertEquals ( 0.0 , a . transposeMultiply ( b ) . subtract ( a . transpose ( ) . multiply ( b ) ) . getNorm ( ) , 1.0e-15 )
assertEquals ( "" , result )
assertThat ( intraDate . decreaseBy ( ResourcesPerDay . amount ( 1 ) , hours ( 12 ) ) . getDate ( ) , equalTo ( today ) )
assertThat ( certList , is ( context . getServerCertificateTypeDesiredTypes ( ) ) )
assertThat ( retrieved , isPresent ( ) )
Assert . assertTrue ( "occurrence had ID!" , occ . getItemIdentifiers ( ) . isEmpty ( ) )
Assert . assertEquals ( "2" , prefix . getPrefix ( ) )
Assert . assertFalse ( "user should not be able to read file" , actual . canRead ( ) )
assertE ( "�尖�尖�尖�尖�尖��" + "�� *  ��" + "��    ��" + "�� ��  ��" + "��    ��" + "�尖�尖�尖�尖�尖��" )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
Assert . assertEquals ( content + "\n" , result )
assertTrue ( "failed to stat file" , st != null && st . isFile ( ) )
assertEquals ( 0 , content . refCnt ( ) )
assertThat ( isEquals , is ( true ) )
Assert . assertEquals ( "{\"queue\":\"QS123\",\"expression\":\"1==1\",\"priority\":5,\"timeout\":30,\"order_by\":\"worker.english_level ASC\",\"skip_if\":\"workers.available == 0\"}" , target . toJson ( ) )
assertThat ( user , is ( Optional . empty ( ) ) )
assertEquals ( expected , s )
assertEquals ( "SELECT *\nWHERE {\n  ?s ?p ?o .\n}\n" , processed )
assertThat ( found . getClass ( ) , is ( typeCompatibleWith ( MyConverter . class ) ) )
Assert . assertNull ( oembedService . executeRequest ( request ) )
assertFalse ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertDeletedIDs ( expDeletedIIDs , deletedLinkIDs )
assertNull ( p )
assertEquals ( new Integer ( 5 ) , d_meas . getFrequency ( getCat ( d_cv , 0 ) ) )
assertEquals ( 1 , collectorManager . collectorsByCorrelationId . size ( ) )
assertTrue ( flipConditionEvaluator instanceof EmptyFlipConditionEvaluator )
assertTrue ( actionsTriggered . get ( ) )
Assert . assertNotNull ( conceptService . getConcepts ( "VOIDED" , Collections . singletonList ( Locale . ENGLISH ) , false , null , null , null , null , null , null , null ) )
assertNotNull ( injector )
assertThat ( proxy . wasCalled ( ) , is ( true ) )
assertEquals ( HttpStatus . SC_MOVED_PERMANENTLY , response . getStatus ( ) )
assertXmlMarshaling ( naturalLanguageUsage , XML )
assertNotNull ( spanEvent )
ctx . assertEquals ( numMessages , records . count ( ) )
assertTrue ( details . hasClosed ( ) )
assertSame ( hello . getIterationStrategyStack ( ) , uriTools . resolveUri ( HELLO_URI . resolve ( "iterationstrategy/" ) , wfBundle ) )
Assert . assertEquals ( 8 , patientIdentifiers . size ( ) )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
assertEqualsIgnoreLineEnding ( output , "{ }" )
assertThat ( "Expceted principal not found" , rmap , hasItem ( KERMIT_PRINCIPAL ) )
assertFalse ( timer . isAlive ( ) )
assertEquals ( BODSentence . class , gl . sentenceType )
assertNotNull ( region )
Assert . assertEquals ( "{\"universe\":0,\"time\":0,\"uuid\":1,\"data\":{\"name\":\"MySmartCity\",\"districts\":[2,4]}}\n" , buffer . toString ( ) . replaceAll ( "\r\n" , "\n" ) )
assertThat ( config . getStartTopic ( ) , is ( "y" ) )
assertFalse ( "Match should have failed." , match )
assertTrue ( output , output . contains ( "The command-timeout must be a valid positive integer" ) )
Assert . assertNull ( o )
assertEquals ( Action . SUCCESS , action . execute ( ) )
Assert . assertTrue ( "The test file " + out + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertEquals ( exp , rc . getReplicaSelector ( ) )
assertNull ( "null rowsorter initially, was: " + table . getRowSorter ( ) , table . getRowSorter ( ) )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertNull ( mergeReport )
assertEquals ( "{\"version\": \"3.0.0\", \"gauges\": {}, \"counters\": {}, \"histograms\": {\"foobar\": {\"count\": 1, \"max\": 5.0, \"mean\": 5.0, \"min\": 5.0, \"p50\": 5.0, \"p75\": 5.0, \"p95\": 5.0, \"p98\": 5.0, \"p99\": 5.0, \"p999\": 5.0, \"stddev\": 0.0}}, \"meters\": {}, \"timers\": {}}" , bson . toJson ( writerSettings ) )
assertEquals ( expected , actual )
Assert . assertEquals ( HttpServletResponse . SC_FORBIDDEN , response . getStatus ( ) )
assertEquals ( expResult , result )
assertNotNull ( objJPAEdmProperty . getEdmSimpleProperty ( ) )
Assert . assertEquals ( THIRTEEN_SHORT , pi . getThirteenShort ( ) )
assertEquals ( "{'current':2,'passed':1,'total':5,'valid':true}" , progress . toString ( ) )
assertThat ( baseStepListener . getDriver ( ) , is ( not ( nullValue ( ) ) ) )
assertEquals ( new Date ( futureDate ) , job . getNextRun ( ) )
assertNull ( previous )
assertEquals ( expectedQuery , actualQuery )
assertThat ( toml . entrySet ( ) , empty ( ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertFalse ( FlowDifferenceFilters . FILTER_ADDED_REMOVED_REMOTE_PORTS . test ( flowDifference ) )
assertFalse ( "No keywords found" , result . isEmpty ( ) )
assertEquals ( rows , sorter . getViewRowCount ( ) )
assertEquals ( expResult , result )
assertNotNull ( sourceLoader )
assertTrue ( simpleContainsKey ( keyEquiv ( 12345 ) ) )
assertOut ( "/**\n * @constructor\n * @implements {custom.TestInterface}\n * @implements {custom.TestOtherInterface}\n */\norg.apache.royale.A = function() {\n};" )
assertEquals ( 0 , acquiredTriggers . size ( ) )
assertEquals ( out , frame2 )
assertTrue ( result . length ( ) > 0 )
assertThat ( readBytes ( testee ) , is ( "World|!" ) )
assertEquals ( geo , expResult )
assertValueModelFires ( model , interval , expected )
assertSame ( in , inputItem . getBody ( ) )
assertEquals ( 4300 , totalCalories )
Assert . assertArrayEquals ( expected , result )
assertThat ( age , notNullValue ( ) )
assertThat ( plugin . getClass ( ) , is ( equalTo ( UsageFormatter . class ) ) )
assertEquals ( PCEPErrors . UPDATE_REQ_FOR_NON_LSP , this . errorsSession2 . get ( 0 ) )
assertTrue ( "value was " + Arrays . toString ( target ) , Arrays . equals ( expected , target ) )
Assert . assertTrue ( errors . hasGlobalErrors ( ) && errors . getGlobalError ( ) . getCode ( ) . equals ( PermissionsValidator . ERROR_CODE_ADMIN_TYPE ) )
assertThat ( PrettyTime . of ( Locale . US ) . print ( duration , TextWidth . WIDE ) , is ( "1 year and 1 day" ) )
Assert . fail ( )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( 2 , resultList . size ( ) )
assertFalse ( fail )
assertNull ( oneElt ( x ) )
assertNull ( tr . findCertInfo ( createCert ( true , "BISCUITS" ) ) )
assertEquals ( 406 , r . getStatus ( ) )
assertEquals ( number1 , number2 )
Assert . assertFalse ( errors . hasFieldErrors ( ) )
assertByteArraysEquals ( new byte [ ] { 0x61 , 0x62 , 0x63 } , out . toByteArray ( ) )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertThat ( items , arrayWithSize ( 0 ) )
Assert . assertEquals ( 2 , provider . count )
assertThat ( issues , hasItem ( "#123" ) )
assertArrayEquals ( location , referenceFloorOffset )
assertSame ( Persons . elements , persons )
assertEquals ( 0 , result , 0.0001 )
Assert . assertFalse ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertThat ( result , is ( Collections . emptyList ( ) ) )
assertEquals ( "2005-10-12T00:00:00" , v . getStringValue ( ) )
Assert . fail ( "DalRuntimeException expected" )
assertThat ( attributes , contains ( new Attribute ( "members" , "AS1" , null , "aut-num" , new Link ( "locator" , "http://localhost/lookup/TEST/aut-num/AS1" ) , null ) , new Attribute ( "members" , "AS2" , null , "aut-num" , new Link ( "locator" , "http://localhost/lookup/TEST/aut-num/AS2" ) , null ) , new Attribute ( "members" , "AS3" , null , "aut-num" , new Link ( "locator" , "http://localhost/lookup/TEST/aut-num/AS3" ) , null ) ) )
Assert . assertNull ( queue . removeHead ( 0 ) )
assertEquals ( expected , readOutputFile ( conf ) )
assertSame ( toTest , toTest . setMethodsDeserializer ( Deserializer . class ) )
assertEquals ( out . readableBytes ( ) , 0 )
assertNotNull ( instance . getMappainter ( ) )
assertEquals ( HttpStatusCodes . UNSUPPORTED_MEDIA_TYPE . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( v , is ( nullValue ( ) ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( drug , conceptService . getDrug ( drugName ) )
assertFalse ( validator . isValid ( resource , MetadataSection . METHODS_SECTION ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_DOUBLE )
assertTrue ( "Not fully defined: " + locator , FileLocatorUtils . isFullyInitialized ( locator ) )
Assert . assertEquals ( node , r . get ( "node" ) )
assertNotNull ( Channel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertNotNull ( out . getD6 ( ) )
assertEquals ( - 1 , is . read ( new byte [ SIZE ] , 0 , 1 ) )
assertNotNull ( state )
Assert . assertEquals ( 100 , terminatedAfter )
assertOperation ( ( ) -> roleClient . deleteProject ( SPACE_NAME , name ) )
assertTrue ( wsss . isBound ( ) )
PSLTest . assertModel ( dataStore , input , expected )
assertEquals ( HttpURLConnection . HTTP_NOT_FOUND , connection . getResponseCode ( ) )
assertEquals ( 3 , count )
assertThat ( table . asString ( ) , equalTo ( tableAsString ) )
assertTrue ( FlagDelegate . isVisited ( ) )
Assert . assertEquals ( 5 , sync ( set . size ( ) ) . intValue ( ) )
Assert . fail ( "HttpServerTestingFrameworkException should have been thrown" )
Assert . assertTrue ( threadPoolConfig . getQueue ( ) instanceof SynchronousQueue )
Assert . assertNotNull ( result . getFirstHeader ( "Date" ) )
Assert . assertFalse ( "failure - expected numbers to be diff" , FC . equals ( FC2 ) )
assertions . doesNotContain ( expected )
context . assertIsSatisfied ( )
assertTrue ( columnDifference . execute ( ) )
assertEquals ( Double . doubleToLongBits ( resultKthSelector ) , Double . doubleToLongBits ( resultSort ) )
Assert . assertEquals ( "Expected administrator rights" , ADMIN_AUTHS , auths )
assertEquals ( true , this . repositoryFactory . getRepository ( createUserContext ( "admin" ) ) . getById ( modelId ) . isHasImage ( ) )
assertEquals ( "2012-01-02" , date . getValueAsString ( ) )
assertThat ( numFound ( query ( "q=company" ) ) , is ( 1L ) )
assertThat ( actual , is ( expected ) )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "Simple - Log message" , msg . toString ( ) )
assertEquals ( m1 , m2 )
assertEquals ( "text/html" , requestImpl . accepts ( "test/test" , "text/html" ) )
Assert . assertEquals ( false , retval )
Assert . assertNotNull ( ff4j )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
Assert . assertNull ( caixa )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( "getField1" , name )
assertDtoAndMapConstructorAreSame ( 0 )
assertions . doesNotHaveDuplicates ( )
assertE ( "�尖�尖�尖�尖�尖�尖��" + "��     ��" + "��  ��  ��" + "��  ��  ��" + "��     ��" + "��     ��" + "�尖�尖�尖�尖�尖�尖��" )
assertEquals ( tenantId , connection . getClientInfo ( PhoenixRuntime . TENANT_ID_ATTRIB ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( component . getStyleName ( ) , "style1 style2" )
Assert . assertTrue ( got . contains ( "Updated: 2" ) )
assertEquals ( expected , actual )
assertNotNull ( myCrypto . getTrustStore ( ) )
assertThat ( "replace" , localRepo . getPulls ( ) , not ( hasKey ( 1 ) ) )
assertTrue ( true )
assertEquals ( "Graph should be empty. autoThread transaction.onClose() should be ROLLBACK (default)" , 0 , DuctileDBTestHelper . count ( graph . getVertices ( ) ) )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , true , "test" , null ) . property ( "fubar" ) )
Assert . assertEquals ( true , map . get ( 7 ) )
assertEquals ( testNewUrl , jobEntryHadoopCopyFiles . loadURL ( testUrl , testNcName , metaStore , mappings ) )
assertEquals ( new Long ( 5 ) , workflowInstance . getVariableValue ( "v" , Long . class ) )
assertTrue ( processor . canProcessEvent ( event ) )
assertTrue ( expectedRemainderExistingAveragePoolingActivation . compare ( poolingActivation , TOLERANCE ) )
assertThat ( frameworkConfig . getJobStateQueueSize ( ) , is ( 10000 ) )
assertTrue ( prefs . matches ( t ) )
Assert . assertEquals ( expected , MessageFormatter . format ( message , "p1" ) )
assertEquals ( "Unexpected read concern" , ReadConcern . DEFAULT , clientOptions . getReadConcern ( ) )
Assert . assertEquals ( "<div id=\"test\"></div>" , printer . toString ( ) )
assertEquals ( 2 , removeAllEmpty . size ( ) )
assertEquals ( ".class { width: 2; }" , normalize ( css ) )
Assert . assertEquals ( 0 , compareResult )
assertEquals ( 5 , header . getMinorVersion ( ) )
assertEquals ( actual , expected , "Wrong substitution" )
assertTrue ( cli . isConnected ( ) )
assertEquals ( rs2 , rs )
Assert . assertEquals ( expectedResult , resultString )
Assert . assertNull ( testData )
assertThat ( tuple . getIntegerOrDefault ( "field" , 2 ) , equalTo ( 2 ) )
assertThat ( buf . size ( ) , is ( 0 ) )
assertEquals ( expectedMessage , result )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( expResult , result )
Assert . assertArrayEquals ( oldbb , bb )
assertThat ( extension . getServerNames ( ) . get ( ServerName . NameType . HOST_NAME ) , is ( iotEclipseOrg ) )
assertEquals ( expected , actual )
assertEquals ( "[Array released]" , v8Object . toString ( ) )
Assert . assertTrue ( "CumulativeLoss is expected to be less than 1200: " + udtf . getCumulativeLoss ( ) , udtf . getCumulativeLoss ( ) < 1200 )
assertEquals ( 0 , ksession . fireAllRules ( ) )
assertXMLStringsEquals ( "<Root>\n" + "   <Intermediate>\n" + "      <X>Passed</X>\n" + "      Value\n" + "   </Intermediate>\n" + "</Root>\n" , test . toString ( ) )
assertFalse ( violation )
assertThereIsABoundFactFor ( "$a" )
assertNull ( actual )
Assert . assertEquals ( expected , component )
assertThat ( defn . equals ( defn2 ) , is ( true ) )
assertEquals ( 6 , orderPerm . size ( ) )
N4CliHelper . assertExpectedOutput ( "functionFromModuleA\n" + "variableFromModuleB\n" + "variableFromModuleC\n" + "variableFromModuleC" , out )
Assert . assertEquals ( 200 , newMergedRecord . getIncomingTransfer ( ) )
assertEquals ( packet , p )
Assert . assertNotNull ( dataObjectAO )
assertTrue ( defaultCondition . isDefault ( ) )
assertTrue ( Null . matches ( value ) )
assertEquals ( expResult , result )
assertNotNull ( containers )
assertThat ( studies . size ( ) , is ( 1 ) )
assertEquals ( 2 , set . size ( ) )
Assert . assertSame ( item , inventoryItems . get ( 0 ) )
assertThat ( reader . nextKeyValue ( ) , is ( false ) )
assertEquals ( 10 , getCache ( provider , "bar" ) . capacity )
Assert . assertFalse ( evaluator . hasPermission ( authentication , targetId , targetType , permission ) )
assertions . containsSequence ( sequence )
assertTrue ( isTransposed ( m ) )
assertNull ( recursiveType . getArrayElementType ( ) )
assertDateEquals ( dateTime , result )
Assert . assertEquals ( Type . High , type )
assertEquals ( 0 , envelope . toSimpleEnvelopes ( ) . length )
assertTrue ( "user in admin group should have access" , val )
Assert . fail ( "Can't cd into a non-existing nodepath." )
assertStat ( result )
assertEquals ( 0 , output . length )
assertEquals ( timeInstant . getTimeMode ( ) , TimeInstant . TimeMode . NOW )
assertEquals ( result , toTypedExpression ( "someB#ICB.someC#ICC.onlyConcrete() " , ICA . class ) . getExpression ( ) . toString ( ) )
assertEquals ( 2 , response . getReturn ( ) . size ( ) )
assertEquals ( "Method #toString is wrong" , "RegexpCondition{boost=0.5, field=name, value=2001:db8:2de:0:0:0:0:e*}" , condition . toString ( ) )
assertEquals ( "Should get a 404 response" , HttpStatus . NOT_FOUND , mongodbFeedSource . getEntry ( getEntryRequest ) . getResponseStatus ( ) )
arrays . assertEndsWith ( description , null , newArray ( true ) )
assertEquals ( MqttQos . DELIVER_AT_MOST_ONCE , mqttMessage . getQos ( ) )
assertTrue ( strategy . isCrawable ( url , 2 ) )
assertEquals ( "JSON Form" , result , json . toString ( ) )
Assert . assertNotNull ( mediaId )
assertDepth ( right , rightSource , 2 )
assertTrue ( rankedWords . get ( 0 ) . getStringText ( ) . equalsIgnoreCase ( w . getStringText ( ) ) )
Assert . assertTrue ( fallbackRan )
assertEquals ( users , perun . getUsersManagerBl ( ) . getUsersByIds ( sess , ids ) )
assertEquals ( "127.0.0.1" , result . getIpAddress ( ) )
Assert . assertEquals ( "Invalid output with XML" , TransformXMLTestHelper . TEST_XML , output )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( 0 , methodCalled . size ( ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( "check plugins empty" , _plugins , Collections . emptySet ( ) )
Assert . assertTrue ( "value" . equals ( value ) )
Assert . assertEquals ( block . getBlockLines ( ) . size ( ) , 3 )
assertAnnotationCompletions ( "@Value(value=\"${data.prop2}\"<*>)" , "@Value(value=\"${else.prop3}\"<*>)" , "@Value(value=\"${spring.prop1}\"<*>)" )
Assert . assertArrayEquals ( expectedNames , list . toArray ( new String [ list . size ( ) ] ) )
assertTrue ( invalid . subInterval ( someDate , someDate . plusDays ( 2 ) ) . isNotValid ( ) )
Assert . assertTrue ( "It should return Parameter Values" , Arrays . equals ( values , parameterValues ) )
tester . assertRenderedPage ( HomePage . class )
assertThat ( text ( contents ) , is ( "a\tb\nA\tB\n" ) )
assertEquals ( "/t/test" , templateUri . toString ( ) )
assertEquals ( 5445 , result )
assertEquals ( 2 , reasoned . getAxiomCount ( ) )
testRunner . assertNotValid ( )
assertEquals ( refPoint , testPoint )
assertEquals ( 86 , Colors . rgbColor ( "aquamarine1" ) . longValue ( ) )
Assert . assertNull ( c1 )
assertNull ( result )
assertEquals ( 1 , ( ( ObjectWithOptions2 ) ( ( ObjectWithOptions ) options . optOp ) . optionsOp ) . value )
CONTEXT . assertIsSatisfied ( )
assertEquals ( 1.0 , epsilon . evaluate ( front ) , EPSILON )
assertEquals ( 1 , runner . getStartCount ( ) )
assertTrue ( testModelView instanceof MyModelViewWithHiddenDefaultConstructor )
assertNull ( "url must be null. " , url )
assertEquals ( Integer . valueOf ( 1 ) , deque . getFirst ( ) )
assertEquals ( "1.2\t2.3\t3.4\n" + "4.5\t5.6\t6.7\n" , out . toString ( ) )
assertEqualDoubleArrays ( pysquare , square , epsilon )
assertEquals ( MyMedication . class , mo . getContained ( ) . getContainedResources ( ) . get ( 0 ) . getClass ( ) )
Assert . assertFalse ( subscriptionsGet . accept ( element ) )
assertThat ( testValues , is ( expectedValues ) )
assertEquals ( expectedContainers , actualContainers )
assertThat ( parsed . features ( ) , hasSize ( 202 ) )
assertEquals ( "duzentos inteiros" , actual )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<samlp:Response Consent=\"urn:oasis:names:tc:SAML:2.0:consent:unspecified\" Destination=\"https://samlcent/Shibboleth.sso/SAML2/POST\" ID=\"_fd601e21-5f81-469e-88c7-da72dccf1357\" InResponseTo=\"_545e60fe3602a06d25f241b622c5a773\" IssueInstant=\"2015-04-06T06:42:39.213Z\" Version=\"2.0\" xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\"><Issuer xmlns=\"urn:oasis:names:tc:SAML:2.0:assertion\">http://SAMLWIN.saml.lan/adfs/services/trust</Issuer><samlp:Status><samlp:StatusCode Value=\"urn:oasis:names:tc:SAML:2.0:status:Success\"/></samlp:Status><Assertion ID=\"_evil_assertion_ID\" IssueInstant=\"2015-04-06T06:42:39.212Z\" Version=\"2.0\" xmlns=\"urn:oasis:names:tc:SAML:2.0:assertion\"><Issuer>http://SAMLWIN.saml.lan/adfs/services/trust</Issuer><Subject><SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"><SubjectConfirmationData InResponseTo=\"_545e60fe3602a06d25f241b622c5a773\" NotOnOrAfter=\"2015-04-06T06:47:39.213Z\" Recipient=\"https://samlcent/Shibboleth.sso/SAML2/POST\"/></SubjectConfirmation></Subject><Conditions NotBefore=\"2015-04-06T06:42:39.210Z\" NotOnOrAfter=\"2015-04-06T07:42:39.210Z\"><AudienceRestriction><Audience>https://samlcent/shibboleth</Audience></AudienceRestriction></Conditions><AttributeStatement><Attribute Name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn\"><AttributeValue>bowser@saml.lan</AttributeValue></Attribute><Attribute Name=\"http://schemas.xmlsoap.org/claims/Group\"><AttributeValue>Dom锟�nen-Benutzer</AttributeValue></Attribute><Attribute Name=\"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"><AttributeValue>bowser@saml.lan</AttributeValue></Attribute></AttributeStatement><AuthnStatement AuthnInstant=\"2015-04-06T06:42:39.178Z\"><AuthnContext><AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</AuthnContextClassRef></AuthnContext></AuthnStatement><Assertion ID=\"_f27d6403-32f3-45ec-8b24-8b2fb4ca99b0\" IssueInstant=\"2015-04-06T06:42:39.212Z\" Version=\"2.0\" xmlns=\"urn:oasis:names:tc:SAML:2.0:assertion\"><Issuer>http://SAMLWIN.saml.lan/adfs/services/trust</Issuer><ds:Signature xmlns:ds=\"http://www.w3.org/2000/09/xmldsig#\"><ds:SignedInfo><ds:CanonicalizationMethod Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/><ds:SignatureMethod Algorithm=\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\"/><ds:Reference URI=\"#_f27d6403-32f3-45ec-8b24-8b2fb4ca99b0\"><ds:Transforms><ds:Transform Algorithm=\"http://www.w3.org/2000/09/xmldsig#enveloped-signature\"/><ds:Transform Algorithm=\"http://www.w3.org/2001/10/xml-exc-c14n#\"/></ds:Transforms><ds:DigestMethod Algorithm=\"http://www.w3.org/2001/04/xmlenc#sha256\"/><ds:DigestValue>foKK0crQsYCouYU2pt9dvyDdI9Z4s5Z0WAHrpclAfA8=</ds:DigestValue></ds:Reference></ds:SignedInfo><ds:SignatureValue>5a/BEGAyZFArapDrhKpycB7wADxpN1rwBOy5ADyMslFDZ2Xbrk6ILBVdwQh78Xd5OQtAXgap+Zsx8dIVF5TN4O7s8TDT3UkGERQu4eTisjhJaNjnc+HNXtkubKnQ2jpoGdoDfpgf2UJIVq7b9zXQxIki4V4DcMOJclhbiIwI2GXFlzm70fWYDAkuAkbaAOwX716jb6xkmMhA4kEDyszOxFlUbLdKp92H74D0wlhnIqP2k6ONzuTMLfjMGN5FZenqZyJUg6IX79mffFpCG6tFM9wRzaehThGRLIQ2QtYh4McBYwAq1JrL2QXurSpH06lrAzk0D79HKDBPR62Zws55Jw==</ds:SignatureValue><KeyInfo xmlns=\"http://www.w3.org/2000/09/xmldsig#\"><ds:X509Data><ds:X509Certificate>MIIC3DCCAcSgAwIBAgIQN0u7JfaKFrxPoGuP0EeVjTANBgkqhkiG9w0BAQsFADAqMSgwJgYDVQQDEx9BREZTIFNpZ25pbmcgLSBTQU1MV0lOLnNhbWwubGFuMB4XDTE1MDIyNTE3MTE0N1oXDTE2MDIyNTE3MTE0N1owKjEoMCYGA1UEAxMfQURGUyBTaWduaW5nIC0gU0FNTFdJTi5zYW1sLmxhbjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAPLTYkbBIvPa2+KrOvxoi1alOcOnxzFRlZELYhyiCj2j0hKuQd+fB+OgP4fNuaH/dEbSiZ0fD3MtQ0nrc65NTYrXpPqAasMEGpVVOemi4kaKwxrYOD3NbFoFxQjvjMV9UQt2RaBe160sFe58o5cWvNVxXA2Sf81fIeHlSBEMavFOQFQkQbDU/XmGtW0XjQhyyiJ4MEy7Zwgu2HmxpiwNa6wSflDXZIUYq3gUZ+eFr8kTgBrpgLtD2lAaaF8e9X0n6xiswDoORs70cNiyHgTN4ywL+1jT+vNjHoV+V9btTcfr0l/JytFrCNXx3z6k8pDmQVGIfbY7J4nRdqpzEd5MOTECAwEAATANBgkqhkiG9w0BAQsFAAOCAQEAqOCJMqE7pRBs5qvtmJ55r7f/HF6B+SRijzX4k0Bg7GGKQsNn2X3BC5MYCcVYlmzXw8k5JxxxMckExGlnSvph+2DyZJOysspMj2NKuseDSGaBGbhJXH/vF0Fm9Ps/Tf4BKIBrPE14ghCp4vtaXlpd13/w1eXSwqQ2rIREbmidGho6P9hkVH6G8ri2iClS78Edakhoskcc35UvXt4o6R77RTA9/jQ9NylxYoj0eYAlkIlG+rSDQpx8RXRiLQxsOl5EpXqmoD9zGAEWWAxcmzTAjJFFzis1F7n6nVuv8SVaKjQBEz/nmstduxLOo20DR/M0VAQQzwMDM9uihXNQwNWEMw==</ds:X509Certificate></ds:X509Data></KeyInfo></ds:Signature><Subject><SubjectConfirmation Method=\"urn:oasis:names:tc:SAML:2.0:cm:bearer\"><SubjectConfirmationData InResponseTo=\"_545e60fe3602a06d25f241b622c5a773\" NotOnOrAfter=\"2015-04-06T06:47:39.213Z\" Recipient=\"https://samlcent/Shibboleth.sso/SAML2/POST\"/></SubjectConfirmation></Subject><Conditions NotBefore=\"2015-04-06T06:42:39.210Z\" NotOnOrAfter=\"2015-04-06T07:42:39.210Z\"><AudienceRestriction><Audience>https://samlcent/shibboleth</Audience></AudienceRestriction></Conditions><AttributeStatement><Attribute Name=\"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn\"><AttributeValue>bowser@saml.lan</AttributeValue></Attribute><Attribute Name=\"http://schemas.xmlsoap.org/claims/Group\"><AttributeValue>Dom锟�nen-Benutzer</AttributeValue></Attribute><Attribute Name=\"urn:oid:1.3.6.1.4.1.5923.1.1.1.6\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\"><AttributeValue>bowser@saml.lan</AttributeValue></Attribute></AttributeStatement><AuthnStatement AuthnInstant=\"2015-04-06T06:42:39.178Z\"><AuthnContext><AuthnContextClassRef>urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport</AuthnContextClassRef></AuthnContext></AuthnStatement></Assertion></Assertion></samlp:Response>" , xmlHelpers . getStringOfDocument ( document , 0 , false ) )
assertThat ( ( double ) instance . estimateCardinality ( ) , closeTo ( 10000 , 10000 * 0.01 ) )
assertEquals ( clazz , request . getTargetClass ( ) )
assertThat ( logRecords , containsInfo ( testFacade . getServiceCreateLogMessage ( ) ) )
GenericTestUtils . assertExceptionContains ( "does not match CTime of NN" , ive )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 06" ) )
assertEquals ( c , clone ( ( c ) ) )
Assert . assertEquals ( "Should return a serialized point" , TestVectors . ALICE_PUBLIC_KEY , mult )
Assert . assertNull ( receivedMessage )
Assert . assertTrue ( pti . toString ( ) . contains ( "Base<String>" ) )
assertTrue ( isValid )
assertGameOver ( )
assertTrue ( "Provider sasl server factory should be created" , ops . exists ( TEST_SERVER_FACTORY_ADDRESS ) )
assertions . isNotLessThan ( new Double ( 10d ) )
assertEquals ( 5 , target . getHeight ( ) )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertEquals ( simple . getName ( ) , find . getName ( ) )
assertDependencyWasResolvedToOptional ( )
assertThat ( mode , is ( equalTo ( ShellMode . interactive ( ) ) ) )
assertEquals ( expected , wire . read ( ( ) -> "VALUE" ) . int64 ( ) )
Assert . assertEquals ( 0d , p . evaluate ( d ) , Double . MIN_VALUE )
assertEquals ( "Database" , dsc . getDisplayName ( ) )
assertTrue ( ( Boolean ) result )
verify ( messages ) . assertAbsenceOfErrors ( )
assertThat ( tags , hasItems ( "a" , "b" , "c" ) )
assertFalse ( factory == SqlGeneratorFactory . getInstance ( ) )
assertEquals ( 1 , results . length )
Assert . assertTrue ( "lookup returned wrong topic" , topic == found )
assertLdapPasswordByFullName ( ACCOUNT_JACK_FULL_NAME , ACCOUNT_JACK_PASSWORD )
assertTrue ( "Failed authentication with wrong user was not logged" , loggedFailedAuth ( AUDIT_LOG_FILE , UNKNOWN_USER ) )
assertTrue ( getRecordsAsXmlString . contains ( "hopCount=\"2\"" ) )
assertTrue ( found . isEmpty ( ) )
assertEquals ( 4 , result . getProperties ( ) . size ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( expect , cnt )
assertResultSet ( res )
assertTrue ( Bytes . compareTo ( bytes1 , bytes2 ) < 0 )
assertEquals ( "subSubName" , expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
assertFalse ( obj . containsKey ( "ignoredValue" ) )
Assert . assertEquals ( node , r . get ( "node" ) )
Assert . assertTrue ( service . isAlertSystemOn ( ) )
mockery . assertIsSatisfied ( )
assertEquals ( "number of links" , 6 , linkCount )
assertEquals ( expected , actual )
Assert . assertTrue ( true )
Assert . assertEquals ( "rows in db" , 10 , outputOperator . getNumOfEventsInStore ( ) )
assertTrue ( e instanceof ExprNone )
Assert . assertTrue ( parameter . evaluate ( rewrite , context ) )
assertEquals ( "GBP 3.57" , test . toString ( ) )
assertEquals ( expected , result )
assertTrue ( check ( "a" , input , output ) )
assertEquals ( ":" , result )
assertEquals ( expResult , result )
assertEquals ( 2 , builder . getAddedVehicleTypes ( ) . size ( ) )
assertEquals ( test . expected ( ) , test . actual ( ) )
assertEquals ( creditCardXML , writer . toString ( ) . trim ( ) )
assertArrayEquals ( BoundType . arrayOf ( klasses ) , BoundTypeUtil . getStaticBoundTypes ( BoundMap . class ) )
assertEquals ( "-something" , commandLine . getOptionValue ( 't' ) )
assertEquals ( sqe , convertResult . get ( 0 ) )
assertThat ( JdbcUtils . getTableNames ( getConnectionProperties ( ) ) , containsInAnyOrder ( "SOMETABLE" ) )
Assert . assertEquals ( 1 , reactorHandlerRegistry . getEntrypoints ( ) . size ( ) )
assertEquals ( "two undecillion" , actual )
assertEquals ( EmailState . SENT , result . getState ( ) . getState ( ) )
assertPermanentCount ( playerA , "Elite Vanguard" , 1 )
assertNotNull ( result )
Assert . assertEquals ( 256.633 , result , 1 )
assertThat ( getRecordedDomain ( ) , not ( hasCondition ( Failed ) ) )
assertArray ( new double [ ] { 0.01 , 0.038 , 0.028 , 0.075 , 0.139 , 0.222 , 0.194 , 0.295 } , scaleDouble ( 3 , node1 . getPotentials ( ) ) )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
Assert . assertEquals ( String . valueOf ( obj ) , quantidade , tamanho )
assertEquals ( expected , identity )
assertEquals ( "_cat/nodes" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( a1 , a2 )
assertEquals ( "envvalue" , envvalue )
assertThat ( info . getFor ( ) , is ( "id1" ) )
assertTrue ( inv0 . equals ( inv1 ) == false )
assertEquals ( 8 , someNotSoRandomAsciiAsList . size ( ) )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
assertTrue ( selector . evaluate ( source ) )
Assert . assertEquals ( EstadoAsientoRegistralEnum . RECHAZADO . getValue ( ) , estado . getEstado ( ) )
assertEquals ( Math . sqrt ( 0.02 ) , distance . compute ( point1 , point2 ) , EPSILON )
assertEquals ( 4 , encounters . size ( ) )
assertEquals ( expectedNames , namedClusterManager . listNames ( metaStore ) )
assertNotNull ( target . a )
MatcherAssert . assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertXMLEqual ( "Invalid contents of header" , "<Header xmlns='http://www.w3.org/2003/05/soap-envelope' />" , result . toString ( ) )
assertNull ( CsvBulkImportUtil . getCharacter ( conf , "conf.key" ) )
Assert . assertNotNull ( this . mocker . getComponentUnderTest ( ) . getLock ( this . currentDocumentReference ) )
assertFalse ( ncPropertiesNotNullOrEmpty )
assertThat ( sampleTestClass . pages , is ( not ( nullValue ( ) ) ) )
rule . assertScenarioEnded ( )
assertFalse ( cp . isReadOnly ( ) )
assertEquals ( "Hello :name1" , ResponseBodyInterpolator . interpolate ( "Hello :name1" , req ) )
Assert . isTrue ( orders . get ( 0 ) . getOrderId ( ) . equals ( 50000280834672L ) )
assertThat ( payload , equalTo ( RESOURCE_PAYLOAD ) )
Assert . assertNotNull ( victim . create ( ) )
assertEquals ( expected , result )
assertTrue ( "proposition should have been deleted" , ruleManagementService . getPropositionsByRule ( propositionDefinition . getRuleId ( ) ) . isEmpty ( ) )
assertEquals ( IS_NULL . toString ( ) , res . getHibernateCriterion ( ) . toString ( ) )
assertThat ( returnedSqo , is ( sqo ) )
assertEquals ( 1 , constraints . size ( ) )
assertTrue ( collection . size ( ) > 0 )
Assert . assertEquals ( "Fail count record of room" , i , cr )
Assert . assertTrue ( tcpConnectivity . supports ( requirement ) )
assertEquals ( LineText . CENTER , lineText . getAlignment ( ) )
assertThat ( anyTS . getMaximum ( CLOCK_HOUR_OF_AMPM ) , is ( 12 ) )
assertEquals ( "Expected 1 result!" , 1 , n )
assertEquals ( "2" , subject . getOutput ( ) . get ( 2 ) )
assertEquals ( 0 , curatedDrugs . size ( ) )
assertAxisEquals ( 0.77777 , 0.88888 , new double [ ] { 0.78 , 0.79 , 0.80 , 0.81 , 0.82 , 0.83 , 0.84 , 0.85 , 0.86 , 0.87 , 0.88 } , new String [ ] { "0.78" , "0.79" , "0.80" , "0.81" , "0.82" , "0.83" , "0.84" , "0.85" , "0.86" , "0.87" , "0.88" } , axis )
assertAllCommandsUsed ( )
assertThat ( selectedCell , is ( "B2" ) )
assertThat ( new SearchArgumentFilter ( searchArgument , structTypeInfo ) . accept ( corc ) , is ( false ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff_overflowNewContent01_" ) )
assertEquals ( DataTypeManager . DefaultDataClasses . OBJECT , ( ( Expression ) query . getProjectedSymbols ( ) . get ( 0 ) ) . getType ( ) )
assertExtendedEquals ( expected , dd , PRODUCT_TOLERANCE_FACTOR )
assertEquals ( 2 , orgs . getLength ( ) )
assertSame ( expectedResult , result )
assertEquals ( 0 , tasks . size ( ) )
assertEquals ( "table width must be equal to viewport" , table . getWidth ( ) , scrollPane . getViewport ( ) . getWidth ( ) )
Assert . assertEquals ( 2 , tables . size ( ) )
assertNotNull ( result )
r . assertEqualBeans ( orig , received , "ami,zone,description,remoteFS,type,jvmopts,stopOnTerminate,securityGroups,subnetId,useEphemeralDevices,useDedicatedTenancy,connectionStrategy" )
assertEquals ( expected , status )
assertTrue ( rs . next ( ) )
assertEquals ( 1 , Evaluator . evaluate ( ex ) )
assertNull ( "Wrong result for unknown key" , config . getSource ( "an.unknown.key" ) )
assertThat ( result , is ( "Node2" ) )
assertNotEquals ( expResult , result )
context . assertIsSatisfied ( )
assertTrue ( QLists . getList ( id1 , id2 ) . equals ( topo . getInputs ( ) ) || QLists . getList ( id2 , id1 ) . equals ( topo . getInputs ( ) ) )
assertTrue ( EncryptionUtil . validatePbkdf2 ( this . unEncryptedMessage , encryption ) )
Assert . assertNotNull ( instance . getAllAtomMapping ( ) )
Assert . fail ( "Invalid input" )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "shouldReturnFieldsOnly.json" , result )
assertNull ( "Unexpected value in outputTriple: " + outputTriple , outputTriple )
assertTrue ( map instanceof Hashtable )
assertTrue ( map . get ( loadBalancerId ) . get ( hostId ) . size ( ) == 2 )
assertThat ( type , equalTo ( DBR_String . TYPE ) )
assertEquals ( "Wrong super type" , Event . ANY , builderEventType . getSuperType ( ) )
assertEquals ( 2 , allClasses . size ( ) )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , allOf ( hasItem ( createConfigMapKeyRefEnvVar ( "VARIABLE1" , "my-env" , END_VALUE_1 ) ) , hasItem ( createSecretKeyRefEnvVar ( "VARIABLE2" , "my-secret" , END_VALUE_1 ) ) , hasItem ( createFieldRefEnvVar ( "MY_NODE_IP" , END_VALUE_1 ) ) ) )
assertEquals ( expected , actual )
assertThat ( getPodSpec ( jobSpec ) . getInitContainers ( ) , nullValue ( ) )
assertTrue ( "Timer exceeded max time of " + maxTime , maxTime > timer . getElapsedNanoTime ( ) )
assertEquals ( BatchStatus . COMPLETED , execution . getStatus ( ) )
assertThat ( proxyUnderTest . isFeatureEnabled ( ) , is ( equalTo ( false ) ) )
Assert . assertEquals ( versions . get ( i - 1 ) , version . getTestString ( ) )
assertEquals ( "x y + ; x y -" , this . codeGenerator . getPostFixExpression ( ) )
assertIntercept ( "1.&(System.getProperty('sandboxTransformsMethodPointerRhs'))()" , "1" , "System:getProperty(String)" , "SandboxedMethodClosure.call()" , "Integer.toString()" )
assertNotNull ( getBeanInstance ( CreditCard . class ) )
Assert . assertEquals ( expected , actual . getName ( ) )
assertEquals ( "HELLO" , engine . compileMustache ( "helper_peek" , "{{test}}" ) . render ( "HELLO" ) )
assertEquals ( 9 , aggregator . generateId2OutcomeFile ( ) . split ( "\n" ) . length )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertThat ( page . clickTargetButton . isVisible ( ) , is ( true ) )
assertEquals ( expectedFolderPath , buildFolderPath )
assertChildren ( moveTo , moveTo . resolve ( "newFile" ) )
assertNull ( p )
assertEquals ( "Longitude is not properly parsed" , 5.3f , mapper . readLongitude ( columns ) , 0 )
Assert . assertTrue ( command . toString ( ) . contains ( CHANNEL ) )
assertThat ( result ( ) , not ( containsString ( "\"client\"" ) ) )
assertEquals ( 2 , variable )
assertEquals ( "gz:file:/C:/anyhost/dir/mygz.tar.gz!/mygz.tar" , ArchiveFileUtils . toGZipUri ( parent ) . toString ( ) )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertThat ( Material . matchMaterial ( String . valueOf ( material . getId ( ) ) ) , is ( material ) )
assertNotNullOrEmpty ( "Tags should never be null." , tags )
Assert . isTrue ( users . size ( ) > 0 )
assertTrue ( ( "actual count: " + count ) , count <= 2 )
assertTrue ( "Audit log count should greater than zero" , auditLogs . size ( ) >= 15 )
assertEquals ( 0. , iCosts , 0.01 )
Assert . assertEquals ( "Mismatch between system property (or default) and OgnlRuntime _useStricterInvocation flag state ?" , optionDefinedInEnvironment ? flagValueFromEnvironment : defaultValue , OgnlRuntime . getUseStricterInvocationValue ( ) )
assertEquals ( 2 , cache . listPrivileges ( null , null , null , new Server ( "server1" ) ) . size ( ) )
assertEquals ( "Hello There. Here is some text." , text )
assertEquals ( "x y + ; x y -" , this . codeGenerator . getPostFixExpression ( ) )
mockery . assertIsSatisfied ( )
assertTrue ( count == 5 )
assertXmlEqual ( expected , formatterOutput )
assertEquals ( publisher , result )
assertFalse ( AbstractAnalyticsService . hasMetrics ( css1 ) )
assertTrue ( setCookie . contains ( "; Secure" ) )
assertThat ( PlainDate . MAX . getMinimum ( model . weekOfYear ( ) ) , is ( 1 ) )
assertEquals ( "LOCAL:  \nz.L. Frau\naddr2\naddr1\n121212 City1\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null ) )
Assert . assertTrue ( FileUtil . gitDirectoriesAreEqual ( neq1 , neq2 ) )
assertEquals ( asList ( info ( mdcValues , message , arg1 ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "STRINGTEST" , t . name )
Assert . assertEquals ( "EXCEPTION: class java.lang.IllegalStateException" , response )
Assert . assertEquals ( true , authServerName . equals ( serverName ) )
assertThat ( confirmation . getStatus ( ) , equalTo ( status ) )
Assert . assertNull ( defaultApp )
assertEquals ( "test" , result )
assertTrue ( "Repository should contain newly added statement" , testCon . hasStatement ( name , name , nameBob , false ) )
assertEquals ( expectedValue , advice . cacheGetSingle ( pjp ) )
assertEquals ( expected , actual )
assertEquals ( "A Value with interpolated and real data should return the real value on getValue()." , realValue , victim . getValue ( ) , EPSILON )
Assert . assertNotNull ( registry )
assertThat ( result , is ( jsonBoolean ( true ) ) )
assertTrue ( pattern . matches ( "-1.1" ) )
Assert . assertEquals ( "Hello, World!" , hello . sayHello ( ) )
assertThat ( sel , is ( namedIndividual ) )
assertThat ( result , is ( 7L ) )
assertBeanValidation ( json , "query.metric[0].aggregators[0].m_divisor may not be zero" )
assertTrue ( "Failed to create reader" , cr . ready ( ) )
assertEquals ( 20 , rs . getInt ( 1 ) )
assertTrue ( output , output . matches ( "(?s).*Usage: set.*" ) )
assertThat ( ( String ) dest . get ( "aaa" ) , is ( "111" ) )
Assert . assertEquals ( "[a, b, c, d, e]" , inv . invokeFunction ( "split" , "a.b.c.d.e" ) . toString ( ) )
assertEquals ( list , parser ( "// comment\n ( str)" ) . object ( "" ) )
assertFalse ( validator . validate ( EntityNames . STUDENT_COMPETENCY , idsToValidate ) . containsAll ( idsToValidate ) )
assertThat ( branchFilter , instanceOf ( NameBasedFilter . class ) )
Assert . assertEquals ( null , vo )
assertTrue ( resolver . resolve ( ) == null )
Assert . assertEquals ( 0 , analyser . getVariableTransportCostsAtActivity ( route . getStart ( ) , route ) , 0.01 )
assertNotNull ( fileOperationMap . getOperation ( operation . getPnfsId ( ) ) )
assertTrue ( success . get ( ) )
assertEquals ( 1 , subgraph . size ( ) )
Assert . assertEquals ( AgentConstants . PLATFORM_OPENSTACK , this . agent . parameters )
assertEquals ( fieldList , data . getFieldList ( ) )
assertEquals ( "<p><img src=\"http://example.com/\" alt=\"Image\" /></p><p><img /></p>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEquals ( "Name" , f . getHumanName ( ) )
assertEquals ( 0 , errors . size ( ) )
assertEquals ( 908742 , b . hashCode ( ) )
assertNotNull ( start . getLastBuild ( ) )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  id in (?,?,?) " ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertEquals ( generatedJavascript , expectedJavascript )
assertEquals ( deleteTweet , deleteTweetDuplicate )
Assert . assertEquals ( ( Integer ) 1 , res )
assertTrue ( false )
assertEquals ( 6. * 3600. + 6. * 60. + 12. , sec , 0.01 )
assertThat ( str , nullValue ( ) )
assertThat ( result , is ( equalTo ( ( List < String > ) of ( "AA" , "BB" ) ) ) )
assertEquals ( 2 , findings . size ( ) )
assertValid ( "//s:Body/w:receiveUserResponse" , response )
assertNoMessage ( getMockEndpoint ( ) )
assertEquals ( "123 Some Road" , result . get ( ) )
assertThat ( selected , is ( infoPresenter2 ) )
assertEquals ( body . toString ( ) , "<html><body><h1>Resource not found</h1></body></html>" )
assertNotNull ( "EngineFactory is not configured." , factory )
assertEquals ( 1 , objects . size ( ) )
assertEquals ( expected , removed )
assertEquals ( "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, " + "11, 12, 13, 14, 15, 16, 17, 18, 19, " + "20, 21, 22, 23, 24, 25]" , algorithm . getQuestions ( ) . toString ( ) )
TestCase . assertTrue ( result )
assertFalse ( result )
assertTrue ( slice . events . isEmpty ( ) )
assertEquals ( Color . BLUE , conversions . newInstance ( "BLUE" ) . get ( color ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertThat ( utc . toString ( TimeScale . UTC ) , is ( "UTC-2012-06-30T23:59:60,123456789Z" ) )
assertEquals ( 1 , activeStreamCount ( ) )
assertTrue ( determinized . equals ( fstDeterminized ) )
assertTrue ( ok )
assertEquals ( "" , result )
assertEquals ( "wrong setter selected" , VerticalLayout . class . getMethod ( "setHeight" , String . class ) , m )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertFalse ( tagNode . isTerse ( template ) )
Assert . assertEquals ( "in" , statement . getExpression ( ) )
assertPowerToughness ( playerA , "Gurmag Angler" , 8 , 8 )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertNotNull ( store . get ( key , new String [ 0 ] ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertNotNull ( result )
assertEquals ( "7777777" , new String ( buffer , CharsetNames . UTF_8 ) )
assertEquals ( 1 , result . getNuOfDimensions ( ) )
assertEquals ( password . getPassword ( ) , "MySecretPass" )
assertEquals ( "3" , person . order ( ) )
assertEquals ( 0 , callbackPacketsQueue . size ( ) )
Assert . assertTrue ( fsm . consumeLog ( ) . equals ( "entryOff-exitOff-entryOperating-entryMoving-" ) )
assertThat ( repositories , is ( nullValue ( ) ) )
assertTrue ( rec_cnt == 3 )
Assert . assertFalse ( result )
assertMatrixEquals ( Ad , A )
assertNull ( twinMetadata )
assertEquals ( "Number of returned transcripts do not match" , 196501 , count . firstResult ( ) . longValue ( ) )
assertThat ( control . matches ( "/clients/3/subtask/5/" ) , is ( true ) )
assertEquals ( "Population characteristic" , pm . getCategoryName ( ) )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( true ) ) )
assertArrayEquals ( expected , result , 0.000001 )
assertTrue ( Transforms . abs ( sub1 . sub ( arr2 ) . div ( sub1 ) ) . maxNumber ( ) . doubleValue ( ) < 0.01 )
Assert . assertEquals ( dataHoraRecibo , consultaRetorno . getDataHoraRecibo ( ) )
assertArrayEquals ( expected , actualHands . getHandsComp ( ) )
Assert . assertNotNull ( "Default module not found" , def )
assertEquals ( "world" , message . toString ( ) )
assertEquals ( UUIDSuffixKit . getId ( ) , settings . getKitId ( ) )
assertThat ( valid , is ( equalTo ( false ) ) )
assertEquals ( 100d * SCROLL_LEFT / ( SCROLL_WIDTH - CLIENT_WIDTH ) , position , 0 )
assertFalse ( array . isView ( ) )
assertEquals ( new RegisterDocumentSet ( ) , result )
assertEquals ( ChargingCapability . V_480V_3_PHASE_16A , ChargingCapability . fromConnector ( connector ) )
Assert . assertFalse ( faceted . install ( facet ) )
assertEquals ( 204 , response . getStatus ( ) )
assertThat ( abc , is ( new String [ ] { "eureka" } ) )
assertEquals ( expResult , result )
Assert . assertEquals ( HASH_LENGTH , hash . length ( ) )
Assert . assertEquals ( "136.5" , response )
assertEquals ( "http://apache.org/shindig?hello=world" , builder . toString ( ) )
assertEquals ( "<html><head><title>One</title></head><frameset><frame /><frame /></frameset></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "Value is incorrect" , map , value )
assertTrue ( baseConsumerClass . exists ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( motivo , consultaRetorno . getMotivo ( ) )
assertProcessInstanceCompleted ( processInstance )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "/my/foo/is/cool" , rewriteEngine . processInbound ( null , null , c , url ) )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , secondOutbound )
Assert . assertEquals ( expected , actual )
assertEquals ( false , options . isRecursive ( ) )
context . assertIsSatisfied ( )
assertEquals ( Sets . newHashSet ( 1 , 2 ) , Sets . newHashSet ( q . asList ( ) ) )
assertThrown ( val , promise2 )
assertNotNull ( result )
assertSame ( "Mismatched instance for name=" + name , expected , actual )
assertTrue ( cc . toString ( ) . contains ( "no-cache=\"c,d\"" ) )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertEquals ( " Actual doesn't match with expected. " , new Integer ( 0 ) , new Integer ( cs . getRow ( ) ) )
assertEquals ( featureService , tag . getFeatureService ( ) )
arrays . assertHasSize ( description , null , 8 )
assertTrue ( result == null )
Assert . assertEquals ( b , m . getBook ( ) )
assertEquals ( new Long ( 123 ) , result )
Assert . assertEquals ( expResult , result , 0.0 )
assertTrue ( actionServiceRegistered )
Assert . assertEquals ( new Path ( "obj1.nestedSimpleInteger" ) , fullPath )
Assert . assertEquals ( "Block result is wrong" , new Integer ( 1 ) , o )
assertEquals ( value , columnMaxValue , LARGEST_MIN_MAX_ERROR )
assertEquals ( ( map . get ( "child2" ) ) , ( map . get ( "child1" ) ) )
assertNull ( tree . getLast ( ) )
assertEquals ( "{k1:{f:1}}" , o )
assertTrue ( cache . contains ( "a" ) )
assertEquals ( "jsmith@aaa.$4" , mappedIdentity )
assertThat ( db . getName ( ) , is ( DB_1 . getBytes ( UTF_8 ) ) )
assertThat ( uri . getFragment ( ) , equalTo ( "world" ) )
Assert . assertTrue ( true )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( "min-fresh=10" , wrapper . getFirstHeader ( "Cache-Control" ) . getValue ( ) )
assertEquals ( "graph has wrong average value, should be 0.2916" , ( ( 1d / 6d ) + ( 1d / 2d ) + ( 1d / 2d ) + 0d ) / 4d , average , 0.00001 )
assertThat ( passwordFile . getAbsolutePath ( ) , is ( underTest . getPath ( ) ) )
assertFalse ( violation )
assertTrue ( fs . exists ( srcFilePath ) )
assertThat ( name , is ( NAME ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( getMapping1 , getMapping1Duplicate )
assertEquals ( "#: expected type: String, found: Integer" , actual )
assertEquals ( tag . doStartTag ( ) , Tag . EVAL_BODY_INCLUDE )
assertTrue ( events . size ( ) == 1 )
assertEquals ( true , result )
assertEquals ( 3 , searchScreenshots . size ( ) )
assertEquals ( "Expected 10 results!" , 10 , n )
Assert . assertTrue ( children . size ( ) > 0 )
Assert . assertNotNull ( rangerServiceDef )
Assert . assertEquals ( "bpmsAdmin" , config . getUserName ( ) )
assertEquals ( "<x />" , DirectBProcessor . inMessage )
Assert . assertEquals ( "current" , authzDepConf . get ( currentVar . getVar ( ) ) )
arrays . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Yoda" , "Yoda" , "C-3PO" ) )
assertEquals ( 2 , em . createQuery ( query ) . getResultList ( ) . size ( ) )
assertEquals ( 200 , response . statusCode ( ) )
assertTrue ( true )
Assert . assertEquals ( getElement ( "PID.8" ) , handler . getSex ( ) )
Assert . assertArrayEquals ( expected , actual . toArray ( ) )
Assert . assertEquals ( builder . toString ( ) , expected , actual , tol )
assertEquals ( count1 , repository . execute ( countOp ) . longValue ( ) )
Assert . assertEquals ( "(nt_change_duplication (nt_range (nt_point_location (nt_base_location (nt_number 123))) _ (nt_point_location (nt_base_location (nt_number 124)))) dup)" , nt_change_duplication . toStringTree ( parser ) )
assertSingleGruxAlbum ( repository . findOne ( bigWhiskey . getId ( ) ) )
assertEquals ( newValue , rot . getRateOfTurn ( ) , 0.1 )
Assert . assertEquals ( expected , new SmiliesFormatter ( null , container ) . format ( input , options ) )
assertEquals ( "Accumulator state should have been checkpointed" , 42 , acc . getSnapshotValue ( ) )
Assert . assertEquals ( expected , FileCommands . ftDeleteFile ( 1 , null , filePaths ) . toString ( ) )
assertEquals ( server . getConfig ( ) . get ( "testserver.a" ) , "default" )
assertThat ( response . getStatus ( ) . getCode ( ) , is ( HttpStatus . OK ) )
assertEquals ( BODSentence . class , gl . sentenceType )
Assert . assertTrue ( success )
assertEquals ( "a + b > 5 AND c < 3" , result . toString ( ) )
Assert . assertEquals ( "涓�|瑗夸集�╀�" , words )
Assert . assertThat ( values , Matchers . contains ( "value1.0" , "value0.5;p=v" ) )
assertEquals ( uploadLocation + FileUtils . toDir ( stateToken ) + filename + "." + subExt + extension , absFile )
assertTrue ( MessageEncodeDecode . checkIsSameList ( m1 . bufferList ( ) , m2 . bufferList ( ) ) )
assertNotNull ( result )
assertCapturedHint ( expected , capture , EncodeHintType . CHARACTER_SET )
Assert . fail ( "Mechanism name could not be null" )
Assert . assertEquals ( "select from test" , select . toQ ( ) )
assertEquals ( "samedi, janvier 01" , DateUtils . formatFriendlyDate ( DateUtils . nowUtc ( ) , Locale . FRANCE ) )
assertTrue ( getAlphaConstraint ( ksession ) instanceof LambdaConstraint )
assertTrue ( "Available: " + available , found )
assertTrue ( newYearsEve . isBefore ( newYearsDay ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_USHORT )
assertEquals ( 0 , services . size ( ) )
assertThat ( subject . toString ( ) , is ( "% http://www.ripe.net/data-tools/db/faq/faq-db/why-did-you-receive-the-error-201-access-denied\n" ) )
assertEquals ( DEFAULT_CONTENT_TYPE , connection . getHeaders ( ) . get ( "Content-Type" ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( qsCallback . asDocument ( ) , is ( b . build ( ) ) )
Assert . assertEquals ( fileComparer . removeLinesContainingClassname ( file1AsList , "test" + removeClassLine ) , expectedResult )
Assert . assertEquals ( getManager ( ) . count ( ) , count - 1 )
assertEquals ( true , actualObj ( ) . getBoolean ( "uniqueItems" ) )
Assert . assertTrue ( policy . isResponseCacheable ( "GET" , response ) )
assertEquals ( i1 , i2 )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Connect action=\"https://example.com\" method=\"GET\"/>" , elem . toXml ( ) )
assertSame ( cache , nativeCache )
assertEquals ( score , smsd1 . getFragmentSize ( 0 ) )
Assert . assertFalse ( "Capabilities should NOT match" , first . matchesCapabilities ( map ) )
assertEquals ( true , bm . isBitSet ( 63 ) )
Assert . assertEquals ( expected , Strings . capitalizeFirstChar ( data ) )
assertTrue ( testResults . getInvoked ( ) )
Assert . fail ( "Test encountered an unexpected exception." )
assertEquals ( 1 , result . apiCalls )
assertEquals ( "string" , param . toJson ( ) )
Assert . assertTrue ( report . isSuccess ( ) )
assertNull ( token )
assertMappingEquals ( new PropertyAccessor ( type , type , type ) , GeographicCRS . class , "getCoordinateSystem" , "coordinateSystem" , "coordinateSystem" , "Coordinate system" , EllipsoidalCS . class , GeodeticCRS . class , "getDatum" , "datum" , "datum" , "Datum" , GeodeticDatum . class , IdentifiedObject . class , "getName" , "name" , "name" , "Name" , ReferenceIdentifier . class , IdentifiedObject . class , "getAlias" , "alias" , "alias" , "Alias" , GenericName [ ] . class , ReferenceSystem . class , "getDomainOfValidity" , "domainOfValidity" , "domainOfValidity" , "Domain of validity" , Extent . class , IdentifiedObject . class , "getIdentifiers" , "identifiers" , "identifier" , "Identifiers" , ReferenceIdentifier [ ] . class , IdentifiedObject . class , "getRemarks" , "remarks" , "remarks" , "Remarks" , InternationalString . class , ReferenceSystem . class , "getScope" , "scope" , "SC_CRS.scope" , "Scope" , InternationalString . class )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "distinct($current.x)" , p . toString ( ) )
Assert . assertNotNull ( url )
assertEquals ( testNewUrl , jobEntryHadoopCopyFiles . loadURL ( testUrl , testNcName , metaStore , mappings ) )
assertThatSql ( query , is ( "SELECT t1.c1,t2.c2 FROM table1 AS t1 INNER JOIN table2 as t2 ON t1.c0 = t2.c0" ) )
assertEqualsIgnoreWhitespace ( expected , drl )
assertEquals ( 6 , changes . size ( ) )
assertThat ( collectionName , endsWith ( "s" ) )
assertThat ( value . toString ( ) , is ( equalTo ( "message" ) ) )
assertSame ( value , XenqttUtil . validateGreaterThanOrEqualTo ( "integer" , value , max ) )
Assert . assertEquals ( ( Integer ) 1 , res )
assertThat ( testOutcome . getTags ( ) , allOf ( hasItem ( TestTag . withName ( "important feature" ) . andType ( "feature" ) ) , hasItem ( TestTag . withName ( "simple story" ) . andType ( "story" ) ) ) )
Assert . assertEquals ( "driver.close();" , result )
assertEquals ( expected , result )
assertScheduleWhenTuplesAvailableStrategy ( strategy , 1 )
Assert . assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertNull ( rval )
assertThat ( tester . response . getStatus ( ) , is ( equalTo ( HttpServletResponse . SC_OK ) ) )
assertEquals ( oneVarFg , fgfile )
Assert . assertEquals ( 150 , config . getTimeToIdleSeconds ( ) )
assertEquals ( "Main class name" , "org.apache.felix.main.Main" , new FelixPlatformBuilderF100T122 ( m_bundleContext , "version" ) . getMainClassName ( ) )
assertThat ( route , canHandle ( ClientsController . class , "list" ) )
assertEquals ( expectedResult , result )
assertContains ( e . getMessage ( ) , "'first'" )
assertBuildException ( "password" )
assertEquals ( "'test.string'" , "hello" , config . getString ( "test.string" ) )
assertTrue ( extSources . size ( ) > 0 )
assertThat ( checkLocation ( 1 , 1 , "hallo" ) , is ( 0 ) )
assertEquals ( "bar" , lr . get ( 2 ) . get ( ) )
assertNotSame ( fixture , copy )
assertEquals ( update1 , update1Duplicate )
assertEquals ( "failed result.toOptional() must be Optional.empty()" , result . toOptional ( ) , Optional . < Integer > empty ( ) )
assertEquals ( "Base for strings is wrong" , Double . valueOf ( 3.2d ) , parsed )
assertThat ( response . getStatusLine ( ) . getStatusCode ( ) , is ( HttpStatus . SC_INTERNAL_SERVER_ERROR ) )
assertThat ( set . size ( ) , is ( 0 ) )
assertThat ( result , is ( jsonNumber ( 1 ) ) )
assertEquals ( "Basic realm=\"vertx-web\"" , resp . getHeader ( "WWW-Authenticate" ) )
assertEquals ( json , BsonCodec . bsonObjectToJsonObject ( bson ) )
Assert . assertEquals ( "Remote invocation of EJB was not successful" , StatefulBeanRemote . ANSWER , response )
Assert . assertNotNull ( factory )
assertNotNull ( t )
assertThat ( next . join ( ) , is ( VALUE + VALUE ) )
assertSame ( is , this . testee . getResource ( "foo" ) )
assertLife ( playerB , 17 )
assertEquals ( "{X:'{foo:\\'bar\\',baz:\\'quz\\'}'}" , s . serialize ( m ) )
assertEquals ( putMapping1 , putMapping1Duplicate )
assertObjectEquals ( "{}" , t )
assertEquals ( 1 , posts . size ( ) )
assertThat ( results , is ( Arrays . asList ( "A" , "B" , "C" , "D" ) ) )
assertEquals ( "test (REG_EXPAND_SZ)" , value . toString ( ) )
Assert . assertEquals ( "da2794f442f08a73ac9eef7f9378dd7a5bbcf8c6" , fp )
assertEquals ( post . calculateRatingChanges ( vote ) , 0 )
assertEquals ( 11 , p . getTotalPages ( ) )
assertEquals ( 1 , handler . getCalledTimes ( ) )
assertThat ( testOutcome . getSuccessCount ( ) , is ( 3 ) )
assertTrue ( "Exception raised" , exceptionRaised )
assertFalse ( aggregator . usages ( ) . iterator ( ) . hasNext ( ) )
assertThat ( result , isFailedCommand ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertTrue ( ! articles . isEmpty ( ) )
assertEquals ( "Expenses 9/12/2002\n" + " \tDinner\t$10.00\n" + " \tBreakfast\t$5.00\n" + "\n" + "Meal expenses $15.00\n" + "Total $15.00" , printer . getText ( ) )
assertTrue ( references . isEmpty ( ) )
assertEquals ( "Should return failure" , "failure" , jsonObj . get ( "status" ) . getAsString ( ) )
Assert . assertEquals ( "Value is incorrect" , map , value )
assertEquals ( "Exists response" , Boolean . TRUE , exists )
assertTrue ( "fromByteArray() should have detected malformed record" , recordList . isEmpty ( ) )
assertEquals ( List ( "1" , "2" , "3" ) , collectedList )
assertEquals ( "{\"not\":{\"type\":\"boolean\"}}" , actual )
assertNotNull ( updatedData )
assertTvShowResultsPage ( results )
assertThat ( house . cat . firstLeg . birthDay , is ( equalTo ( ( Calendar ) new GregorianCalendar ( 2010 , 4 , 10 ) ) ) )
assertEquals ( mockRootPom , converter . convertFromText ( ROOT_MODULE_SYMBOL , null , null ) )
assertTrue ( foundJarFile )
this . assertLoadBlobViaTuples ( tuples , true , false )
assertTrue ( "weird password chains are fine" , jdbcAuthProvider . comparePasswords ( PASSWORD , MD5_PASSWORD ) )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertTrue ( onExceptionCalled [ 0 ] )
assertTrue ( exception )
assertEquals ( "3.yes,1.A;3.yes,1.C;3.yes,1.D;3.yes,5.hello;3.yes,5.world;" , stringWriter . toString ( ) )
assertFalse ( container . containsId ( new RowId ( new Object [ ] { 1337 } ) ) )
assertEquals ( "" , converter . format ( null ) )
assertEqualsWithoutWhiteSpaces ( "" , Hull )
assertEquals ( numberOfFieldsInSimpleClass , 1 )
assertEquals ( ( Integer ) 6 , sum . getSum ( ) )
assertArrayEquals ( expected , zeroOne . split ( ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertions . startsWith ( sequence )
assertEquals ( 6 , tokens . size ( ) )
assertArrayEquals ( transactionViewModel . getBytes ( ) , TransactionViewModel . fromHash ( tangle , transactionViewModel . getHash ( ) ) . getBytes ( ) )
assertLoadsValidConfig ( )
assertThat ( assetCaptor . getValue ( ) . name ( ) , is ( "packages/foo/bar" ) )
assertions . hasSize ( 5 )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertNull ( "Expected null parent" , instance . getParent ( ) )
assertNull ( writer . docMgr )
assertEquals ( "Wrong value" , TEST_VALUE , interpolator . resolve ( TEST_PREFIX + ':' + TEST_NAME ) )
Assert . assertTrue ( isOk )
assertEquals ( Integer . valueOf ( 50 ) , value )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "[= foo]" , m . toString ( ) )
assertEquals ( 1 , result )
Assert . assertEquals ( 4 , collector . actualResults . size ( ) )
assertFalse ( checkTest )
Assert . assertEquals ( 0.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
Assert . fail ( "Have not found the 'doDynamic' declared method for FooClass" )
assertEquals ( "foo" , instance . setByConstructor )
assertThat ( token . expiresAt ( new DateTime ( newTime ( 10 , 1 , 1 ) ) ) , is ( true ) )
assertEquals ( 1 , hookClass . connectionException )
assertNotNull ( NonTerminal . STATEMENTS . buildAbstractSyntaxTree ( tokenStream ) )
assertFalse ( resourceRelationBoundary . isAddableAsProvidedResourceToResourceGroup ( master , slaveName ) )
assertTrue ( cache . contains ( key ) )
Assert . assertTrue ( true )
assertThat ( driver . findElement ( By . id ( "exceptionCode" ) ) . getText ( ) , is ( "e.xx.9999" ) )
assertTrue ( result instanceof TXTTextChunkBuilder )
assertValidationIsFalse ( )
assertThat ( properties , is ( expected ) )
assertThat ( ids , contains ( pid . getValue ( ) ) )
assertThat ( log . getLogEntries ( 5 , 10 , quorumId ) , resultsIn ( equalTo ( replacementEntries ) ) )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( noOfSolutions , is ( 88 ) )
assertNotNull ( myMojo )
assertThat ( strings , contains ( "hello" , "world" ) )
Assert . assertEquals ( "Value is incorrect" , map ( MONTH_DAY_STRING , "test" ) , value )
assertEquals ( result , "10 years ago" )
assertEquals ( VALUE1 + VALUE2 , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertEquals ( u . getSubusers ( ) . get ( 0 ) , subUserInfo . get ( ) )
Assert . assertArrayEquals ( "Not all expected favorites are returned." , expectedResult ( queryResult ) . toArray ( ) , results . toArray ( ) )
assertTrue ( batchResults . hasNext ( ) )
Assert . assertEquals ( 2 , forum . getTotalTopics ( ) )
assertThat ( result , is ( expected ) )
assertNotNull ( con . getMetaData ( ) )
assertEquals ( tropo . text ( ) , "{\"tropo\":[{\"conference\":{\"id\":\"1234\",\"mute\":false,\"playTones\":false,\"terminator\":\"#\",\"promptLogSecurity\":\"suppress\"}}]}" )
assertEquals ( "Deleted entity should match original" , revisions . getLatestRevision ( ) . getEntity ( ) . getName ( ) , p . getName ( ) )
assertFalse ( ws . getKeepAlive ( ) )
Assert . assertEquals ( "select babyfish_shared_alias_0 " + "from org.babyfishdemo.jpacriteria.entities.Employee babyfish_shared_alias_0" , createQueryTemplate ( cq ) . toString ( ) )
assertEquals ( "?p1=v1&p2=v2" , query . toString ( ) )
assertTrue ( vehiclesContainDodge )
assertEquals ( 5 , instance . evaluations )
assertSame ( "Wrong default bean factory" , DefaultBeanFactory . INSTANCE , helper . getDefaultBeanFactory ( ) )
assertThat ( fe , notNullValue ( ) )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 299.0 , 299.0 )
Assert . assertEquals ( 0 , testHelper . snapshotAfterMigration . getVariables ( ) . size ( ) )
assertEquals ( 1 , CollQueryFactory . from ( entity , Collections . singleton ( new Entity ( ) ) ) . where ( $ ( entity . getBoolean2 ( ) ) . eq ( Boolean . TRUE ) ) . fetchCount ( ) )
assertThat ( result , contains ( v_121 , v_122 ) )
Assert . assertEquals ( 9 , map . size ( ) )
assertMissing ( "test" )
Assert . assertEquals ( "bob" , token . getUserName ( ) )
assertTrue ( canHandle ( handlerInput ) )
assertSame ( "Wrong node" , node , model . getTrackedNode ( selector ) )
Assert . assertNotNull ( savedTenant2 )
XMLAssert . assertXMLEqual ( expected , form . format ( result ) )
assertResultSet ( res )
assertThat ( result , is ( "this is a test\n" ) )
assertTrue ( diff > - TIME_DIFF && diff < TIME_DIFF )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 1.0 , getMetric ( ) . calculate ( getSession ( ) ) , getDelta ( ) )
assertEquals ( dataSet . getRowCount ( ) , 50 )
assertTrue ( "Headers tar file '" + headersTarFile + "' for sdk '" + sdk + "' and configuration '" + configuration + "' does not exist." , headersTarFile . exists ( ) )
assertEqualsQL ( Ar , ql . factor ( new DenseMatrix ( Ar ) ) )
assertEquals ( "Hawk id=\"someId\",mac=\"LTIL+KWUhgH5+j+6SADI96HSA6MXlFMwhU1lIohkRo0=\",ts=\"1\",nonce=\"abc\"" , h . toString ( ) )
assertTrue ( "Failed permission check was not logged" , loggedFailedPermissionCheck ( AUDIT_LOG_FILE , USER ) )
assertEquals ( "x\n" , found )
Assert . assertEquals ( jsonString , "{\"name\":\"涓���\",\"id\":1,\"brithDate\":null,\"money\":1.1}" )
assertEquals ( ( VecTools . multiply ( newOutput , outputGrad ) - VecTools . multiply ( output , outputGrad ) ) / eps , grad . get ( i ) , 1e-5 )
assertTrue ( check )
assertThat ( identityService . createUserQuery ( ) . userId ( user . getId ( ) ) . count ( ) , is ( 1L ) )
Assert . assertEquals ( "test" , stack . top ( ) . get ( "test" , null ) )
assertNull ( entry )
assertEquals ( 30.0 , v . getLatestArrival ( ) , 0.01 )
assertThat ( result , is ( jsonString ( "foo" ) ) )
Assert . assertEquals ( expectedOutput , output )
assertNull ( response . getHeader ( SecWebSocketVersionInterceptor . SEC_WEB_SOCKET_PROTOCOL_HEADER ) )
assertEquals ( "<p>Hello</p>\n<p>There</p>" , divs . html ( ) )
assertEquals ( customUiTemplateUpdated . getStatus ( ) , customUiTemplate . getStatus ( ) )
assertEquals ( "regexp condition serialization is wrong" , expected , actual )
assertFalse ( "WorkflowDocument should not indicate quickstart as SuperUser" , document . isValidAction ( ActionType . SU_DISAPPROVE ) )
assertThat ( description . toString ( ) , is ( "A JSON array containing: a string containing \"joy\"" ) )
assertThat ( searchResponse . getHits ( ) . totalHits ( ) , is ( 1L ) )
assertAllCommandsUsed ( )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertNull ( vm . getInstanceOfferingUuid ( ) )
assertNotNull ( entity . getId ( ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertThat ( formatter . format ( jcal ) , is ( "April/14, Heisei 29" ) )
assertMedianIs ( 3D )
assertEquals ( Minutes . of ( - 15 ) , test5 . multipliedBy ( - 3 ) )
Assert . assertArrayEquals ( answer , result , 1e-5 )
assertEquals ( testGen1 . getLookupGroup ( testLSN ) . toString ( ) , testGen2 . getLookupGroup ( testLSN ) . toString ( ) )
assertEquals ( header , conditionals . toHeaders ( ) . getFirstHeader ( HeaderConstants . IF_UNMODIFIED_SINCE ) . get ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( "<!DOCTYPE html><!-- a comment -->One <qux />Two" , TextUtil . stripNewlines ( doc . html ( ) ) )
Assert . assertEquals ( "<table border=\"1\" cellspacing=\"0\">\n" + "<tr>\n" + "<th class=\"pass\">Col 1</th>\n" + "<th class=\"pass\">Col 2</th>\n" + "</tr>\n" + "<tr>\n" + "<td class=\"pass\">A1</td>\n" + "<td class=\"pass\">A2</td>\n" + "</tr>\n" + "<tr>\n" + "<td class=\"pass\">B1</td>\n" + "<td class=\"pass\">B2</td>\n" + "</tr>\n" + "</table>" , TableTestUtils . getHtml ( this . tableVerifier , "table" ) )
assertEquals ( 0.363636 , columnInformation . getNullRate ( ) , 0.01 )
assertTrue ( page . getContent ( ) . contains ( "DISABLED = false" ) )
assertEquals ( 1 , graph . countVertices ( "Person" ) )
assertMockEndpointsSatisfied ( )
Assert . assertTrue ( permissions . toString ( ) , permissions . isEmpty ( ) )
assertEquals ( "dois nonilh玫es de inteiros" , actual )
assertProductEvidence ( result , product )
assertThat ( counter , not ( equalTo ( otherCounter ) ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 1 , result )
assertEquals ( false , maybeName . isPresent ( ) )
assertThat ( page . hasError ( ) , is ( false ) )
assertEquals ( callback . called , 1 , "One immediate callback" )
assertTrue ( list . isEmpty ( ) )
assertNotNull ( result )
assertEquals ( 1 , getStartBatchCount ( ) )
assertUnselectableDatesSelectedWhileHasValidSelection ( model )
assertTrue ( result instanceof V8Object )
assertEquals ( tropo . text ( ) , "{\"tropo\":[{\"call\":{\"to\":\"+13055551212\"}}]}" )
assertTrue ( Files . exists ( target ) )
assertNotNull ( result )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-managed:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertEquals ( 40 , msg . getAttachments ( ) . size ( ) )
Assert . assertNull ( getReplHeader ( ) )
assertNull ( out )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD1 == 'enrichValue1') OR (SOURCEFIELD2 == 'sourceValue' AND TARGETFIELD2 == 'targetValue' AND ENRICHFIELD2 == 'enrichValue2')" , transformed )
assertEquals ( 1000 , lruMap . size ( ) )
iterables . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Luke" , "Yoda" ) )
assertTrue ( blobStore . delete ( tileRange ) )
assertThat ( notificationElement . getCssValue ( "background-image" ) , containsString ( "chameleon/img/grad" ) )
assertEquals ( true , classUnderTest . IsZeroFill ( ) )
Assert . assertNotNull ( testControlBlock )
assertEquals ( 2 , tree . calculateDepth ( ) )
assertEquals ( afterAesEncrypt2 , pc . encrypt ( randomStr , replyMsg2 ) )
assertEquals ( 1 , e . getMessageReference ( ) . getContent ( ) . size ( ) )
assertTrue ( responseBody . contains ( "HTTP/1.1 404 Not Found" ) )
Assert . assertTrue ( expect ( o , true ) )
assertResourceContains ( "function" )
assertEquals ( expected , result )
assertCorrectList ( )
assertPaintingResult ( objects )
assertEquals ( 14 , result )
assertArrayEquals ( "The branch name array is incorrect" , new String [ ] { "stream" } , scm . getBranchNames ( EMPTY_VARIABLE_RESOLVER ) )
assertThat ( id . nextId ( ) + 1 , is ( id . nextId ( ) ) )
assertEquals ( "x=(b a);(b a)\n" , found )
JSONAssert . assertEquals ( expectedData , bulk . getData ( new Gson ( ) ) . toString ( ) , false )
assertThat ( m1 , is ( m2 ) )
assertTrue ( xa . isHandleRecoveryInternally ( ) )
softly . assertThat ( skipInstallationChecker )
Assert . assertTrue ( "Out of bounds (" + result [ 0 ] + " > " + upper [ 0 ] + ")" , result [ 0 ] <= upper [ 0 ] )
Asn1UtilTest . assertEncoded ( RFC3779_APPENDIX_B_EXAMPLE_1 , subject . ipAddressBlocksToDer ( resources ) )
testHelper . assertProcessEnded ( testHelper . snapshotBeforeMigration . getProcessInstanceId ( ) )
Assert . fail ( )
Assert . assertEquals ( expResult , result )
assertNull ( results )
assertEquals ( 0 , ids . size ( ) )
assertEquals ( "Patch with sparql update created direct container from basic container!" , CONFLICT . getStatusCode ( ) , getStatus ( patch ) )
assertEquals ( i , list . head ( ) . get ( ) )
assertEquals ( expected , str )
assertGroups ( ldapUserGroupCallback , false , false , true , true )
assertThat ( constant ( Descriptions . valueOf ( array ) ) , equalTo ( ( Object ) array ) )
assertNotEquals ( column1 , column2 )
Assert . assertEquals ( urlEsperada , nota . getInfoSuplementar ( ) . getQrCode ( ) )
assertEquals ( expected , sorted )
assertEquals ( expected [ i ] [ y ] [ x ] , ra . get ( ) . get ( ) , 0 )
Assert . assertTrue ( validator . validSequence ( 0 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( USERNAME , principal . getName ( ) )
assertEquals ( "42" , result . getStringValue ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertTrue ( appender . isStarted ( ) )
assertEquals ( "CFBundleVErsion in file '" + infoPList + "' is not the expected version '" + dynamicVersion + "'." , dynamicVersion , new PListAccessor ( infoPList ) . getStringValue ( PListAccessor . KEY_BUNDLE_VERSION ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Cancel" , close )
assertThat ( validator . getErrors ( ) , hasSize ( 0 ) )
assertEquals ( "getId() doesn't return the same value as the previous setId()" , id , domainEntity . getId ( ) )
assertResultsMatch ( select ( windowFunction ( count ( ) ) . orderBy ( field ( "partitionValue1" ) ) . build ( ) . as ( "theCount" ) ) . from ( tableRef ( "WindowFunctionTable" ) ) , "4" , "4" , "4" , "4" , "7" , "7" , "7" )
assertFalse ( filter . matches ( operation , poolInfoMap ) )
assertFalse ( fs . deleteOnExit ( path ) )
assertTrue ( "Wrote incorrect char[] string: " + s , s . equals ( "World" ) )
ValidationTestUtils . assertPatternMatches ( pattern , expected )
assertThat ( result , is ( true ) )
should . assertEquals ( 2 , res . result ( ) . principal ( ) . getInteger ( "provider" ) )
assertEquals ( tags , new MetricResources ( configuration , security , api ) . getTags ( null ) )
assertEquals ( expResult , result )
Assert . assertEquals ( simple . getName ( ) , name )
assertEquals ( 25 , cap . get ( 0 ) )
assertThat ( coords , equalTo ( actualCoords ) )
assertEquals ( "http://tempuri.org" , w . getWorkGroup ( ) . get ( 0 ) . getWorkSummary ( ) . get ( 0 ) . getUrl ( ) . getValue ( ) )
Assert . assertEquals ( "3.14" , this . ghci . pullRaw ( "my_pi" ) . get ( ) )
assertTrue ( result )
assertNull ( cfg . get ( FlumeConfiguration . NODE_STATUS_PORT ) )
assertMockEndpointsSatisfied ( )
assertThat ( newValues , contains ( ciString ( "dev-MNT-2" ) ) )
assertEquals ( MLContextUtil . VERSION_NOT_AVAILABLE , version )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 } OFFSET 4" )
assertThat ( new SelectBest ( ) . selectSolution ( Arrays . asList ( sol1 ) ) , is ( sol1 ) )
assertEquals ( ImmutableMap . of ( "trace-id" , "12345" ) , extracted )
assertEquals ( expected , actual )
assertEquals ( 1 , comparator . compare ( null , solution2 ) )
Assert . assertEquals ( "%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E%3CHangup%2F%3E" , elem . toUrl ( ) )
assertNotNull ( post . equals ( post2 ) )
assertEquals ( "Insert table should have 2 additional records now" , 2 , finalNumberOfRecords - initialNumberOfRecords )
assertEquals ( goldenResponse , responseObserver . firstValue ( ) . get ( ) )
assertNotNull ( testObj . getVendorOptionInfo ( ) )
assertFalse ( Maps . isNullOrEmpty ( map ) )
assertEquals ( 1 , branch_conditions . size ( ) )
assertEqualsJson ( expected , actual )
assertEquals ( - 2d * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
assertEquals ( "myTestId" , history . getId ( ) . getIdPart ( ) )
assertArrayEquals ( refar , d . getResult ( ) )
this . assertLoadBlob ( departments , false , true )
assertNull ( "Not null type is returned for property ''" , container . getType ( "" ) )
assertThat ( result , is ( true ) )
assertEquals ( "Wrong closing interval" , NANO_FACTOR , breaker . getClosingInterval ( ) )
Assert . assertEquals ( MAX_MESSAGES , maxMessages )
assertTrue ( "Error ratio=" + errorRatio + " < " + maxSlopRatio , errorRatio < maxSlopRatio )
assertEquals ( "padLeft() To 10" , Text . valueOf ( "******Test" ) , _text )
assertTrue ( doc . getStatementGroups ( ) . isEmpty ( ) )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( HTTP_BASE ) ) )
assertTrue ( "Asynchronous call was synchronous?" , duration < 100 )
assertFalse ( selectedFile . exists ( ) )
assertEquals ( OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( resultCommand , is ( expectedCommand ) )
assertEquals ( 1305 , result )
assertFalse ( resp . isSuccess ( ) )
MockInterceptor . assertContent ( new String [ ] { "Mock1" , "Mock2" , "Mock3" , "Mock4" , "Mock5" , "Mock6" } , new String [ ] { "Mock6" , "Mock5" , "Mock4" , "Mock3" , "Mock2" , "Mock1" } , new String [ ] { } )
assertThat ( stack . pop ( ) , nullValue ( ) )
assertThat ( tester . getMessages ( FeedbackMessage . ERROR ) . size ( ) , is ( 1 ) )
assertEquals ( "Expected another type of analyzer" , BrazilianAnalyzer . class , analyzer . getClass ( ) )
Assert . assertEquals ( "SELECT 1 = 0\n\tAND ID = ?;" , text )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "2 hours" , 2 , "hour" , 7200 , "s" , "time" ) )
assertSame ( test . adjustInto ( date ) , date )
assertNoneEqual ( otherGroupFqans )
assertEqualsWithoutWhiteSpaces ( "" , union )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertTrue ( subject . isModified ( ) )
Assert . assertTrue ( logLatch . await ( 120 , TimeUnit . SECONDS ) )
assertThat ( result , equalTo ( true ) )
out . assertIsSatisfied ( )
assertSame ( t , TEST_2007_07_15 )
assertEquals ( BigDecimal . TEN , dto . getQty ( ) )
assertEquals ( exp , arr2 )
Assert . assertTrue ( ops . exists ( TEST_SOCKET_BINDING_ADDRESS ) )
assertTrue ( process . getSuppressJoinFailure ( ) )
assertNull ( placeHolder . getSelfReferencedType ( ) )
assertEquals ( tropo . text ( ) , "{\"tropo\":[{\"message\":{\"say\":[{\"value\":\"This is an announcement\"},{\"value\":\"Remember, you have a meeting at 2 PM\"}],\"to\":\"305551212\",\"answerOnMedia\":false,\"channel\":\"VOICE\",\"from\":\"3055551000\",\"network\":\"PSTN\",\"required\":true,\"timeout\":10.1,\"voice\":\"tom\",\"promptLogSecurity\":\"suppress\"}}]}" )
assertThat ( supers , contains ( superProperty ) )
assertThat ( taskConfig . getName ( ) , is ( equalTo ( TASK_NAME ) ) )
assertEquals ( UNPROCESSEABLE , response . getStatus ( ) )
SerializableObjects . assertEquals ( bar , parsedBar )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
Assert . assertEquals ( "Result is not last evaluated expression" , "brie" , o )
assertEquals ( "pong!" , reply . body ( ) )
assertEquals ( 32 , program . getMemSize ( ) )
assertTrue ( "diff too large: " + diff , diff <= 1 )
assertThat ( exists , is ( false ) )
Assert . assertTrue ( queryResult . getSize ( ) >= 1 )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertEquals ( 3 , ( int ) sync ( list . get ( 0 ) ) )
assertEquals ( sourceTexts . length , results . length )
assertEquals ( null , id . getValue ( ) )
assertTrue ( graphContains ( gStore . getDefaultGraph ( ) , new Triple ( s , p , NodeFactoryExtra . parseNode ( "123" ) ) ) )
assertThat ( scriptContent , is ( "Selective Annotation" ) )
assertEquals ( 1 , result )
assertTrue ( true )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertTrue ( passed [ 0 ] , passed [ 0 ] == null )
assertTrue ( result . isResultOK ( ) )
assertEquals ( prefix + "hello" , result )
assertEquals ( "$metadata" , ContextURLBuilder . create ( contextURL ) . toASCIIString ( ) )
assertEquals ( "a,b,c" , out )
assertNotNull ( saslServer )
assertThat ( candidates . size ( ) , is ( 0 ) )
assertEquals ( NativeSelectSetNull . EMPTY_SELECTION_TEXT , getSelect ( ) . getValue ( ) )
assertEquals ( "Value not as expected!" , Float . valueOf ( 0.3f ) , bf . getValue ( ) )
assertEquals ( Integer [ ] . class , command . getProjectedSymbols ( ) . get ( 0 ) . getType ( ) )
assertTrue ( GerritVersionChecker . isCorrectVersion ( GerritVersionChecker . Feature . fileTrigger , testServer ) )
Assert . assertEquals ( unidadeFederativa , eventoRetorno . getOrgao ( ) )
assertObjectEquals ( "{type:'number'}" , x . getSchema ( ) )
assertFalse ( "Wrong result" , list . removeEventListener ( typeBase , listener ) )
assertEquals ( "hello world" , new String ( ObjectConverterUtil . convertToCharArray ( result . getBinaryStream ( ) , - 1 , "ASCII" ) ) )
assertEquals ( 0 , score ( ) )
assertTrue ( ( Boolean ) result )
assertArrayEquals ( new long [ ] { 5 , 7 } , result )
assertEquals ( stream , streamAfterParse )
assertNotEquals ( playlist1 , playlist2 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertTrue ( "overlap of same graph failed" , graph . equalsByElementIds ( overlap ) . collect ( ) . get ( 0 ) )
assertTrue ( testObj . isDataPresent ( ) )
assertContainsAllGames ( games )
assertThat ( taskService . createTaskQuery ( ) . taskCandidateGroup ( "demo" ) . count ( ) , is ( 1L ) )
Assert . assertEquals ( displayNameExpected , displayNameActual )
assertFalse ( matchResult )
assertFalse ( satisfiesPrecondition ( cu ) )
assertEquals ( expResult , result )
Assert . assertEquals ( "Wrong key created" , comparationKey , createdKey )
assertEquals ( "http://host/service?x=y" , uri . toASCIIString ( ) )
assertFalse ( resultMessage ( res , PUT ) , res . passedValidation ( ) )
assertNull ( expectedDataset )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Stop>" + "<genericTag key=\"value\">" + "someText" + "</genericTag>" + "</Stop>" , elem . toXml ( ) )
Assert . assertTrue ( log . contains ( "(@DisabledGroup(value=foo bar))" ) || log . contains ( "(@DisabledGroup(value=\"foo bar\"))" ) )
assertEquals ( expectedPlotsValues , sprites )
assertTrue ( "The entityGroup should be present in online entityGroups list." , fs . getOnlineEntityGroups ( ) . contains ( eg ) )
assertTrue ( wkt , wkt . matches ( WGS84 ) )
Assert . assertEquals ( d , voidable . getDateVoided ( ) )
assertThrows ( CryptoException . class , ( ) -> AESKeyUtils . unwrapKey ( wrapped , wrongKek ) )
Assert . assertEquals ( "created" , result . getReturnMsg ( ) )
Assert . assertEquals ( 1 , mJobMaster . list ( ) . size ( ) )
assertThat ( testInstance . getMySecondInjection ( ) , is ( "Hello" ) )
assertFalse ( root . containsNetwork ( s2 ) )
assertCloseTo ( "Scroll position should be 0" , newRowLocation , rowLocation0 )
assertEquals ( 0x000000000000322dL , native_get_S1_3_m0_0 ( s ) )
runner . assertAllFlowFilesTransferred ( PublishKafka_0_11 . REL_FAILURE , 3 )
assertEquals ( "3.141592653589793" , method . invoke ( normalizer , literal , false ) )
Assert . assertEquals ( "�驻�� 41 �拽�转" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
assertNotNull ( reservation )
assertThat ( result . fullName ( ) , is ( "int" ) )
assertEquals ( "[s,e,c]" , x12 . getContext ( ) . toString ( ) )
Assert . assertEquals ( ExchangePhase . OUT , exchange . getPhase ( ) )
assertThat ( PrettyTime . of ( Locale . US ) . print ( duration , TextWidth . WIDE ) , is ( "1 year and 1 day" ) )
assertThat ( isEquals , is ( true ) )
assertTrue ( p1 . implies ( p2 ) )
Assert . assertEquals ( CORSFilter . CORSRequestType . PRE_FLIGHT , requestType )
assertTrue ( reportData . size ( ) > 0 )
assertEqualsWithoutWhiteSpaces ( "union(){translate([10,20,30])(empty)translate([30,10,20])(empty)}" , moved )
assertEquals ( 5 , posts . size ( ) )
Assert . assertTrue ( isFile ( fc , f ) )
assertIpAddress ( )
Assert . assertEquals ( schema . getVersionField ( ) , "version_number" )
assertEquals ( expResult , result )
assertTrue ( icheck . getFaults ( ) . length > 0 )
Assert . fail ( "MathIllegalArgumentException expected" )
assertNull ( "key1 should hold null" , memcache . get ( KEY1 ) )
assertEquals ( expResult , result )
Assert . assertEquals ( patientPrograms . size ( ) , Util . getResultsSize ( result ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertTrue ( sut . matches ( null ) )
assertTrue ( value . contains ( "cas" ) )
assertEquals ( expected , actual )
assertEquals ( "{\"type\":\"Polygon\",\"coordinates\":[]}" , result )
assertEquals ( "<http://www.semanticweb.org/ontologies/2013/7/untitled-ontology-150#Country3-a>" , val )
assertEquals ( 0.5 , density , .05 )
assertTrue ( Futures . getUnchecked ( collector ) )
assertEquals ( mod , modSer )
assertEquals ( expected , modelWriter . toString ( ) )
Assert . assertThat ( console . getOutputReader ( ) . readLine ( ) , is ( "Hello World" ) )
assertHasMethod ( model , "long proofClear2()" )
assertTrue ( connectFuture . isConnected ( ) )
Assert . assertEquals ( jsc , jscs . get ( 0 ) )
assertEquals ( "<p>This is <s>deleted</s> text</p>\n" , result . message ( ) . get ( 0 ) . getData ( ) )
assertEquals ( "Correct Platform is not fetched" , platform , testPlatform )
assertThat ( this . modelBuilder . getModel ( ) . get ( "m1" ) , is ( equalTo ( ( Object ) "#{expression}" ) ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
Assert . assertEquals ( 1 , countingNotifier . getNotificationCount ( ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "select * from ( select row_.*, rownum rownum_ from ( select * from user ) row_ ) where rownum_ <= 10+100 and rownum_ > 10" , sql )
assertResultsEqual ( renderChild ( net , addNode ) , 101.0 , 202.0 , 303.0 , 401.0 , 502.0 )
assertTrue ( facilitiesManagerEntry . getDirectAdmins ( sess , facility ) . contains ( u ) )
assertThat ( content , is ( nullValue ( ) ) )
assertFalse ( containsDuplicate . containsDuplicate ( nums ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertTrue ( response . contains ( getWebContextVarDefinition ( "FULL_QUALIFIED_URL" , this . fullyQualifiedServerURL ) ) )
assertThat ( duration . isNegative ( ) , equalTo ( false ) )
assertNotNull ( todo )
Assert . assertEquals ( aString , sut . getName ( ) )
assertEquals ( 2 , messageEventRepository . findByParentURI ( atom2 . getAtomURI ( ) ) . size ( ) )
assertDurationEquals ( d , t1 . minus ( t2 ) )
assertEquals ( - 1 , h . getLength ( ) )
assertEquals ( "Wrong string" , "EventType [ TEST ]" , s )
assertTrue ( found . isPresent ( ) )
assertNull ( "Diagnosis is not null" , diagnosis )
Assert . assertArrayEquals ( array , result )
Assert . assertEquals ( 1 , vm . getStack ( ) . size ( ) )
assertFalse ( collection . isOpen ( ) )
assertNotNull ( HostedNumberOrder . reader ( ) . read ( ) )
Assert . assertEquals ( HttpServletResponse . SC_OK , response . getStatus ( ) )
assertTrue ( twoBackoffIntervalsMs < ( endTimeMs - startTimeMs ) )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertThat ( node . getEntities ( ) , is ( Collections . singleton ( owlBottomObjectProperty ) ) )
assertYaml ( "" , Samples . PROJECT_STRATEGY_ROLESMAPPING_SHARED_OPS_KIBANA_MODE . getContent ( ) , rolesMapping )
assertThat ( slider . getValue ( ) , is ( 5.0 ) )
assertNumEquals ( "1.0" , highestValue . getValue ( 0 ) )
assertEquals ( "Expected another type of analyzer" , BrazilianAnalyzer . class , analyzer . getClass ( ) )
assertThat ( handledResponse , is ( equalTo ( response ) ) )
assertEquals ( expectedSqlForMathOperations13 ( ) , result )
assertEquals ( null , queryPlan . getType ( ) )
assertEquals ( Result . FAIL , nogroup . apply ( item ) )
assertEquals ( "Not relevant" , testedString )
assertFileWithMissingRecords ( filePath )
assertTrue ( node2 . getChildren ( "NotFound" ) . isEmpty ( ) )
Assert . assertEquals ( "2 from now" , p . format ( new Date ( 1000 * 60 * 60 * 2 ) ) )
assertEquals ( "OK" , reply )
assertResponseContainsModel ( "<img class=\"componentIcon\" src=\"modelregistry/api/componenticon\"/> nt:unstructured" , Model . class , 123L , "modelName" )
assertEquals ( "Expected 2 results!" , 2 , n )
assertEquals ( "Not returning inprogressZnode" , "inprogressNode" , inprogressNodePath )
assertEquals ( BOLD , style )
arrays . assertDoesNotContain ( description , actual , emptyArray ( ) )
assertEquals ( "simple test" , entries . get ( 0 ) . getMessage ( ) )
assertEquals ( Collections . singletonList ( "A" ) , descendants )
assertArrayEquals ( srcData , dstData )
assertEquals ( jsonFromObject , jsonFromString )
assertEquals ( expResult , result )
Assert . assertEquals ( identificador , protocoloInfo . getIdentificador ( ) )
assertNull ( f . evaluate ( null ) )
assertIsCommitted ( tx )
assertNull ( "Expected null parent for GeoName." , instance . getParent ( ) )
assertResult ( metrics )
assertEquals ( "" , html )
assertEquals ( expected , bsos . toBitString ( ) )
assertEquals ( 1 , instance . evaluations )
assertEquals ( expected , uri . toString ( ) )
assertThat ( filter . include ( artifact ) , is ( false ) )
assertEquals ( 7 , options . length ( ) )
assertThat ( confirmation . getStatus ( ) , equalTo ( status ) )
assertTrue ( "Result should be true for private method called only from constructor." , result )
assertEquals ( expectedQuery , actualQuery )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( messageBox ) instanceof WMessageBoxRenderer )
assertTrue ( page . asText ( ) . contains ( "MESSAGE 3" ) )
Assert . assertEquals ( s12 , createUnsafe ( 19 , 20 , 30 , 40 , 50 , 55 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertEquals ( "<table border=\"1\" cellspacing=\"0\">\n" + "<tr>\n" + "<th class=\"pass\">Col 1</th>\n" + "<th class=\"pass\">Col 2</th>\n" + "</tr>\n" + "<tr>\n" + "<td class=\"pass\">A1</td>\n" + "<td class=\"pass\">A2</td>\n" + "</tr>\n" + "<tr>\n" + "<td class=\"pass\">B1</td>\n" + "<td class=\"pass\">B2</td>\n" + "</tr>\n" + "<tr>\n" + "<td class=\"pass\">C1</td>\n" + "<td class=\"pass\">C2</td>\n" + "</tr>\n" + "<tr>\n" + "<td class=\"pass multi\" colspan=\"2\">2 more rows...</td>\n" + "</tr>\n" + "</table>" , TableTestUtils . getHtml ( this . tableVerifier , "table" ) )
assertEquals ( testString , new String ( baos . toByteArray ( ) ) )
assertEquals ( "{\n" + "  'player3':{\n" + "    'board':'some_board3',\n" + "    'boardSize':14,\n" + "    'gameName':'other_game',\n" + "    'heroesData':{\n" + "      'coordinates':'coordinates1',\n" + "      'group':[\n" + "        'player3'\n" + "      ]\n" + "    },\n" + "    'info':'some_info3',\n" + "    'score':235,\n" + "    'scores':{\n" + "      'player3':300\n" + "    }\n" + "  }\n" + "}" , JsonUtils . prettyPrint ( result ) )
Assert . assertFalse ( strategy . shouldRetry ( null , 0 , null ) )
assertTrue ( it . next ( ) . asText ( ) . contains ( "Redirect Works!" ) )
assertThat ( target . parse ( ) , is ( true ) )
assertThat ( new CodePrinter . Builder ( statement ) . setCompilerOptions ( options ) . build ( ) , equalTo ( "_$jscoverage['test.js'].branchData['4'][2].init(12,15)" ) )
Assert . assertEquals ( 21 , lambda . testAddInt ( 15 , 5 ) )
assertEquals ( expected , actual )
assertEquals ( 5 , count )
Assert . assertNotNull ( t )
assertNull ( "The validateArgTypes() method is buggy." , sf . validateArgTypes ( argTypes ) )
assertEquals ( "OK" , sc . getReasonPhrase ( ) )
assertEquals ( entry , result )
assertTrue ( ok )
assertEquals ( "zero" , actual )
assertNull ( version )
assertFalse ( icons . isEmpty ( ) )
assertEquals ( new AffineTransform ( 1 , 3 , 2 , 1 , 10 , 20 ) , g2 . getTransform ( ) )
Assert . assertTrue ( cubes . size ( ) == orderSize )
assertEquals ( "<a>" + LINE_SEPARATOR + String . copyValueOf ( padding ) + "<b>c</b>" + LINE_SEPARATOR + "</a>" + LINE_SEPARATOR , prettyPrint ( xml , ident ) )
assertResponse ( outputStream , expected )
Assert . assertEquals ( SPECIFICATION , shape . decompress ( ) . build ( ) . getSpecification ( ) )
assertThat ( t , is ( u ) )
Assert . assertEquals ( expected , testIndex . findConc ( "[word = 'jumps' | lemma = 'jump']" ) )
assertEquals ( DependendencyStatus . UNKNOWN , oracle . assess ( access ( "bar" , "foo" ) ) )
assertNotNull ( result )
assertEquals ( originalService , event . getServiceForNaming ( false ) )
PSLTest . assertRule ( rule , "|A| * SINGLECLOSED(+A) + |B| * SINGLECLOSED(+B) = 1.0 ." , true )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) < 'literal'" ) )
assertThat ( new SearchArgumentFilter ( searchArgument , structTypeInfo ) . accept ( corc ) , is ( false ) )
assertUrlsEqual ( expected , url )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'dsgsdg'+ 'the' " ) )
assertSqlCanBeParsedAndDeparsed ( statement )
assertTrue ( "Differences: " + differences + "/" + rounds , differences > rounds * 0.9 && differences <= rounds )
assertTrue ( "Title empty" , constraintViolations . size ( ) == 1 )
Assert . fail ( "Expected to fail, but didn't" )
assertEquals ( "小芯写械�卸邪薪懈械" , new EdmSimplePropertyImplProv ( edmImplProv , propertySimple ) . getName ( ) )
assertSame ( test1 , test2 )
assertEquals ( asList ( foo5 ) , results )
assertNull ( millis )
assertEquals ( "[(AppNode:foo --name=value:0>16)]" , ast . stringify ( true ) )
assertThat ( testDescription . getName ( ) , is ( "A test with an annotation" ) )
assertTrue ( captor . getValue ( ) instanceof EventBusBeanPostProcessor )
assertEquals ( operator , filter . getOperators ( ) . get ( 0 ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 04" ) )
assertThat ( locationManager . getTableLocation ( ) , is ( new Path ( "file:///abc/xyz" ) ) )
assertEquals ( possibleValues , exValues )
Assert . assertEquals ( String . format ( "a %s text" , this . html ( bb , "http://something" , "url description" ) ) , formatter . format ( "a [url='http://something']url description[/url] text" , defaultOptions ( ) ) )
assertEquals ( "" , result )
assertThat ( target , is ( instanceOf ( OFPFlowActionPopVlanQuery . class ) ) )
assertEquals ( val , results . getBoolean ( colN ) )
assertProcessEnded ( procId )
Assert . assertTrue ( init >= bucket . references ( ) )
Assert . assertTrue ( response . startsWith ( "200|OK" ) )
assertFalse ( stream . idempotent )
Assert . assertArrayEquals ( "Invalid binary data" , data , dataActual )
assertFalse ( "Exp. no random supported kinds" , mapper . isSupported ( resource ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertSame ( configuration , victim . getConfiguration ( ) )
assertTrue ( emptyMap . isEmpty ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( 6.0 , calc . evaluate ( "ref1,ref2,*" ) , 0.0 )
assertEquals ( "{X}/" , URITemplates . getUriTemplateString ( f1 ) )
assertArrayEquals ( new int [ ] { 0 , 0 , 1 } , closed )
assertChanged ( COMPLICATED , "/doc[17]/baskets/basket/hay" , "/doc[17]/baskets/basket[78]/hay" )
assertTrue ( ScriptTestUtil . scriptIsInstanceOfScript ( testScript , expectedScript ) )
assertNotNull ( openAPI . getComponents ( ) . getSchemas ( ) . get ( "Pet" ) )
Assert . assertNotNull ( collector . getScope ( ) )
Assert . assertEquals ( Boolean . FALSE , JsfUtils . isNewMessage ( existingFacesMessage , messageToCheck ) )
assertEquals ( ImportConfirmAction . STATUS , action . execute ( ) )
assertTrue ( page . asXml ( ) . contains ( "foo:bar" ) )
org . junit . Assert . assertEquals ( expected , tHandler . getLastRecord ( ) . getThrown ( ) )
assertTrue ( "Should have thrown exception of MyException class" , exception instanceof MyException )
Assert . assertEquals ( "Special Button (in Shadow DOM)" , button . getText ( ) )
assertEquals ( expecteds , actuals )
assertEquals ( 6 , getHistoryLength ( ) )
Assertions . assertNotNull ( docker , "should be passed as a parameter" )
assertEquals ( 1 , x )
assertTrue ( m . nextInt ( 4 ) < 4 )
assertTrue ( "Expected the DependencyCheck report to be generated" , report . exists ( ) )
assertEquals ( String . class , foo . tList . get ( 0 ) . getClass ( ) )
assertArrayEquals ( "Option value" , new String [ 0 ] , commandLine . getMultipleOption ( "array" ) )
Assert . assertEquals ( 1 , count )
assertAllTargetsCount ( 0 )
assertEquals ( 1 , resultComparator . compare ( fd1 , fd2 ) )
assertThat ( sut . isMatch ( real , expected ) , is ( true ) )
Assert . assertEquals ( expectedGeoJson , geoJson )
assertShapeCoordinates ( boundaryEventBounds , 343 , 200 )
assertEquals ( "tz:" + tz . getID ( ) + " locale:" + locale . getDisplayName ( ) , expected , actual )
DataMockery . assertCreateREQMODWithGetRequestNoBody ( request )
assertThat ( testChannel . getChannelMessages ( ) , hasItem ( "Test Message" ) )
assertInvalidQuery ( query )
Assert . assertEquals ( "ActionInvoker.ERROR_0012 - Could not invoke action \"foo\" locally: Map = " + NL + "{" + NL + "    key1 = val1 java.lang.String" + NL + "    key2 = val2 java.lang.String" + NL + "} java.util.HashMap" + NL , messages . getCouldNotInvokeActionLocally ( "foo" , params ) )
assertTrue ( result )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertThat ( formattedValue , is ( "A big story (<a target=\"_blank\" href=\"http://my.issue.tracker/MYPROJECT/browse/MY_PROJECT_123\">#MY_PROJECT_123</a>,<a target=\"_blank\" href=\"http://my.issue.tracker/MYPROJECT/browse/MY_PROJECT_456\">#MY_PROJECT_456</a>)" ) )
assertFalse ( result . getMap ( ) . getGlyph ( ) . isEmpty ( ) )
assertEquals ( 1 , v . getDefault ( ) )
assertTrue ( statisticManager . findJobRunningStatisticsWeekly ( ) . isEmpty ( ) )
assertOut ( "/**\n * @constructor\n */\nRoyaleTest_A = function() {\n};\n\n\n/**\n * Prevent renaming of class. Needed for reflection.\n */\ngoog.exportSymbol('RoyaleTest_A', RoyaleTest_A);\n\n\n/**\n * @export\n * @type {Object}\n */\nRoyaleTest_A.foo = {'foo':'bar'};" )
assertEquals ( OK . getStatusCode ( ) , response . getStatusCode ( ) )
assertEquals ( EnumTest . class , c . resolveType ( "TheInnerClass.EnumTest" ) )
Assert . assertEquals ( "{}" , MapUtils . toString ( map ) )
assertEquals ( "messages" , joined ( "starting SimpleAlpha" , "starting SimpleBeta" , "starting SimpleGamma" , "started SimpleGamma" , "started SimpleBeta" , "started SimpleAlpha" ) , Strings . join ( DummyInterfaces . messages ( ) ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE (nodes.col1 IS NOT NULL " + "AND (nodes.col2 IS NOT NULL " + "AND nodes.col3 IS NOT NULL))" ) )
assertEquals ( new BigDecimal ( "9.0" ) , ticket . getDiscountPrice ( ) )
assertThat ( localTime . toString ( ) , is ( "23:07:03.100" ) )
assertThat ( statisticManager . findTaskRunningStatisticsWeekly ( ) . size ( ) , is ( 1 ) )
assertEquals ( ref , item )
Assert . assertEquals ( user . getId ( ) , 1 )
Assert . assertTrue ( "All complete" , outcome )
assertEquals ( false , clusterBarrierManager . manageAckBarrier ( barrierPath , nodesExpected ) )
assertEquals ( Integer . valueOf ( "1" ) , result . getValue ( ) )
assertEquals ( columnInfoListWithNull , fromConfig )
assertThat ( found , is ( equalTo ( method ) ) )
assertFalse ( chatFilterPlugin . shouldFilterPlayerMessage ( "Swampletics" ) )
assertEquals ( counter . getValue ( ) , 0 )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) = 'literal'" ) )
assertEquals ( "<img src=\"" + "https://docs.google.com/drawings/pub?id=1ZHG2f0l-NgC52MwW9nWwbnrNIkE4azVhVJ9plMry3ic&w=960" + "\"/>" , runnable . getHtml ( context ) )
assertEquals ( assertion , test )
Assert . assertEquals ( 1 , result )
assertThat ( result , is ( expected ) )
Assert . assertEquals ( "1\n2\n3\n" , eval ( sb . toString ( ) ) )
assertEquals ( "" , result )
assertEquals ( expected , actual )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( levelFile ) ) )
assertSingleElementCollection ( regionClientId , executeIds )
assertEquals ( TEST_POINT , readPoint ( buf ) )
assertEquals ( "pageSize" , document . getPageSize ( ) , PageSize . LETTER )
assertEquals ( "payload" + i , result )
assertTrue ( "Expected that ZMQ is enabled." , iotaConfig . isZmqEnabled ( ) )
assertNotNull ( processInstanceId )
assertEquals ( SliceReadStatus . StreamNotFound , slice . status )
assertEquals ( Flavour . SWEET , customFieldConfig . getFlavour ( ) )
assertEquals ( witnessList , partList )
assertEquals ( "kGpMn9mJkEmJk9mJ" , fits . getHDU ( 0 ) . getHeader ( ) . getStringValue ( "CHECKSUM" ) )
assertNumEquals ( 2 , getCriterion ( ) . calculate ( series , tradingRecord ) )
assertEquals ( 0.0 , errorRatio . evaluate ( FrontUtils . convertFrontToSolutionList ( frontApproximation ) ) , EPSILON )
assertThat ( options . toJSON ( ) , is ( ( JsonElement ) json ) )
listener . assertTestFailedWith ( AssertionError . class )
Assert . assertEquals ( newValue , readValue , 0d )
assertTrue ( process . getSuppressJoinFailure ( ) )
assertEquals ( expected , mapper . valueToTree ( resource ) )
assertThat ( content , is ( nullValue ( ) ) )
runner . assertValid ( )
assertEquals ( expResult , result )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( 1 , violations . size ( ) )
Assert . assertTrue ( portA != portB )
assertEquals ( "<table>" + "<tr><th>key</th><th>value</th></tr>" + "<tr><td>f1</td><td>J</td></tr>" + "<tr><td>f2</td><td>100</td></tr>" + "<tr><td>f3</td><td>true</td></tr>" + "</table>" , s . serialize ( a ) )
assertThat ( output , CoreMatchers . containsString ( "Successfully wrote 2 rows" ) )
assertEquals ( body . toString ( ) , "123" )
assertTrue ( callableInterceptor . executed . get ( ) )
assertEquals ( 259 , map . getf ( 190 , 211 ) , .01 )
assertEquals ( "Set of bytes matching any bitmask " + bitmask , expected , result )
MatrixTestAbstract . assertMatrixEquals ( e , c )
assertEquals ( "<input type='hidden' name='ACCEPTURL' value='http://mydomain.com/result?hint=ok'>\n" + "<input type='hidden' name='AMOUNT' value='1000'>\n" + "<input type='hidden' name='CANCELURL' value='http://mydomain.com/result?hint=ca'>\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\n" + "<input type='hidden' name='CN' value='holder  name'>\n" + "<input type='hidden' name='COM' value='bob@doe.com, 1234'>\n" + "<input type='hidden' name='CURRENCY' value='USD'>\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result?hint=de'>\n" + "<input type='hidden' name='EMAIL' value='bob@doe.com'>\n" + "<input type='hidden' name='EXCEPTIONURL' value='http://mydomain.com/result?hint=ex'>\n" + "<input type='hidden' name='HOMEURL' value='http://mydomain.com/result'>\n" + "<input type='hidden' name='ITEMID1' value='code2'>\n" + "<input type='hidden' name='ITEMID2' value='ship2'>\n" + "<input type='hidden' name='ITEMNAME1' value='name2'>\n" + "<input type='hidden' name='ITEMNAME2' value='ship2'>\n" + "<input type='hidden' name='ITEMPRICE1' value='5.0000'>\n" + "<input type='hidden' name='ITEMPRICE2' value='0.0000'>\n" + "<input type='hidden' name='ITEMQUANT1' value='2'>\n" + "<input type='hidden' name='ITEMQUANT2' value='1'>\n" + "<input type='hidden' name='ITEMVATCODE1' value='25.0'>\n" + "<input type='hidden' name='ITEMVATCODE2' value='0.0'>\n" + "<input type='hidden' name='LANGUAGE' value='en'>\n" + "<input type='hidden' name='OPERATION' value='SAL'>\n" + "<input type='hidden' name='ORDERID' value='234-1324-1324-1324sdf-sdf'>\n" + "<input type='hidden' name='OWNERADDRESS' value='In the middle of 123'>\n" + "<input type='hidden' name='OWNERCTY' value='NA'>\n" + "<input type='hidden' name='OWNERTELNO' value='123412341234'>\n" + "<input type='hidden' name='OWNERTOWN' value='Nowhere'>\n" + "<input type='hidden' name='OWNERZIP' value='NA1 NA1'>\n" + "<input type='hidden' name='PSPID' value='ID0001'>\n" + "<input type='hidden' name='SHASIGN' value='31E48B4A837DD6F09A2B41615CB37F2CA1AD957F'>\n" + "<input type='hidden' name='TAXINCLUDED1' value='1'>\n" + "<input type='hidden' name='TAXINCLUDED2' value='1'>\n" + "<input type='hidden' name='USERID' value='bob@doe.com'>\n" , htmlFormPart )
assertDateEquals ( r , t . plus ( d ) )
assertEquals ( String . class . getName ( ) , propertyType . getName ( ) )
Assert . assertFalse ( reuseStrategy . keepAlive ( null , response , context ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertThat ( candidateSteps . size ( ) , Matchers . equalTo ( 0 ) )
Assert . assertEquals ( icmsSetado , icms . getIcms60 ( ) )
Assert . assertEquals ( expected , actual )
assertThat ( h . toSmiles ( ) , is ( "N1(C)CCC1" ) )
assertThat ( ChronoHistory . from ( history . getVariant ( ) ) , is ( history ) )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertThat ( TimestampInterval . parseISO ( "2012092T1415/096T1600" ) , is ( expected ) )
mockOutput . assertIsSatisfied ( )
assertEquals ( "default value" , resolvedMatrixParameter )
assertEquals ( expectedDocument , editedDocument )
assertEquals ( 86 , Colors . rgbColor ( "aquamarine1" ) . longValue ( ) )
assertEquals ( 1 , result )
assertTrue ( result . isEmpty ( ) )
assertEquals ( true , result . get ( ) )
listener . assertEventFired ( new SortOrder ( "foo" , SortDirection . DESCENDING ) )
assertEquals ( Integer . valueOf ( 3 ) , t . getTotal ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "colorTest07.pdf" , sourceFolder + "cmp_colorTest07.pdf" , destinationFolder , "diff_" ) )
assertEquals ( "av0b" , nodeToStringTransformer . transform ( ) )
Assert . assertEquals ( PriorityBean . PRIORITY , job . getPriority ( ) )
Assert . assertArrayEquals ( "Wrong data" , data , builtByFactory . getData ( ) )
assertThat ( parser . parsePath ( tokens ( identifier ) , typeSystem ) , is ( identifier ) )
assertVideos ( videos )
Assert . assertEquals ( exclusion1 , exclusion2 )
assertThat ( int_gt_1 , rejects ( 0 , "<0> was less than <1>" ) )
assertEquals ( expected , emptyGraph . getDominatorSets ( ) )
assertRequest ( "POST" , "Call/%s/Speak/" , callId )
assertEquals ( expectedQuery , actualQuery )
assertThat ( Route . of ( "GET" , path ) . pathString ( ) , is ( path ) )
assertEquals ( "V2 Title" , wrapper . getTitle ( ) )
assertTrue ( cvs . size ( ) > 0 )
assertSame ( "Auditor re-election is not happened for auditor failure!" , auditor , newAuditor )
assertEquals ( "" , 6 , actual . size ( ) )
assertEquals ( argumentCaptor . getValue ( ) . getLabels ( ) , expectedLabels )
assertNotNull ( getStdOut ( ) )
Assert . assertEquals ( assinatura , eventoInutilizacao . getAssinatura ( ) )
assertNotNull ( service )
TestUtil . assertSuccess ( result )
assertThat ( result , is ( "Node2" ) )
assertEquals ( expected , actual )
assertEqualsIgnoreWhitespace ( expected , real )
assertNotNull ( result )
assertThat ( event . getExtra ( ) . get ( key ) , equalTo ( expectedValue ) )
Assert . assertEquals ( "Decode brackets not correct" , out , WebUtilities . decodeBrackets ( in ) )
assertEquals ( "Hello async world! No!" , engine . compileMustache ( "async_helper02" , "Hello {{#async}}{{include templateName}} {{#async}}{{#async}}{{world}}{{/async}}{{/async}}{{#async}}!{{/async}}{{/async}}{{#async}} No{{/async}}!" ) . render ( ImmutableMap . of ( "templateName" , "template" , "world" , "world" ) ) )
assertNotNull ( Interaction . reader ( "KSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "KCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "Mismatched detection value" , expected , OsUtils . isWin32 ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_copyFields01.pdf" , destinationFolder , "diff_" ) )
assertEquals ( 0 , result . size ( ) )
assertFalse ( mapCell . isAtSameLocationAs ( other ) )
assertEquals ( c1 , c2 )
assertThat ( returnedMode . getData ( ) , is ( instanceOf ( ReflectData . class ) ) )
assertEquals ( true , MapUtils . isNotEmpty ( map ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertTrue ( ! page . getSuccessMessages ( ) . isEmpty ( ) )
assertTrue ( "No random port has been allocated" , url . getPort ( ) > 0 )
assertEquals ( "1" , r )
assertTrue ( server . pass_in_char_array ( "multibyte" , topass ) )
assertEquals ( Collections . singletonList ( 9L ) , result )
assertEquals ( change . getChangeData ( ) , data )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertThat ( c . toString ( ) , is ( "myString <= aaa" ) )
assertTrue ( worker . getTimeForQueryMs ( "select * {?s ?p ?o}" , "1" ) [ 0 ] > 0 )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( Node . ANY , n )
assertEquals ( 1 , value . value )
assertThat ( resultFilters . get ( "publisherId" ) . size ( ) , is ( 0 ) )
assertSizes ( validator , double [ ] . class )
assertIsomorphic ( skipToEOFExp , skiptToEOFParsed )
assertThat ( actual , is ( equalTo ( n ) ) )
assertEquals ( 1 , stat . getIno ( ) )
assertThat ( e . getMessage ( ) , equalTo ( "Rejecting illegal call to synthetic constructor: private Subclass(org.kohsuke.groovy.sandbox.impl.Checker$SuperConstructorWrapper). " + "Perhaps you meant to use one of these constructors instead: public Subclass(), public Subclass(int,int)" ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertTrue ( lhs . equals ( rhs ) )
assertSame ( expectedResp , FutureUtils . result ( rrStore . createNamespace ( expectedReq ) ) )
assertThat ( result , is ( true ) )
assertEquals ( "fra 3 anni" , t . format ( new Date ( 1000L * 60 * 60 * 24 * 365 * 3 ) ) )
assertEquals ( result . build ( ) . find ( ArrayElement . class , "values" ) . get ( 0 ) . getEntries ( ) , myTestInstance . distinct ( builder ) . toList ( ) )
Assert . assertEquals ( Character . valueOf ( 'F' ) , node . getIncomingEdgeFirstCharacter ( ) )
assertOut ( "color=\"16711680\"" )
assertEquals ( superClass . hashCode ( ) ^ Objects . hashCode ( 0.0f ) , f . hashCode ( ) )
assertEquals ( ( ( Number ) results . iterator ( ) . next ( ) . getValue ( ) ) . intValue ( ) , 49 )
assertThat ( storedProcResultAsString , equalTo ( "\"2*a is 246\"" ) )
assertEquals ( getExpectedItemSize ( allStrings ) , DynamoDBUtil . getItemSizeBytes ( item ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
Assert . assertEquals ( result , aggregator . getResult ( 0 ) )
assertThat ( eqlTranService . queryDataCount ( ) , is ( 0 ) )
assertMockEndpointsSatisfied ( )
assertEquals ( TagUtils . getTaggedCommit ( "source_tag" , repo ) , BranchUtils . getHeadCommit ( "test_branch" , repo ) )
assertNotNull ( "ClientContact is null" , entity )
assertEquals ( date , avg )
assertEquals ( "abc" , ent . getName ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( 2 , listener . updatedInjectedFilters . size ( ) )
assertEquals ( "<<<<<<< refs/heads/ours\n" + "base stuff + some stuff\n" + "=======\n" + "base stuff + other stuff\n" + ">>>>>>> refs/heads/theirs\n" , readAsString ( gfs . getPath ( "/test_file.txt" ) ) )
Assert . assertTrue ( ( max - min ) <= defaultCapacity / 100 )
assertThat ( set . size ( ) , is ( 0 ) )
assertNotNull ( result )
assertNull ( "Should not find user" , MCRUserManager . getUser ( this . user . getUserName ( ) , this . user . getRealm ( ) ) )
assertFalse ( kieModule instanceof CanonicalKieModule )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( 7 , charCount . get ( "e" ) , 0 )
assertNotNull ( appContext . getResourceDocument ( new StringBufferInputStream ( xml ) ) )
assertThat ( response . getStatus ( ) , is ( 200 ) )
assertThat ( referenceSet . getOntologyId ( ) , is ( ontologyId ) )
assertTrue ( connectFuture . isConnected ( ) )
mockEndpoint . assertIsSatisfied ( )
assertTrue ( res == 0.0d )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "1 test case was supposed to be created" , 1 , foundTestCases . size ( ) )
assertEquals ( mav . getViewName ( ) , "redirect:/outbox" )
Assert . assertTrue ( context . getResult ( ) )
assertArrayEquals ( result , ByteArray . getAllBytes ( aggregator ) )
assertNotNull ( Country . reader ( ) . read ( ) )
assertEquals ( "uuml 眉" , p . getNameFirstRep ( ) . getFamilyFirstRep ( ) . getValue ( ) )
assertEquals ( expected , result )
Assert . assertEquals ( "AroundConstructPostConstruct" , bean . getMessage ( ) )
Assert . assertEquals ( "Invalid response returned" , response , result )
assertTrue ( "Result should be empty" , result . isEmpty ( ) )
assertEquals ( one , result )
assertEquals ( - 1 , sb . indexOf ( "three" ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertNotNull ( addressResultsDto )
paths . assertHasDigest ( INFO , actual , digest , expected )
assertArrayEquals ( " { 'BSON': ['awesome', 5.05, 1986] } not the expected bytes." , arrayDocument , out . toByteArray ( ) )
assertCurrentTestFileName ( currentHtmlFileName )
assertEquals ( 1 , buffer . get ( ) )
assertThat ( ages , everyItem ( lessThanOrEqualTo ( 30 ) ) )
assertFirstHistoryEventIsType ( PointClickEvent . class )
assertTrue ( onto . containsAxiom ( factory . getOWLDatatypeDefinitionAxiom ( factory . getOWLDatatype ( IRI . create ( tns , "Decimal" ) ) , OWL2DatatypeImpl . getDatatype ( OWL2Datatype . XSD_DOUBLE ) ) ) )
assertThat ( manager . heartbeat ( "foo" ) , is ( 123L ) )
this . assertServiceInstanceGetRequest ( serviceInstance , true , "failed" )
assertTrue ( post . getTopic ( ) . getSubscribers ( ) . contains ( user ) )
Assert . assertEquals ( 45.0 , a . determinant ( ) , 1e-5 )
assertEquals ( 1 , countValue )
assertTrue ( closed . await ( 2 , SECONDS ) )
Assert . fail ( "should have thrown SQLFeatureNotSupportedException" )
assertOut ( "var a:* = ((a + b) - (c + d)) * e" )
assertThat ( place , is ( nullValue ( ) ) )
assertEquals ( "1.17549E-38" , sb . toString ( ) )
assertNotNull ( testee )
assertEquals ( i , list . head ( ) . get ( ) )
assertEquals ( expResult , result )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( itemExportacaoIndireta , detalheExportacao . getExportacaoIndireta ( ) )
assertTrue ( Double . valueOf ( f ) . equals ( output . get ( ) ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
Assert . assertTrue ( result . equals ( "11 minutoj" ) )
Assert . assertThat ( result , is ( true ) )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertThat ( actualExceptionCode , is ( "teracommon001" ) )
assertThat ( result ( ) , not ( containsString ( "\"comments\"" ) ) )
Assert . assertTrue ( false )
assertEquals ( 8 , someNotSoRandomAsciiAsList . size ( ) )
assertTrue ( stack . getDurability ( ) == potion . toDamageValue ( ) )
Assert . assertEquals ( Arrays . asList ( record5 , record4 , record3 , record2 , record1 ) , listToSort )
assertEquals ( charsetName , prefData . getFileEncoding ( ) . name ( ) )
assertNotNull ( result )
Assert . fail ( "Was able to set properties when referencing sensitive parameter from within EL" )
assertEquals ( goodTasks [ i ] , md . getTaskId ( ) )
assertThat ( s1 , containsString ( str ) )
assertFalse ( DnsNameResolver . shouldUseJndi ( enableJndi , enableJndiLocalhost , "" ) )
assertEquals ( 2 , response . getMembers ( ) . size ( ) )
assertEquals ( "Defaulted" , parsed . getValue ( ) )
assertEquals ( RESULT , result )
assertions . isNotEqualByComparingTo ( actual )
assertTrue ( lines . stream ( ) . anyMatch ( l -> l . contains ( "MF: Hello, Hello World!" ) ) )
assertEquals ( expected , result )
assertEquals ( 0. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertFalse ( detector . evaluate ( "" , 10 , 10 ) )
assertThat ( parse ( contents ) , contains ( map ( "value" , "1" ) ) )
assertEquals ( r1 , r2 )
assertTrue ( true )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( new ParseResult ( new Doc ( "ParserTest" , Pkg . _Pkg ( list ( _JavaEOLComment ( "//a pre-start comment" ) , _JavaEOLComment ( "//a start comment" ) ) , "hello.world" ) , list ( Imprt . _Imprt ( list ( IMPORTS_COMMENT ) , "wow.man" ) , Imprt . _Imprt ( NO_COMMENTS , "flim.flam" ) ) , list ( new DataType ( list ( _JavaEOLComment ( "//an annotation comment" ) , _JavaEOLComment ( "//datatype comment" ) ) , list ( _Annotation ( "foo" , Optional . < AnnotationElement > _None ( ) ) , _Annotation ( "foo" , _Some ( _ElementValue ( _AnnotationValueAnnotation ( _Annotation ( "bar" , Optional . < AnnotationElement > _None ( ) ) ) ) ) ) ) , "FooBar" , NO_FORMAL_TYPE_ARGUMENTS , NO_EXTENDS , NO_IMPLEMENTS , list ( new Constructor ( list ( _JavaEOLComment ( "//equal comment" ) , _JavaEOLComment ( "//constructor comment" ) ) , "foo" , Util . < Arg > list ( ) ) , new Constructor ( list ( _JavaEOLComment ( "//bar comment" ) , _JavaEOLComment ( "//really a bar comment" ) ) , "bar" , list ( new Arg ( Util . < ArgModifier > list ( ) , _Primitive ( _IntType ( ) ) , "hey" ) , new Arg ( list ( _Final ( ) ) , _Ref ( _ArrayType ( _Ref ( _ClassType ( "String" , NO_ACTUAL_TYPE_ARGUMENTS ) ) ) ) , "yeah" ) ) ) ) ) , new DataType ( NO_COMMENTS , NO_ANNOTATIONS , "whatever" , NO_FORMAL_TYPE_ARGUMENTS , NO_EXTENDS , NO_IMPLEMENTS , list ( new Constructor ( NO_COMMENTS , "whatever" , Util . < Arg > list ( ) ) ) ) ) ) , Util . < SyntaxError > list ( ) ) . toString ( ) , result . toString ( ) )
assertEquals ( v1 , v2 )
assertNotEquals ( indexRollover1 , indexRollover2 )
assertNull ( "The result should be null." , config )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , allOf ( hasEnvVar ( "ADMIN_USERNAME" , null ) , hasEnvVar ( "ADMIN_PASSWORD" , null ) ) )
assertEquals ( 591 , orbitFiles . length )
assertEquals ( "FRED" , name )
Assert . assertEquals ( remoteAddressStrategyFactory . getRemoteAddressStrategy ( plainAccessResource ) . getClass ( ) , RemoteAddressStrategyFactory . BlankRemoteAddressStrategy . class )
Assert . assertTrue ( "this should exists" , exists )
Assert . assertNotNull ( savedBook . getBookId ( ) )
Assert . assertEquals ( 0 , errors . size ( ) )
assertFalse ( checker . isFormat ( stream ) )
Assert . assertEquals ( value + step , value1 )
assertNull ( "Base for nulls is wrong" , mapper . base ( "test" , null ) )
Assert . fail ( "RuntimeException should be thrown!" )
assertNotNull ( reporter )
assertEquals ( "Bob" , CollQueryFactory . from ( cat , data ) . where ( cat . name . eq ( name ) ) . set ( name , "Bob" ) . select ( cat . name ) . fetchOne ( ) )
assertEquals ( "test email" , reply )
Assert . assertNotNull ( result )
assertNotNull ( proveedorFacturas . getId ( ) )
Assert . assertEquals ( 0.25 , f0 . getPartialDerivative ( 1 ) , 0 )
assertSame ( tokenCell ( 0 ) , sync . getPair ( ( TextTokenCell ) tokenCell ( 3 ) ) )
assertEquals ( keyExpected , keyBuilt )
assertEquals ( expect , strategy . write ( new FunctionData5 ( ) ) )
assertEquals ( expectedKeys , actualKeys )
assertFalse ( "matchingRule OID should no longer be present" , schemaManager . getMatchingRuleRegistry ( ) . contains ( OID ) )
assertParser ( twig )
assertTrue ( diff . toString ( ) , diff . similar ( ) )
assertEquals ( "{\"store\":{\"book\":[{\"category\":\"newCategory\",\"author\":\"Nigel Rees\",\"title\":" + "\"Sayings of the Century\",\"price\":8.95},{\"category\":\"fiction\",\"author\":\"Evelyn Waugh\"," + "\"title\":\"Sword of Honour\",\"price\":12.99}],\"bicycle\":{\"color\":\"red\",\"price\":19.95}}," + "\"arrayTest\":[1,2,3]}" , result . get ( RETURN_RESULT ) )
assertEquals ( expResult , result )
assertThat ( del . getDeadline ( ) , is ( deadline ) )
assertTrue ( details . contains ( "mpeg1video" ) )
assertNull ( "was supposed to pass" , status )
assertNull ( GeodeticDatum . ANCHOR_POINT_KEY , properties . put ( GeodeticDatum . ANCHOR_POINT_KEY , "Origin G" ) )
Assert . assertTrue ( result . size ( ) == 99 )
Assert . assertTrue ( "do not get exists using the soft linked path" , destFile . exists ( ) )
assertThat ( builder , hasToString ( "<a class=\"mybutton\" style=\"display:none;\"" + " href=\"https://flattr.com/thing/123546/a-demo-thing\">" + "<img src=\"http://api.flattr.com/button/flattr-badge-large.png\"" + " width=\"93\" height=\"20\" alt=\"Flattr this\" title=\"Flattr this\" border=\"0\" />" + "</a>" ) )
assertThat ( result , is ( true ) )
assertTrue ( listEditor . getList ( ) . isEmpty ( ) )
assertThat ( DatastoreUtil . referenceToKey ( reference ) , is ( key ) )
Assert . assertNotNull ( loadBalancer . getId ( ) )
Assert . assertEquals ( 4 , i )
Assert . assertEquals ( "localhost" , p . getPd ( ) . getBean ( "hostInfo" ) . get ( p ) )
assertEquals ( "[0, 1, 2]" , Util . toString ( data ) )
Assert . assertTrue ( count > 0 )
assertArrayEquals ( data , ( short [ ] ) deserialize . readObject ( short [ ] . class ) )
assertThat ( condition . isSatisfied ( ) , is ( true ) )
assertArrayEquals ( new String [ ] { "DOB_20010101" , "DOB_20020202" , "DOB_NONE" } , matches ( query , Tag . PatientID ) )
assertResultSet ( res )
assertNull ( "No delegates should return null" , provider . getDelegate ( request ) )
assertThat ( cb . getForwardCallback ( ) , sameInstance ( mockResults ) )
Assert . assertEquals ( true , a . compareTo ( b ) == 0 )
Assert . assertEquals ( "somethingmock" , ret . getValue ( ) )
assertOut ( "var a:Object = Object(\"1\")" )
Assert . assertEquals ( expect_sql , sql )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
Assert . fail ( e . getMessage ( ) )
assertEquals ( 1 , output . size ( ) )
assertResultsEqual ( results , 20.0 )
assertTrue ( true )
assertEquals ( "hammer" , descriptor . getListId ( ) )
assertTrue ( invalid . subInterval ( someDate , someDate . plusDays ( 2 ) ) . isNotValid ( ) )
assertEquals ( "[1, 2, 3]" , list . toString ( ) )
assertEquals ( "fileName-" + TIMESTAMP + ".js" , result )
assertEquals ( 1 , trace . allProperties ( ) . size ( ) )
assertEquals ( STATUS_BAD_REQUEST , resource . put ( uuid , app , uriInfo ) . getStatus ( ) )
Assert . assertEquals ( i , InetAddress . getByName ( "10.0.0.2" ) )
assertEquals ( "true" , result )
assertFeatureValues ( expected , testQuery , testText , new UnigramFeatureExtractor ( ) )
assertArrayEquals ( result , new byte [ ] { 0 , 1 , 2 , 3 } )
assertEquals ( uiColor , uiBackground )
Assert . assertEquals ( 211 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location - (nt_number 123)))" , loc . toStringTree ( parser ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "2_3" , "2_4" , "3" , "4" , "5" , "6" , "7" ) ) )
assertThat ( f . format ( PlainDate . of ( 2017 , 10 , 1 ) ) , is ( "Sunday, October 1, 29 Heisei" ) )
assertEquals ( oldDuration , newDuration )
assertFalse ( content . contains ( "Category:�板��" ) )
assertNull ( s )
assertSame ( behavior , connection . runTimer ( behavior ) )
assertThat ( router . allRoutes ( ) , hasItem )
assertEquals ( expected , result )
assertEquals ( "{\"d\":{\"__metadata\":{\"id\":\"" + getEndpoint ( ) + "Rooms('3')\"," + "\"uri\":\"" + getEndpoint ( ) + "Rooms('3')\",\"type\":\"RefScenario.Room\"," + "\"etag\":\"W/\\\"3\\\"\"}," + "\"Id\":\"3\",\"Name\":\"Room 3\",\"Seats\":2,\"Version\":3," + "\"nr_Employees\":{\"__deferred\":{\"uri\":\"" + getEndpoint ( ) + "Rooms('3')/nr_Employees\"}}," + "\"nr_Building\":{\"__metadata\":{\"id\":\"" + getEndpoint ( ) + "Buildings('2')\"," + "\"uri\":\"" + getEndpoint ( ) + "Buildings('2')\",\"type\":\"RefScenario.Building\"}," + "\"Id\":\"2\",\"Name\":\"Building 2\",\"Image\":null," + "\"nb_Rooms\":{\"__deferred\":{\"uri\":\"" + getEndpoint ( ) + "Buildings('2')/nb_Rooms\"}}}}}" , getBody ( response ) )
assertProcessEnded ( procId )
assertEquals ( "$100" , normalize ( doc . getStringValue ( ) ) )
Assert . assertNotNull ( "PropogatingIterator constructor failed to create a valid instance." , uut )
assertEquals ( NetPlan . getNetworkElementByAttribute ( Arrays . asList ( n1 , n2 , n3 ) , "att" , "2" ) , n2 )
assertTrue ( isStartable )
Assert . assertEquals ( HttpURLConnection . HTTP_FORBIDDEN , conn . getResponseCode ( ) )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
assertEquals ( first , builder . getValue ( ) )
assertEquals ( 0 , authArgumentCaptor . getValue ( ) . getBalance ( ) . intValue ( ) )
assertEquals ( globals . size ( ) , tree . getModelObject ( ) . getChildCount ( tree . getModelObject ( ) . getRoot ( ) ) )
assertEquals ( "aTestString" , classUnderTest . getClientName ( ) )
Assert . assertEquals ( "curl -X GET -L 'https://eatstreet.com/'" , curl )
assertThat ( text ( contents ) , is ( "120000000000\n" ) )
assertEquals ( timeFrameEditor . isFirstMonthAvailable ( ) , true )
assertColumnFamilyResource ( resource , true )
assertEquals ( 2 , result . size ( ) )
assertEquals ( String . format ( p , r . getMillis ( ) ) , cf . format ( r ) )
assertThat ( formatMsg ( jmc , TEST_MSG_NO_ARGS ) , is ( TEST_MSG_NO_ARGS ) )
assertEquals ( actual , expected )
assertEquals ( HttpStatusCode . INTERNAL_SERVER_ERROR_500 , response . getStatus ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertOut ( "/**\n * @export\n * @type {*}\n */\nRoyaleTest_A.prototype.a = undefined" )
Assert . assertEquals ( 5 , es . size ( ) )
TestUtils . assertBuildSuccess ( build )
assertEquals ( "Test" , user . getName ( ) . getGivenName ( ) )
assertTrue ( set . isEmpty ( ) )
assertEquals ( TEXT , scriptPanel . getText ( ) )
assertEquals ( 1000 , ( int ) ( store2 . getChokeMap ( "vb" ) . get ( "a" ) ) )
assertEquals ( personList . length , 2 )
assertEquals ( 86 , Colors . rgbColor ( "aquamarine1" ) . longValue ( ) )
assertTrue ( database . removeEmployee ( "E1" ) )
assertTrue ( namespace . equals ( retrievedNamespace ) )
Assert . fail ( "IllegalArgumentException should occur but didn't!" )
assertTrue ( rooted == true )
assertEquals ( "SQL to select all records" , "SELECT * FROM " + tableName ( TEST_TABLE ) , testDialect . convertStatementToSQL ( stmt ) )
assertArrayEquals ( normalData , zipData , 0.001f )
assertEquals ( null , instance . getChild ( ) )
assertNotNull ( target )
assertResponse ( outputStream , expected )
assertOut ( "this[\"unknownMember\"]" )
assertMockEndpointsSatisfied ( )
assertThat ( requests , is ( 1 ) )
assertEquals ( "All items minus one selection iteration result" , "[a, c, d, e, f]" , IterableUtil . shallowCopy ( selection ) . toString ( ) )
assertEquals ( 80. , stateManager . getActivityState ( route . getActivities ( ) . get ( 1 ) , vehicle , InternalStates . LATEST_OPERATION_START_TIME , Double . class ) , 0.01 )
assertEquals ( "Incorrect number of roles" , 0 , roles . size ( ) )
assertThat ( c . toString ( ) , is ( "myString <= aaa" ) )
assertSame ( expectedT , t )
assertNull ( runnable . getMarkdown ( context ) )
assertOptionsSetViaConfigurator ( )
Assert . assertEquals ( createArrayNode ( 1 , 2 , 3 ) , result )
assertEquals ( "Conversion did not match" , value , to )
Assert . assertEquals ( 0 , fileredInvokers . size ( ) )
this . assertAnalyzesTo ( _a , "{\"foo\":12}" , new String [ ] { "foo" , "12" } , new String [ ] { TypeAttribute . DEFAULT_TYPE , "<NUM>" } )
assertEquals ( result , "10" )
assertEquals ( value , evaluated )
assertException ( "FEEL-01015" , "''" , "< ''" , "'camunda'" , "< 'camunda'" , "false" , "< true" , "'12'" , "< '12'" , "\"12\"" , "< \"12\"" )
assertAllExchangesAreCompleted ( config , client . getExchangeStore ( ) , time )
Assert . areEqual ( true , countA == 10 && countB == 0 , "countA值" )
assertEquals ( "failed to generate class with static method" , CLASS_WITH_STATIC_METHOD , cls )
assertEquals ( asList ( warn ( mdcValues , marker , message , arg1 ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "2017-01-19 05:05:59" , spec . interpret ( "1484802359000" ) )
assertNotNull ( render . getRuleRenderOptions ( ) )
assertEquals ( expected , actual )
Assert . assertNotNull ( scheduler )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( expected , result )
assertEquals ( "token1" , target . getToken ( ) )
assertNull ( binningFormModel . getRegion ( ) )
Assert . assertEquals ( position , lastPosition )
assertEquals ( "bar" , bout . toString ( ) . trim ( ) )
assertUrl ( url , "http" , "localhost" , 80 , "/foo" )
assertEquals ( "locationUpdate" , subscriptionRequest . getValue ( ) . getSubscriptionName ( ) )
assertThat ( result , is ( Arrays . copyOfRange ( data , 0 , 2 ) ) )
Assert . assertTrue ( bd . compareTo ( exp ) == 0 )
assertEquals ( "Foo" , person . getName ( ) . getFamilyName ( ) )
assertEquals ( "sort field condition serialization is wrong" , expected , actual )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatusCode ( ) )
assertStreamOpenedExactlyOnce ( )
assertEquals ( 400 , fail )
assertTrue ( "Jack" . equals ( form . firstName . getValue ( ) ) )
assertEquals ( 30 , numberOfDays )
assertFalse ( outputGraphExecutor . equals ( nullOutput ) )
Assert . assertTrue ( pipeAcceptor . emptyBindings ( ) )
assertEquals ( 0xffeeddccbbaa0088L , result )
assertThat ( codes , containsInAnyOrder ( "43343-3" , "43343-4" , "47239-9" ) )
assertEquals ( "Mismatched message at line #" + i , message , line )
assertEquals ( "" , "0 | 0" , getTooltipElement ( ) . getText ( ) )
assertEquals ( expResult , result )
assertEquals ( "defaultValue" , cfg . someValue ( ) )
assertEquals ( filter . getConditions ( ) . size ( ) , 2 )
assertEquals ( field . getXrefLabelNames ( ) , Arrays . asList ( "a" , "b" , "c" ) )
assertEquals ( HttpStatusCode . OK . code , response . getStatus ( ) )
Assert . assertEquals ( baseNode , compoundWrite . apply ( baseNode ) )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
Assert . assertEquals ( 18 , psRes . length ( ) )
assertFalse ( property . toStringValues ( ) . isEmpty ( ) )
assertTrue ( firstResult . equals ( lastResult ) )
Assert . assertNotNull ( zoo )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { assetDocument , "jexlexpression" , "*" , repoToContainedGroupMap } , null ) , is ( true ) )
arrays . assertContainsOnly ( someInfo ( ) , actual , arrayOf ( 6 , 8 , 10 ) )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertThat ( contributors , hasSize ( 30 ) )
assertEquals ( "x\n" , found )
assertEquals ( spec , ctn . toDSL ( ) )
assertTrue ( s . startsWith ( "str not in com.querydsl.core.DefaultQueryMetadata@c" ) )
assertEquals ( "/user/role/index" , view )
assertEquals ( 1 , filter . filter ( aciContext , OperationScope . ENTRY , null ) . size ( ) )
assertTrue ( references . isEmpty ( ) )
assertEquals ( 0 , g . size ( ) )
assertOut ( "a = b" )
assertEquals ( "1 a 2 3\n" , found )
assertCardLuhnDigit ( creditCard )
Assert . assertThat ( item . getItemName ( ) , is ( savedItem . getItemName ( ) ) )
JSONAssert . assertEquals ( expected , data , false )
assertThat ( entities . getTotalElements ( ) , equalTo ( 1L ) )
Assert . assertEquals ( 1 , results . size ( ) )
assertTrue ( applySecurityGroupIPSetsResponse . getRet_code ( ) == 0 )
Assert . notEmpty ( response . getDocs ( ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
Assert . assertTrue ( ! dict . contains ( entry2 ) )
assertNotNull ( services )
assertEquals ( 10 , routeState . get ( 0 ) )
assertTrue ( dsc . isEmpty ( ) )
assertEquals ( "http://test.com/1?a=&b=" , HttpRequest . append ( "http://test.com/1" , params ) )
Assert . assertNotNull ( userCache . get ( id ) . get ( ) )
assertXMLEqual ( expectedXml , outXml )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertTrue ( aNumber == result )
Assert . assertEquals ( XML_STRING , result )
assertEquals ( 5 , hg38 . size ( ) )
assertEquals ( a1 , a2 )
assertEquals ( row . isPresent ( ) , false )
assertFalse ( adapter . getHasMoreShards ( ) )
assertEquals ( "Removal failed" , 0 , newPerms & Perms . CREATE )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "test" , echo . echo ( "test" ) )
Assert . assertEquals ( 12 , p . i ( 4 , new C2 ( ) ) )
Assert . assertEquals ( 3 , stepExec . getCommitCount ( ) )
Assert . fail ( "Exception should be thrown" )
Asserts . check ( targetHosts . size ( ) > 0 , "fail setTargetHostsFromLineByLineText setTargetHostsFromUrl" )
assertEquals ( 2 , trends . size ( ) )
Assert . assertNotNull ( driver . findElement ( By . xpath ( "//*[@class='sheet-tabsheet-container']//*[text()='new_sheet_REnamed']" ) ) )
assertEquals ( request . getRemoteAddr ( ) , result )
assertEquals ( "d189225fbecb12296349d548fef503bc095fbc827dfd442706e48b8965eea482" , block . getHashAsString ( ) )
assertFalse ( fixer . needsTimeFix ( session ) )
assertThat ( digest . getBytes ( ) , is ( bytes ) )
assertEquals ( "range condition serialization is wrong" , expected , actual )
Assert . assertEquals ( parseStr . size ( ) , str . length ( ) )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertEquals ( "test-value" , clientWrapper . get ( "key1" ) )
Assert . assertTrue ( result )
assertNull ( getParameterRepositoryService ( ) . getParameterValueAsString ( key ) )
assertEquals ( "Hibernate Master Class" , _post . getTitle ( ) )
assertStyleEquals ( ".xyz { " + "background: url('//www.mock.com/dir/proxy?container=mockContainer&gadget=http%3A%2F%2Fwww.example.org%2Fbase" + "&debug=0&nocache=0&url=http%3A%2F%2Fwww.example.org%2Fimg.gif&" + "sanitize=1&rewriteMime=image%2F%2a');}" , styleSheet )
assertThat ( component . execute ( ) , is ( expected ) )
assertDepth ( "missing-case-2" , callTree , expectResult )
assertEquals ( 1 , capturedEvent . getValue ( ) . getFirstIndex ( ) )
Assert . assertFalse ( "isEnabled should return false" , ie . isEnabled ( ) )
Assert . fail ( "InvalidFormatException must be thrown" )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
lowLevelElasticSearchOperations . assertThatConnectionToElasticsearchIsPossible ( anyString ( ) , anyInt ( ) )
assertThat ( localName , is ( "thename" ) )
assertEquals ( DecodeQualification . SUITABLE , readerPlugIn . getDecodeQualification ( headerFile . getName ( ) ) )
assertOut ( "a.setTime(a.getTime() + 10)" )
assertTrue ( true )
assertEquals ( Integer . valueOf ( 2 ) , myTestInstance . saveAsync ( doc ) . get ( ) )
assertEquals ( new BigDecimal ( "11" ) , lambda . apply ( BigDecimal . ONE , BigDecimal . TEN ) )
Assert . assertTrue ( new File ( jar ) . exists ( ) )
assertStat ( result )
assertGridBodyCellEditContext ( editContextArgumentCaptor . getValue ( ) , 1 , 1 , ROW_HEIGHT * 2 , col2 . getWidth ( ) , GRID_ABSOLUTE_Y + HEADER_HEIGHT , GRID_ABSOLUTE_X + col1 . getWidth ( ) , GRID_ABSOLUTE_Y + HEADER_HEIGHT , visibleBounds . getX ( ) )
assertScoreAndParse ( content , null , 1 )
Assert . assertEquals ( "[1, 2, 3, 4, 6, 7, 5]" , result . toString ( ) )
Assert . assertTrue ( isEqual ( distance , 0 ) )
assertValidLicenseKeyFormat ( licenseKey )
assertThat ( fileConfig . getConfigProperties ( ) , contains ( configProperty ( TRIM_TRAILING_WHITESPACE , false ) ) )
assertThat ( downstreamJobs , Matchers . containsInAnyOrder ( "my-downstream-pipeline-1" , "my-downstream-pipeline-2" ) )
assertEquals ( "${JAVA_HOME}/bin/java -Xmx512M com.cloudera.kitten.test.Main -Dmapred.compress.output=false -Dmapred.jobtracker.url=http://foo:50030 bar" , lclp . toCommand ( env ) )
assertNotNull ( "Resource not found" , in )
assertEquals ( 1 , dao . countPendingReports ( 1 ) )
assertMigratedTo ( processInstance , targetDefinition )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Response>" + "<Message action=\"https://example.com\" from=\"from\" method=\"GET\" statusCallback=\"https://example.com\" to=\"to\">body</Message>" + "<Redirect method=\"GET\">https://example.com</Redirect>" + "</Response>" , elem . toXml ( ) )
Assert . assertEquals ( absoluteDir , fSys . getWorkingDirectory ( ) )
assertEquals ( ImmutableList . of ( 1 , 2 , 3 ) , ImmutableList . copyOf ( evaluate ( "${iter}" , Iterable . class ) ) )
lists . assertEndsWith ( description , actual , null )
assertEquals ( "Index was not correctly appended" , "test(42)" , key . toString ( ) )
assertNull ( foundEntry )
assertThat ( testOutcome . getSkippedCount ( ) , is ( 1 ) )
assertThat ( ebs1 , equalTo ( ebs2 ) )
assertEquals ( "wrapping renderer must use list's default on null" , defaultRenderer . getClass ( ) , renderer . getDelegateRenderer ( ) . getClass ( ) )
assertEquals ( "Checking A & C = M" , getCompounds ( "M" ) [ 0 ] , actual )
assertTrue ( symbols . isEmpty ( ) )
assertEquals ( 200 , resp . statusCode ( ) )
assertEquals ( "master" , payload . getBranch ( ) )
assertThat ( result , isFailedCommand ( ) )
assertEquals ( expected , json )
assertEquals ( "2015-10-05" , mo . getAuthoredOnElement ( ) . getValueAsString ( ) )
assertThat ( document , is ( nullValue ( ) ) )
assertTrue ( s . stopCalled )
assertEquals ( "GetSongsBySongIdResponse" , Names . responseClassName ( resource , method ) )
assertTrue ( or . isDefined ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , slices , rows , columns ) + ", rmse = " + rmse , 0.0 , rmse , EPSF )
assertTrue ( "Enlish alphabet not correctly reverse sorted" , result )
assertFalse ( JodaBeanSer . COMPACT . smartReader ( ) . isKnownFormat ( bytes ) )
assertHeader ( header , name , value )
assertThat ( config . getBasePackages ( ) , is ( new String [ ] { "some.packages" } ) )
assertThat ( r . reduce ( Arrays . asList ( 5.0 , 1.0 , 4.0 ) ) , equalTo ( 1.0 ) )
assertFalse ( descriptor . isBeanConstrained ( ) )
assertThat ( objectMapper . writeValueAsString ( dto ) , equalTo ( "{\"twoWords\":\"value\"}" ) )
assertEquals ( fileId , mFileSystemMaster . getFileInfo ( NESTED_FILE_URI , GET_STATUS_CONTEXT ) . getFileId ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( new BigInteger ( "2" ) , authorCount )
assertEquals ( expectedSqlForMathOperations6 ( ) , result )
assertEntityHasValue ( key , DEFAULT_PROPERTY_VALUE )
assertNull ( store . getEmptyBookNullable ( ) )
assertEquals ( count , 2 )
assertEquals ( "Wrong # of current work items" , 0 , currentWorkItems . size ( ) )
assertThat ( builder . toSettings ( ) . isAllowRespondByOM ( ) , is ( true ) )
assertTrue ( element . children ( ) . isEmpty ( ) )
assertEquals ( STEP_UP + "subFolder1/fileName1" , relPath )
assertThat ( result . name , is ( equalTo ( EXPECTED ) ) )
assertRequest ( "POST" , "Conference/%s/Member/%s/Speak/" , confId , memberId )
assertEquals ( "Chuck Norris" , victim . readLiteralString ( ) )
assertEquals ( 200 , containerResponse . getStatus ( ) )
assertEquals ( res , - 1 )
assertMessage ( "<type>DELEGATED</type>" , 4 )
assertions . isEqualTo ( ( short ) 2 )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( expectedRestriction , restriction )
assertEquals ( "inet mapper serialization is wrong" , expected , actual )
assertEquals ( expectedScriptNode , actualScriptNode )
Assert . assertTrue ( hasIndexRangeKeyCondition )
assertFalse ( credentials . isPresent ( ) )
assertEquals ( "message with 2 cookies and milk" , logRecord . getMessage ( ) )
assertEquals ( id . getLexicalForm ( ) , "A" )
Assert . assertEquals ( "D2013-07-02T15:40:50Z" , actual )
assertEquals ( "Wrong URL" , url , builder . getFileHandler ( ) . getURL ( ) )
Assert . assertEquals ( Permission . YES , consumerPermission )
assertEquals ( cal . getTime ( ) , m . getEnd ( ) )
assertEquals ( "/a/b" , path . toString ( ) )
assertEquals ( 0 , collection . getNumOfEntities ( ) )
assertObjectEquals ( "[{f1:'x1'},null]" , p . run ( bs , in , sa ) )
assertTrue ( ! ex . isOddNumber ( 100 / 2 ) )
assertTrue ( resultFromJPQL . size ( ) == 1 )
assertEquals ( allocator . wrap ( ByteBuffer . wrap ( expect ) ) , out )
assertEquals ( "URI is not built correctly" , "http://bar/foo+%20%2B?q=a+b%20%2B" , newUri . toString ( ) )
assertThat ( result , is ( jsonBoolean ( true ) ) )
assertEquals ( expected , result )
assertEquals ( with . schema ( ) , withoutSchema . add ( field ) )
Assert . assertTrue ( state [ i ] == expected )
assertThat ( target . matchExactly ( ( FlowAction ) action ) , is ( true ) )
assertFalse ( factory == SqlGeneratorFactory . getInstance ( ) )
assertEquals ( m1 , m2 )
Assert . assertTrue ( isEqual ( distance , 0 ) )
Assert . assertFalse ( "No Tags found" , jsonList . isEmpty ( ) )
Assert . assertEquals ( 0L , vm . getStack ( ) . pop ( ) )
assertThat ( token . getType ( ) , is ( PCRELexer . POSIXNamedSet ) )
assertEquals ( TestModel . class , index . getModelClass ( ) )
assertTrue ( OpenmrsUtil . isInNormalNumericRange ( 5.67f , concept ) )
assertEquals ( res , result . toString ( ) )
assertFalse ( p1 . equals ( p2 ) )
assertEquals ( expResult , result )
assertTrue ( authorizer . isAuthorized ( MockWebContext . create ( ) , profiles ) )
assertNotEquals ( 0 , tokenLists . size ( ) )
assertThat ( t . getName ( ) , notNullValue ( ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertEquals ( "All items iteration result" , "[a, b, c, d, e, f]" , IterableUtil . shallowCopy ( allItemsSelection ) . toString ( ) )
assertTrue ( "p2 is assigned to g1 and g1 assigned to r2" , roleService . principalHasRole ( "p2" , roleIds , Collections . < String , String > emptyMap ( ) ) )
assertEquals ( "dubbo://127.0.0.1:20887" , result )
Assert . assertEquals ( RheemCollections . asSet ( - 1 + expectedOffset , 1 + expectedOffset , 5 + expectedOffset ) , RheemCollections . asSet ( result ) )
Assert . assertEquals ( fsAccess . serviceHadoopConf . get ( "foo" ) , "FOO" )
assertTrue ( instance . runCommand ( ) )
assertEquals ( root . getPermissionList ( ) . size ( ) , 4 )
assertFalse ( p . apply ( tree ) )
assertEquals ( "XML Equals" , jdkXml , javolutionXml )
assertEquals ( 2011 , rs . getInt ( 1 ) )
assertEquals ( "http://localhost:8080" , client . getBasePath ( ) )
assertEquals ( 208 , stopTimes . size ( ) )
assertEquals ( 0 , peopleIds . size ( ) )
Assert . assertEquals ( 100 , count )
assertEquals ( 1 , new ArrayList < > ( results . values ( ) ) . get ( 0 ) . getWidgetUsages ( results . values ( ) ) . size ( ) )
assertEquals ( aNumber , result , 1E32 )
assertUpdate ( result , 1 )
assertNotNull ( response )
assertAllTargetsCount ( 0 )
assertTrue ( attributes . isModified ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertThat ( I18nUtil . pre ( TEST_STRING ) , is ( TEST_STRING ) )
assertEquals ( "Does not compare " + nv5 + " & " + nv7 , NodeValue . CMP_LESS , NodeValue . compare ( nv5 , nv7 ) )
Assert . assertNull ( decChar )
Assert . assertEquals ( ANY , desc . getName ( ) )
assertAllCodesOfSubChainSelector ( subChainSelector , "[a1, a2]" , "[a1, a2, a3]" , "[a2, a3]" , "[a2, a3, a4]" , "[a3, a4]" , "[b1, b2]" )
assertTrue ( defaultCondition . isDefault ( ) )
assertNull ( namedClusterResolver . resolveNamedCluster ( "C:/path/to some/file" ) )
assertFalse ( violation )
assertEquals ( "" , "N" , elr . getMessage ( ) . toString ( ) )
assertTrue ( m . isIsomorphicWith ( m2 ) )
assertNotNull ( fromFile )
assertThat ( gson . fromJson ( "" , LocalDateTime . class ) , is ( nullValue ( ) ) )
assertEquals ( expResult , result )
assertFalse ( userCanBuildProject )
assertEqualDoubleArrays ( pydiv , div , epsilon )
Assert . assertNull ( result )
assertTrue ( timer . didTaskExecute ( ) )
Assert . assertTrue ( String . format ( "Received blobKey '%s'" , blobKey ) , blobKey . contains ( "gs" ) )
Assert . assertSame ( o , p . getExpectedValue ( ) )
Assert . assertEquals ( 7 , response . split ( "\n" ) . length )
assertTrue ( b )
Assert . assertTrue ( "Share button should be present" , driver . findElement ( By . xpath ( "//*[@data-id='ShareButton']" ) ) . isDisplayed ( ) )
assertEquals ( "fre_01-01-13.xliff" , res )
context . assertEquals ( Collections . emptyList ( ) , candidates )
Assert . assertEquals ( 2 , terms . size ( ) )
assertHelpLines ( "Option                       Description                   " , "------                       -----------                   " , "-d [Integer: double dizzle]  dizzle (default: [2, 3, 5, 7])" , EMPTY )
Assert . assertEquals ( 0 , total )
assertEquals ( "lesson_05/_json_configs/smooks-config-reader-only.xml" , uri . toString ( ) )
assertThat ( requestedShutdownCallable . call ( ) , equalTo ( false ) )
assertEquals ( 842066 , size )
assertThat ( name , containsString ( ":x" ) )
JSONAssert . assertEquals ( "{a:[[9]]}" , ARRAY_OF_JSONARRAYS , new CustomComparator ( JSONCompareMode . LENIENT , customization ) )
assertEquals ( prefix_classic_search_result_3 , result )
assertEquals ( childConcurrentBuild , CascadingUtil . getBooleanProjectProperty ( childProject , AbstractProject . CONCURRENT_BUILD_PROPERTY_NAME ) . getOriginalValue ( ) )
assertThat ( targetLocator . getUntargetedDriver ( ) , instanceOf ( ChromeDriver . class ) )
Assert . assertNotNull ( irodsFileSystem )
Assert . assertTrue ( revisions . isEmpty ( ) )
assertEquals ( EmptyThemeJson , toJSON ( options ) )
Assert . assertNotNull ( PropertyUtils . getProperty ( newObs , "problem" ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertImage ( null , destImg , e )
assertEquals ( c1 , c2 )
assertFalse ( instance . hasNext ( ) )
assertEquals ( "Double clicked" , testPage . doubleClick . getText ( ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa is not a number(####)." ) )
assertEquals ( "http://localhost:" + port + "/uaa/" , location . getHeaders ( ) . getFirst ( "Location" ) )
assertEquals ( 2 , statements . size ( ) )
assertTrue ( one . equals ( two ) )
Assert . assertEquals ( 1 , patientCount )
Assert . assertEquals ( person . getName ( ) , person2 . getName ( ) )
assertThat ( result , is ( notNullValue ( ) ) )
assertEquals ( sentPayload , receivedPayload )
assertEquals ( expResult , result )
Assert . isTrue ( organizations . size ( ) > 0 )
assertThat ( this . arr . get ( 0 ) , is ( 2 ) )
assertEquals ( expectedJson , actualJson )
assertEquals ( JSON_ARRAY , json )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( expected , actual )
Assert . assertTrue ( theFlows . isEmpty ( ) )
Assert . assertEquals ( 3 , res )
assertThat ( count - 1 , is ( 7 ) )
assertThat ( "\"2013-09-15T13:00:00+0000\" == 2013-09-15 13:00:00 GMT" , 1379250000000L , is ( date . getTime ( ) ) )
assertEquals ( s , LittleEndianInputStream . wrap ( b ) . readUnsignedInt ( ) )
assertTrue ( group . isAssignedAsEvaluator ( evaluator ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><jaxbModel><first>John</first><last>Citizen</last></jaxbModel>" , result )
approver . assertApproved ( "banana" )
assertFalse ( "Model should contain RDF types" , rdfTypes . isEmpty ( ) )
Assert . assertEquals ( 1L , ctx . pQueryForLongValue ( "select count(*) from users where name=? and address=? and age is ?" , "Tom" , "China" , null ) )
assertEquals ( this . view , view )
assertEquals ( "numhits is wrong" , 15000 , res . getNumhits ( ) . intValue ( ) )
assertEquals ( "123" , map . get ( "v" ) )
assertPostFails ( "2" , topicname , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertEntityHasValue ( key , DEFAULT_PROPERTY_VALUE )
assertSuggestions ( suggestions , "foo" , "fooba" )
assertSame ( defaultDurability , result )
assertEquals ( 1 , client . getTables ( dbName , tabName2 ) . size ( ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaDefaultDataTableCellTransformerDefinition ( threeArg , lookup , new String [ 0 ] ) )
assertEquals ( "Failed to generate three dimensional array" , "new String[][][] { { { \"1\", \"2\" }, { \"a\", \"b\" } }, { { \"3\", \"4\" }, { \"b\", \"c\" } } }" , s )
assertEquals ( 1 , tags . size ( ) )
assertEquals ( pr , clone )
assertTrue ( new Matcher ( ) . matchRelationship ( output , input ) )
assertFalse ( objmap . containsKey ( "field2" ) )
assertTrue ( "expecting no start rules; found " + msg . getClass ( ) . getName ( ) , msg instanceof GrammarSemanticsMessage )
Assert . assertEquals ( predecessorKey , map . getPredecessorKey ( entry . getKey ( ) ) )
assertEquals ( "Running on control port " + port + " but responded with: \"mostly ok\"" , response )
Assert . fail ( "Should throw IllegalArgumentException" )
Assert . fail ( e . getMessage ( ) )
assertEquals ( 86 , Colors . rgbColor ( "aquamarine1" ) . longValue ( ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertTokenStreamContents ( ts , new String [ ] { "hello" , "Hello" , "world" , "World" } , new int [ ] { 0 , 0 , 10 , 10 } , new int [ ] { 5 , 5 , 15 , 15 } , null , new int [ ] { 1 , 0 , 2 , 0 } , null , 15 , null , true )
assertEquals ( r1 , r2 )
Assert . assertEquals ( 10 , view . $ ( NativeButtonElement . class ) . all ( ) . size ( ) )
Assert . assertTrue ( deal . isAccepted ( ) )
Assert . assertNotSame ( exporter , exporter2 )
assertEquals ( "Skipped Matching" , VersionMatchResult . SKIPPED , p . matches ( info ) )
assertEquals ( 0x01 , acia . read ( CMD_STAT_REG , true ) & 0x01 )
assertFalse ( new NopolExample ( ) . isEmpty ( list ) )
Assert . assertEquals ( 0 , issues . length )
assertThatSelectedValueIs ( "z5" )
assertEquals ( SentryStoreSchemaInfo . getSentryVersion ( ) , sentryStore . getSentryVersion ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertThat ( SimpleFormatter . ofMomentPattern ( "dd.MM.yyyy hh:mm a z" , Locale . ENGLISH , tzid ) . parse ( text ) , is ( Moment . UNIX_EPOCH ) )
assertNull ( lease . getTenancyDuration ( ) )
assertEquals ( expected , x )
assertTrue ( "the method \"vote\" must return ACCESS_ABSTAIN" , voteGenericTest ( authorities , configAttributes , AccessDecisionVoter . ACCESS_ABSTAIN ) )
assertEquals ( 4 , traverseCount )
assertEquals ( 13l , theValue . get ( ) . longValue ( ) )
assertNotNull ( SyncListPermission . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "ESXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( new ComparisonExpression ( b ) , orPredicate . getRhs ( ) )
assertEquals ( modulus , certificate . getPublicKeyModulus ( ) )
assertEquals ( SecurityGroupEntityMgr . findById ( this . em , NEW_SG_SAME_SFC_BINDED_EXISTING_SG_ELEMENT_ID_NULL_CREATE_ELEMENT . getId ( ) ) . getNetworkElementId ( ) , NEW_SG_SAME_SFC_BINDED_EXISTING_SG_ELEMENT_ID_NULL_CREATE_ELEMENT . getNetworkElementId ( ) )
assertTrue ( entity . getId ( ) > 0L && entity . getSex ( ) == null )
assertNotNull ( target )
assertFalse ( result . isSucceeded ( ) )
assertNull ( query )
assertEquals ( expected . substring ( 0 , 5 ) , sb . toString ( ) )
Assert . assertNull ( changed . getReifier ( ) )
assertEvalTrue ( new File ( "abssamples/backend/ObjectTests/downcast-true.abs" ) )
assertTrue ( redis . objectRefcount ( key ) > 0 )
assertFalse ( "content-type application/pdf should be invalid" , mediaTypeChecker . isContentTypeValid ( mockHeaders ) )
assertEquals ( "{\"resourceType\":\"Communication\",\"payload\":[{\"contentAttachment\":{\"contentType\":\"text/plain\",\"data\":\"AAECAw==\",\"url\":\"http://foo\",\"size\":123}}]}" , encoded )
assertEquals ( xs , ys )
Assert . assertTrue ( bpInfo1 . equals ( bpInfo2 ) )
assertNull ( request . getAuthToken ( ) )
assertThat ( comment , equalTo ( "Simple field comment" ) )
assertThat ( info . getFor ( ) , is ( "id1" ) )
assertEquals ( BigInteger . valueOf ( 536879104L ) , work )
assertEquals ( same . sum ( 1 ) , sum )
assertEquals ( StringProducer . class , typeProducer . getClass ( ) )
Assert . assertEquals ( MAX_THREADS * INCS_PER_THREAD , getCounterValue ( c ) )
assertEquals ( VLWSentence . NM , empty . getTripUnits ( ) )
assertEquals ( ts , db . getTimestampToValue ( "TestMetricString" , new Integer ( 10 ) . toString ( ) ) )
assertThat ( ListNumbers . toListNumber ( array ) , equalTo ( ( ListNumber ) new ArrayFloat ( array ) ) )
assertEqualsJson ( expected , actual )
assertThat ( res . toString ( ) , is ( equalTo ( "my last response body is: <xml />" ) ) )
Assert . isTrue ( response )
assertEquals ( expResult , result )
assertFalse ( hasConfigurationChanged )
assertThat ( target . getBodyAsMap ( String . class ) , is ( notNullValue ( ) ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( 1 , result . getSize ( ) )
assertThat ( dns , hasItems ( LdapConfiguration . DEFAULT_ROOT_OBJECT_DN ) )
assertNotNull ( handler . event )
assertDependencyWasResolved ( )
assertEquals ( AM_UXS , 0 , rd . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( string2 , string1 )
assertEquals ( Arrays . asList ( "INSERT INTO " + tableName ( "TableOne" ) + " (id, value) VALUES (3, " + expectedDateLiteral ( ) + ")" ) , testDialect . convertStatementToSQL ( testStatement , schema , null ) )
Assert . assertEquals ( url . toExternalForm ( ) , filterResult )
assertTrue ( AcceptanceTestUtil . isInterested ( component , remoteWorkerStub . getDeploymentID ( ) . getServiceID ( ) , rwmOD . getDeploymentID ( ) ) )
Assert . assertEquals ( 0 , value )
assertNotNull ( credit . getPopularity ( ) )
assertEquals ( ExpressionFactory . exp ( "path not in (1,2,3)" ) , exp )
assertEquals ( DEFAULT_PROPERTIES , createSchema ( map , 0 ) . convert ( ) . getProperties ( ) )
assertEquals ( "admin" , jsp )
assertTrue ( adminAccount . get ( "sid" ) . getAsString ( ) . equals ( adminAccountSid ) )
Assert . assertEquals ( "SELECT 3 - 5;" , text )
assertEquals ( ProcessInstance . STATE_ABORTED , processInstance . getState ( ) )
assertEquals ( expected , actual )
assertThat ( sslContextSelector . select ( httpContext ) , is ( sslContext ) )
Assert . assertEquals ( "Decode brackets not correct" , out , WebUtilities . decodeBrackets ( in ) )
assertNotNull ( WorkspaceRealTimeStatistics . fetcher ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 0 , walEdit . size ( ) )
assertServiceInstanceCreateRequest ( serviceInstance )
assertMockEndpointsSatisfied ( )
assertOut ( "function A(msg) {\n\tthis.msg = msg;\n}" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( v instanceof PactString )
assertThat ( normalize ( results ) , is ( path ( "" , "a" , "b" , "c" , "a/a.csv" , "b/b.csv" , "c/c.csv" ) ) )
assertThat ( DateUtil . toDateAndClearDatePart ( date ) , is ( cal . getTime ( ) ) )
Assert . assertEquals ( expected , rewriter . rewriteCookie ( cookie ) )
assertFalse ( message . isFired ( ) )
assertNotNull ( actual )
assertEquals ( - 23 , error . getOkValue ( ) )
assertEquals ( branches , Functions . listProjectBranches ( PROJECT ) )
assertObjectEquals ( "{type:'array',items:{type:'object',properties:{f1:{type:'string'}}}}" , s . getSchema ( BeanList . class ) )
assertEquals ( expected , actual )
assertEquals ( 4 , doubler . doubleIt ( 2 ) )
assertNotNull ( serializedData )
assertEquals ( "check lifetime after setting it" , lifetime , _info . getLifetime ( ) )
assertEquals ( 6 , actualExpectedWorkerLinkCount )
assertTrue ( result . getTotalElements ( ) > 0 )
assertFilePath ( file , "src/main/java/org/ops4j/pax/exam/spi/war/FileFinder.java" )
assertThat ( testFacade . getRecordedService ( domainPresenceInfo ) , hasOnlyUniquePortNames ( ) )
assertEquals ( "Select with not equals check" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
assertEquals ( expectedUrlEncoded , urlEncoded )
assertSame ( first , second )
assertFalse ( params . doesCodingListMatch ( codings ) )
context . assertIsSatisfied ( )
assertEquals ( 8 , t . indexOfUnquoted ( str , ">>" ) )
assertEquals ( aNumber , result , 1E14 )
assertThat ( id ( roundTrip ) , equalTo ( id ( instance ) ) )
assertEquals ( null , source . getNode ( ) )
assertEquals ( response , res )
assertArrayEquals ( new double [ ] { ( 1.0 - 1.0 ) / 3.0 , ( 2.0 - 1.0 ) / 3.0 , ( 3.0 - 1.0 ) / 3.0 , ( 4.0 - 1.0 ) / 3.0 } , normalizedVector , 0.00001 )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { "-l" , "1" , "-f" } ) )
assertTrue ( resourceBundle . getObject ( "component.category.DateAndTimeCategory" ) instanceof Image )
assertNull ( topic )
Assert . assertTrue ( "RunJar failed" , outFile . exists ( ) )
assertThat ( ContractClass . privateNestedInstanceVariable , is ( true ) )
assertNotNull ( response )
assertThat ( applicationSettings . getProjectUploadSetting ( ) , is ( PROJECT_UPLOAD_NOT_ALLOWED ) )
assertResults ( chain )
assertEquals ( result , Collections . EMPTY_LIST )
assertEquals ( "?a=b&c=d" , qs . decode ( ) . toQueryString ( ) )
assertEquals ( WEBJAR_URL_PREFIX + "jquery/jquery" , json . get ( "jquery" ) . get ( "paths" ) . withArray ( "jquery" ) . get ( 0 ) . asText ( ) )
assertResult ( 1 , - 1 )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "first" , mockedList . get ( 0 ) )
assertEquals ( HttpStatus . CONFLICT , response . getStatusCode ( ) )
assertEquals ( 1 , testDescriptor . getChildren ( ) . size ( ) )
assertNotNull ( hit )
assertEquals ( "test (REG_SZ) = ? (0x3F000000)" , value . toString ( ) )
assertFalse ( iter . hasNext ( ) )
Truth . assert_ ( )
assertNull ( result )
assertNotNull ( driver )
assertTrue ( isElementPresent ( By . className ( "v-required-field-indicator" ) ) )
Assert . assertEquals ( tree . predict ( x [ loocv . test [ i ] ] ) , evalPredict ( tree , x [ loocv . test [ i ] ] ) )
assertTrue ( e instanceof E_StrEndsWith )
assertThat ( "default minimun number of cores" , sut . getMinCores ( ) , is ( equalTo ( VM . DEFAULT_MIN_CORES ) ) )
assertEquals ( 0 , retrieved . size ( ) . intValue ( ) )
assertFalse ( new NopolExample ( ) . isEmpty ( list ) )
assertEquals ( "Learn. Eat. Code." , phraseDecodedToString )
assertThat ( result . message ( ) . get ( 0 ) . getData ( ) , CoreMatchers . containsString ( "<img src=\"http://yuml.me/diagram/" ) )
assertEquals ( "Expected 4 result!" , 4 , n )
assertEquals ( annotation . getResource ( ) , result . getResource ( ) )
CallTreeAssert . assertDepth ( "notFoundNextSpan" , callTree , expectResult )
context . assertIsSatisfied ( )
assertContainsOnly ( testee . getFileFilters ( ) , filter1 , filter2 , filter3 )
assertEquals ( "<y-axis min=\"-5\"></y-axis>" , parent . child ( 0 ) . toString ( ) )
assertNull ( scanner . parse ( "--hello" ) )
assertThat ( whereClause , is ( equalTo ( CONTENT_AUTH_WHERE ) ) )
Assert . assertEquals ( instancesCount , InstanceHelpers . getAllInstances ( this . app ) . size ( ) )
assertNotNull ( alumnoDescuento . getId ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertAccessorsCorrect ( table , "rowsPerPage" , 0 , 1 , 2 )
assertThat ( response . getStatus ( ) , equalTo ( Response . Status . OK . getStatusCode ( ) ) )
assertEquals ( "Layout phase count: 1" , label . getText ( ) )
assertNotSame ( iter , TransformedIterator . maybeTransform ( iter , negate ) )
assertThatIsMaximized ( )
assertTrue ( true )
assertEquals ( UUIDSuffixKit . getId ( ) , settings . getKitId ( ) )
Assert . assertEquals ( value + 1 , value1 )
Assert . assertTrue ( appTableColumnsMeta . indexOf ( "natural" ) != - 1 )
assertTrue ( codeGenFailedEx . getMessage ( ) != null )
assertThat ( credentials , is ( notNullValue ( ) ) )
assertNotNull ( actual )
assertEquals ( "Task from a password protected file" , project . getTaskByID ( Integer . valueOf ( 1 ) ) . getName ( ) )
assertTrue ( "No wait" , System . currentTimeMillis ( ) - start < SHUTDOWN_WAIT )
assertThat ( result , is ( alicia ) )
assertNotNull ( sut . getType ( ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertTrue ( ( fTime - sTime < 7000L ) , "Immediate trigger did not fire within a reasonable amount of time." )
Assert . assertTrue ( evaluator . evaluate ( offsets ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( list ) )
assertNotNull ( "ClientContact is null" , entity )
Assert . assertEquals ( "http://www.w3.org/2005/07/scxml" , assign . getTagNameSpace ( ) )
assertEquals ( "Stratio Decision" , name )
Assert . assertTrue ( ( max - min ) <= defaultCapacity / 100 )
Assert . assertEquals ( 1 , analysis . getWarnings ( ) . size ( ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_UPDATE )
assertSame ( result , instance . getConnection ( ) )
assertThat ( validationErrors . size ( ) , equalTo ( 0 ) )
assertNull ( entity . getProperty ( "user" ) )
assertSetDirty ( )
assertThat ( action , is ( Matchers . not ( new SetProjectPrefixDeclarationsAction ( projectId , otherDecls ) ) ) )
assertTrue ( map . isEmpty ( ) )
assertEquals ( "Wrong conversation stored" , message . getConversation ( ) , replyMessage . getConversation ( ) )
assertThatContainsOnly ( archive , scriptPath )
assertEquals ( tot , sum ( s ) )
assertEquals ( 666 , mpd . getPort ( ) )
assertEquals ( 0 , t . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertTrue ( ex . canBeDividedby3 ( "8142" ) )
assertEquals ( detailMethods , result )
N4CliHelper . assertExpectedOutput ( expectedString , out )
assertEquals ( HttpStatus . NO_CONTENT , responseEntity . getStatusCode ( ) )
Assert . assertNotNull ( pojo . testManager )
assertEquals ( expectedResult , result )
Assert . assertEquals ( 20 , analyser . getLoadAtEnd ( route ) . get ( 0 ) , 0.01 )
assertEquals ( URL + "?param+1=&param+2=%22" , uri . toString ( ) )
assertNotNull ( x509CertificateWithInfo )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 ) ) )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
assertThat ( windows . minus ( big ) , is ( IntervalCollection . onDateAxis ( ) ) )
Assert . assertNotSame ( connection , HConnectionManager . getConnection ( TEST_UTIL . getConfiguration ( ) ) )
assertArrayEquals ( new byte [ 0 ] , transformer . transform ( getClass ( ) . getClassLoader ( ) , "com/yammer/telemetry/agent/test/SimpleBean" , null , null , new byte [ 0 ] ) )
assertThat ( datePeriod . toString ( ) , is ( "P4{M-END_OF_MONTH}" ) )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
assertRange ( q , Float . class , 0.0f , 123.5f )
PatternAssert . assertThat ( POSTGRES_CONNECTION_STRING_PATTERN )
assertEquals ( actual1 , actual2 )
assertEquals ( 200 , response . getStatus ( ) )
Assert . assertEquals ( "simpleInteger" , found . getName ( ) )
Assert . assertEquals ( "UserId should be same as authenticated user:" + answer , userId , answer . getReturnVal ( ) )
Assert . assertEquals ( Response . Status . BAD_REQUEST . getStatusCode ( ) , response . getJerseyResponse ( ) . getStatus ( ) )
assertTrue ( ix . verify ( new VerificationObserver ( ) ) )
assertEquals ( "2007-12-03 - 10:15:30" , result )
assertEquals ( 0 , res . getInt ( "nbHits" ) )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x1 ) ) )
assertExcludedExplicitly ( node )
assertThat ( nextToken , is ( nullValue ( ) ) )
assertFailureValue ( "differs at index" , "[0]" )
assertEquals ( 1L , result )
Assert . assertTrue ( this . defaultPushServerConfigurationResponse . getPushableFields ( ) . isEmpty ( ) )
Assert . assertNotNull ( xhtmlOptions )
Assert . assertEquals ( "Wrong port" , 0x00010203 , out . readUnsignedInt ( ) )
assertTrue ( alert . isEnabled ( ) )
assertEquals ( selectedInterval . getName ( ) , "Engineering" )
assertThat ( tester . request . getServletPath ( ) , is ( "/" ) )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
assertTaskEvents ( task , TaskListener . EVENTNAME_COMPLETE )
assertEquals ( "From: Homer Simpson\n" + "To: Support\n" + "\n" + "En–dash coming through~\n" + "\n" + "Thank you very much for your email!" , email . getVisibleText ( ) )
Assert . fail ( "MathIllegalArgumentException expected" )
TestUtils . assertResponseStatus ( response , Status . NOT_FOUND )
Assert . assertEquals ( 40. , route . getActivities ( ) . get ( 0 ) . getEndTime ( ) , 0.01 )
assertEquals ( 5 , count )
assertFalse ( Script . matchNamed ( MatchType . EQUALS , "json.foo" , null , "[]" , ctx ) . pass )
Assert . assertFalse ( errors . hasErrors ( ) )
assertNotNull ( Deencapsulation . getField ( job , "jobClient" ) )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
assertFalse ( guangdong . existed ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( null , annotation )
arraysWithCustomComparisonStrategy . assertDoesNotContainSubsequence ( someInfo ( ) , actual , sequence )
assertFalse ( ( ( IMAPFolder ) test ) . getUIDNotSticky ( ) )
assertEquals ( unQuotedString , ocsvTransformer . getCellContent ( unQuotedString ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( Arrays . asList ( "/parent/child" , "/parent/child/descendant" , "/parent/child/descendant[2]" ) , allChildrenPaths ( parent ) )
assertEquals ( Location . LOCATION_LHS_INSIDE_CONDITION_START , getLastIntegerValue ( parser . getEditorInterface ( ) . get ( 0 ) . getContent ( ) ) )
assertEquals ( 3.4 , cs . getY ( 0 ) , TOL )
assertTrue ( notify . matches ( 10 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "12345.6789" , getCell ( 0 , 10 ) . getPureText ( ) )
assertEquals ( drug , conceptService . getDrug ( drugName ) )
Assert . assertEquals ( "[3, 2, 4, 1, 5]" , result . toString ( ) )
assertEquals ( "OK" , reply )
Assert . assertTrue ( mod . exists ( ) )
assertNotNull ( sut . getType ( ) )
assertEquals ( "a,\"b\nc\"" + recordSeparator , sw . toString ( ) )
assertNull ( actionOut . getSdid ( ) )
assertEquals ( "https://127.0.0.1:6443" , builder . getBasePath ( ) )
assertMsg ( )
assertEquals ( expectedArg , parsedArg )
assertEquals ( 1000 , objmap . get ( "field_int" ) )
assertThat ( PrettyTime . of ( new Locale ( "no" ) ) . withReferenceClock ( clock ) . printRelative ( PlainTimestamp . of ( 2014 , 9 , 25 , 12 , 0 ) . atUTC ( ) , ZonalOffset . UTC ) , is ( "om 3 uker" ) )
assertThat ( deletes , StreamMatchers . empty ( ) )
assertQuotientReminder ( MultivariateDivision . divideAndRemainder ( dividend , divider ) , dividend , divider )
Assert . assertNotNull ( irodsFileSystem )
assertThat ( code , is ( nullValue ( ) ) )
assertEquals ( "Script" , result )
assertAllCommandsUsed ( )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( 1 , tableOfContents . calculateDepth ( ) )
assertNull ( myDtoInstance )
assertEquals ( "<" , writer . toString ( ) )
assertThat ( DataenumUtils . equal ( o , o ) , is ( true ) )
assertThat ( representation . getString ( "display" ) , is ( "-44,56 $" ) )
assertEquals ( ModelInterceptor . findById ( DummyModel . class . getMethod ( "findById" , Serializable . class ) , model2 . getId ( ) ) , model2 )
Assert . assertEquals ( expected , actual )
assertEquals ( endpoint . getPostParamString ( ) , "language=" + UrlCodec . encode ( "en,de" ) )
assertMatch ( e , s )
assertEquals ( 200 , connection . getResponseCode ( ) )
assertEquals ( expectedQuery . get ( 0 ) , sql [ 0 ] . toSql ( ) )
assertThat ( orderLine . getAdvancePercentage ( ) , sameValueAs ( division . divide ( 10 , 4 ) ) )
assertEquals ( 3 , all . size ( ) )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertFalse ( accepted )
assertTrue ( validationErrors . hasErrors ( ) )
assertEquals ( "" , doc . text ( ) )
assertEquals ( actualMime , "othertest/other-test-mime" )
assertEquals ( 2 , results . size ( ) )
assertEquals ( DEFAULT_FILTER , config . getBuildConfiguration ( ) . getFilter ( ) )
Assert . assertEquals ( Sets . newHashSet ( 1 , 2 ) , parser . getSecureResultIndices ( ) )
assertEquals ( "foo" , jc . get ( "51" ) )
assertEquals ( false , result )
assertTwoInstancesAreStarted ( firstProcessDefinition , secondProcessDefinition )
assertEquals ( "An Uninitialized Value should return false on valueIsInterpolated()." , false , victim . valueIsInterpolated ( ) )
assertTrue ( plan . getRootNode ( ) instanceof ProjectNode )
assertToken ( profile , token , new JwtAuthenticator ( ) )
Assert . assertEquals ( "rs\\/82550\\/201618" , result )
assertEquals ( 1 , result )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertOut ( "var /** @type {boolean} */ a = isFinite(1000000.9)" )
assertEquals ( PASSING , collector . getStatus ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertTrue ( "Expected stop to block for maximum of around " + shutdownMaxTimeout + "ms. Actual: " + timeTaken , timeTaken >= shutdownMaxTimeout && timeTaken < shutdownMaxTimeout + 20 )
Assert . assertEquals ( "content" , result . getBody ( ) )
assertThat ( iframeStr . matches ( "<iframe id=\"foo\">.*</iframe>" ) , is ( true ) )
Assert . assertEquals ( 500 , response . getStatus ( ) )
assertStat ( result )
assertEquals ( "Response body is not correct." , SimpleSecuredServlet . RESPONSE_BODY , Utils . makeCallWithBasicAuthn ( servletUrl , ANIL , Utils . hashMD5 ( ANIL_PWD , Coding . BASE_64 ) , 200 ) )
assertEquals ( "Should have not constraint violation" , 0 , validator . validate ( product ) . size ( ) )
assertEquals ( "A-en_US-B" , context . toString ( ) )
assertThat ( uri . getPath ( ) , endsWith ( "testing" ) )
assertEquals ( TEST_INITIAL_DFS_REPLICATION , testConfiguration . get ( "dfs.replication.initial" ) )
Assert . assertEquals ( 11 , patients . size ( ) )
assertThat ( max . getStandardEffort ( ) , equalTo ( a . getStandardEffort ( ) ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "true" ) )
assertEquals ( expResult , result )
assertEquals ( otherHashCode , foreignableFieldHashCode )
assertThat ( step . getResult ( ) , is ( TestResult . PENDING ) )
assertFeatureValues ( expected , testQuery , testText , chain )
assertSame ( val , ConfigUtils . getObject ( config , null , "no-object" , "some-object" ) )
assertRemoveSubsystemResources ( servicesB )
assertThat ( errors , not ( hasFieldErrors ( "middleName" ) ) )
assertTrue ( configurationDeserialized )
assertEquals ( HTML , result )
Assert . assertNotNull ( klass . getDeclaredField ( "MIN_VALUE" ) )
assertExceptionContainsCorrectMessage ( ( ) -> userTaskAdminClient . reassignWhenNotCompleted ( CONTAINER_ID , task . getId ( ) , "2sssss" , reassign ) , "Error code: 400" , "Error parsing time string:" )
assertEquals ( "Jersey/2.0-m09 (HttpUrlConnection 1.7.0_04) from the server" , response )
assertThat ( exitStatus . exitStatus ( ) , is ( equalTo ( ( byte ) 0x0 ) ) )
assertEquals ( "喙�喔�喔脆�" , toggleBtn . getText ( ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertEquals ( 2 , deltas . size ( ) )
assertTrue ( rightGroupService . deleteRightsFromGroupByPrefix ( "test_" ) > 0 )
assertTrue ( isModified ( "/dir" ) )
assertEquals ( "select cast('a''c' AS b)" , result )
assertThat ( ( String ) c . value , is ( "aaa" ) )
assertEquals ( Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertTrue ( Arrays . equals ( new int [ ] { 0x07 , 0x00 , 0x00 , 0x08 , 0x00 , 0x00 , 0x00 , 0x00 , 0xF1 , 0xFF } , request . getOutputBuffer ( ) ) )
assertRequest ( "POST" , "Message/" )
Assert . assertEquals ( expected , actual )
Assert . assertTrue ( zero . isZero ( ) )
assertEquals ( "<#function name ></#function>" , result )
assertTrue ( transactionClosed . get ( ) )
assertTrue ( set . contains ( m_libraryName ) )
assertEquals ( "<map/>" , contents )
Assert . assertEquals ( "4" , head . getId ( ) )
assertFalse ( GQLToQueryBuilderConverter . convertToQueryBuilder ( request ) )
assertThat ( resources , contains ( patientId , orgId , parentOrgId , parentParentOrgId ) )
assertEquals ( "test-123" , val )
Assert . assertTrue ( orPredicate . test ( null ) )
assertTrue ( trans1 . epsilonEquals ( trans2 , 0.05 ) )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( true ) )
assertNull ( obj )
assertFalse ( runtimeService . hasVariable ( processInstance . getId ( ) , "myVariable" ) )
assertEquals ( ( byte ) 34 , s . m0_0 ( ) )
assertEquals ( 0 , ph . getNrOfAdditionalVisuals ( ) )
assertThat ( perspectiveId , is ( this . perspectiveId ) )
assertEquals ( 17 , interfaces . size ( ) )
assertTrue ( result )
assertEquals ( "TASKID = -1" , dataSetLookup . getFirstFilterOp ( ) . getColumnFilterList ( ) . get ( 0 ) . toString ( ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertTrue ( BooleanIndexing . or ( array , Conditions . lessThan ( 3.0f ) ) )
assertExec ( "Methods defined in Object" , Classes . class , "listObject__Ljava_lang_String_2ZLjava_lang_String_2" , methods , false , "" )
assertEquals ( JSON_OBJECT , json )
assertMockEndpointsSatisfied ( )
assertEquals ( sz , z , FastInteger . parseUint ( sz . toCharArray ( ) ) )
assertTrue ( r . get ( String . class ) . contains ( "Bee Gees" ) )
assertBoard ( "�尖�尖�尖�尖��\n" + "��   ��\n" + "��x�� ��\n" + "��   ��\n" + "�尖�尖�尖�尖��\n" )
Assert . assertTrue ( contains )
assertCompleted ( "xxxx" )
assertTrue ( result )
assertTrue ( dump . contains ( JP_TEXT ) )
Assert . assertEquals ( 27. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 3 ) , route ) , 0.01 )
TestUtil . assertEquals ( exp , getSpans ( ) )
assertEquals ( 16 , profile . dashBoards [ 0 ] . widgets . length )
assertOut ( "/**\n * @export\n */\nfoo.bar.B.prototype.b = function() {\n  var /** @type {custom.TestProxy} */ a = new custom.TestProxy();\n  a.setProperty('foo', 'bar');\n}" )
assertThat ( ( double ) stopwatch . getMaximumDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 150 , 50 ) ) )
assertNull ( oneElt ( x ) )
assertEquals ( "Base for strings is wrong" , Double . valueOf ( 3.2d ) , parsed )
assertEquals ( 6 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertFalse ( handler . process ( null , consumer , Direction . In , null , null ) )
assertFalse ( sf . getCache ( ) . containsEntity ( AnnotatedEntity . class , 0L ) )
assertNotNull ( result )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "actors/Keanu" , "actors/Hugo" , "actors/Emil" , "actors/Carrie" , "actors/Laurence" ) )
assertTrue ( equals ( stat , nativeEntity ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertGridIndexes ( data , new boolean [ ] { false , true , true } , new boolean [ ] { false , false , false } , new Expected [ ] [ ] { { Expected . build ( false , 1 , "(0, 0)" ) , Expected . build ( false , 1 , "(1, 0)" ) } , { Expected . build ( true , 2 , "(0, 2)" ) , Expected . build ( false , 1 , "(1, 1)" ) } , { Expected . build ( true , 0 , "(0, 2)" ) , Expected . build ( false , 1 , "(1, 2)" ) } } )
assertNull ( options . simple )
Assert . assertNotNull ( authToken )
assertThat ( now . getZone ( ) , is ( DateTimeZone . UTC ) )
assertEquals ( 1 , one . getAsInt ( ) )
assertTrue ( satisfiesPrecondition ( cu ) )
assertTrue ( "Returned code is expected to be OK" , returnedRC [ 0 ] == BKException . Code . OK )
assertEquals ( "geo distance condition serialization is wrong" , expected , actual )
assertEquals ( expResult , result )
assertEquals ( 0 , opts . getOptions ( ) . size ( ) )
assertThat ( config . getMaxFileSizeBytes ( ) , equalTo ( maxFileSizeBytes ) )
Assert . assertEquals ( "transactionLatencyCount=42" , getReplHeader ( ) )
assertEquals ( counter . get ( ) , rowCount . getLiveValue ( ) )
assertArrayEquals ( expectedResult , output )
Assert . assertEquals ( "[1, 2, 3, 4, 5]" , result . toString ( ) )
assertThat ( generatedReportText , containsString ( "sample.steps.FailingStep" ) )
assertNull ( namedClusterResolver . resolveNamedCluster ( "C:/path/to some/file" ) )
assertEquals ( 4 , results . size ( ) )
assertEquals ( "Delancey: A Man, a Woman, a Restaurant, a Marriage cost 18.63, " + "Whole-Grain Mornings: New Breakfast Recipes to Span cost 13.92, " + "Greg Atkinsons In Season: Culinary Adventures of a cost 15.57" , mapJoined )
assertThat ( queryMapping . transformOutboundDatabaseName ( metaStoreMapping , query ) , is ( "SELECT " + PREFIX + "db1.myFunction()" ) )
assertEquals ( sampleIn . removeCastToIntegerWrapper ( pi ) , sampleOut . removeCastToIntegerWrapper ( pi ) )
this . assertLoadBlobViaTuples ( tuples , true , false )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( resp . getResponseBody ( ) . trim ( ) . matches ( "Value: [0-9]*" ) )
assertEquals ( RDF . type . getId ( ) , editor . getAsText ( ) )
assertTrue ( sum . getWindowing ( ) instanceof Time )
assertEquals ( TMP , COMPARE )
assertEquals ( group , element . getGroup ( ) )
Assert . fail ( "exception expected" )
tester . assertRenderedPage ( HomePage . class )
assertEquals ( asList ( asList ( 1 , 2 , 3 , 4 ) , asList ( 1 , 2 , 3 , 5 ) , asList ( 1 , 2 , 3 , 6 ) ) , result )
assertFalse ( property . isRowIdentifier ( ) )
assertNull ( log )
Assert . assertEquals ( "Hello" , cdiEjb . sayHello ( ) )
assertOutput ( expected )
assertTrue ( out . contains ( "User [owner] is not authorized to view the logs for entity" ) )
assertStack ( new Object [ ] { Integer . valueOf ( 3 ) , null , Long . valueOf ( 1 ) , null , Long . valueOf ( 1 ) , null } , stack )
Assert . assertTrue ( actualUrl . endsWith ( "/registration/result" ) )
Assert . assertEquals ( input , HtmlSanitizerUtil . sanitize ( input ) )
assertEquals ( 144.0 , ( ( Service ) vrp . getJobs ( ) . get ( "87" ) ) . getTimeWindow ( ) . getEnd ( ) , 0.1 )
assertEquals ( 3 , result . size ( ) )
assertEquals ( origItemsJson , outJson )
assertThat ( status , is ( ApplicationLauncher . LAUNCH_ERROR ) )
assertThat ( schema , allOf ( hasEntry ( is ( TYPE_2 ) , hasProperty ( "predicates" , allOf ( hasItem ( predicate ( ) . withName ( PROP_I ) . withDirection ( OUT ) . withReferenceType ( RdfConstants . UNKNOWN ) ) ) ) ) , hasEntry ( is ( RdfConstants . UNKNOWN ) , hasProperty ( "predicates" , allOf ( hasItem ( predicate ( ) . withName ( PROP_I ) . withDirection ( Direction . IN ) . withReferenceType ( TYPE_2 ) ) ) ) ) ) )
Assert . assertEquals ( i + "! " , expected , f . value ( i ) , 2 * Math . ulp ( expected ) )
assertThat ( targetSubdirectory , is ( expectedTargetSubDirectory ) )
assertThat ( dummified . getAttributes ( ) , containsInAnyOrder ( new RpslAttribute ( "mntner" , "AARDVARK-MNT" ) , new RpslAttribute ( "descr" , "Mntner for guy's objects" ) , new RpslAttribute ( "admin-c" , "FB99999-RIPE" ) , new RpslAttribute ( "tech-c" , "FB99999-RIPE" ) , new RpslAttribute ( "upd-to" , "***@ripe.net" ) , new RpslAttribute ( "auth" , "X509-1" ) , new RpslAttribute ( "auth" , "X509-1689" ) , new RpslAttribute ( "auth" , "MD5-PW # Filtered" ) , new RpslAttribute ( "auth" , "SSO # Filtered" ) , new RpslAttribute ( "notify" , "***@ripe.net" ) , new RpslAttribute ( "mnt-by" , "AARDVARK-MNT" ) , new RpslAttribute ( "source" , "RIPE" ) ) )
assertTrue ( set . isEmpty ( ) )
assertTrue ( problemState )
assertEquals ( 1 , newSize - initialSize )
assertThat ( aClass . getCompilationUnitAsString ( ) , equalToIgnoringWhiteSpace ( expectedResult ) )
assertNull ( "Got view from a provider for incorrect view name" , view )
assertEquals ( - 1 , find )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigLong ( ) ) . isInfoEnabled ( ) )
assertInjectsCollectionsOfMocks ( exampleTest )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( 5 , map . size ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertThat ( eqlTranService . queryDataCount ( ) , is ( 0 ) )
assertEquals ( "select entity_0 from Entity entity_0 where entity_0.code not in ( select entity_1.code from Entity entity_1 )" , select . getQuery ( ) )
assertThat ( problems . size ( ) , is ( 0 ) )
assertEquals ( numEvents , count )
assertEquals ( "" , result )
assertThat ( output . toString ( ) , is ( "/* migration script */\n" + "create table widgets (id integer generated by default as" + " identity (start with 1), description varchar(255)," + " name varchar(255), primary key (id));\n" ) )
Assert . assertEquals ( expect_sql , sql )
assertThat ( cy . atMonth ( 1 ) , is ( CalendarMonth . of ( 2016 , 1 ) ) )
assertEquals ( 0.1 , r , 0 )
assertThat ( out . toPlainString ( ) , startsWith ( "0.0005000000" ) )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC )
assertEquals ( 4 , actualEntries . size ( ) )
assertNotNull ( constructorInjectable . getInjectionTarget ( ) )
assertEquals ( "OFF" , level . toString ( ) )
assertThatReadableIs ( false )
assertTrue ( propertiesMatch ( dataTableOriginal , dataTableCopy ) )
Assert . assertEquals ( 1 , n )
JSONAssert . assertEquals ( expected , bucketFieldsJson , false )
Assert . assertEquals ( ( Integer ) 50 , k )
assertEquals ( 5 , firehoseItemCount )
assertThat ( wrapped , is ( PrimeFacesPagedDataModel . class ) )
assertNull ( "principal should not be found" , principal )
assertEquals ( 10L , impl . elapsedTime ( start , end ) )
assertThat ( PlainTimestamp . of ( date , time ) . getMonth ( ) , is ( 4 ) )
assertLinkWithSameUnitsOk ( LinkInfo . UNIT_TYPE . PROTOCOL , units )
assertEquals ( "Value {test" , result )
Assert . assertEquals ( "Incorrect condition" , "((WTextField=\"1\" and WTextArea=\"2\") or (WDropdown=\"3\" and WMultiSelect=\"4\"))" , builder . build ( ) . toString ( ) )
assertEquals ( "1 minute 30 seconds" , repairStatus . getDuration ( ) )
assertEquals ( FACTORY , sink . result ( ) )
assertEquals ( cls . getNNF ( ) , nnf )
Assert . fail ( )
assertThat ( pong , instanceOf ( ListenableFuture . class ) )
Assert . assertEquals ( 0 , doc . getFirstPage ( ) . getResources ( ) . getPdfObject ( ) . size ( ) )
Assert . assertTrue ( x . startsWith ( "file:///" ) )
assertThat ( output . readValuesToList ( ) , equalTo ( expectedValues ) )
assertEquals ( 10000 , connStr )
assertNull ( entryRelationship )
Assert . assertEquals ( block . getBlockLines ( ) . size ( ) , 3 )
assertGenerators ( result , generator . getClass ( ) , AnInt . class )
assertEquals ( nrOfProcessInstances * 100 , COUNTER . get ( ) )
assertEquals ( "ODataDemo.ODataDemoFunctionImport" , fullyQualifiedFunctionImportName )
assertEquals ( "9208675309" , parsedTelePhoneNumber )
assertEquals ( OperatingSystem . MAC_OSX , OperatingSystem . get ( ) )
Assert . areEqual ( true , countA == 0 && countB == 10 , "验证优先级的写" )
assertEquals ( "Expected 0 results!" , 0 , n )
assertThat ( terminologyService . isSubclassOf ( c1 , c2 ) , is ( false ) )
assertTrue ( numberFour . before ( superBowlXLV ) )
assertTrue ( output . startsWith ( "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">" ) )
assertEquals ( RequestParameter . create ( true ) , validator . isValidCollection ( Arrays . asList ( "true" ) ) )
assertEquals ( r1 , r2 )
assertTrue ( skillConstraint . fulfilled ( insertionContext ) )
assertThat ( result , is ( true ) )
assertThat ( isTransactionRelated , is ( false ) )
assertMockEndpointsSatisfied ( )
assertTrue ( prefs . matches ( t ) )
Assert . assertArrayEquals ( expected , actualNames )
assertNull ( sandbox . eval ( "$ARG;" ) )
assertThat ( result . _id , equalTo ( id ) )
Assert . assertEquals ( "Value is incorrect" , map ( OFFSET_0_STRING , "test" ) , value )
assertEquals ( version . toString ( ) , "2" )
assertResultSet ( res )
assertEquals ( x , z )
assertFalse ( mockedProvider . getExternal ( ) )
assertEquals ( violations . size ( ) , 0 )
assertNotNull ( Event . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( expResult , result )
assertSame ( expected , toTest . asStream ( ) )
Assert . assertEquals ( "liangpengyv@fir.im" , email . getSubject ( ) )
assertEquals ( 3.4 , cs . getY ( 0 ) , TOL )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "adm2Name" ) )
assertEquals ( ( short ) 2 , mutNum . shortValue ( ) )
assertEquals ( response , webRespose )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertArrayEquals ( new String [ ] { "test-resource-1.txt" } , resources . toArray ( new String [ resources . size ( ) ] ) )
Assert . assertEquals ( "110_org.happyfaces.domain.TestEntity" , converter . getAsString ( null , null , testEntity ) )
assertCapturedMessage ( eventMessage ( "sess1" , "/topic" , "eventMessage" ) , eventMessage ( "sess2" , "/topic" , "eventMessage" ) )
Assert . fail ( "Expected MissingFlowFileException" )
assertEquals ( SimpleScore . of ( 42 ) , scoreDirector . calculateScore ( ) )
assertEquals ( "bar" , resourceConfigHelper . getStringProperty ( "foo" ) )
assertEquals ( "啶�啶�啷�" , t . format ( new Date ( 0 ) ) )
assertEquals ( "boolean mapper serialization is wrong" , expected , actual )
assertOut ( "with (a)\n  b;" )
assertEquals ( "a\n" , mat . group ( ) )
assertEquals ( "Greetings Tenka to Rest service." , response . body ( ) . asString ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertTrue ( "Random braces - two" , "A }} ends an escaped sequence" . equals ( result ) )
Assert . assertTrue ( children . size ( ) > 0 )
assertEquals ( "1 m氓nad sedan" , t . format ( then ) )
Assert . assertEquals ( "h" , inst . getValue ( ) )
Assert . fail ( "IllegalArgumentException expected but not thrown" )
assertEquals ( Status . FAIL , jxm . getStatus ( ) )
assertFalse ( ParseUtil . paramClassesMatch ( false , memberClassList , sigclassList , true ) )
Assert . assertTrue ( uniqueFrequencies . size ( ) > 0 )
assertEquals ( 404 , output . getStatusCode ( ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( "239 122 87 154 40 7 171 115 207 12 130 71 155 254 129 237" , visualized )
assertEquals ( person , result )
assertEquals ( ResultType . ERROR , result . getType ( ) )
Assert . assertTrue ( this . ontologyServiceResult == 0 )
assertEquals ( 0 , runtimeService . createProcessInstanceQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertEquals ( "abc" , streamToString )
assertMockEndpointsSatisfied ( )
assertEquals ( wrappedTemplate + " > ?" , test . build ( ) )
assertTrue ( parent . isPrefixOf ( fixture ) )
assertThat ( target , notNullValue ( ) )
assertObjectEquals ( "[{f:1},{f:2}]" , run ( INT_BEAN_ARRAY , s ) )
assertNull ( myTestInstance . restart ( mockCallback , b ) )
assertThat ( isPresent , is ( false ) )
assertEquals ( data , change . getChangeData ( ) )
assertArrayEquals ( new Object [ ] { } , t . getVisibleColumns ( ) )
Assert . assertEquals ( 404 , response . getStatus ( ) )
assertTrue ( md . getDocument ( ) == null )
assertEquals ( consoleResult , masterAddress . getHostName ( ) + "\n" )
assertTrue ( "Credential store should be created" , ops . exists ( TEST_CREDENTIAL_STORE_ADDRESS ) )
Assert . assertTrue ( result . getNumElementsProcessed ( ) == 0 )
assertEquals ( 2 , c . getRowCount ( ) )
assertions . contains ( )
assertFalse ( isDisabled )
assertEquals ( 0 , cities . size ( ) )
Assert . assertEquals ( "some [url=http://something]text" , formatter . format ( "some [url=http://something]text" , defaultOptions ( ) ) )
assertNotNull ( SigningKey . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertFalse ( entry . containsAttribute ( "administrativeRole" ) )
assertEquals ( "application/json;odata.metadata=minimal" , request . getResponseContentType ( ) . toContentTypeString ( ) )
assertEquals ( "description" , description )
Assert . assertEquals ( "Password is not correct" , "pass" , redisURI . password ( ) )
assertEquals ( in . value , out . value )
assertTrue ( output . startsWith ( "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">" ) )
assertNotNull ( getFixture ( ) . review ( null , master , slave ) )
assertArrayEquals ( TEST_DATA , actualBytes )
assertEquals ( "'Anonymous Comparator class'" , ToString . toStringOf ( anonymousComparator ) )
maps . assertHasEntrySatisfying ( info , actual , null , isNull )
assertPutResult ( ResponseCode . FLUSH_DISK_TIMEOUT )
assertThat ( errorMail . getMsg ( ) , startsWith ( expectedMSG ( ) ) )
assertEquals ( text , adapter . getString ( 2 ) )
Assert . assertEquals ( 200 , li . getValue ( 50 ) , 1e-5 )
assertArrayEquals ( array1 , array )
assertThat ( "A" , matches ( exp ) )
assertPushPromiseFrame ( frame , streamId , promisedStreamId , Unpooled . EMPTY_BUFFER )
Assert . assertEquals ( result , collector . output . get ( Utils . DEFAULT_STREAM_ID ) )
assertEquals ( 89 , x . value )
assertLabelHasBeenDisplayed ( "Nazwa: filename.txt" )
assertNull ( entity . getName ( ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Stop>" + "<genericTag key=\"value\">" + "someText" + "</genericTag>" + "</Stop>" , elem . toXml ( ) )
assertEquals ( true , classUnderTest . isCacheSchemaIndependentMetaData ( ) )
assertNotNull ( fixture )
Assert . assertTrue ( ret . toString ( ) . contains ( "\"2003-02-01 00:00:00\",\"01/02/2003\",\"\",\"\",\"\",\"\",\"01/02/2003\",\"01/02/2003\"," ) )
assertEquals ( localeImportHandler . loadPropertiesByXml ( repFileBundleMock ) . size ( ) , 1 )
assertThat ( task , is ( pojo ( Task . class ) . where ( "id" , is ( "0kzzo1i0y4jz6027t0k7aezc7" ) ) . where ( "version" , is ( pojo ( Version . class ) . where ( "index" , is ( 71L ) ) ) ) . where ( "createdAt" , is ( Date . from ( Instant . parse ( "2016-06-07T21:07:31.171892745Z" ) ) ) ) . where ( "updatedAt" , is ( Date . from ( Instant . parse ( "2016-06-07T21:07:31.376370513Z" ) ) ) ) . where ( "spec" , is ( pojo ( TaskSpec . class ) . where ( "containerSpec" , is ( pojo ( ContainerSpec . class ) . where ( "image" , is ( "redis" ) ) ) ) . where ( "resources" , is ( pojo ( ResourceRequirements . class ) . where ( "limits" , is ( pojo ( com . spotify . docker . client . messages . swarm . Resources . class ) ) ) . where ( "reservations" , is ( pojo ( com . spotify . docker . client . messages . swarm . Resources . class ) ) ) ) ) ) ) ) )
test . assertResult ( )
assertThat ( z_F4JInternalParseUtil . getPrimitiveLong ( "long" , json ) , is ( - 1l ) )
assertEqualLines ( "invalid renaming in p2.A" , getFileContents ( getOutputTestFileName ( type , folder ) ) , cu . getSource ( ) )
assertThat ( testDataSourcePath . getInstanciatedPath ( "${user.dir}/simple-semicolon-data.csv" ) , is ( "/home/john/work/simple-semicolon-data.csv" ) )
assertSame ( node , transform ( node ) )
assertEquals ( fileData . getBytes ( ) [ 42 ] , fileRequest . getByte ( 42 ) )
assertArrayEquals ( new Class [ ] { int . class } , c . getParameterTypes ( ) )
assertEquals ( expResult , result )
assertEquals ( asStatementList ( "\"foo;\\; b  a r\\\"\"'foo;\\; \\'b  a r\\\"'''\"foxlov  e \"" ) , splitter . split ( expression ) )
assertEquals ( "http://localhost/?foo=test" , uri . toString ( ) )
assertNotNull ( ShortCode . fetcher ( "MGXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( 403 , response . getStatus ( ) )
Assert . assertEquals ( 246 , ( ( IntegerMemberValue ) toAnno . getMemberValue ( "copyClassName" ) ) . getValue ( ) )
assertEquals ( body . toString ( ) , "123" )
assertTrue ( permitted )
assertEquals ( Long . MAX_VALUE , victim . readLong ( ) )
assertEquals ( 1 , result . size ( ) )
Assert . assertSame ( bitmap , ic . getBitmap ( ) )
assertXMLEqual ( "Invalid WSDL returned" , expectedDocument , resultingDocument )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertNotNull ( sourceLoader )
assertEquals ( 4 , count )
assertNotEquals ( identifier1 , "test" )
assertObjectEquals ( "[null,null,{f:'a'},{f:'b'},{f:'c'}]" , p . run ( bs , in , sa ) )
assertEquals ( "" , DomainFormatUtility . buildCapabilitiesString ( list ) )
assertEquals ( Arrays . asList ( 5 ) , procedureExecution . getOutputParameterValues ( ) )
assertEquals ( expected , actual )
assertTrue ( s1 . equals ( s2 ) )
assertArrayEquals ( d . toString ( ) . getBytes ( ) , d . asTextBytes ( ) )
assertFalse ( rv . isEmpty ( ) )
assertRequest ( "POST" , "Call/%s/Play/" , callId )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 1 ) )
Assert . assertEquals ( v1 , KCVSUtil . get ( store [ 0 ] , k , c1 , tx [ 0 ] [ 0 ] ) )
assertEquals ( 1 , session . from ( $ ( noteVar ) ) . where ( where ) . list ( $ ( noteVar ) ) . size ( ) )
assertNotNull ( result )
assertEquals ( "Next row should've been rendered below the spacer" , spacerTop + 100 , rowTop , WidgetUtil . PIXEL_EPSILON )
assertNull ( Files . getAttribute ( file1 , "fileKey" ) )
assertEquals ( 5 , p1 . distance ( r ) , PRECISION )
assertThat ( event , is ( expected ) )
assertEquals ( 1000 , objmap . get ( "field_int" ) )
assertEquals ( 600084223 , widget . color )
assertEquals ( "2010-01-10T11:24:36-08:00" , string )
assertEquals ( "Value Descriptor id not retured as expected" , TEST_ID , controller . add ( valueDescriptor ) )
Assert . assertNotNull ( node )
assertEquals ( p1 , p2 )
assertThat ( CompUInt128 . extractValue ( actual ) , Is . is ( expected ) )
assertTrue ( writer . toString ( ) . contains ( "public DomainClass getcId() {" ) )
assertTrue ( correct . get ( namedEntity . getLabel ( ) ) . equals ( disambiguatedURL ) )
assertEquals ( expected , actual )
Assert . assertThat ( e . getMessage ( ) , containsString ( expected ) )
assertThat ( version , is ( equalTo ( "v1.0.2" ) ) )
assertEquals ( "http://test.com/1?a=&b=" , HttpRequest . append ( "http://test.com/1" , params ) )
assertThat ( sheet . sheetName , is ( "�枫�笺����锛�锛�锛�" ) )
assertEquals ( expected , actual )
Assert . assertNotNull ( result . getFirstHeader ( "Date" ) )
context . assertTrue ( gotit . get ( ) )
assertTrue ( count > 0 )
assertTrue ( ! _event . hasTimeout ( ) )
assertEquals ( expected , actualQuery )
assertEquals ( 0.5 , Capacity . divide ( cap1 , cap2 ) , 0.001 )
assertSeen ( visible )
assertThat ( databaseHelper . lookupObject ( ObjectType . PERSON , "PP1-TEST" ) . containsAttribute ( AttributeType . CHANGED ) , is ( false ) )
assertCapacityUnitEqual ( cu , new CapacityUnit ( 1 , 0 ) )
assertEquals ( "" , result )
runner . assertAllFlowFilesTransferred ( PutHive3QL . REL_RETRY , 1 )
assertEquals ( mockJaxbList , response )
assertEquals ( expResult , result , 0.000001 )
assertThat ( result . getValueForAttribute ( AttributeType . ROUTE ) . toString ( ) , is ( "15.0.0.0/8" ) )
assertEquals ( "file Name" , message )
assertEquals ( "Values not equal: " + output + "!=" + expected , output , expected )
Assert . assertNull ( WebUtil . normalizeLocale ( s ) )
assertNotNull ( "Friends list is null" , friends )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_BOXING ) )
assertThat ( findFeature ( features , "StatusNotification" ) , is ( instanceOf ( StatusNotificationFeature . class ) ) )
assertThat ( isEquals , is ( true ) )
assertEquals ( "two" , readedAug . getContainerWithUses ( ) . getLeafFromGrouping ( ) )
assertEquals ( a , a2 )
assertThat ( "There should be the default code generator and the test edit one" , codeGenerators . size ( ) , is ( 2 ) )
assertThat ( option , is ( new IntOption ( ) ) )
Assert . fail ( "Caught unexpected exception: " + e . getClass ( ) . getSimpleName ( ) )
assertNull ( activity . getHistoryTimeToLive ( ) )
assertEquals ( 4 , taskService . getMapOfTasksFromAllProjectsIncludedInTiTAProject ( ) . size ( ) )
Assert . assertEquals ( "a" , KeyValueFormatter . formatCommaSeparatedList ( list ) )
assertFalse ( mStore . getChild ( mRoot , child . getName ( ) ) . isPresent ( ) )
Assert . assertEquals ( shifted . getPos ( ) , 89 )
assertNotNull ( result )
assertEquals ( expectedQuery , actualQuery )
assertThat ( description . toString ( ) , is ( "a stage that completed to a value that was <2>" ) )
assertEquals ( version , VersionUtils . getVersion ( ) )
Assert . assertEquals ( "" , WebUtil . getContextPath ( ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( report . contains ( String . valueOf ( maxUpdates ) ) )
assertMockEndpointsSatisfied ( )
assertEquals ( expected , actual )
assertNoProblems ( )
assertFiles ( "audit" , "audit.1970-01" , "audit.1970-02" )
assertions . isNotEmpty ( )
editor . assertProblems ( "bogus|Unknown property" )
assertExpectedResponse ( r , Response . Status . OK . getStatusCode ( ) , Boolean . TRUE . toString ( ) )
assertNotNull ( result )
assertEquals ( unused , h . getUnused ( ) )
assertThat ( rendered , is ( test [ 1 ] ) )
Assert . assertNotNull ( dbRangerPolicyList )
assertEquals ( 15 , cap . get ( 0 ) )
assertEquals ( obj . toString ( ) , "NetShareInfo0{netName: \"NetName\"}" )
assertEquals ( map , map2 )
assertThat ( foundResources , contains ( p1id . getValue ( ) ) )
assertTrue ( future . isCancelled ( ) )
assertEquals ( "load is complete" , loadException )
assertEquals ( "person found inside range" , person , found )
assertEquals ( j * ( long ) TIME , fieldValueGenerator . generateNextValue ( value ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertArrayEquals ( fixed . bytes ( ) , ( ( GenericData . Fixed ) r . get ( "fixed1" ) ) . bytes ( ) )
assertEquals ( "13.05.2014 23:52:28" , dateAsString )
Assert . assertEquals ( simpleModel , models . get ( SIMPLE_MODEL ) )
assertEquals ( asList ( "a" , "b" , "c" , "d" ) , StreamEx . of ( data . entrySet ( ) ) . flatArray ( Entry :: getValue ) . toList ( ) )
assertThat ( query . count ( ) , is ( 3L ) )
Assert . assertEquals ( test . getExpectedEntropy ( ) , test . getEntropy ( ) , test . getDelta ( ) )
assertTrue ( contextMapRef . get ( ) . isEmpty ( ) )
assertEquals ( expected , query . export ( ) )
assertMessage ( "<type>DELEGATED</type>" , 4 )
assertEquals ( 201 , output . getStatusCode ( ) )
assertTrue ( entity . getDistanceFromEarth ( ) == 987654321098765L )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( result )
Assert . assertTrue ( StraightOrder . is ( p1 , p2 , p3 , IntegerNumberSystem . getInstance ( ) ) )
assertThat ( any . contains ( WEEKDAY_IN_MONTH ) , is ( true ) )
assertEquals ( 255 , result . getVoxel ( 0 , 4 , 0 ) , .01 )
assertEquals ( "tableName" , database . escapeTableName ( null , null , "tableName" ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L * 24L * 60L * 60L * 1000L ) , mapper . readBitemporalDate ( columns , "ttTo" ) )
Assert . assertFalse ( explodeDeploymentContentAndGetOutcome ( TEST_DEPLOYMENT_NAME , "web.war" ) )
Assert . assertTrue ( optimum . getValue ( ) > 0.1 )
assertSame ( BuildUpstreamMode . CHANGED , configuration . buildUpstreamMode )
assertPutFails ( occurrence , OntopiaRestErrors . MANDATORY_OBJECT_IS_NULL )
Assert . assertEquals ( "{ \"error\" : {\"statusCode\":401,\"code\":\"ERR10001\",\"message\":\"AUTH_TOKEN_EXPIRED\",\"description\":\"Jwt token in authorization header expired\"} }" , status . toString ( ) )
assertEquals ( "An :grinning:awesome :smiley:string with a few :wink:emojis!" , result )
assertLog ( Log . INFO , "test info argument argument2" )
assertEquals ( Years . of ( - 4 ) , test12 . dividedBy ( - 3 ) )
assertNull ( cookie )
Assert . assertEquals ( 0 , queue . size ( ) )
assertEquals ( SystemInfo . UnderDetermined , r )
assertTrue ( result )
assertEquals ( URI . create ( "http://localhost:8080/base/resource" ) , uri )
assertEquals ( exp , arr2 )
assertEquals ( expected , output )
Assert . assertEquals ( lukasz , received . getPayload ( ) )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "indexPage" ) , "You arrived at index page" ) . apply ( driver ) )
assertNotNull ( "missing handler: " + cmd , handler )
assertEquals ( ( short ) 14 , result )
assertEquals ( 1 , constructors . length )
assertEquals ( new BigDecimal ( "1234.45" ) . toBigInteger ( ) , bigD . toBigInteger ( ) )
assertThat ( result , is ( "hi!" ) )
assertEquals ( androidAppMetadata , ANDROID_APP_METADATA )
assertEquals ( 20 , read )
assertEquals ( true , result [ 0 ] )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( 1 , count )
assertThat ( subject . getNotificationHeader ( ) , is ( " - From-Host: 127.0.0.1\n - Date/Time: Sun Mar 3 12:55:00 2013\n" ) )
assertNull ( IndexHtmlDispatcher . make ( context , TestInterface . class ) )
Assert . assertEquals ( legacyVariantString , variant . toLegacyString ( ) )
assertThat ( target . parse ( ) , is ( false ) )
assertTrue ( contains )
assertTrue ( "The properties authz in security realm should be created" , ops . exists ( TEST_SECURITY_REALM_PROPERTIES_AUTHZ_ADDRESS ) )
assertEquals ( 4 , fixture . mark ( ) )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertThat ( builder , is ( CoreMatchers . any ( BaseWssSocketBuilder . class ) ) )
assertSame ( fieldVar , result )
Assert . assertTrue ( infEx . isType ( DummyObject . class ) )
assertEquals ( expected , actualQuery )
assertArrayEquals ( new Object [ ] { 5 , "five" } , ( Object [ ] ) execution . next ( ) . get ( 0 ) )
assertThat ( checkFailed , is ( true ) )
assertSame ( val , ConfigUtils . getMap ( config , null , "no-object" , "some-map" ) )
assertEquals ( PublicationStatus . PRIVATE , r . getLastPublishedVersionsPublicationStatus ( ) )
assertEquals ( IllegalArgumentException . class , e . getClass ( ) )
assertTokens ( Tokens . ID , Tokens . ID , Tokens . ID )
assertEquals ( "test" , read . getString ( db . DATA . VALUE ) )
Assert . fail ( "Rollout plan has too many children" )
assertThat ( options . isStrict ( ) , equalTo ( true ) )
assertEquals ( expResult , result )
assertEquals ( "Infinity" , sb . toString ( ) )
assertEquals ( 10 , all . size ( ) )
Assert . fail ( )
assertThat ( "��瑷�璇ヨ�淇��规��浣�涓��卞奖��浜�3琛�" , effect , equalTo ( 3 ) )
assertEquals ( TransformingIterator . class , hibernateHandler . iterate ( nativeQuery , factoryExpression ) . getClass ( ) )
assertEquals ( "<p>This is <em>Sparta</em></p>\n" , doc )
given ( ) . when ( ) . get ( resourcePrefix ) . then ( ) . statusCode ( 200 ) . assertThat ( )
assertFalse ( isReady )
Assert . assertEquals ( Result . SUCCESS , future . getResult ( ) )
assertNotNull ( r )
assertFalse ( entity . isValid ( ) )
assertResponseContainsModel ( "<img class=\"componentIcon\" src=\"modelregistry/api/componenticon\"/> nt:unstructured" , Model . class , 123L , "modelName" )
assertArrayEquals ( uncompressed , data )
assertEquals ( "0.0" , testResult )
assertSame ( cause , CRestException . handle ( e ) )
assertTrue ( result )
Assert . assertEquals ( TxStatusMediaType . TX_H_ROLLBACK , content )
assertThat ( callable . call ( ) , is ( "who's there?" ) )
this . assertUploadBinary ( "servicetemplates/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Fservicetemplates%252Ffruits/baobab_serviceTemplate/plans/harvest_Plan/file" , "servicetemplates/plan.zip" )
assertEquals ( mp . getCount ( ) , 2 )
assertFalse ( TextFileFilter . INSTANCE . accept ( f ) )
assertFalse ( icons . isEmpty ( ) )
Assert . assertNotNull ( deserializedSpec )
arrays . assertContainsOnly ( description , new short [ 1 ] , new short [ 0 ] )
assertions . isNotLessThan ( expected )
assertNotNull ( "Social Friends (JSON STRING)" , friends )
assertEquals ( "%F0%9F%98%83" , Encoder . encode ( s ) )
assertTrue ( found )
assertEquals ( "av0b" , nodeToStringTransformer . transform ( ) )
assertEquals ( "job" , manager . getType ( ) )
assertNotNull ( "Messages are not null" , messages )
assertEquals ( schedulingIterations * noOfAlerts , list . size ( ) )
Assert . assertTrue ( GeneralUtilities . safeEquals ( zero , zero ) )
assertSame ( epi , engine . getClientEndpointPolicy ( ei , conduit , msg ) )
Assert . fail ( "Cannot marshall a complex map" )
assertEquals ( ( short ) 8 , result . getShortValue ( ) )
assertThat ( token . getType ( ) , is ( PCRELexer . OneDataUnit ) )
assertEquals ( "http://example.com:signed:0:0:0:0:0:0:token" , builder . build ( ) )
Assert . assertTrue ( isTmp )
Assert . assertTrue ( out . contains ( "msg1:people common msg2:cars common" ) )
Assert . assertEquals ( chave , infoEventoManifestacaoDestinatario . getChave ( ) )
assertThat ( actual , contains ( likeVertex ( ) . withTimId ( "id3" ) , likeVertex ( ) . withTimId ( "id2" ) , likeVertex ( ) . withTimId ( "id1" ) ) )
assertThat ( result , contains ( 4 , 4 , 4 , 3 ) )
assertEquals ( 33077 , timeout )
assertTrue ( actualResult )
assertEquals ( "wrong result" , new BigDecimal ( "24" ) , expression . getValue ( ) . asNumber ( ) )
assertNotSame ( result , arg )
assertEquals ( "foobar:bar" , result )
TestCase . assertTrue ( result )
assertEquals ( "aTestName" , classUnderTest . getName ( ) )
assertEquals ( 3 , uploadResults . size ( ) )
assertArrayEquals ( bytes , ssdbClient . getBytes ( "bytes" ) )
assertTrue ( sink . getInvalidConfiguration ( ) )
assertEquals ( p1 . getFirst ( ) . add ( p2 . getFirst ( ) ) , p1 . getSecond ( ) . add ( p2 . getSecond ( ) ) , 0d )
assertEquals ( ZonedDateTime . parse ( "2017-10-01T09:00-07:00" ) , getNextExecutionTime ( myCron , time ) )
Assert . assertEquals ( 1 , listener . getId ( ) )
assertEquals ( 2 , searcher . search ( q , 100 ) . totalHits )
assertNotNull ( "The connection exists" , stubConnectionHandle . getConnection ( CLUSTER_NAME ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertNull ( entity . getSize ( ) )
assertSendBodyReceivesCorrectPayload ( new ByteArrayInputStream ( data ) , expectedBody )
assertNull ( basicAccessAuthenticator . authenticate ( request ) . get ( ) )
assertThat ( inputStream , nullValue ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertTrue ( "Button click should be logged" , logContainsText ( "Button clicked!" ) )
assertEquals ( "public static void main(String[] args) {}" , actualContent )
assertNotNull ( item )
assertEquals ( "value" , identifiable . getValue ( ) )
assertNotNull ( SyncList . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertSame ( currentUser , currentUser2 )
assertFalse ( member . isPresent ( ) )
assertEquals ( "addressing" , ruleName )
assertEquals ( "\"1\"truenull" , mustache . render ( Json . createReader ( new StringReader ( "[\"1\",true,null]" ) ) . read ( ) ) )
assertEquals ( "DefaultEndpointsProtocol=https;AccountName=mavenwagontests" , ConnectionStringUtils . storageConnectionString ( connectionString ) )
assertThat ( errors , hasGlobalErrors ( "error.name" ) )
assertFalse ( entity . isValid ( ) )
assertEquals ( "012" , result . toString ( ) )
assertEquals ( 0 , violations . size ( ) )
assertNull ( proxy . getConnection ( ) )
assertEquals ( 200 , resp . getStatusLine ( ) . getStatusCode ( ) )
assertChangeResultsPage ( changeResultsPage )
assertEquals ( "https://api-fxtrade.oanda.com/v1/accounts/123456/trades/1800805337" , service . getTradeForAccountUrl ( tradeId , OandaTestConstants . accountId ) )
assertArrayEquals ( randBytes1 , randBytes2 )
assertThat ( list . size ( ) , is ( not ( 0 ) ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( 0 , engineRule . getRuntimeService ( ) . createVariableInstanceQuery ( ) . count ( ) )
assertThat ( initiativeDao . findInitiatives ( search , userId , neverClosedBecauseOfMinSupportCount ) . list . size ( ) , is ( 4 ) )
assertThat ( stdOutContent . toString ( ) , equalsIgnoringOSSpecificLineSeparators ( "1.7.2-SNAPSHOT\n" ) )
assertFalse ( validator . validate ( connectionLimits , PUT ) . passedValidation ( ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
Assert . assertEquals ( expected , quickTypeDependencyList )
assertTrue ( population . size ( ) >= 91 )
assertArrayEquals ( refar , d . getResult ( ) )
assertFalse ( instance . isBuilding ( event , project ) )
assertBoard ( "�尖�尖�尖�尖��\n" + "�尖��2�烩��\n" + "��x��1��\n" + "�尖��x ��\n" + "�尖�尖�尖�尖��\n" )
assertEquals ( Arrays . asList ( null , NoteType . TYPE1 , NoteType . A , NoteType . B ) , session . from ( $ ( n ) ) . orderBy ( $ ( n . getType ( ) ) . ordinal ( ) . asc ( ) ) . list ( $ ( n . getType ( ) ) ) )
assertEquals ( "SELECT TO_DATE(TEST_HIST.CREATED_AT) DT, " + "COUNT(TEST_HIST.ID) NUM_QUERIES " + "FROM H2.PUBLIC.TEST_HIST INNER JOIN H2.PUBLIC.UINFO " + "ON TEST_HIST.QBOL_USER_ID = UINFO.QU_ID INNER JOIN H2.PUBLIC.ACC " + "ON UINFO.A_ID = ACC.ID " + "WHERE ACC.CUSTOMER_NAME LIKE 'amogh' AND " + "(TO_DATE(TEST_HIST.CREATED_AT) >= " + "DATE_SUB(FROM_UNIXTIME(UNIX_TIMESTAMP()), 150) " + "AND TEST_HIST.COMMAND_TYPE = 'HiveCommand' " + "AND TEST_HIST.QLOG LIKE '%\\\"HIVE_VERSION\\\":\\\"1.2\\\"%') " + "GROUP BY TO_DATE(TEST_HIST.CREATED_AT) " + "ORDER BY DT" , hiveQuery )
Assert . assertEquals ( 1 , ret . getId ( ) )
assertEquals ( returnValue , result )
assertEquals ( "clusterName1" , app . getClusterName ( ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
Assert . assertArrayEquals ( convert ( expected ) , solution )
assertNotEquals ( a , b )
assertEquals ( 0 , found )
assertEquals ( "Test" , doc . getContentField ( "out" ) . toString ( ) )
assertEquals ( "TWFu" , BeamRowToBigtableFn . primitiveFieldToString ( TypeName . BYTES , bytes ) )
assertEquals ( 23 , instance . foo ( ) )
assertNull ( "Required profiles is not null" , new FelixPlatformBuilderF140T141 ( m_bundleContext , "version" ) . getRequiredProfile ( m_platformContext ) )
assertTrue ( Graphene . waitGui ( ) . withTimeout ( 60 , TimeUnit . SECONDS ) . until ( ExpectedConditions . textToBePresentInElementLocated ( By . id ( "message" ) , UNAUTHORIZED ) ) )
Assert . assertEquals ( 5 , numericValue . intValue ( ) )
Assert . assertEquals ( 0.0 , diag . getEntry ( 1 , 2 ) , Precision . SAFE_MIN )
assertScoreAndParse ( content , null , 6 )
assertEquals ( "SELECT firstname, lastname UNION SELECT a, b" , statement . toString ( ) )
assertTrue ( dbStopped )
assertEquals ( "Evelyn Waugh" , book . getAuthor ( ) )
assertThat ( result , is ( sameInstance ( dropPartitionsRequest ) ) )
Assert . assertEquals ( 381 , couples . count ( ) )
assertEquals ( 0 , argList . size ( ) )
assertThat ( changeFileNames , contains ( "changes1.nqud" , "changes2.nqud" ) )
assertTrue ( rowChange . compareTo ( rowChange2 ) == 0 )
assertEquals ( 1 , x )
assertThat ( paginate , is ( not ( nullValue ( ) ) ) )
assertTrue ( authzSubjectManager . getUserPrefs ( authzSubjectManager . getOverlordPojo ( ) , user . getId ( ) ) . toProperties ( ) . isEmpty ( ) )
assertEquals ( expected . getTime ( ) , parsedDate . getTime ( ) )
assertThat ( thread . getName ( ) , CoreMatchers . containsString ( "custom-prefix-test-" ) )
Assert . assertThat ( affordance . getVariableNames ( ) , Matchers . contains ( "id" ) )
assertTrue ( result . contains ( expectedResult ) )
assertEquals ( "Find by name not returning a list with one reading" , 1 , readings . size ( ) )
assertNull ( "An empty byte array should be translated to null" , ser . fromByteBuffer ( ByteBuffer . wrap ( new byte [ 0 ] ) ) )
Assert . assertEquals ( polygon , result . getValue ( ) )
assertEquals ( 503 , response . getStatus ( ) )
assertThat ( l , greaterThan ( 1L ) )
Assert . assertEquals ( "/wro4j/wro/path/to/" , Context . get ( ) . getAggregatedFolderPath ( ) )
UmaTestUtil . assert_ ( pat )
assertEquals ( result , log ( varX ) * E , 0.0 )
assertThat ( coll , equalTo ( reference ) )
Assert . assertEquals ( expected , result )
assertFalse ( obj . containsKey ( "ignoredValue" ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoVolume ( ) . toString ( ) )
Assert . assertNotSame ( "Pass phrases should not match" , phrase1 , phrase2 )
assertionHelper . assertLocalScratchFileLengthEquals ( IRODS_TEST_SUBDIR_PATH + "/" + testRetrievedFileName , testFileLength )
assertThat ( meanTaxFactor , equalTo ( TAX_FACTOR ) )
assertEquals ( list , building1 . getRooms ( ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( "<salesforce-datastore name=\"name\">\n" + "  <username>username</username>\n" + "  <password>" + PASSWORD_ENCODED + "</password>\n" + "  <security-token>securityToken</security-token>\n</salesforce-datastore>\n" , transform ( externalized ) )
assertEquals ( "a\n" , found )
assertEquals ( "b/c" , result . toString ( ) )
assertThat ( expected , equalTo ( actual ) )
assertEquals ( out . get ( ) , 1 / Math . sin ( 1234567890 ) , 0.0 )
assertThat ( joynrVersionnAnnotation . minor ( ) , equalTo ( 11 ) )
assertEquals ( parseCalendar ( "20131103-07:45:00" , TimeZone . getTimeZone ( "UTC" ) ) , dh . getCalendarAfter ( easternTime ) )
assertEquals ( getFailureMessage ( ) , assertion , slice )
Assert . assertEquals ( 1 , counter . get ( ) )
assertTrue ( ! result )
assertEquals ( PojomatorFactory . makePojomator ( Simple . class ) . doToString ( new Simple ( ) ) , "Simple{x: {foo}}" )
assertFalse ( "Did not expected to find GROUP BY limit optimization in: " + query , QueryUtil . getExplainPlan ( rs ) . contains ( " LIMIT 3 GROUPS" ) )
assertTrue ( seq . getNumberOfSubSequences ( ) == 0 )
assertEquals ( "Wrong boundaries" , singletonList ( "0123456789abcdef" ) , boundaries )
assertEquals ( "myQueryHere OFFSET 0 LIMIT 10" , q )
assertEquals ( testString , writer . toString ( ) )
assertEqualHash ( byteBuffer , murmur3a )
assertTrue ( JarUtils . isJarFile ( artifact ) )
assertEquals ( count , rows . size ( ) )
AccountImportTestHelper . assertImported ( iElelemntValue )
Assert . assertTrue ( "topic did not get new name" , topic . getTopicNames ( ) . size ( ) == 2 )
assertEquals ( sum , victim . getSum ( ) , EPSILON )
assertStatementCanBeDeparsedAs ( parsed , "SELECT * FROM test WHERE NOT a IS NULL" )
assertCommandLineArgs ( "localhost" , "8649" , "etc/jmxetric.xml" , "multicast" , null , "ProcessName" , "SpoofName" )
assertEquals ( "a}\n" , found )
assertMessageAndPath ( constraintViolationCreationContextList . get ( 0 ) , message , pathWith ( ) . property ( "foo" ) . property ( "bar" , true , "test" , null ) . property ( "fubar" ) )
assertThat ( array , is ( new byte [ ] { 2 , 3 , 5 , 7 } ) )
assertTrue ( CmsConfigurationFactory . getConfigPath ( ) . equals ( configPath ) )
assertEquals ( "org.test.Hello" , new ImportsToFQCN ( imports ) . resolveFQCN ( "Hello" ) )
assertEquals ( - 2d * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
assertEquals ( 0 , result )
assertTrue ( matcher . matches ( mockElement ) )
assertThat ( test ( mock . getVerifier ( ) , "Hello1" , "Hello2" , "Hello3" ) , hasSize ( 1 ) )
Assert . assertEquals ( expected , Strings . capitalizeFirstChar ( data ) )
assertEquals ( obj . toString ( ) , "LSAPR_POLICY_ACCOUNT_DOM_INFO{DomainName:null, DomainSid:null}" )
Assert . assertEquals ( threadNum , res . size ( ) )
Assert . assertEquals ( "" , expected , actual , 0d )
assertEquals ( LocalDateTime . of ( 2012 , 7 , 20 , 0 , 0 ) , test )
assertNull ( "2MB allocation shouldn't be satisfied by LAB." , alloc )
assertFalse ( "Schemas" , schemaHomology . schemasMatch ( schema1 , schema2 , exclusionRegex ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertTrue ( "Output bytes are not the expected value" , Arrays . equals ( new byte [ ] { 0x30 , 0x20 , 0x48 , 0x45 , 0x41 , 0x44 , 0x0A , 0x31 , 0x20 , 0x43 , 0x48 , 0x41 , 0x52 , 0x20 , 0x55 , 0x54 , 0x46 , 0x2D , 0x38 , 0x0A , 0x41 , ( byte ) 0xC3 , ( byte ) 0x84 , 0x61 , ( byte ) 0xC3 , ( byte ) 0xA4 , 0x0A , 0x30 , 0x20 , 0x54 , 0x52 , 0x4C , 0x52 , 0x0A } , out . toByteArray ( ) ) )
assertEquals ( clean ( input ) , output )
assertNull ( route )
assertThat ( logRecords , containsInfo ( CM_CREATED ) )
assertEquals ( expected , actual )
assertFalse ( observer . accept ( path ) )
Assert . assertEquals ( OVERRIDING_USERNAME , callIntermediateWhoAmI ( ) )
Assert . assertEquals ( CatalogResponseMessage . OK , response . getCode ( ) )
assertions . containsSequence ( sequence )
assertSame ( op , new OperationBuilder ( op ) . build ( ) . getOperation ( ) )
assertEquals ( this . multipleCom , result . getAttributes ( ) )
Assert . assertEquals ( Explain . ExplainType . HOPS , o . explainType )
assertNull ( "There should be no last unfixed alerts" , lastUnfixed )
Assert . assertEquals ( 1 , n )
assertMessageFound ( goodMessage )
Assert . assertEquals ( idSet . size ( ) , 16000 )
assertEquals ( null , result )
assertEquals ( "{\"version\":10,\"schema\":\"string\"}" , request . toJson ( ) )
Assert . fail ( "Neither source listing not source paths present" )
Assert . assertEquals ( Arrays . asList ( ) , res . getValues ( ) )
assertResultSet ( res )
assertEquals ( mockCellWithTags , newCell )
assertFalse ( authenticate ( ) )
assertTrue ( exception . getMessage ( ) . contains ( "must be a Collection" ) )
assertEquals ( newValue , _standardProperties . getProperty ( SIMPLE_PROPERTY_NAME ) )
Assert . assertEquals ( "/user/" + solomon . getId ( ) + ".test" , objectTree . get ( "href" ) )
this . assertVerification ( )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
assertEquals ( 3.75 , comparator . getSimilarity ( cb . getJCas ( ) , cb . getJCas ( ) ) , epsilon )
assertNotNull ( scriptStatement )
assertEquals ( expected + "-" + actual , expected , actual )
assertThat ( sampleEntities . getTotalElements ( ) , is ( greaterThanOrEqualTo ( 1L ) ) )
assertEquals ( expected , actual )
assertTrue ( server . isAuthenticated ( ) )
assertThat ( userCount , is ( 1 ) )
assertThat ( locationManager . getTableLocation ( ) , is ( new Path ( TABLE_LOCATION ) ) )
assertThat ( instantiator , instanceOf ( CdiInstantiator . class ) )
assertEquals ( 5 , stack . size ( ) )
assertTrue ( defaultCondition . isDefault ( ) )
assertEquals ( encodedSignature , "BQwm1HCz0cjHYbulWMumkhZgyb2dD93uScXmC6Fv8Ik" )
assertEquals ( pp . getValue ( ) , new Payload < > ( "hello1" ) . getValue ( ) )
assertTrue ( found )
Assert . assertEquals ( result , false )
assertEquals ( planetsBefore - 1 , planetsAfter )
assertEquals ( org . drools . core . test . model . Cheese . class , resolver . resolveType ( "Cheese" ) )
assertThat ( router . parse ( url , HttpMethod . POST , null ) . getMethod ( ) , is ( equalTo ( method ) ) )
MatrixTestAbstract . assertMatrixEquals ( eI , c )
InterpolationTest . assertArray2dEquals ( test , roundtrip , 0.01f )
Assert . assertEquals ( expectedPorts , EC2NetworkValidator . getPortRangeFromAclEntry ( networkAclEntry ) )
assertTrue ( "The same keys must match:" , key1 . hashCode ( ) == key2 . hashCode ( ) )
assertTokens ( Tokens . ID , Tokens . MUL , new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP )
assertEquals ( entitiesSet . size ( ) - playerOneBareEntitiesCount , result . size ( ) )
Assert . assertEquals ( logProb , ef_logProb , 0.0001 )
assertEquals ( "ex:x" , x )
assertFalse ( ord . isCaseInsensitive ( ) )
assertEquals ( 19 , i )
assertEquals ( "" , cm . toString ( ) )
assertEquals ( results [ i ] , result . get ( result . size ( ) - 1 ) . longValue ( ) )
assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
assertThat ( ( Person ) ( ( Exchange ) oie . getValue ( ) . getObject ( ) ) . getIn ( ) . getBody ( ) , is ( person ) )
assertThat ( result . toString ( ) , is ( equalTo ( "HELL" ) ) )
assertTrue ( validator . validate ( EntityNames . SECTION , sectionIds ) . equals ( sectionIds ) )
Assert . assertEquals ( "Wrong number of records in join result." , NUM_KEYS * BUILD_VALS_PER_KEY * PROBE_VALS_PER_KEY , numRecordsInJoinResult )
assertThat ( desc . toString ( ) , is ( "is <6> or a value greater than <3> and a value less than <5>" ) )
assertEquals ( someKeyPath , actualKeyPath )
assertThat ( isValid , is ( false ) )
Assert . assertEquals ( "2014:01:01" , this . vocabulary . getVersion ( ) )
Assert . assertEquals ( "Hello World!" , sc . saySomething ( ) )
assertTrue ( e instanceof InvalidParameterException )
assertTrue ( Arrays . hasOnlyNullElements ( array ) )
assertEquals ( witnessList , tokenList )
assertNull ( dataset )
assertTrue ( job . getConfiguration ( ) . getBoolean ( AvroJob . INPUT_IS_REFLECT , false ) )
Assert . assertTrue ( testMatcher . matches ( examplePath ) )
Assert . assertEquals ( icmsSetado , icms . getIcms60 ( ) )
assertUnderflow ( ( double ) x + ( double ) y , result , x + y )
assertTrue ( filter . matches ( operation , poolInfoMap ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
assertEquals ( 2 , motechService . getAllDuplicatePatients ( ) . size ( ) )
assertTrue ( "Latch not fired" , cdl1 . await ( 5000 , TimeUnit . MILLISECONDS ) )
assertEquals ( blockers . size ( ) , 0 )
doubles . assertLessThan ( description , null , 8d )
assertEquals ( 6.75 , RestaurantBill . calculateTax ( meal ) , 0 )
assertThat ( testOutcome . toString ( ) , is ( "App should work:Step one, Grouped steps [Nested step one, Nested step two, Nested step one, Nested step two]" ) )
assertFalse ( listOutput . isEmpty ( ) )
assertNotNull ( appContext . getResourceDocument ( new StringBufferInputStream ( xml ) ) )
assertEquals ( 63 , list . get ( 0 ) )
Assert . assertNull ( userId )
assertNotNull ( projectionRef )
assertEquals ( 5 , client . getIdleConnections ( ) )
assertEquals ( OK . getStatusCode ( ) , log . getStatus ( ) )
Assert . assertTrue ( 0L == _c . convert ( null ) )
assertEquals ( trueConcept , ObsResource1_8 . getValue ( obs ) )
assertThat ( ( Counter ) c1 . delta ( c0 ) , is ( new Counter ( 10L ) ) )
assertNotNull ( prorroga . getId ( ) )
assertNotEquals ( a , b )
assertEquals ( expected , actual )
assertTrue ( JobUtils . isJobExecutionStoppable ( jobExecution ) )
assertEquals ( 2 , handlerContainer . onUnbindMethodCalled )
assertNull ( element )
assertProcessInstanceCompleted ( processInstance )
Assert . assertEquals ( 4 , MathArrays . distanceInf ( p1 , p2 ) )
assertThat ( serialisedClaimOf ( job ) , is ( nullValue ( ) ) )
Assert . assertEquals ( "Invalid username" , "Bert" , usernameCallback . getUsername ( ) )
assertTrue ( closed . await ( 4 , SECONDS ) )
assertEquals ( false , result )
Assert . assertEquals ( expected , output . toString ( ) )
assertDownloaded ( tester , "scripts/all.js" , "/fiftyfive/wicket/js/lib/jquery.js" , "/fiftyfive/wicket/js/lib/jquery-ui.js" , "/fiftyfive/wicket/js/lib/fiftyfive-utils/cookies.js" , "/fiftyfive/wicket/js/lib/fiftyfive-utils/strftime.js" , "/fiftyfive/wicket/js/lib/fiftyfive-utils/55_utils.js" , "/fiftyfive/wicket/js/lib/fiftyfive-utils/jquery.55_utils.js" , "/org/apache/wicket/markup/html/wicket-event.js" , "/org/apache/wicket/ajax/wicket-ajax.js" )
assertEquals ( userGroupDao . selectUserGroupByUserId ( "user1" ) . size ( ) , 2 )
assertEquals ( result , log ( varX ) * E , 0.0 )
assertEquals ( 4 , ret )
assertTrue ( AuthzResolver . authorizedInternal ( session , "test_authorized_group_admin" , Arrays . asList ( createdVo , createdGroup ) ) )
assertEquals ( Long . valueOf ( 1L ) , myTestInstance . updateAsync ( doc , update , true , true ) . get ( ) )
Assert . assertEquals ( "a" , stringAppender . toString ( ) )
assertEquals ( TypeInfoFactory . getUnionTypeInfo ( Arrays . asList ( TypeInfoCreator . createInt ( ) , TypeInfoCreator . createBoolean ( ) ) ) , orcType )
Assert . assertFalse ( result )
Assert . assertThat ( userStore . delete ( sergey . getId ( ) ) , is ( true ) )
assertThat ( builder . getPatches ( ) , not ( hasItemInArray ( "ADD /status" ) ) )
assertNull ( response )
assertThat ( effect , is ( 3 ) )
assertThat ( output , is ( equalTo ( "div\\:contains([rel!='nofollow']).className" ) ) )
assertNull ( field . getFillColourOpacity ( ) )
assertParseFilesOk ( input , TYPE_CHECK )
assertThat ( stepFactory . serverNames , contains ( "server1" ) )
Assert . assertNotNull ( new Bean80BindMap ( ) )
assertEquals ( "{\"error\":{\"code\":null,\"message\":null,\"details\":[{\"code\":null,\"message\":null}]}}" , jsonString )
assertEquals ( expectedString , formattedDate )
assertEquals ( "<!--one, two, three, four-->" , result )
assertTrue ( result )
assertEquals ( "Hello, !" , value . evaluateAttributeExpressions ( createFlowFile ( attributes ) ) . getValue ( ) )
assertArrayEquals ( new String [ ] { "rightLeaf" , "leftLeaf" , "root" } , treeContent )
Assert . assertEquals ( childConfig . getUserID ( ) , result . getUserID ( ) )
assertFalse ( game . isGameOver ( ) )
assertThat ( id . isPresent ( ) , is ( false ) )
assertEquals ( "application/vnd.iso.19139+xml" , type )
mock . assertIsSatisfied ( )
assertThat ( result , is ( equalTo ( newDir ) ) )
assertEquals ( 1 , result )
assertThatWorkflowInstanceCompletedAfter ( workflowInstanceKey , "end-2" )
assertEquals ( notAfter , clonedCertificate . getNotAfter ( ) )
assertThat ( htmlElement . exists ( ) , is ( true ) )
assertEquals ( exp , rc . getReplicaSelector ( ) )
assertNull ( contentType )
assertThat ( output , containsString ( "DICOM store retrieved:" ) )
assertEquals ( exp , z )
assertEquals ( keyExpected , keyBuilt )
assertThat ( subject . shouldProcess ( message ) , is ( false ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertNull ( "Must be null" , ovsdbBridgeAugmentation )
assertSqlCanBeParsedAndDeparsed ( stmt , false , parser -> parser . withSquareBracketQuotation ( true ) )
assertThat ( text ( contents ) , is ( "0a\t0b\t0c\n1a\t1b\t1c\n2a\t2b\t2c\n" ) )
assertTrue ( output . indexOf ( "sayHiArray" ) > - 1 )
assertNotNull ( instance )
BeanAssert . assertBeanEquals ( bean , parsed )
assertEquals ( ( map . get ( "child2" ) ) , ( map . get ( "child1" ) ) )
assertEquals ( Sets . newHashSet ( "Kxf4" , "Kxd4" ) , moves )
Assert . assertEquals ( expected , actual )
assertTrue ( filter . contains ( "foo" ) )
assertThat ( result , is ( "Result From Target Endpoint" ) )
assertEquals ( expected , clusters )
assertMessages ( "read" , 3 , "readBytesOffsetLen" )
assertNull ( reader . overflowAtoms ( ) )
assertNull ( graph )
assertArrayEquals ( "invalid tokens" , expectedAcceptableTokens , check . getAcceptableTokens ( ) )
assertThat ( result . fullName ( ) , is ( Boolean . class . getName ( ) ) )
assertThat ( uuids . size ( ) , is ( 10 ) )
assertEquals ( 0 , allViolations . size ( ) )
assertEquals ( "" , result )
assertThat ( PrettyTime . of ( Locale . UK ) . print ( duration , TextWidth . WIDE ) , is ( "15 years, 3 months, 1 week and 2 days" ) )
assertThat ( outputDirectory . getPath ( ) , is ( "target" + FILE_SEPARATOR + "reports" + FILE_SEPARATOR + "thucydides" ) )
Assert . assertTrue ( fs . exists ( path1 ) )
assertFalse ( "Unable to update non existing user" , success )
Assert . assertEquals ( 0 , patients . size ( ) )
assertEquals ( 2 , endpointMapping . getOrder ( ) )
assertEquals ( result . getStrategy ( ) , DYNAMIC )
Assert . assertEquals ( 0 , sync ( cache . size ( ) ) . intValue ( ) )
assertEquals ( "fa 3 desenis" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( 6 , resultList . size ( ) )
Assert . assertTrue ( response . toString ( ) , response . result ( ) )
assertEquals ( dog , ExternalizableHelper . fromBinary ( binDog , v1 ) )
Assert . assertEquals ( 20 , analyser . getLoadAtEnd ( route ) . get ( 0 ) , 0.01 )
assertEquals ( Arrays . asList ( "/parent/child4" , "/parent/child3" , "/parent/child2" , "/parent/child1" ) , paths )
Assert . assertEquals ( "1,2,3" , udf . evaluate ( args ) )
assertEquals ( 6 , sum . get ( ) )
Assert . assertEquals ( ( new Mean ( ) ) . evaluate ( scores ) , stats . getMean ( ) , 0 )
assertToStringJoinEquals ( "*" , o )
assertEquals ( ByteString . decodeHex ( "72616ec999" ) , data . readByteString ( ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . RETRY ) )
assertTrue ( result )
assertEquals ( buf . toString ( ) , expected )
Assert . fail ( )
assertThat ( dispatched , is ( SYNC_PRIVATE_FLOW_MSG + ".main1@" + ASYNC_MAIN_FLOW_THREAD_NAME + "." + SYNC_PRIVATE_FLOW_NAME + "@" + ASYNC_MAIN_FLOW_THREAD_NAME ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "gifImageTest03.pdf" , sourceFolder + "cmp_gifImageTest03.pdf" , destinationFolder , "diff_" ) )
assertEquals ( expected , actualQuery )
assertEquals ( uiLayoutClass , prefData . getUiLayoutClass ( ) )
Assert . assertNotNull ( ex )
assertFalse ( "There was cacheable headers" , HeaderUtils . hasCacheableHeaders ( headers ) )
Assert . assertEquals ( 0.0 , diag . getEntry ( 1 , 2 ) , Precision . SAFE_MIN )
assertEquals ( ( Integer ) 11 , task . join ( ) )
assertEquals ( 0 , result . numFindings ( ) )
assertEquals ( 0 , getResult ( ) . size ( ) )
assertFalse ( topic . isPlugable ( ) )
Assert . assertEquals ( descricaoEvento , eventoRetorno . getDescricaoEvento ( ) )
assertThat ( "{}" , sut )
assertXpathNotExists ( "/a:feed/at:deleted-entry" , xmlString )
assertEquals ( val , result )
assertEquals ( 1 , count )
assertTrue ( wrapper . isRunInTx ( ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( Result . FAIL , name . apply ( item , - 1 ) )
assertNotNull ( circle1 . circleWithProvider2 . circleWithProvider1 . get ( ) )
Assert . fail ( e . getMessage ( ) )
assertTrue ( "Records deleted" , recordsDeleted == 1 )
assertEquals ( this . viObject , ( ( Pcrep ) msg ) . getPcrepMessage ( ) . getReplies ( ) . get ( 0 ) . getVendorInformationObject ( ) . get ( 0 ) )
assertEquals ( name , bean . getName ( ) )
assertThat ( values . getInternalDebugHttpPort ( ) , equalTo ( stringValue ) )
assertNull ( defaultNamedConfig . get ( "key" ) )
assertEquals ( expected , rewrite ( input ) )
Assert . assertEquals ( expected , string )
assertNotNull ( ucioLoaded )
assertTrue ( entity . getId ( ) > 0L && entity . getSex ( ) == null )
assertEquals ( true , start )
assertEquals ( expectedMap , map )
assertEquals ( i - 1 , ret )
Assert . assertEquals ( 0 , patientCount )
arraysWithCustomComparisonStrategy . assertIsSorted ( someInfo ( ) , actual )
assertEquals ( expected , calc , 1e-5 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff52_" ) )
assertEquals ( expected + "\n" , doc . text ( ) )
Assert . assertEquals ( cana , notaInfo . getCana ( ) )
assertChangeResultsPage ( changeResultsPage )
assertEquals ( "../profile/Profile/" , uriTools . relativePath ( base , uri ) . toASCIIString ( ) )
Assert . assertTrue ( result )
assertThat ( EventDispatcher . pending . get ( ) , is ( empty ( ) ) )
assertEquals ( "<foo><bar>Hey FOO!</bar></foo>" , engine . compileMustache ( "minify_xml" , "<foo> <!-- My comment -->  <bar>Hey {{foo}}!</bar> \n\n </foo>" ) . render ( ImmutableMap . < String , Object > of ( "foo" , "FOO" ) ) )
assertEquals ( "tic, tac" , result )
assertEquals ( "Failed to add the default blueprints: Connection refused" , result )
paths . assertIsRelative ( info , actual )
assertInvocations ( client . getTwoPhaseCommitInvocations ( ) , "rollback" )
assertEquals ( "(= 34 abc)\n" , found )
assertNull ( s )
assertEquals ( 1 , queue . count ( new BasicDBObject ( "one.two.three" , new BasicDBObject ( "$gte" , 5 ) ) ) )
assertThat ( systemOutRule . getLog ( ) , containsString ( "Hello World!" ) )
assertTrue ( testFailed . isEmpty ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( new DeviceRegistration ( AcmeKey . KEY_HANDLE , AcmeKey . USER_PUBLIC_KEY_B64 , AcmeKey . ATTESTATION_CERTIFICATE , 0 ) , deviceRegistration )
assertThat ( resizedImage . getHeight ( ) , is ( greaterThan ( 400 ) ) )
Assert . assertEquals ( description , value )
assertEquals ( 8 , ( int ) result . getIntWrapperValue ( ) )
assertNotNull ( result )
assertEquals ( params . valuesAsOptional ( "a" ) , Optional . empty ( ) )
assertEquals ( expected , actual )
tester . assertCompleteMatch ( )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertThat ( writeOperation , is ( instanceOf ( JiraWriteOperation . class ) ) )
assertEquals ( "protected final void blah(int count, MyThing t) throws FishException, FruitException" , signature )
assertEquals ( "a" , Util . getName ( mock ) )
Assert . assertEquals ( "Default Const - type" , WTree . Type . VERTICAL , tree . getType ( ) )
Assert . assertEquals ( valorTest , valor )
assertTypeImportsAndSpellings ( types , "foo.bar" , ImmutableList . of ( "java.util.List" , "java.util.Set" , "java.util.Timer" , "java.util.regex.Matcher" , "java.util.regex.Pattern" ) , ImmutableList . of ( "int[]" , "Pattern[]" , "Set<Matcher[]>[]" , "List<Timer[]>" ) )
assertArgumentParserException ( args )
assertSame ( gav7 , ReleaseIdComparator . getLatest ( list ) )
assertMissing ( "referenceOne" , 1L )
files . assertIsEmptyDirectory ( INFO , actual )
assertThat ( userRepository . count ( example ) , is ( 3L ) )
assertEquals ( "SELECT FROM V WHERE b = true OR c = true" , q . toString ( ) )
assertThat ( model . size ( ) , is ( 0 ) )
assertThat ( result , is ( mockBundle ) )
Assert . assertTrue ( success . get ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
Assert . assertEquals ( format ( "Wrong price order for LimitOrders %s, %s" , b2 , b1 ) , BookSanityChecker . hasErrors ( book ) )
assertThat ( message . toJSON ( ) , is ( ( JsonElement ) json ) )
assertThat ( request . getStagingDirectory ( "product-00" ) , equalTo ( "systemUser/product-00" ) )
assertThat ( families , arrayContaining ( "Business/JIRA" ) )
assertEquals ( roadLength , roadMapping . roadLength ( ) , delta )
assertDeploySucceeded ( build )
assertThat ( matcher , notNullValue ( ) )
assertRendering ( repeat ( "*a **a " , x ) + "b" + repeat ( " a** a*" , x ) , "<p>" + repeat ( "<em>a <strong>a " , x ) + "b" + repeat ( " a</strong> a</em>" , x ) + "</p>\n" )
assertEquals ( 2 , tasks . size ( ) )
assertNotNull ( model )
Assert . assertTrue ( verifyRes )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + "<test><date>01-01-2012 00:00</date></test>" , stringifiedTestObject )
assertTrue ( e . getMessage ( ) . contains ( "C3, C4" ) )
assertThat ( outputDirectory , not ( containsText ( "javax.validation" ) ) )
assertNotNull ( getFragment ( ) )
assertFalse ( contentC . isVisible ( ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( "field.keys()" , p . toString ( ) )
Assert . assertEquals ( "Node{edge=FOO, value=null, edges=[]}" , node . toString ( ) )
assertEquals ( 1 , toml . getLong ( "key" ) . intValue ( ) )
assertServletWasInvokedWith ( entity )
assertThat ( log , containsString ( "" + "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n" + "<dbupdate created=\"2012-12-01 00:00:00\">\n" + "    <messages/>\n" + "    <updates>\n" + "        <update attempt=\"1\" time=\"2012-12-01 00:00:00\">\n" + "            <key>[mntner] DEV-ROOT-MNT</key>\n" + "            <operation>DELETE</operation>\n" + "            <reason>reason</reason>\n" + "            <paragraph><![CDATA[paragraph]]></paragraph>\n" + "            <object><![CDATA[mntner:         DEV-ROOT-MNT\n" + "]]></object>\n" + "            <exception>\n" + "                <class>java.lang.NullPointerException</class>\n" + "                <message><![CDATA[null]]></message>\n" + "                <stacktrace><![CDATA[java.lang.NullPointerException\n" ) )
assertFalse ( flag )
assertDefaultClusterName ( "test-cluster" )
Assert . assertNotEquals ( response . getStatusLine ( ) . getStatusCode ( ) , HttpStatus . SC_INTERNAL_SERVER_ERROR , "We should not get internal server error" )
assertThat ( response , is ( equalTo ( expected ) ) )
assertTrue ( x . equals ( y ) )
assertEquals ( "streamflow home config should match ConfigLoader streamflow config" , mockedConfig , loadedConfig )
assertEqualsEvenUnderWindows ( "{\n" + "  \"from\" : 0,\n" + "  \"size\" : 10,\n" + "  \"query\" : {\n" + "    \"match_all\" : { }\n" + "  },\n" + "  \"aggregations\" : {\n" + "    \"source_filter\" : {\n" + "      \"filter\" : {\n" + "        \"match_all\" : { }\n" + "      },\n" + "      \"aggregations\" : {\n" + "        \"source\" : {\n" + "          \"significant_terms\" : {\n" + "            \"field\" : \"dc:source\",\n" + "            \"minDocCount\" : 10\n" + "          }\n" + "        }\n" + "      }\n" + "    }\n" + "  }\n" + "}" , request . toString ( ) )
assertEqualsStoreParams ( paramsExpected , paramsActual )
assertDegenerate ( scan )
Assert . assertEquals ( 5 , loc )
Assert . assertEquals ( "select a,b from c where a=1 " , SqlObject . removeOrderBy ( sql ) )
TestUtil . assertSuccess ( testResultGrouper )
Assert . assertEquals ( "mock" , pl . getPluginName ( ) )
assertNotNull ( MachineToMachine . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "US" ) . read ( ) )
assertEquals ( expResult , result )
assertThat ( formatter . format ( PlainDate . of ( 0 , 1 , 1 ) ) , is ( "BC 0001-01-01 (Q1)" ) )
assertEquals ( getExpectedSchemaAndValue ( Schema . OPTIONAL_INT32_SCHEMA , expectedValue , expectedName ) , result )
assertEquals ( post , singlePost )
assertEquals ( expected , actual )
assertEquals ( expected , actualQuery )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( PersonGenderCodeType . UNKNOWN , output . getRegularCPRPerson ( ) . getPersonGenderCode ( ) )
assertTrue ( false )
assertHasCause ( "message" )
AssertJUnit . assertEquals ( "\"lijz\"" , ret )
mockEndpoint . assertIsSatisfied ( )
Assert . assertEquals ( "Hello World" , ejbInstance . sayHello ( ) )
TestCase . assertEquals ( 1 , result )
assertEquals ( "Erreur g茅n茅rale." , message )
iterablesWithCaseInsensitiveComparisonStrategy . assertContainsExactlyInAnyOrder ( info , actual , expected )
assertEquals ( typicalPrice , typicalPriceIndicator . getValue ( i ) )
assertEquals ( "Base for strings is wrong" , "2001:db8:2de:0:0:0:0:e13" , parsed )
assertThat ( actualExceptionLevel , is ( expectedExceptionLevel ) )
assertEquals ( null , acualValue )
assertEquals ( r1 , r2 )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( check . getValue ( ) , actual )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
Assert . fail ( "createQualityScores(null) expected IllegalArgumentException" )
assertTrue ( output , output . matches ( "(?s).*Invalid object name.*" ) )
assertEquals ( expectedAutoExpireDate , drugOrder . getAutoExpireDate ( ) )
assertRoundtrip ( input )
assertThat ( anyTS . isValid ( SECOND_OF_DAY , null ) , is ( false ) )
assertToString ( fromExpr ( "Hello" , f . newMethodInvocationExpression ( Models . toName ( f , "Arrays" ) , Collections . emptyList ( ) , f . newSimpleName ( "asList" ) , Arrays . asList ( Models . toLiteral ( f , "Hello, world!" ) ) ) ) , "Hello" , "[Hello, world!]" )
assertThat ( output , containsString ( "HL7v2 message ingested:" ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( dao . getCountAll ( ) , 1 )
assertEquals ( 404 , result . getStatusCode ( ) )
assertNotNull ( tle )
assertEquals ( true , CollectionUtils . isEmpty ( c ) )
Assert . assertEquals ( ApplicationContextModuleFactory . class , moduleFactory . getClass ( ) )
assertFalse ( strategy . isCrawable ( url , 11 ) )
assertEquals ( false , CollectionUtils . isNotEmpty ( coll ) )
assertEquals ( expResult , result )
assertNull ( cause )
assertEquals ( userListWrapper , userRoleResource . getUsers ( ) )
assertIsGreenwich ( pm )
assertEquals ( "<html><head></head><body></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( "{\"100.0\":10,\"99.0\":10,\"98.0\":10,\"95.0\":10,\"90.0\":9,\"80.0\":8,\"75.0\":8,\"50.0\":5,\"25.0\":3}" , result . toString ( ) )
assertFailureKeys ( "expected to be empty" , "but was" )
assertNotEquals ( frameData1 , frameData2 )
assertEquals ( 1 , newSize - initialSize )
Assert . assertTrue ( res . booleanValue ( ) )
assertEquals ( "------------ Request ------------\n    null\n\n------------ Body ------------\nnull\n\n" , result )
assertThat ( engine . evaluate ( TESTSUITE_NAME_ATTRIBUTE , document ) , equalTo ( "title.story" ) )
assertFalse ( d instanceof Cloneable )
assertTrue ( e instanceof E_StrConcat )
assertFalse ( topic . isHasUpdates ( ) )
assertEquals ( 400 , status . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( Resource . CoreRowType . CHECKLIST . toString ( ) . toLowerCase ( ) , resource . getCoreType ( ) . toLowerCase ( ) )
Assert . assertThat ( QueryBuilder . getInstance ( ) . buildFilterQuery ( co , "" , 0 , 1 , 0 , 0 , null ) , equalTo ( expected ) )
assertThat ( m . toString ( ) , nullValue ( ) )
Assert . assertEquals ( extractor . generateKey ( host , req1 ) , extractor . generateKey ( host , req2 ) )
assertHelpScreen ( )
assertEquals ( "<html><head><script></script><noscript></noscript></head><frameset><frame src=\"foo\" /><frame src=\"foo\" /></frameset></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_1" )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( 100 , frame . getInt ( ) )
Assert . assertFalse ( result . passed ( ) )
assertThat ( result . getId ( ) , is ( notNullValue ( ) ) )
assertTrue ( Arrays . equals ( expectedResult , encoded . array ( ) ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( hasJsonPath . matchesSafely ( json ) , is ( true ) )
assertEquals ( response . asString ( ) , FAILED , response . get ( OUTCOME ) . asString ( ) )
assertEquals ( date , newId3tag . getDate ( ) )
assertNoViolations ( constraintViolations )
assertThat ( specificResourceAllocation . getAssignments ( ) , haveHours ( 4 , 8 , 4 ) )
assertThat ( markedWord , is ( "louper" ) )
assertNull ( req . getBytes ( ) )
assertSame ( result , instance . getConnection ( ) )
assertEquals ( VALUE , value )
assertTrue ( "SecurityConstraint is expected to be deployed as provider" , everrestApplication . getSingletons ( ) . stream ( ) . filter ( e -> e instanceof SecurityConstraint ) . count ( ) == 1 )
assertEquals ( result1 , result2 )
assertThat ( list . size ( ) , is ( 1 ) )
Asserts . check ( targetHosts . size ( ) > 0 , "fail setTargetHostsFromLineByLineText setTargetHostsFromUrl" )
Assert . assertEquals ( 2 , map . size ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( cpf , eventoRetorno . getCpf ( ) )
Assert . assertFalse ( iuses . isEmpty ( ) )
assertNull ( response )
assertThat ( auth . getMechanism ( ) , is ( ScramSaslClient . MECHANISM ) )
arrays . assertIsSorted ( description , actual )
Assert . assertEquals ( "Last DunningDateEffective shall be null for an empty collection" , TimeUtil . getDay ( 2013 , 01 , 04 ) , lastDate )
assertThat ( t . getName ( ) , is ( "maven-surefire-plugin@NotThreadSafe" ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "2_3" , "2_4" , "3" , "4" , "5" , "6" , "7" ) ) )
assertEquals ( 100 , results . size ( ) )
assertEquals ( "100" , result )
assertThat ( url , is ( "http://localhost:8080/test" ) )
assertThat ( validator . validate ( parameters , "aaa" ) , is ( "Aaa is not a number(####)." ) )
assertTrue ( match == null )
assertEquals ( 2 , count )
Assert . assertEquals ( "��" , HtmlToXMLUtil . unescapeToXML ( testString ) )
assertPlanMatches ( expected )
assertEquals ( response . getStatus ( ) , 500 )
assertEquals ( 1.0 , x . getConfidence ( ) )
assertEquals ( "Wrong class for missingNode" , NodeRemoverFilterType . class , filter . getClass ( ) )
assertEquals ( matrixAssertion , matrix )
assertThat ( string , matchesPattern ( "^[0-9]{3,4}ms$" ) )
assertNotNull ( "I didn't get a schema" , schema )
assertEquals ( 2 , exts . length )
assertEquals ( NullType . No_Nulls , db . getMetadataStore ( ) . getDatatypes ( ) . get ( "NNINT" ) . getNullType ( ) )
assertThat ( this . support . selectByIndex ( webElement , "1" ) , is ( equalTo ( "select1.selectByIndex(\"1\")" ) ) )
assertOnResponseAttachment ( f3gbServer , MAX_SIZE2 )
assertThat ( Moment . axis ( ) . getMinimum ( ) . toZonalTimestamp ( utc ) , is ( PlainTimestamp . axis ( ) . getMinimum ( ) ) )
assertTrue ( theSelectedPoolsWere ( allAvailablePools ( ) ) )
assertEquals ( expected , actual )
assertEquals ( "HTTP/1.1 404 Not Found" , sb . toString ( ) . trim ( ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertThat ( steps . getPages ( ) , is ( notNullValue ( ) ) )
assertFalse ( proxy . isTableExists ( "foo" ) )
assertSkip ( model , null )
assertEqualsIgnoreLineEnding ( Json . pretty ( rep ) , "{\n" + "  \"name\" : \"hi!?\"\n" + "}" )
assertEquals ( "" , result )
assertPostCodegenRules ( mojo )
Assert . assertEquals ( 2 , list . size ( ) )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> strings . set ( - 3 , "out of bounds" ) )
assertNull ( descriptor . getConstraintsForMethod ( "zap" ) )
assertTrue ( plots . get ( 0 ) == plot1 )
assertEquals ( 1 , res . getInt ( "nbHits" ) )
assertThat ( this . subject , is ( not ( user ) ) )
assertEquals ( "100000" , String . valueOf ( Integer . parseInt ( result ) + rejected ) )
assertIsCommitted ( tx )
assertEquals ( 1 , command . getMcCounter ( ) )
assertSame ( "has count method returned the same amount" , uaiCriteria . count ( ) , uaiCriteriaCTO . count ( ) )
Assert . assertEquals ( 9 , generatedTests . size ( ) )
assertEquals ( "^~(.+)$" , pattern )
assertEquals ( Arrays . asList ( "A\n" , "B\n" , "C\r" , "D\r\n" , "E\r\n" , "F\r" , "\r" , "G" ) , lines )
Assert . assertTrue ( "Items should contain a seperator" , group . getMenuItems ( ) . get ( 0 ) instanceof WSeparator )
assertTrue ( "No similar movies found" , ! result . isEmpty ( ) )
assertEquals ( ( byte ) - 117 , executeTestMethod ( test , Byte . class , null , Integer . valueOf ( ( byte ) - 117 ) ) . byteValue ( ) )
assertThat ( ts . with ( YEAR_OF_WEEKDATE . minimized ( ) ) , is ( PlainDate . of ( - 999999999 , 1 , 2 ) . atStartOfDay ( ) ) )
Assert . assertEquals ( new Long ( 0L ) , sut . computeInterestingness ( activity ) )
assertEquals ( server . getCalls ( ) . size ( ) , 2 )
assertEquals ( 1 , count . get ( ) )
assertJson ( "{'values': {'foo': 'bar'}}" , serialize ( bean ) )
Assert . assertFalse ( patientService . isIdentifierInUseByAnotherPatient ( patientIdentifier ) )
Assert . assertEquals ( 43 , map . size ( ) )
assertTrue ( "locator not expired from cache" , ! locatorCache . isLocatorCurrentInDiscoveryLayer ( LOCATOR ) )
assertEquals ( "substring(cat.name,length(cat.name) + ?1,?2 - (length(cat.name) - ?2))" , serializer . toString ( ) )
assertEquals ( - 1 , empty . getSeriesIndex ( "ABC" ) )
assertEquals ( "0.0" , testResult )
Assert . assertEquals ( 1000 , response . getTotalHits ( ) . value )
assertNotNull ( result )
assertEquals ( 0x0000002d , s . m0_0 ( ) )
Assert . assertNotNull ( vmComponent )
assertEquals ( "next node must be node1" , node1 , currentRouter . getNextNode ( msg ) )
assertEquals ( expectedEnv , env )
assertSame ( expected , CRest . getBasicAuthInstance ( "a" , "b" ) )
assertEquals ( expecting , result )
Assert . assertTrue ( zippath . endsWith ( "\\org\\onetwo\\common\\excel\\bus_copy.zip" ) )
assertThat ( "Width of color picker is overridden by " + "default caption feature" , width , is ( lessThan ( 148 ) ) )
assertNotNull ( room1 . getId ( ) )
assertEventsEquals ( expectedEvent , getOnlyElement ( events ) )
assertEquals ( expected , bos . toString ( ) )
assertTrue ( "Shutdown listener should have been called" , latch . await ( 5 , TimeUnit . SECONDS ) )
assertFalse ( session . markRecordAsRead ( epoch - 1 , 2 ) )
assertEquals ( "Root NSEC with DS must be bogus" , SecurityStatus . BOGUS , s )
assertEquals ( _expected , new String ( s . toByteArray ( ) , "UTF-8" ) )
assertNotNull ( Alert . reader ( ) . read ( ) )
Assert . assertThat ( "When the URL ends with a directory, and if an index.html file is present in that directory," + " the server should respond with that file" , responseString , containsString ( "Simple index file" ) )
assertEquals ( 8 , result )
assertEquals ( "http://somelink" , result )
assertThat ( ( String ) c . value , is ( "aaa" ) )
assertEquals ( OMITTED_FOR_DUPLICATE , adapter . getResolution ( ) )
assertEquals ( expected , output )
Assert . assertEquals ( "Expect all options to be selected" , EMPTY_LIST , multi . getNotSelected ( ) )
assertEquals ( list , Arrays . asList ( "test" , 3 , "ok" , 1 ) )
assertEquals ( "contents" , Utils . streamToString ( inputStream ) )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertEquals ( 1 , violations . size ( ) )
assertEquals ( "[Test] expecting:\n<['Yoda', 'Luke']> to end with:<['Han', 'Leia']>" , message )
Assert . assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , status )
assertTrue ( transform instanceof Modifier . Definr )
assertEquals ( unQuotedString , ocsvTransformer . getCellContent ( unQuotedString ) )
assertStat ( result )
assertEquals ( "2014-06-24 09:33:49" , format . format ( getDateWithZoneOffset ( 1403602429504L ) ) )
assertEquals ( 3 , buffer . length ( ) )
assertEquals ( policy . name , updatedPolicy . name )
assertNull ( probe )
assertEquals ( "Wrong content of ini file" , INI_DATA , writer . toString ( ) )
assertNotNull ( ManagerWithStaticField . mapper )
classes . assertIsAbstract ( someInfo ( ) , actual )
assertThat ( given . getScreenshots ( ) . size ( ) , greaterThan ( 0 ) )
assertEquals ( workflow . getID ( ) , "selectSingleReviewer" )
assertTrue ( uvp . getSecondValue ( ) == 200.0 )
Assert . assertEquals ( new BigInteger ( "100" ) , array . getJsonNumber ( 0 ) . bigIntegerValue ( ) )
assertEquals ( right , AddressNormalizationUtil . normalizeProtocolAgnosticPort ( left , OFConstants . OFP_VERSION_1_0 ) )
assertEquals ( "Failed on iteration " + i , z1 , z2 )
Assert . assertEquals ( 2844047 , rows )
Assert . assertFalse ( i . hasNext ( ) )
assertTrue ( actualSubsets . isEmpty ( ) )
assertEquals ( ConfigFactory . create ( ProgramConfig . class ) . cat ( ) + " files|A|B" , p2 . render ( ) )
assertTrue ( bw > 0 )
assertEquals ( expResult , result )
assertTrue ( condition . matches ( testEvent ) )
assertSame ( connection , incrementPoolOnTimeoutConnectionAcquiringStrategy . getConnection ( connectionRequestContext ) )
assertEquals ( Reflect . on ( object ) . toString ( ) , object . toString ( ) )
Assert . assertEquals ( "" , stringAppender . toString ( ) )
assertNotNull ( result )
assertNull ( type )
assertEquals ( expResult , result )
assertNotNull ( result )
mongoDbChecker . assertThatConnectionIsPossible ( anyString ( ) , anyInt ( ) )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertNull ( "clash between " + dad2 + " and " + dad , dad2 )
assertEquals ( "fordp2" , sut . execute ( "Prefect" ) )
assertEquals ( "" , t )
given ( ) . accept ( "application/yaml" ) . when ( ) . get ( uri + "/openapi" ) . then ( ) . contentType ( "application/yaml" ) . assertThat ( )
assertNotNull ( values )
assertions . isEqualTo ( expected )
assertInsert ( INSERT_ARRAY_TYPES_WITH_NULL_VALUES_STMT , 1 , schemasAndValuesForArrayTypesWithNullValues ( ) )
assertThat ( hijri . with ( CommonElements . localDayOfWeek ( HijriCalendar . family ( ) , model ) . incremented ( ) ) , is ( hijri . nextDay ( ) ) )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertEquals ( merging , policy . merge ( "map" , entryMerging , entryExisting ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?><xxxxxx/>" , result . getResult ( ) )
assertEquals ( result , s . computePermutation ( "aba" ) )
assertEquals ( Action . LOGIN , action . login ( ) )
assertEquals ( expResult , result )
assertThat ( findFeature ( features , "ClearCache" ) , is ( instanceOf ( ClearCacheFeature . class ) ) )
assertEquals ( expectedQuery , actualQuery )
assertThat ( runningHistoricActivityInstances . size ( ) , is ( 3 ) )
assertEquals ( "aTestString" , classUnderTest . getStartOfLineComment ( ) )
assertEffectiveActivation ( userHermanAfter , ActivationStatusType . ENABLED )
Assert . fail ( "Found class where none should exist" )
Assert . assertEquals ( "{\"@context\":\"$metadata#ESMixEnumDefCollComp/$entity\"," + "\"@metadataEtag\":\"W/\\\"metadataETag\\\"\"," + "\"PropertyEnumString\":\"String2,String3\"," + "\"CollPropertyEnumString\":[]," + "\"PropertyDefString\":\"Test\"," + "\"CollPropertyDefString\":[]," + "\"PropertyCompMixedEnumDef\":null," + "\"CollPropertyCompMixedEnumDef\":[]}" , resultString )
assertTrue ( latch . await ( 15 , TimeUnit . SECONDS ) )
assertTrue ( victim . isIncrementalBuild ( ) )
assertThat ( configuration . isOverwriteConfigOnShutdown ( ) , is ( false ) )
Assert . assertEquals ( "Password is not correct" , "pass" , redisURI . password ( ) )
assertEquals ( expectedValues , actualValues )
assertNotNull ( result )
Assert . assertEquals ( "languages" , title )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "User [bio=, fullName=, id=, profilePictureUrl=, userName=, websiteUrl=]" , result )
assertThat ( count , is ( 4L ) )
assertEquals ( MULTI_THREADED , check . get ( ) )
assertTrue ( "DocumentType fetched by document id" , documentType != null && StringUtils . equals ( documentType . getDocumentTypeId ( ) , documentTypeId ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getPrivileges ( set ( "job1_2_operator" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertSQLException ( ( ) -> resultSet . findColumn ( "q" ) )
assertFalse ( DeletedFileFilter . accepts ( file ) )
assertThat ( the ( name , be ( equalTo ( "Alex" ) ) . and ( be ( startsWith ( "B" ) ) ) ) , is ( false ) )
assertEquals ( lovedTracks , dbLovedTracks )
Assert . assertEquals ( ( Integer ) 443 , port )
assertSuccessfulTransfer ( keys . get ( 0 ) , keys . get ( 1 ) )
JsonPathAssert . assertThat ( doc )
Assert . assertEquals ( ( int ) value , 1 )
Assert . assertThat ( item . isNullValue ( "isNotNull" ) , is ( false ) )
assertTrue ( builder . build ( ) . getAdaptationConfig ( ) . isPipelineSplitFirst ( ) )
this . assertServiceInstanceGetRequest ( serviceInstance , true , "failed" )
assertEquals ( tknzn . getTokens ( ) . length , 0 )
Assert . assertEquals ( OBJECT , clone )
assertEquals ( title , d_threeArmModel . getTitle ( ) )
assertEquals ( mTestDir1 . getCapacityBytes ( ) , mTestDir1 . getAvailableBytes ( ) )
assertEquals ( "Locally updated value" , ( Integer ) 100 , localState . commit ( globalState ) . deref ( ) )
assertThat ( after , is ( "2->3->3->4->5->8->NULL" ) )
assertEquals ( 3 , FastMath . exp ( chart . getLogPartitionFunction ( ) ) , 1e-3 )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "17-Jun-2013" )
Assert . assertFalse ( "Test isAttributePresent returns false" , element . isAttributePresent ( "someAttribute" ) )
Assert . fail ( )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertEquals ( response . getStatus ( ) , 400 )
Assert . assertEquals ( "[\"\",\"abc\",\"\\b\\f\\n\\r\\t\",\"\\\"\",\"\\\\\",\"\\u001f\"]" , writer . toString ( ) )
assertTrue ( called [ 0 ] )
assertTrue ( emptySet . isEmpty ( ) )
Assert . assertEquals ( "org.wildfly.arquillian:wildfly-arquillian-container-domain-remote:2.2.0.Final" , adapter . dependencies ( ) [ 0 ] )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertNull ( lock )
assertEquals ( "http://localhost:" + ourPort + "/fhir/Patient?_revinclude=Provenance%3Atarget&_format=json" , ourRequestUri )
assertThat ( array2 , nullValue ( ) )
assertThat ( renderer . getShortForm ( entity ) , is ( "xsd:unsignedShort" ) )
assertEquals ( "param.properties" , lineArgs . getParameterFilePath ( ) )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( levelFile ) ) )
assertEquals ( relatedObjectInfo , classUnderTest . getRelatedObjectInfo ( ) )
assertEquals ( 608512271L , checksum )
assertEquals ( "<b></b><b>bbb</b><table><tbody><tr><td>aaa</td></tr></tbody></table><b>ccc</b>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( jsonResponse . getStatus ( ) , JsonResponseStatus . FAIL )
assertEquals ( expected , actual )
assertNotNull ( requestToken )
assertEquals ( "incorrect count" , 1 , genericManager . getAllByPropertyValueCount ( property , value ) )
assertThat ( stdOutContent . toString ( ) , equalsIgnoringOSSpecificLineSeparators ( "1.7.2-SNAPSHOT\n" ) )
Assert . assertEquals ( Collections . emptyMap ( ) . toString ( ) , bucketVersions )
Assert . assertTrue ( signatureUtil . signatureCoversWholeDocument ( "Signature1" ) )
assertSame ( expected , actual )
assertNotNull ( action )
Assert . assertEquals ( "(nt_string CGAU)" , nt_string . toStringTree ( parser ) )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
assertEquals ( expected , actual )
assertEquals ( 1 , TestUtils . regexCount ( pb . getContent ( ) , "<w:br w:type=\"page\" />" ) )
Assert . assertEquals ( expectedRanges , actualRanges )
assertEquals ( 0 , new ReadOnlyZeroBitSet ( i ) . cardinality ( ) )
assertEquals ( "Change set number was incorrect" , "12497" , changesetNumber )
assertTrue ( errors . equals ( noErrors ) )
assertEquals ( dmatrix [ i ] [ j ] , diag [ i ] [ 0 ] , epsilon )
paths . assertIsCanonical ( info , actual )
assertEquals ( "token 2\n" , found )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertEquals ( ( byte ) - 117 , executeTestMethod ( test , Byte . class , null , Integer . valueOf ( ( byte ) - 117 ) ) . byteValue ( ) )
assertEquals ( reference , output , mime )
assertEquals ( getFormatter ( ) . toString ( ) , "ParseCaseSensitive(true)" )
assertEquals ( true , extractedBool )
Assert . assertArrayEquals ( answer , result , 1e-5 )
assertEquals ( 1 , list . size ( ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertFalse ( "no query result returned" , result . isEmpty ( ) )
assertEquals ( 0 , delete . execute ( ) )
assertTrue ( obj instanceof String )
context . assertIsSatisfied ( )
assertEquals ( newArrayList ( new AcceptToken ( "*" ) ) , charsetList )
assertWindowSizeIsIdeal ( from , to , idealWindowSize )
assertEquals ( expResult , result )
assertEquals ( "11.1.10" , result )
assertTrue ( result . contains ( "jentrata/bin" ) )
assertEquals ( testString , deserialized )
assertEquals ( "SELECT E1 FROM SalesOrderHeader E1 WHERE E1.soID >= 1234" , jpqlSelectStatementBuilder . build ( ) . toString ( ) )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , "12.3" ) )
assertEquals ( 2 , song . getTrack ( ) )
Assert . assertTrue ( children . size ( ) > 0 )
assertEquals ( "Invalid random bytes" , size , new Random ( ) . randomBytes ( ) . length )
Assert . assertEquals ( expectedIds , actual )
assertEquals ( "@tests.AnnotationBuilderTest.Anno(value=\"m\", can={1})" , builder . build ( ) . toString ( ) )
Assert . assertEquals ( "2004-02-29" , result )
Assert . assertNull ( this . component . load ( this . patient ) )
assertThat ( resource , is ( equalTo ( method ) ) )
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/page/foo%3Dbar&query=foo%3Dbar" ) )
assertEquals ( "Mike Tesla" , name )
assertArrayEquals ( expected , result )
Assert . assertNotNull ( "should have a random access file" , irodsRandomAccessFile )
assertROIEquivalent ( g , shape , "Checkerboard" )
assertEquals ( "http://ipt.gbif.org/eml.do?r=ants" , cfg . getResourceEmlUrl ( "ants" ) )
factory . assertSortableColumnState ( table )
assertEquals ( document , mapper . readerFor ( ItemDocumentImpl . class ) . with ( DeserializationFeature . ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT ) . readValue ( JSON_ITEM_EMPTY_ARRAYS ) )
assertThat ( getServers ( ) , containsInAnyOrder ( "wls1" , "wls2" ) )
assertEquals ( asSet ( "firstRegion" ) , resolvedIds )
assertTrue ( instance . getProperties ( ) . size ( ) > 0 )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( "<textarea>&lt;p&gt;Jsoup&lt;/p&gt;</textarea>" , doc . body ( ) . html ( ) )
assertEquals ( 3 , v1 . query ( ) . count ( ) )
assertDelete ( newZipFile )
assertEquals ( "http://public.npr.org/anon.npr-mp3/npr/newscasts/2015/05/31/newscastShort210540.mp3" , getMediaURIResult . value )
assertQuery ( "//*[(jcr:like(child/@prop, 'aaa%') and jcr:like(child/@prop, 'bbb%') and jcr:like(child/@prop, 'ccc%'))]" , "xpath" , ImmutableList . of ( "/content/two" ) )
assertEquals ( Collections . singletonMap ( "x.A" , Collections . singletonList ( "y.C{x=foo\\\"\n}" ) ) , TestUtils . findMetadata ( clz ) )
assertEquals ( "extended-operation-type - $everything - Patient" , captor . getValue ( ) )
assertions . hasContentEqualTo ( FakeFile . newDirectory ( "directory" ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( result )
assertNotNull ( result )
assertFalse ( or . isDefined ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
Assert . fail ( "build listing failure" )
assertNotNull ( jobService . getJobConfigVo ( namespace , jobName ) )
assertThat ( knownUser , is ( present ( ) ) )
assertEquals ( "baz" , builder . getHeaders ( ) . get ( "Foo-bar" ) . iterator ( ) . next ( ) )
assertEquals ( writeOperation , rowProcessor . getWriteOperation ( ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
Assert . assertEquals ( "�驻�� 1 砖��" , t . format ( c ) )
assertThatTestCaseObeysOracle ( 11 )
assertOut ( "/**\n * @export\n * @type {number}\n */\nRoyaleTest_A.prototype.a = Infinity" )
assertEquals ( body . toString ( ) , "123" )
assertEquals ( expectedDeviceConnectionString , returnDeviceConnectionString )
validator . assertTestSuiteResults ( 5 , 0 , 0 , 0 )
Assert . assertEquals ( expected , builder . toString ( ) . replaceAll ( "\\s+" , "" ) )
assertEquals ( this . urlConnection . getRealURL ( ) . getPath ( ) , "/rest/v1/" + this . sauceREST . getUsername ( ) + "/activity" )
assertEquals ( Arrays . asList ( "http://somelink" , "" ) , new JsonLinkConsumer ( ) . readLinks ( reader , null ) )
assertTrue ( resultSq == Position . NOPOSITION )
assertEquals ( String . format ( "A-%nAT%n" ) , aligner . getPair ( ) . toString ( ) )
assertTrue ( "the notification handler must not receive the filtered out notification" , handler . getNotifications ( ) . isEmpty ( ) )
assertThat ( expected , equalTo ( wrap ( expected ) ) )
assertTrue ( "Should have received returned message" , latch . await ( 1 , TimeUnit . SECONDS ) )
assertEquals ( "search" , result )
Assert . assertEquals ( subscriptionsBeforeRegister + 1 , subscriptionsAfterRegister )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "Found attributes" , 0 , iteratorSize ( it ) )
assertEquals ( ace , parsed )
Assert . assertFalse ( json . has ( "categories" ) )
this . assertGet ( "relationshiptypeimplementations/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Frelationshiptypeimplementations%252Ffruits/kiwi_implementation/inheritance" , "entityimplementations/relationshiptypeimplementations/kiwi_initial_inheritance.json" )
Assert . assertEquals ( "" , WebUtil . getContextPath ( ) )
assertTrue ( messageProcessed . await ( 2 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "</>;number=12" , res )
assertSame ( shouldFind , selection . multiSelect ( By . id ( "test" ) ) )
assertTrue ( results . get ( 0 ) . getContentReference ( ) . getSize ( ) > 10 )
assertEquals ( null , payload . get ( "foo" ) )
Assert . assertTrue ( result )
Assert . assertNull ( removed )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( manager . browseJexl ( ) , is ( asList ( getSelectorConfiguration ( JexlSelector . TYPE , "true" ) ) ) )
Assert . assertEquals ( "2001:4801:79f1:1:22d6:5749:0:3a" , address )
assertEquals ( 1 , vehicles . size ( ) )
assertEquals ( expected , x )
assertEquals ( 2 , query . getResultCount ( ) )
Assert . assertArrayEquals ( encodedValue , byteOutputStream . toByteArray ( ) )
assertThat ( f . parse ( "Amete Mihret, 2008-03-09 09:45 pm +03:00" ) , is ( PlainTimestamp . of ( 2015 , 11 , 19 , 21 , 45 ) . at ( offset ) ) )
assertNull ( "Endpoint returned" , endpoint )
assertEquals ( "((dependencyBuilder.combine(\"A\",\"B\").build()) && (dependencyBuilder.combine(\"C\",\"D\").build()))" , inputLogicParser . parse ( root ) )
Assert . isTrue ( roles . size ( ) > 0 )
assertEquals ( 0 , maxResults )
assertEquals ( "Parent should only have two mutation events (remove field and its caption)" , 2 , mutationEvents . intValue ( ) )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertTrue ( verify )
assertEventFired ( DeployDeployment . class , 0 )
Assert . assertNull ( poolStatistics )
assertTrue ( "attempting to persist entity with transactional entity manager and no transaction, should fail with a TransactionRequiredException" + " but we instead got a " + error , error instanceof TransactionRequiredException )
assertEquals ( 2 , selectCovered ( mergeCAs . getCas ( ) , type , 0 , 0 ) . size ( ) )
assertNotNull ( ds )
assertEquals ( "\n" , render )
assertEquals ( "" , builder . build ( ) )
Assert . assertEquals ( sql , expected . replaceAll ( "#ALIAS#" , EntityMetaDataCache . getMetaData ( EntityJoined . class ) . getAlias ( ) ) )
Assert . assertTrue ( IntrospectUtil . hasCollectionType ( typeClass ) )
assertEquals ( baseURL + "/$metadata#Photos/$entity" , node . get ( "@odata.context" ) . asText ( ) )
assertEquals ( Timestamp . valueOf ( "2013-03-27 23:18:40.0" ) , jstOi . getPrimitiveJavaObject ( result . get ( "five" ) ) )
assertOk ( client . executePost ( "/foo" , "foo bar" , ContentType . TEXT_PLAIN ) )
assertEquals ( "Failed to generate two dimensional array" , "new Integer[][] { { 1, 2 } }" , s )
assertTrue ( "objectClass should still be in the registry after move failure" , getObjectClassRegistry ( ) . contains ( OID ) )
tc . assertEquals ( "Hello Bill" , event . result ( ) . getMessage ( ) )
assertEquals ( Boolean . TRUE , statement . getOnlyUpdate ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertTrue ( page . asXml ( ) . contains ( "PAGE 2 OUTPUT" ) )
assertEquals ( 1 , exts . size ( ) )
assertEquals ( "The method names should be same" , "testShortMethodName" , result )
assertThat ( "default minimun number of cores" , sut . getMinCores ( ) , is ( equalTo ( VM . DEFAULT_MIN_CORES ) ) )
assertEquals ( Long . valueOf ( PherfConstants . LOG_PER_NROWS ) , getLogPerNRowsValue ( new Pherf ( args ) . getProperties ( ) ) )
Assert . assertEquals ( "The error message is not well set " , errorMessage , geolocErrorVisitor . getErrorMessage ( ) )
assertEquals ( "#test{width:100px}\n#test2{width:100px}" , minified )
assertFalse ( clientConnection2Closed . isDone ( ) || serverConnection2Closed . isDone ( ) )
assertNotNull ( jobProperties )
assertEquals ( "Clock should've returned fake time" , fakeTime , clock )
assertThat ( name . hashCode ( ) , is ( other . hashCode ( ) ) )
assertEquals ( "/foo/123" , rc . normalizedPath ( ) )
assertTrue ( result . contains ( "\"1-0-v0\":{\"type\":\"LCD\",\"values\":[\"\\u0000\"]}" ) )
assertEquals ( V8Value . FLOAT_32_ARRAY , typedArray . getType ( ) )
assertEquals ( - 1 , resultComparator . compare ( od1 , od2 ) )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertEquals ( "Script" , result )
Assert . assertNotNull ( "No message context" , messageContext )
assertNotNull ( client )
assertEquals ( "FinalInterval [(1, 2) -- (3, 4) = 3x3]" , interval . toString ( ) )
Assert . assertNotNull ( result )
assertTrue ( msg , dynAny . type ( ) . equal ( tc ) )
assertTrue ( success )
assertFalse ( files . isEmpty ( ) )
assertFalse ( validator . validate ( EntityNames . STUDENT_COMPETENCY , idsToValidate ) . containsAll ( idsToValidate ) )
assertNull ( to2 )
assertEquals ( JSON_OBJECT , json )
this . assertGet ( "policytemplates/http%253A%252F%252Fplain.winery.opentosca.org%252Fpolicytemplates/PolicyWithIcon_w1-wip1/appearance" , "entitytemplates/policytemplates/visualappearance_icon.json" )
assertEquals ( Status . BACKOFF , status )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( 64 * 64 , cn . getNumColumns ( ) )
assertThat ( builder . getDom ( "test-state" ) , is ( dom ) )
Assert . assertNull ( caixa )
assertNotNull ( Query . reader ( "UAXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertTrue ( c_xml . createDatasourceXml ( new File ( "e:/dataSource-context.xml" ) ) )
assertThat ( new RsPrint ( response ) . printBody ( ) , is ( equalTo ( "::response::" ) ) )
assertThat ( token . image , equalTo ( "user-agent" ) )
Assert . assertTrue ( reader . skipFirstLineAsHeader )
assertEquals ( "Applications" , c . get ( TITLE , "unknown" ) )
assertThat ( response , containsString ( "% Abuse contact for '19.0.0.0 - 19.255.255.255' is 'more_abuse@ripe.net'" ) )
assertEquals ( "[[],[]]" , writer . toString ( ) )
Assert . assertEquals ( before + 1 , Context . getProviderService ( ) . getAllProviderAttributeTypes ( ) . size ( ) )
assertEquals ( 4 , container . children . size ( ) )
assertEquals ( RESULT , out )
assertThat ( converter . getClass ( ) , is ( typeCompatibleWith ( ReflectionConverter . class ) ) )
assertEquals ( MICRO ( GRAM ) , u )
assertEquals ( "wrapping renderer must use list's default on null" , defaultRenderer . getClass ( ) , renderer . getDelegateRenderer ( ) . getClass ( ) )
assertTrue ( result . getDiff ( ) . contains ( "ingest.helper.class" ) )
assertThat ( status , is ( 201 ) )
assertEquals ( true , btu . isPrimitive ( ) )
assertEquals ( 123L , book . getId ( ) )
assertEquals ( item . getType ( ) , result )
assertEquals ( HomeController . HOME_VIEW , view )
Assert . assertEquals ( "employee" , tableName )
assertEquals ( new RawSignResponse ( RawSignResponse . USER_PRESENT_FLAG , COUNTER_VALUE , SIGNATURE_SIGN ) , rawSignResponse )
assertTrue ( "Directory should exist" , path . exists ( ) )
Assert . assertEquals ( "(aa_change_extension (aa_point_location (aa_char A) 124) (aa_char T) ext * 23)" , aa_change_extension . toStringTree ( parser ) )
Assert . assertEquals ( hh . getUserName ( ) , list . iterator ( ) . next ( ) . getUserName ( ) )
context . assertIsSatisfied ( )
assertEquals ( "a" , i . next ( ) )
Assert . assertEquals ( hash , checksum . getValue ( ) )
Assert . assertEquals ( buffer . toString ( ) , "ab  a" )
Assert . assertEquals ( expectedMethod , m )
assertEquals ( "read -  - Patient/1 - " , captor . getValue ( ) )
assertEquals ( expecting , found )
assertNotNull ( Mobile . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "US" ) . read ( ) )
assertThat ( pong , containsString ( "OK" ) )
Assert . assertEquals ( "localhost" , janus . getServer ( ) . getServerInstance ( ) . getHost ( ) )
assertSame ( user , authenticatedUser )
Assert . assertFalse ( result . isEmpty ( ) )
assertEquals ( "ranzzz" , Bytes . toString ( res ) )
assertEquals ( false , getAddLayerToAnimationAction ( ) . isEnabled ( ) )
Assert . assertEquals ( 1L , vm . getStack ( ) . pop ( ) )
assertThat ( rule . match ( sentence ) . length , is ( 1 ) )
assertTrue ( copy . getAreNodeLabelsAcceptedByRM ( ) )
assertEquals ( "3 p盲eva p盲rast" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert . assertEquals ( "Failure - expected to be the same" , "string" , VS . getData ( ) )
Assert . assertNull ( found )
assertEquals ( "select entity_0 from Entity entity_0 inner join entity_0.subEntity subEntity_1 order by subEntity_1.code" , select . getQuery ( ) )
assertEquals ( "GBP 2.40" , test . toString ( ) )
assertEquals ( "Response body is not correct." , USER_IN_REALM1 , Utils . makeCallWithBasicAuthn ( principalServlet ( webAppURL ) , USER_IN_REALM1 , CORRECT_PASSWORD , SC_OK ) )
assertThat ( options . getCopyStrategy ( ) , is ( ConfigurationVariable . COPY_STRATEGY . defaultValue ( ) ) )
assertThat ( result , equalTo ( false ) )
assertEquals ( nw . getScore ( ) , alignment . getScore ( ) , PRECISION )
Assert . assertEquals ( 4 , result )
Assert . assertNotNull ( writer )
assertEquals ( 1 , count )
assertEquals ( testStyle , classUnderTest . getOperatorStyle ( ) )
assertThat ( child . getAngle ( ) , IsEqual . equalTo ( 45f ) )
Assert . assertEquals ( "did not get expected data length" , testLen , result . length ( ) )
assertKernel ( kernel , CIRCLE3 , e )
assertTrue ( extender . getZoomLevel ( ) == ImageViewZoomExtender . ORIGINAL_LEVEL )
assertNotNull ( chain . getForwardURL ( ) )
assertResultIs ( s )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
assertNotNull ( AvailableAddOn . reader ( ) . read ( ) )
assertEquals ( expResult , result )
assertEquals ( 2 , node . getArrayDepth ( ) )
assertEquals ( "{\"d\":{\"__metadata\":{\"id\":\"" + BASE_URI + "Buildings('1')\"," + "\"uri\":\"" + BASE_URI + "Buildings('1')\",\"type\":\"RefScenario.Building\"}," + "\"nb_Rooms\":{\"results\":[{\"__metadata\":{\"id\":\"" + BASE_URI + "Rooms('1')\"," + "\"uri\":\"" + BASE_URI + "Rooms('1')\",\"type\":\"RefScenario.Room\",\"etag\":\"W/\\\"1\\\"\"}," + "\"Id\":\"1\",\"Name\":null,\"Seats\":null,\"Version\":1," + "\"nr_Employees\":{\"__deferred\":{\"uri\":\"" + BASE_URI + "Rooms('1')/nr_Employees\"}}," + "\"nr_Building\":{\"__deferred\":{\"uri\":\"" + BASE_URI + "Rooms('1')/nr_Building\"}}}]}}}" , json )
assertNotNull ( o )
assertEquals ( "[10.0, 8.0, 6.0, 4.0, 2.0]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertThat ( path1 . equals ( path2 ) , is ( true ) )
assertThat ( generatedType , is ( notNullValue ( ) ) )
Assert . assertTrue ( value )
assertEquals ( "cfquery" , parserTag . getName ( ) )
assertThat ( mock . get ( ) , is ( "yeah" ) )
assertEquals ( int . class , ctor . getParameterTypes ( ) [ 0 ] )
assertEquals ( "zero" , actual )
assertNotNull ( container . child . get ( ) )
Assert . fail ( "Authorization failure expected" )
assertEquals ( "value" , properties . get ( "key" ) )
assertNull ( association )
assertEquals ( "" , result )
assertEquals ( actualKeys , expectedKeys )
assertEquals ( 404 , resp . getStatusCode ( ) )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
assertTrue ( "Failed to put all elements" , h . get ( x ) . equals ( ht10 . get ( x ) ) )
assertThat ( i , equalTo ( 2 ) )
assertMatchFailure ( result , MatchField . FieldType . HEADER , "Content-Type" , "text/plain; .+" , "image/gif" )
assertThat ( ( Integer ) getter . invoke ( instance ) , is ( equalTo ( 1337 ) ) )
assertEquals ( packet , p )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertEquals ( "thumbnail-filename" , filename )
assertEquals ( 0 , foIndex )
assertThat ( users , both ( hasSize ( 1 ) ) . and ( contains ( user ) ) )
assertEquals ( arr . getDouble ( i ) , onesInMiddle . getDouble ( i ) , 1e-3 )
assertEquals ( "Expenses 9/12/2002\n" + " \tDinner\t$10.00\n" + " \tBreakfast\t$5.00\n" + "\n" + "Meal expenses $15.00\n" + "Total $15.00" , printer . getText ( ) )
assertTrue ( configured . getBoolean ( "configured" , false ) )
assertEquals ( "some referer" , mockResult . included ( "returnPath" ) )
assertEquals ( 310 , screenshotPlugin . getBarrowsNumber ( ) )
assertThat ( clock . currentTime ( ) . getNanosecond ( ) % 1000000 , is ( 0 ) )
assertFalse ( this . it . hasNext ( ) )
Assert . assertEquals ( ImmutableMap . < String , Object > builder ( ) . put ( "feed" , "alerts" ) . put ( "timestamp" , event . getCreatedTime ( ) . toString ( ) ) . put ( "service" , "test" ) . put ( "host" , "localhost" ) . put ( "severity" , "anomaly" ) . put ( "description" , "blargy" ) . put ( "data" , ImmutableMap . < String , Object > of ( "something1" , "a" , "something2" , "b" ) ) . build ( ) , event . toMap ( ) )
assertEquals ( e1 , e2 )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertThat ( "getValue" , node . getValue ( ) , is ( 2147483647L ) )
assertEquals ( property . getType ( ) , String . class )
assertThat ( target , notNullValue ( ) )
assertThat ( method . propertyName ( ) , is ( "meOnFire" ) )
assertEquals ( "expected group should equal with result obtained from SCIM REST API" , expectedResponse . getEntity ( ) , result . getEntity ( ) )
assertEquals ( "hello" , res )
assertPlanEquals ( expect , plan )
assertions . isNotEqualByComparingTo ( actual )
assertFalse ( proxyHttpHeader . isValid ( ) )
assertThat ( target . getFlow ( nwIf , "flowId" ) , is ( nullValue ( ) ) )
assertEquals ( "Protocol version unsupported" , 6 , error . getErrorCode ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "TestFind 0" , entityType , entityTypeService . find ( context , 0 ) )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertNotNull ( response )
assertJson ( "{'value': 1}" , serialize ( bean ) )
assertSame ( ua , rme . getUsingAddressing ( exts ) )
assertEquals ( "" , result )
assertFalse ( nicHandle . equals ( null ) )
assertEquals ( expectedBindingString , relativizedVolumeString )
assertEquals ( CALLBACK_URL + '?' + Pac4jConstants . DEFAULT_CLIENT_NAME_PARAMETER + '=' + CLIENT_NAME , url )
assertTrue ( isEqual ( expectedStream , actualStream ) )
assertionHelper . assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile , ( File ) destFile )
Assert . assertTrue ( responseList . size ( ) < 2 )
assertNotEquals ( explainUserKramer , explainUserJerry )
Assert . assertEquals ( null , actualValue )
Assert . assertEquals ( expected , hexString )
assertCount ( total , "one > 0" )
assertThat ( text , is ( "" ) )
Assert . assertEquals ( 3 , jobs . size ( ) )
assertThat ( this . graphBuilder , hasNodesAndEdges ( new String [ ] { "\"groupId:parent:jar:version:compile\"" , "\"groupId:child1-1:jar:version:compile\"" , "\"groupId:child1-2:jar:version:compile\"" } , new String [ ] { "\"groupId:parent:jar:version:compile\" -> \"groupId:child1-1:jar:version:compile\"[style=dotted]" , "\"groupId:parent:jar:version:compile\" -> \"groupId:child1-2:jar:version:compile\"[style=dotted]" } ) )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertEquals ( 0 , changes . size ( ) )
assertThat ( "default minimun number of cores" , sut . getMinCores ( ) , is ( equalTo ( VM . DEFAULT_MIN_CORES ) ) )
assertTrue ( validator . validate ( sslTermination , PUT ) . passedValidation ( ) )
assertOut ( "/**\n * @constructor\n */\norg.apache.royale.A = function() {\n};" )
Assert . assertEquals ( "127.0.0.1" , v )
assertEquals ( 1 , branch_conditions . size ( ) )
Assert . assertEquals ( expResult , result )
assertThat ( markdown , containsString ( String . join ( "\n" , "### Start" , "" , tableHeader ( ) , tableEntry ( "`env`" , linkTo ( "Env Var" , reference . getK8sMarkdownLink ( ) + "#env-var" ) , "" ) ) ) )
assertSame ( exception , camelExchange . getException ( ) )
assertSame ( temporaryTopic , stompJmsSession . createTemporaryTopic ( ) )
assertStat ( result )
assertThat ( errors , hasFieldErrors ( "middleName" ) )
assertEquals ( sampleIn . doNotRemoveWideningCast ( i , j ) , sampleOut . doNotRemoveWideningCast ( i , j ) )
assertEquals ( expResult , result )
assertNotNull ( paquete . getId ( ) )
assertEquals ( "array type" , 1 , parsed . returnType . arrayDepth )
assertEquals ( "echoPath/a1/b1/c1//'true'/'123'" , r )
Assert . assertTrue ( condition . evaluate ( new MockInboundRewrite ( ) , new MockEvaluationContext ( ) ) )
assertEquals ( 10 + 100 , c . renamedGetValue ( ) )
assertNotNull ( IpAccessControlListMapping . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertDecimalEquals ( sma . getValue ( 105 ) , 10 )
assertEquals ( 1.0 , result , 0.1 )
assertTrue ( pid > 0 )
assertEquals ( "12攵� ��" , t . format ( new Date ( 0 ) ) )
assertEquals ( packed , sw . toString ( ) )
Assert . assertNotNull ( "no uri" , actual )
assertEquals ( HttpResponse . SC_FORBIDDEN , response . getHttpStatusCode ( ) )
assertTrue ( true )
Assert . assertEquals ( SpringContainer . class , container . context . getBean ( "container" ) . getClass ( ) )
assertTrue ( connection . toString ( ) + " is not transaction aware" , connection . toString ( ) . startsWith ( "Transaction-aware proxy for target Connection  from DataSource [Mock for DataSource" ) )
assertTrue ( displayable )
assertThat ( authenticatedResource , is ( authenticatableResource ) )
assertFalse ( evaluator . isStackTraceEnabled ( ) )
assertEquals ( USERNAME , credentials . getUsername ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( 5 , crrId2 . getStatus ( ) )
assertEquals ( 3 , cheeses . size ( ) )
Assert . assertEquals ( attribute , 2L )
assertTrue ( s1 . equals ( s2 ) )
assertNotNull ( flux )
Assert . assertEquals ( "complexType extends name" , extension )
assertEquals ( expected , actual , 0.0001 )
assertEquals ( "SSS:1234trueW:5" , x . toString ( ) )
assertEquals ( " Echo Message = vasu" , response )
assertEquals ( result , "2007-12-03 - 10:15:30" )
assertEquals ( "showDeveloperTools timeout" , latch . getCount ( ) , 0 )
assertEquals ( monthView . getFirstDayOfWeek ( ) , monthView . getSelectionModel ( ) . getFirstDayOfWeek ( ) )
assertEquals ( "<" , writer . toString ( ) )
assertEquals ( "3 爻丕卅�鬲 �����" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
paths . assertIsEmptyDirectory ( INFO , actual )
Assert . assertEquals ( d , a . select ( rowInd , colInd ) )
assertThat ( tenantIdProvider . dmnParameters . size ( ) , is ( 1 ) )
assertThat ( differences , contains ( ciString ( "DEV-MNT-1" ) ) )
MatcherAssert . assertThat ( readTag , is ( tag ) )
assertTrue ( "Document should be in exception routing" , document . isException ( ) )
assertNotNull ( mh )
assertEquals ( EdmSimpleTypeKind . DateTime , edmDateType )
assertEquals ( Collections . < String , Object > emptyMap ( ) , result )
assertThat ( ChronoFormatter . ofPattern ( "yyyy" , PatternType . CLDR , Locale . ROOT , CalendarYear . chronology ( ) ) . parse ( "2016" ) , is ( expected ) )
mojos . assertBuildOutputs ( basedir , "target/custom/custom.txt" )
assertNull ( p2 )
assertions . isEqualTo ( null )
assertEquals ( PLAIN , decoded )
mockEndpoint . assertIsSatisfied ( 5000 )
assertNull ( response . getStub ( ) )
Assert . assertThat ( uriBuilder . isOpaque ( ) , CoreMatchers . equalTo ( uri . isOpaque ( ) ) )
assertEquals ( "expectedValue" , result )
Assert . assertEquals ( CREATE_SIZE , response . getThreadDumpsSize ( ) )
assertTrue ( keyDefinition . isUpdatable ( ) )
assertEquals ( "Illegal port a, must be integer." , result )
assertThat ( "static int value" , obj , equalTo ( 5 ) )
assertTrue ( rowChange . compareTo ( rowChange2 ) == 0 )
assertCompleted ( "a" )
Assert . assertFalse ( "null should not match non-null." , sut . matches ( object2 ) )
assertEquals ( 0 , count )
assertNull ( association )
Assert . assertEquals ( dataInicioAtividade , retorno . getDataInicioAtividade ( ) )
assertEquals ( store1 . getSchemaByName ( "PDB" ) , dummySchema1 )
assertEquals ( new BigDecimal ( "29.950" ) , entity . getN73 ( ) )
assertEquals ( testQuery , actualQuery )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "overviewPage" ) , "You arrived at overview page" ) . apply ( driver ) )
assertThat ( result , is ( "Node2" ) )
Assert . assertTrue ( firstConceptSet . getSortWeight ( ) < secondConceptSet . getSortWeight ( ) )
assertEquals ( "" , caller . getResponseBody ( ) )
assertThat ( result , is ( false ) )
assertEquals ( "{ \"fieldname\" : { \"$ne\" : \"?\" } }" , filterParameters . toString ( ) )
Assert . assertEquals ( "POST: David" , result )
assertEquals ( Double . valueOf ( 5 ) , Double . valueOf ( value . asDouble ( 10 ) ) )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertEquals ( "<191>Oct 11 22:14:15 " + HOSTNAME + " " , result )
assertNameToken ( ast , "bwahaha" )
assertEquals ( "urn:oid:0.1.2.3" , parsed . getEntry ( ) . get ( 0 ) . getResource ( ) . getId ( ) . getValue ( ) )
assertEquals ( HttpStatusCode . BAD_REQUEST . getStatusCode ( ) , connection . getResponseCode ( ) )
assertEquals ( 5 , d . asByte ( ) )
Assert . assertEquals ( "{\"alice\":null}" , result . toString ( ) )
assertEquals ( "value" , store . get ( "key" , "4711" , String . class ) )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertAllTargetsCount ( 0 )
assertEquals ( 0 , historicIncidents )
assertIsPrepared ( tx )
assertEquals ( expected , quicksort ( tosort ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
Assert . assertEquals ( "Hello Kermit" , result )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
Assert . assertEquals ( "000003" , generated )
assertFalse ( kieBuilder . getResults ( ) . getMessages ( org . kie . api . builder . Message . Level . ERROR ) . isEmpty ( ) )
assertOut ( "org.apache.royale.utils.Language.as(a, b)" )
assertEquals ( AbstractSuperclass . class , test . getStatement ( 1 ) . getReturnClass ( ) )
assertThat ( result . getPayload ( ) , is ( instanceOf ( String . class ) ) )
assertThat ( actualParameterMap , is ( expectedParameterMap ) )
assertEquals ( expectedValue , expression . evaluate ( record ) )
assertThat ( builder , hasToString ( "<a class=\"mybutton\" style=\"display:none;\"" + " href=\"https://flattr.com/thing/123546/a-demo-thing\">" + "<img src=\"http://api.flattr.com/button/flattr-badge-large.png\"" + " width=\"93\" height=\"20\" alt=\"Flattr this\" title=\"Flattr this\" border=\"0\" />" + "</a>" ) )
assertProcessEnded ( processInstance . getId ( ) )
Assert . assertEquals ( expectedId , id )
Assert . assertEquals ( PropertyValue . create ( "Alice" ) , result . get ( 0 ) . getProperty ( 0 ) )
assertEquals ( result , range . exclude ( other ) )
assertThat ( array , equalTo ( array ) )
assertEquals ( "test (REG_SZ) = ? (0x3F000000)" , value . toString ( ) )
Assert . assertEquals ( 1 , a . getNumberOfProtectedMethods ( ) )
assertNotNull ( getControl ( mock ) )
assertEquals ( "blob condition serialization is wrong" , expected , actual )
assertOut ( "foo: function foo(x) {\n\treturn this.foo$2(x + 2) + \"-sub\";\n}" )
assertEquals ( "Link1 (" + BASE_URL + "#dest1)Link2 (http://xyz/abc)" , result )
assertEquals ( expResult , result )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_1" )
assertEquals ( expectedDouble , executeAndReturnNumber ( LongToInt . class ) , 0 )
assertEquals ( p1 , p2 )
assertTrue ( Paths . get ( p . toUri ( ) ) . equals ( p . toAbsolutePath ( ) ) )
assertThat ( result , is ( "" ) )
assertThat ( event . getRelease ( ) , equalTo ( expectedValue ) )
assertTrue ( selector . evaluate ( source ) )
Assert . assertFalse ( policy . canRetry ( context ) )
assertNotNull ( results )
assertTrue ( requestMeta . getHeaders ( ) . containsKey ( "X-Foo" ) )
assertNotNull ( union )
assertNotNull ( head )
assertEquals ( subscriptionName , editFilter . getSubscriptionName ( ) )
Assert . fail ( "Expected to fail, but didn't" )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expResult , result )
assertThat ( ValidatorUtil . formatMessages ( validate ) , validate . size ( ) , is ( 0 ) )
assertEquals ( EXPECTED . replace ( ODataHttpMethod . GET . name ( ) , ODataHttpMethod . PUT . name ( ) ) . replace ( Integer . toString ( HttpStatusCodes . OK . getStatusCode ( ) ) , Integer . toString ( HttpStatusCodes . NO_CONTENT . getStatusCode ( ) ) ) . replace ( HttpStatusCodes . OK . getInfo ( ) , HttpStatusCodes . NO_CONTENT . getInfo ( ) ) , actualJson )
assertEquals ( "Native and term comparisons are different" , nativeComparison , mapperComparison )
assertFalse ( cmd . printErrors )
this . assertAnalyzesTo ( _a , "\"Test tesT2\"@en" , new String [ ] { "Test" , "tesT2" } , new String [ ] { "word" , "word" } )
Assert . assertTrue ( allRight )
assertEquals ( "ä/" , zae . getName ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertUnderflow ( ( double ) x + ( double ) y , result , x + y )
assertRedisEmpty ( )
assertThat ( issues , is ( empty ( ) ) )
assertEquals ( "NOT foobar" , expr . toString ( ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( 0 , latch . getCount ( ) )
assertEquals ( expecting , found )
Assert . assertEquals ( true , config . isDebug ( ) )
assertTrue ( ( Boolean ) result )
assertNotNull ( Challenge . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "identity" , "YFXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "sid" ) . fetch ( ) )
assertThat ( panel . getBackgroundPainter ( ) , is ( sameInstance ( painter ) ) )
assertThat ( "Expected the property to not be set" , getSettings ( ) . getString ( "key" ) , nullValue ( ) )
assertEqualsWithoutWhiteSpaces ( "cylinder(h=10, r1=5, r2=8.5, $fn=8, center=true);" , prism )
assertThat ( options . getUploadRetryCount ( ) , is ( 0 ) )
assertNotNull ( result )
assertEquals ( 24 , result )
assertThat ( out . value , is ( new StringOption ( "Hello, world!" . substring ( 0 , 10 ) ) ) )
assertNotNull ( openAPI . getComponents ( ) . getSchemas ( ) . get ( "Pet" ) )
assertEquals ( claimCreatedByJs , "testValue" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + destPdf , sourceFolder + cmpPdf , destinationFolder ) )
assertThat ( book , hasProperty ( "title" , equalTo ( TITLE ) ) )
assertArrayEquals ( new String [ ] { "foo" , "b\"a\"r" } , command )
Assert . assertEquals ( "Main Page" , browser . currentPage ( ) . title ( ) )
Assert . assertEquals ( expected , actual )
assertTrue ( Annotations . hasAnnotation ( propertyReference , Column . class ) )
assertEquals ( BaseAction . SUCCESS , action . detail ( ) )
assertOut ( "var /** @type {Array} */ a = Array('Hello', 'World')" )
assertTrue ( replayService . getPlayers ( ) . isEmpty ( ) )
assertFalse ( upstreamCtx . isInvokable ( operatorDef , strategy ) )
assertEquals ( TEST_STRING , actual )
assertEquals ( expectedResult , entityParser . parseDatastream ( json ) )
Assert . assertTrue ( cover . getBoundaries ( ) . getZ ( ) . getMax ( ) > TEST_MODEL . getBoundaries ( ) . getZ ( ) . getMax ( ) )
assertTrue ( "Failed authentication with empty password was not logged" , loggedFailedAuth ( AUDIT_LOG_FILE , USER ) )
out . assertIsSatisfied ( )
assertQ ( req , "//result[@name='response'][@numFound='1']" , "//result[@name='response']/doc[1]/str[@name='id'][.='4']" )
assertTrue ( instance . isAllBuildsCompleted ( event ) )
Assert . assertEquals ( "(A124del1)" , del . toHGVSString ( AminoAcidCode . ONE_LETTER ) )
assertEquals ( "allocation that filled the gap after deallocation should have been merged with adjacent allocation" , Lists . newArrayList ( new Allocation ( control , 0 , 15 ) , new Allocation ( withLogin , 15 , 5 ) ) , allocations . getAllocations ( ) )
assertTrue ( action . isExecuted ( ) )
assertEquals ( 2.71f , array2 . getFloat ( 0 ) , 0.01 )
assertThat ( link . waitForArduinoToBoot ( 3 , DAYS , READY_MESSAGE_ONLY ) , is ( true ) )
assertEquals ( false , result )
assertEqualsIsSymmetric ( child1 , child2 )
assertEquals ( ElasticSearchIndexProvider . ES_TEXT_TYPE , type )
assertEquals ( 0 , app . executeApplication ( args ) )
assertEquals ( expectedValue , propertyValue )
assertEquals ( 0 , userList . indexOf ( user ) )
assertNotEquals ( playlist1 , playlist2 )
eventSupport . assertReloadOccured ( )
assertThat ( impl . containsAxiomIgnoreAnnotations ( axiom , ontologyId ) , is ( true ) )
assertEquals ( expected , actual )
assertEquals ( "61 62 63 64 65 66 67 68   69 6a 6b 6c 6d 6e 6f 70 abcdefgh ijklmnop" + EOL , os . toString ( ) )
assertEquals ( "TestValue" , ( ( Context ) context . lookup ( "context" ) ) . lookup ( "test" ) )
assertFalse ( "Escaping not performed: \"" + output + '\"' , output . contains ( "<script>alert(" ) )
assertThat ( target . validate ( ) , is ( false ) )
assertTrue ( definition . contains ( STRING_VARCHAR ) )
assertMappedFieldValueIs ( "CustomMappedValue" )
TestCase . assertTrue ( result )
assertEqualsWithoutWhiteSpaces ( "mirror([1,0,0]) (model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 12 ) . create ( ) ) )
assertMetadata ( is )
Assert . fail ( "create object under non-existent bucket should fail" )
assertEquals ( arr , resultArr )
assertThat ( doRender ( renderer , "# " ) , equalTo ( "<h1 id=\"id\"></h1>\n" ) )
assertEquals ( "1.2.3" , v . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( 4 , result . size ( ) )
assertNull ( client . lastBatch )
assertEquals ( "3 p盲eva p盲rast" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert . assertTrue ( isEqual ( distance , 0.269098 ) )
assertNotEquals ( right , left )
Assert . assertTrue ( "EventReporterAgent should extend agent" , agent instanceof Agent )
assertEquals ( "abc\n" , found )
assertEquals ( "" , result )
assertEquals ( 1 , SnowcastSequenceUtils . compareSequence ( sequence1 , sequence2 ) )
assertThat ( toUnqualifiedVersionlessIdValues ( result ) , containsInAnyOrder ( pt0id . getValue ( ) ) )
assertTrue ( c . testMe ( 42 ) )
editor . assertProblems ( "z-bogus|unknown 'AvailabilityZone'. Valid values are: [z1, z2, z3]" )
assertEquals ( formattedValue , "111.222.333-44" )
assertEquals ( "aTestString" , classUnderTest . getClientName ( ) )
assertThatSubProcessIsCalled ( createCallProcess ( "id" , "${subProcessDefinitionId}" ) , Collections . singletonMap ( "subProcessDefinitionId" , subProcessDefinitionId ) )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
assertThat ( slice . events . get ( 0 ) . event , equalTo ( events . get ( 5 ) ) )
assertFalse ( getGraphDb ( ) . getAllNodes ( ) . iterator ( ) . hasNext ( ) )
Assert . assertEquals ( 1 , simpleFactory . validateCounter )
assertThat ( result , equalTo ( v + "-" + s ) )
assertEquals ( "String" , name . getImage ( ) )
Assert . assertEquals ( 1 , allMembers ( ) )
assertions . startsWith ( )
assertTrue ( content . contains ( "This is page foo" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "Two entries should be merged into one" , 1 , changes . size ( ) )
Assert . assertNotNull ( mediaResult . getMediaId ( ) )
assertEquals ( "specialRequest" , target . request ( ) )
Assert . assertEquals ( expectedRedirect , parser . extractRedirect ( xmlString ) )
assertEquals ( false , result )
Assert . assertEquals ( String . format ( msg , r , c ) , expected , actual , 0. )
assertEquals ( CALLBACK_URL + "?" + Pac4jConstants . DEFAULT_CLIENT_NAME_PARAMETER + "=" + basicAuthClient . getName ( ) , action . getLocation ( ) )
assertEquals ( "{\"store\":{\"book\":[{\"category\":\"reference\",\"author\":\"Nigel Rees\",\"title\":" + "\"Sayings of the Century\",\"price\":8.95},{\"category\":\"fiction\",\"author\":" + "\"Evelyn Waugh\",\"title\":\"Sword of Honour\",\"price\":12.99}],\"bicycle\":" + "{\"color\":\"red\",\"price\":19.95}},\"arrayTest\":\"new Author value\"}" , result . get ( RETURN_RESULT ) )
assertEquals ( 18 , size )
assertOutWithMetadata ( outTemplate . replaceAll ( "AppName" , appName ) )
assertEquals ( "The Decoded Data should be the same as the input Data" , data , embedding . getDecodedData ( ) )
Assert . assertEquals ( concat . toString ( ) , ev . getString ( ) )
assertJsonEquals ( ImmutableMap . of ( "topic" , "test-topic" , "notification" , data ) , message )
assertNotNull ( childProcessInstance )
assertDocument ( session . getSessionFactory ( ) , "User" , "{ '_id' : '" + user . getId ( ) + "' }" , "{ " + "'_id' : '" + user . getId ( ) + "', " + "'addresses' : {" + "'home' : '" + home . getId ( ) + "'," + "'work' : '" + work . getId ( ) + "'" + "}" + "}" )
assertEquals ( users . size ( ) , 5 )
assertThat ( connection2 , not ( is ( connection ) ) )
Assert . assertTrue ( score > 0 )
assertFalse ( ss . validate ( ) )
assertValidKey ( taskKey )
assertEquals ( HttpURLConnection . HTTP_NOT_FOUND , code )
assertEquals ( policyName , policy . getName ( ) )
assertEquals ( "(style has Sales.Pattern'Yellow')" , filter . build ( ) )
assertThat ( javaSource , containsString ( "蝎些��懈��携" ) )
assertThat ( out . toString ( ) , is ( sb . toString ( ) ) )
assertArrayEquals ( expected , actual . getHandsComp ( ) )
assertEquals ( "Base value is not properly parsed" , "099967231.9999" , parsed )
Assert . assertEquals ( "Soft line   Hard line\r\n" , readText ( decoder ) )
arrays . assertContainsSequence ( description , null , new short [ 2 ] )
assertEquals ( expectedQuery , actualQuery )
assertThat ( checkpoint . getCheckpoint ( shardId ) , equalTo ( sequenceNumber ) )
assertEquals ( "Find by start and end time not returning a list with one event" , 1 , events . size ( ) )
assertThat ( testInstance . hasNext ( ) , is ( true ) )
assertThat ( output . toString ( ) , containsString ( "configserver" ) )
assertEquals ( expResult , result )
assertEquals ( 1 , fixture . readByte ( ) )
assertEquals ( 6L , statistics . getQueryPlanCacheMissCount ( ) )
arrays . assertEndsWith ( description , null , newArray ( true ) )
Assert . assertEquals ( 8.0 , y [ 0 ] , 1.0e-12 )
assertTimerWithDuration ( "catch" , TIMER_DURATION )
assertThat ( sub . shouldNotify ( dateTime ( "1015" ) , AlertType . ERROR ) , is ( false ) )
Assert . assertTrue ( responseList . size ( ) <= 1 )
Assert . assertNotNull ( irodsFile )
assertEquals ( "(2 1 a)\n" , found )
assertEquals ( "HASH" , hash )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REGEX , v , TERM_FACTORY . getConstantLiteral ( "^Ste(v|ph)en$" ) , TERM_FACTORY . getConstantLiteral ( "" ) ) , translation . get ( 0 ) )
assertEquals ( 2 , connPerRoute . getMaxPerRoute ( route ) )
assertThat ( testValue , is ( expectedValue ) )
assertNull ( daoService . get ( userWrapper , StatisticRefEnum . CREATED_ISSUE_COUNT ) )
assertAnnotationCompletions ( "@Value(value=\"${data.prop2}\"<*>)" , "@Value(value=\"${else.prop3}\"<*>)" , "@Value(value=\"${spring.prop1}\"<*>)" )
assertThat ( count , is ( 5L ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( testValue , outValue )
Assert . assertTrue ( properties . isEmpty ( ) )
Assert . assertEquals ( expectedMessage , createString ( out ) )
assertThat ( query . isAllSources ( ) , is ( false ) )
assertStatisticalSummaryEquals ( totalStats . getSummary ( ) , aggregatedStats , 10E-12 )
Assert . assertTrue ( success )
assertThat ( matcher1 . equals ( matcher2 ) , is ( true ) )
assertArrayEquals ( expected , Proto . build_filler ( 1 ) )
assertThat ( settings , is ( applicationPreferences ) )
assertParsingIsCorrect ( nativeQuery , expectedCacheName , expectedProjections )
assertTrue ( payload . getTitle ( ) . get ( ) . equals ( "title" ) )
assertEquals ( "<bar>foo_value</bar>" , elt . getAttribute ( "bar" ) )
assertEquals ( 72D , hours , 0 )
Assert . assertEquals ( "container-2" , ContainerNamingUtil . formatContainerName ( imageConfiguration ( "jolokia/jolokia_demo" , "nameAlias" , "container-%i" ) , null , new Date ( 123456 ) , Collections . singleton ( container1 ) ) )
Assert . assertTrue ( result )
assertTrue ( c1 instanceof PublicCloneable )
Assert . assertTrue ( BindingUtils . sameObject ( s1 , s2 ) )
Assert . assertEquals ( "A" , name )
Assert . assertEquals ( 0L , vm . getStack ( ) . pop ( ) )
assertEquals ( "Failed to generate foreach loop using a List<String> and null check" , FOREACH_OBJECT_IN_LIST_NOT_NULL , foreachWithListOfStrings )
assertTokens ( new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP , Tokens . RP )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
assertTrue ( messageLatch . await ( 2 , TimeUnit . SECONDS ) )
assertTrue ( is . markSupported ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( 8 , tuple . len ( ) )
assertEquals ( true , isGood )
Assert . fail ( "Should throw BadRequestException" )
assertTrue ( page . getBody ( ) . asXml ( ) . indexOf ( "Hello from Facelets" ) != - 1 )
assertNoViewCalls ( )
Assert . assertNotNull ( json . getString ( "uid" ) )
Assert . assertFalse ( RootedTreeTester . is ( TestGraphFactory . createDirectedNew ( data ) , "A" ) )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( "" , result )
assertCanTake ( manager , 0 , 1 )
assertEquals ( new HashSet < Tuple2 < Integer , String > > ( asList ( new Tuple2 < Integer , String > ( 1 , "alpha" ) , new Tuple2 < Integer , String > ( 3 , "alpha" ) , new Tuple2 < Integer , String > ( 4 , "alpha" ) , new Tuple2 < Integer , String > ( 1 , "beta" ) , new Tuple2 < Integer , String > ( 3 , "beta" ) , new Tuple2 < Integer , String > ( 4 , "beta" ) ) ) , probe . values )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( "<table><tbody><tr><td>aaa</td><td>bbb</td></tr></tbody></table>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( m1 , m2 )
assertEquals ( fileInfo . getFileId ( ) , fileId )
Assert . assertNull ( ips . listPropertyNames ( ) )
assertEquals ( - 1 , resultSet . getRowCount ( ) )
assertEquals ( "Text" , t2 . toString ( ) )
assertNotNull ( idxConf . getRecordFilter ( ) . getIndexCase ( "notmyrecordtable" , record ) )
assertEquals ( "Boolean value does not match" , bookmark . isShared ( ) , loadedBookmark . isShared ( ) )
assertTrue ( result . isSuccess ( ) )
Assert . assertArrayEquals ( testData32bitFloat , result , 0.0f )
Assert . assertEquals ( "HTML class should have been appended without a space separator" , expected , comp . getHtmlClass ( ) )
assertEquals ( BigInteger . valueOf ( Long . MAX_VALUE ) . shiftLeft ( 1 ) . setBit ( 0 ) , zl . getValue ( ) )
assertEquals ( "envvalue" , envvalue )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
Assert . assertEquals ( 0 , count )
assertSame ( Object . class , value . getValue ( ) )
assertThat ( mySignalHandler . wasCalled , IsEqual . equalTo ( true ) )
assertThat ( found , is ( true ) )
assertArrayEquals ( new long [ ] { 2 , 2 } , res . getShape ( ) )
assertThat ( r , hasEntry ( "set" , ( Object ) ImmutableList . of ( "cat" , "dog" , "cow" ) ) )
assertFalse ( daemon . isAlive ( ) )
assertEquals ( expected , victim . process ( prefix , nameRequest ( ) . page ( page ) ) )
Assert . assertEquals ( "Bill" , cust . getName ( ) )
Assert . assertEquals ( true , expectedException )
assertEquals ( "3 0 ��� 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff24_" ) )
assertEquals ( expected , cls . getCodeBlock ( ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getVolumes ( ) , allOf ( hasPvClaimVolume ( END_VALUE_4_DNS1123 , END_VALUE_3_DNS1123 ) ) )
assertTrue ( added )
assertEquals ( ( int ) 8 , result . getIntValue ( ) )
assertThat ( result . statusCode , is ( Response . ACCEPTED ) )
assertTrue ( idxSet . contains ( cell . getIndex ( ) ) )
assertFeatureValues ( expected , queryText , Arrays . asList ( "single document test case" , "new document" , "another document" ) , getChain ( new TFIDFFeatureExtractor ( ) ) , 0 )
assertEquals ( 312L , borrowOrderResult . getBorrowId ( ) )
assertThat ( ( double ) stopwatch . getAverageDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 100 , 50 ) ) )
assertNotNull ( tested . getDataModifierFactory ( "modifierA" ) )
Assert . assertEquals ( new Name ( "Frodo" , "Baggins" ) , _frodo . getName ( ) )
editor . assertGotoDefinition ( editor . positionOf ( "some-release" ) , editor . rangeOf ( "releases:\n" + "- name: some-release\n" , "some-release" ) , editor . rangeOf ( "- release: some-release" , "some-release" ) )
assertThat ( mfp . getProperty ( ) , equalTo ( "undefined" ) )
assertEquals ( "Di Fusco" , person . getLastName ( ) )
assertEquals ( "[{\"name\":\"Stars\",\"requestsLeft\":0,\"data\":[0,0,0,0,0,0,0]}]" , response . getBody ( ) )
assertEquals ( "A" , mc . getMessage ( Minimal . A ) )
assertThat ( ( String ) c . value , is ( "ASCENDING" ) )
assertEquals ( "{b=2}" , intersection . toString ( ) )
assertEquals ( "SELECT g1.e2 FROM g1 WHERE g1.e1 = 'a\\'b\\\\c'" , sqlVisitor . toString ( ) )
Assert . assertEquals ( 0644 , FilePermissionHelper . toOctalFileMode ( perms ) )
assertSame ( toTest , toTest . setMethodsProduces ( "a" ) )
assertEquals ( paletteFile , subject . getPaletteFile ( ) )
assertNotNull ( strategy )
Assert . assertTrue ( datasourceService . getAllByColumnIn ( "column" , Lists . newArrayList ( "test" ) , - 1 ) . size ( ) > 0 )
Assert . assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
assertResultSet ( res )
assertEquals ( 23 , eventListener . getEvents ( ) . size ( ) )
assertNotNull ( productRepository )
assertThat ( driver . findElement ( By . id ( "message" ) ) . getText ( ) , is ( SUCCESS ) )
assertTrue ( testValues . length == victim . getNumDataValues ( ) )
Assert . assertEquals ( infoCancelamento , cancelamento . getInfoCancelamento ( ) )
Assert . assertEquals ( hash , 1930113384 )
assertEquals ( 56 , x )
assertNull ( result )
assertThat ( link , is ( notNullValue ( ) ) )
assertSame ( bar , referenceManager . get ( ptr ) )
assertEquals ( "result count mismatch for: " + xquery . toString ( ) , baseResult . size ( ) , results . size ( ) )
assertTrue ( address . getId ( ) != null )
assertEquals ( 1 , ( int ) deploy . getCpu ( ) )
mockery . assertIsSatisfied ( )
assertNull ( doc )
Assert . assertTrue ( zero . isZero ( ) )
assertions . isNotNull ( )
assertTrue ( rrc . matches ( context , metadata ) )
Assert . assertEquals ( expected , calculated )
Assert . assertEquals ( DateTimeParser . parse ( Long . toString ( unixTimestamp ) ) , nowDateTime ( ) )
assertEquals ( PREVIOUS_RESPONSE , argumentCaptor . getValue ( ) )
assertThat ( filters . getResponseFilters ( ) , is ( Arrays . asList ( this . method ( MixinA . class , "filterA" ) , this . method ( MixinA . class , "filterA2" ) , this . method ( ControllerX . class , "filterA2" ) , this . method ( MixinB . class , "filterB" ) , this . method ( ControllerY . class , "filterA" ) ) ) )
assertFalse ( selectedFile . exists ( ) )
assertEquals ( 2 , timer . getNumberOfEvents ( ) )
assertThat ( reader . readValue ( "\"" + Status . PENDING . name ( ) . toLowerCase ( ) + "\"" ) , is ( ( Object ) Status . PENDING ) )
assertTrue ( "testValidateSignatureGoodToken() - True" , result )
assertNull ( buildPlugin ( ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
assertSame ( littleEndianBytes . toByteArray ( ) , bigEndianBytes . toByteArray ( ) , "littleEndian" , "bigEndian" )
assertions . isNotEqualTo ( null )
assertTrue ( result . contains ( PERSON ) )
assertions . isNotEqualTo ( expected )
assertTrue ( pattern . matches ( "-.1" ) )
assertNotNull ( instance )
assertEquals ( "0" , unsignedInteger . toString ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( 2080L , result )
assertEquals ( "failed to generate class definition implementing multiple interfaces" , CLASS_IMPLEMENTING_MULTIPLE_INTERFACES , cls )
assertEquals ( "ok" , result )
Assert . assertTrue ( "Base name DocumentIF has " + fields . size ( ) + " fields" , fields . size ( ) == 3 )
assertEquals ( expectedAutoGeneratedWithDiscriminator , result . get ( "by_name" ) . getMap ( ) )
assertTrue ( extractFromSampleGvcf ( sampleGvcf ) )
assertResponse ( response , 403 , "[{\"Forbidden\": \"QUERY API methods are disabled on this KairosDB instance.\"}]\n" )
assertObject ( args )
assertEquals ( 1 , f . getOrder ( ) )
assertTrue ( featuresService . isInstalled ( featuresService . getFeature ( "pax-http-undertow" ) ) )
assertEquals ( "<a href=\"" + PREFIX + "1123\">Bug 1123</a> Some commit message" , actual )
Assert . fail ( "build listing failure" )
assertEquals ( c . length , 0 )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertThat ( storedValue , is ( true ) )
assertEquals ( "223.45" , service . getOrderAmount ( "AC-OK-223-45" ) . toPlainString ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertEquals ( "Does not compare " + nv1 + " & " + nv2 , NodeValue . CMP_GREATER , NodeValue . compare ( nv1 , nv2 ) )
assertNotNull ( order )
Assert . assertEquals ( 42 , val )
Assert . assertEquals ( 2 , buffer . length ( ) )
Assert . assertTrue ( "should be a readable file" , target . canRead ( ) )
assertFalse ( Files . exists ( new PathConverter ( NOT_EXISTING ) . convert ( path . toString ( ) ) ) )
Assert . assertEquals ( "lalala" , value )
assertEquals ( 3 , read )
assertThat ( subject . height ( ) , is ( nullValue ( ) ) )
assertEquals ( expected , modelWriter . toString ( ) )
assertEquals ( "foo_value" , elt . getAttribute ( "foo" ) )
assertEquals ( entityA . getIntProperty ( ) , copy . getIntProperty ( ) )
assertThat ( url , Matchers . endsWith ( "/view-hardcoded-params?extraParam=extraValue" ) )
Assert . assertEquals ( numeroSequencialEvento , eventoRetorno . getNumeroSequencialEvento ( ) , 0 )
assertThatSql ( query , is ( "SELECT nodes.col1, nodes.col2 FROM table1 AS nodes INTERSECT ALL SELECT edges.col3, edges.col4 FROM table2 AS edges" ) )
Assert . assertEquals ( "" , this . realiser . realise ( emptyClause ) . getRealisation ( ) )
Assert . assertEquals ( 2 , buffer . length ( ) )
assertFalse ( rbs . isValid ( ) )
Assert . assertNotNull ( ex )
Assert . assertTrue ( sut . isWeekday ( cal . getTime ( ) ) )
assertTrue ( entity . getCount ( ) == 3456789 )
assertThatSql ( query , is ( "SELECT [__ALLNODES__].col1, [__ALLNODES__].col2 FROM [__ALLNODES__]" ) )
assertEquals ( 2 , workspace . get ( ) . stream ( ) . filter ( p -> p instanceof FunctionblockModel ) . collect ( Collectors . toList ( ) ) . size ( ) )
Assert . assertEquals ( "Hello World!" , result . get ( 1 , TimeUnit . SECONDS ) )
assertEquals ( "Failed to generate two dimensional array" , "new Integer[][] { { 1, 2 } }" , s )
assertEquals ( DB_NAME , HiveDatabase . create ( udbContext , new UdbConfiguration ( ImmutableMap . of ( ) ) ) . getName ( ) )
assertEquals ( "Expected 4 results!" , 4 , n )
assertThat ( Sets . newHashSet ( viewAttributes ) , equalTo ( Sets . < ViewAttributeBinder > newHashSet ( viewAttributeBinder ) ) )
assertEquals ( 3 , config . getParameterNames ( ) . size ( ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertNotNull ( Credential . fetcher ( "CRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( expecting , found )
assertEquals ( "Unexpected item count" , "2" , actualCart . getItemTotal ( ) )
assertEquals ( new Rectangle ( 0 , 11 , 100 , 10 ) , pos )
assertEquals ( r1 , r2 )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertEquals ( c1 , c2 )
assertSearchYields ( index , "author:(bob OR ((rose OR tom) AND jones))" , "bm" , "rj" , "tj" )
assertEquals ( "[1, 3, 4, 5, 8, 9, 3, 989]" , res . toString ( ) )
assertEquals ( Nd4j . create ( new double [ ] { 2.25 , 2.25 , 2.25 } ) , var )
assertEquals ( "scoreHolder.addMultiConstraintMatch(kcontext, new long[] {-1l, -2l}, new long[] {-3l, -4l})" , marshaledAction )
assertEquals ( "3 喔о副喔� 喔�喙�喔�喔�喔侧�喔�喔掂�喔掂�" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertEquals ( HOST , uri . toString ( ) )
assertNull ( variableValue )
assertNotNull ( Country . reader ( ) . read ( ) )
assertThat ( stream . count ( ) , equalTo ( 2L ) )
Assert . assertEquals ( 0 , PacketUtils . readInt ( buf , 4 ) )
assertEquals ( "Deserialization failed" , 0 , buffer . readableBytes ( ) )
assertEquals ( activityList , resultList )
assertThat ( fileConfig . getConfigProperties ( ) , contains ( configProperty ( TAB_WIDTH , 8 ) ) )
assertEquals ( modulusHalf , actual )
assertEquals ( "" , result )
ImgLib2Assert . assertImageEquals ( source , destination )
assertTrue ( column . isAutoIncrement ( ) )
Assert . assertEquals ( "Salted key test" , expectedHBaseRowKey , result )
assertEquals ( expected , result )
assertFalse ( actual . isEmpty ( ) )
assertTrue ( theClass . isFoo ( ) )
Assert . assertEquals ( String . format ( msg , s , r , c ) , expected , actual , 0. )
assertEquals ( expected , result , FloatingAccuracy . ACCURACY )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertTrue ( result )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 5 , warnings . size ( ) )
Assert . assertEquals ( tree . ret . skip , 42 )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( result , is ( notNullValue ( ) ) )
Assert . assertEquals ( BitTag . SERVICENET_LB . tagValue ( ) , mappedUsage . getTagsBitmask ( ) )
assertEquals ( Writables . strings ( ) , t . getSubTypes ( ) . get ( 0 ) )
assertThat ( uri , is ( equalTo ( "/clients/" ) ) )
assertThat ( statusCode , equalTo ( 500 ) )
assertThat ( customerId , notNullValue ( ) )
Assert . assertTrue ( result )
assertEquals ( SCROLL_VALUE , getScrollLeftValue ( table ) )
assertThat ( action . action , is ( RetryPolicy . RetryAction . RetryDecision . FAIL ) )
assertThat ( instanceOne . equals ( instanceTwo ) , is ( false ) )
assertArrayEquals ( new String [ ] { "High" } , ( String [ ] ) filterResult . getValue ( ) )
assertEquals ( true , hasPreferenceValues )
assertFalse ( result )
Assert . assertEquals ( BooleanNode . TRUE , result )
assertEquals ( 2 , services . size ( ) )
Assert . assertEquals ( "callback_value" , o )
Assert . fail ( )
assertThat ( updatedItem . getQuantity ( ) , is ( existingItem . getQuantity ( ) - increment ) )
assertEquals ( NUMBER_OF_RANDOM_USERS , resultList . size ( ) )
assertEquals ( "try(final java.io.OutputStream os = new java.io.ByteArrayOutputStream();" + CRLF + "final java.io.BufferedOutputStream bos = new java.io.BufferedOutputStream(os)) {" + CRLF + "    bos.readLine();" + CRLF + "}" + CRLF , CodeModelTestsHelper . toString ( aTB ) )
assertResultSet ( res )
assertEquals ( expectedQuery , actualQuery )
assertNotNull ( accounts )
assertCorrectConstraintViolationMessages ( constraintViolations , IsValidValidator . message )
assertTrue ( output . startsWith ( "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">" ) )
assertThat ( result . endsWith ( "[statusCode=200,body=body]" ) , is ( true ) )
assertEquals ( "result should be orgin value 'hello'" , "hello" , invoker . invoke ( sayHelloWithAnnotation , new Object [ ] { } ) )
Assert . assertEquals ( expected , actual )
assertOut ( "/**\n * @export\n */\n" + "RoyaleTest_A.prototype.foo = function() {\n" + "  org.apache.royale.utils.Language.trace(this.bar);\n}" )
Assert . assertEquals ( to , actual )
assertEquals ( "1.12" , actual )
assertThat ( filteredVersions , arrayContaining ( version ( "1.1.1-sp1" ) , version ( "1.1.1-1" ) , version ( "1.1.2" ) , version ( "1.1.3" ) , version ( "1.2.0" ) , version ( "2.0.0-SNAPSHOT" ) ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( cls ) )
Assert . assertEquals ( "russian lexical value@rus" , actualLabel )
Assert . assertEquals ( true , isSuccess )
assertTokens ( Tokens . ID , Tokens . MUL , new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP )
Assert . assertTrue ( deal . isAccepted ( ) )
assertTrue ( entity . isValid ( ) )
assertEquivalentMutate ( Arrays . asList ( m1 , m2 ) )
assertEquals ( defaultSourceCodeNamesList , result )
assertEquals ( pages , restored )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( "" , relativizeSubpath ( rootObjectId , resourceId ) )
assertEquals ( res , - 1 )
Assert . assertNotNull ( li . getRandomBeanStub ( ) )
assertEquals ( 2 , graph . getNodeCount ( ) )
assertThat ( target . getStatusValue ( ) , is ( FlowStatus . NONE ) )
Assert . assertEquals ( "Unknown destination queue" , MicroPipelineValidationResult . MISSING_SOURCE_QUEUE , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , components ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( 1 , RecorderTaskListener . getEventCount ( TaskListener . EVENTNAME_UPDATE ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( "Should be a 201 Created!" , CREATED . getStatusCode ( ) , getStatus ( method ) )
assertTrue ( metaObject . isAssignableFrom ( metaInterface ) )
assertThat ( result , is ( true ) )
assertEquals ( "private,max-age=300" , recorder . getHeader ( "Cache-Control" ) )
assertSame ( mockConnection , conn . getProxiedConnection ( ) )
assertThat ( PlainDate . of ( 2000 , 12 , 1 ) . with ( element . atFloor ( ) ) , is ( PlainDate . of ( 2000 , 11 , 26 ) ) )
assertNotNull ( instance )
Assert . assertEquals ( ambiente , protocoloInfo . getAmbiente ( ) )
assertTrue ( result . length ( ) > 0 )
Assert . assertNotNull ( pub . getResourceID ( ) )
assertThat ( results , hasItems ( 9 , 10 ) )
assertThat ( results , is ( new String [ ] [ ] { { "title" } , { "Hello, world!" } } ) )
assertEquals ( getItem . xmlText ( ) , GetItemHelper . getGetItemsRequest ( null ) . xmlText ( ) )
runner . assertAllFlowFilesTransferred ( SelectHive3QL . REL_FAILURE , 1 )
assertArrayEquals ( new double [ ] { 1.0 , 0 , 0 , 0 } , h . values , 0.001 )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertTrue ( matches )
assertFalse ( x . f1 . isPresent ( ) )
assertEquals ( ConnAckMessage . UNNACEPTABLE_PROTOCOL_VERSION , m_returnCode )
Utils . assertSameContents ( expected , Arrays . asList ( res ) )
Assert . assertEquals ( "There should be no margins in the json" , "{\"chart\":{\"defaultSeriesType\":\"column\"}}" , json )
Assert . assertNotNull ( "null diffEntry" , diffEntry )
assertTrue ( command . valid ( options , optionParser ) )
assertNull ( c . consume ( ) )
assertTrue ( 5.0d == d . asFloat8 ( ) )
Assert . assertEquals ( "Remote invocation of EJB was not successful" , StatelessBeanRemote . ANSWER , response )
assertEquals ( "_" , settings . getUniqueIDPrefix ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 05" ) )
assertEqualsIgnoreWhitespace ( expected , real )
assertEquals ( paths . get ( path ) , acl . getOakPath ( ) )
assertFalse ( testFacet . isInstalled ( ) )
Assert . assertEquals ( 2L , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) , 0 )
assertSame ( conn , foundConnection )
assertThat ( errors , is ( empty ( ) ) )
assertEquals ( VALUE1 , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertEquals ( expResult , result )
assertOutputSameTextFile ( gen , "DefinePropertyDependencies_PM.java.txt" )
assertTrue ( isSuccess )
assertTrue ( ! t . get ( ) )
assertTrue ( "size must be 1 but it is - " + queryModel . getObject ( ) . size ( ) , queryModel . getObject ( ) . size ( ) == 1 )
assertEquals ( 3 , i . size ( ) )
assertEquals ( "geDeviceId timeout" , latch . getCount ( ) , 0 )
assertTrue ( containsSymbol ( symbols , "@/patchData -- PATCH" , docUri , 28 , 1 , 28 , 28 ) )
Assert . assertEquals ( 7 , result . size ( ) )
Assert . assertTrue ( true )
assertTrue ( validator . validate ( EntityNames . TEACHER_SECTION_ASSOCIATION , teacherSectionAssociations ) . isEmpty ( ) )
assertNotNull ( injector )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertNotNull ( result )
assertSame ( StackLocatorTest . class , reversed . pop ( ) )
assertEquals ( 3.0 , median , 0.0000001 )
assertThat ( isTransactionRelated , is ( false ) )
assertFalse ( helper . isApplePcapng ( data ) )
assertThat ( actual , is ( expected ) )
assertEquals ( 444L , WebClient . create ( address ) . get ( Book . class ) . getId ( ) )
assertNotNull ( jobId )
runner . assertAllFlowFilesTransferred ( PublishKafka_0_11 . REL_SUCCESS , 3 )
assertNotNull ( Build . reader ( "ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "12 位蔚��维 伪�� ���伪" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
assertSame ( httpResponse , httpResponseProviderIgnoreAdditionalHeaders . getResponse ( requestWithAdditionalParam ) )
assertNotNull ( testVehicle )
assertEquals ( script , observedScript )
assertEquals ( getMessage ( MessageKeys . LABEL_TR_MENU_MENUMESSAGE ) , driver . findElement ( By . id ( "messagesArea" ) ) . getText ( ) )
assertJson ( "{'vaLUE': 'foo'}" , serialize ( bean ) )
assertEquals ( 1 , LogUtil . findMessage ( "The service method com.alibaba.dubbo.rpc.support.DemoService.echo(String) is DEPRECATED" ) )
Assert . assertEquals ( "(nt_change_misc spl ?)" , nt_change_misc . toStringTree ( parser ) )
Assert . assertEquals ( 10 , result . size ( ) )
assertTrue ( "Expected " + N + " >= " + numResults , numResults <= N )
assertMissingBoth ( "set" , "list" , 2L )
assertEquals ( SC_OK , response . getStatus ( ) )
assertEquals ( 2 , httpsUsageEntries . size ( ) )
Assert . assertEquals ( Boolean . valueOf ( config . isBoolValue ( ) ) , Boolean . valueOf ( result . isBoolValue ( ) ) )
assertEquals ( expResult , result )
assertTrue ( response . contains ( getWebContextVarDefinition ( "SESSION_LOCALE" , sessionLocale ) ) )
assertTrue ( ruleNames . remove ( "Wrong eval order 1" ) )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertEquals ( 11146 , ( int ) ( EarthCalc . gcdDistance ( buenosAires , kew ) / 1000 ) )
assertExpectationsToDatabase ( apiConnectionThrottle , dbConnectionLimit )
assertEquals ( view , response )
dsUtil . assertTaskParamsMatchEntityProperties ( expectedParams , entity )
Assert . assertEquals ( - 1 , compareResult )
assertTrue ( "attempting to persist entity with transactional entity manager and no transaction, should fail with a TransactionRequiredException" + " but we instead got a " + error , error instanceof TransactionRequiredException )
assertEquals ( sapper . getY ( ) , oldYPosition - 1 )
assertEquals ( "Test message ab c\\\\" , result )
assertEquals ( expResult , result )
Assert . assertEquals ( 10 , o )
assertEquals ( "Incorrect number of events. Expected 2, actual " + events . size ( ) , 2 , events . size ( ) )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertThat ( extractor . extractPropertyRowStartIndex ( sheet ) , is ( 3 ) )
assertPhoto ( photo )
Assert . assertTrue ( "Invalid result [" + result + "]" , Double . isNaN ( result ) )
Assert . assertEquals ( 2 , consumers . size ( ) )
Assert . assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del 3)" , aa_change_deletion . toStringTree ( parser ) )
assertThat ( actual , is ( "Hello World" ) )
assertEquals ( "Expected 1 results!" , 1 , n )
assertNull ( result )
assertEquals ( "Translate to Class with Protected Constructor" , destination . getName ( ) )
assertEquals ( testObject . getObjectState ( ) , "VALID" )
assertEquals ( size + 1 , notifierManager . internal . size ( ) )
assertTrue ( getTaint ( d1 . getSecret ( ) ) != 0 )
assertQuery ( false , "declare namespace n = 'urn:blah'; declare namespace p = 'urn:foo'; declare namespace q = 'urn:blah'; deep-equal(//e1/@n:a, //e2/@p:a)" )
assertNull ( res . getHeader ( "X-woop" ) )
assertThat ( commandContext . getTenantManager ( ) . isTenantCheckEnabled ( ) , is ( false ) )
assertEquals ( expectedDate , actualDate )
assertNotNull ( "result cannot be null" , result )
assertTrue ( interceptor . preHandle ( request , null , null ) )
Assert . assertNotNull ( fi )
Assert . assertTrue ( expect ( o , false ) )
assertNull ( request . getVisitorLongitude ( ) )
assertAllCommandsUsed ( )
Assert . assertEquals ( true , errors . hasFieldErrors ( "name" ) )
assertTrue ( false )
assertThat ( mojo . getArtifactFile ( ) . getName ( ) , is ( "foo-1.0-SNAPSHOT.woapplication" ) )
Assert . assertEquals ( expected , resultString )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
Assert . assertEquals ( "SELECT DATE_ADD('2009-01-01', INTERVAL 6 / 4 HOUR_MINUTE);" , text )
assertTrue ( selectedCells . isEmpty ( ) )
assertTokens ( Tokens . ID , Tokens . ID )
Assert . assertEquals ( 40. , route . getActivities ( ) . get ( 0 ) . getEndTime ( ) , 0.01 )
assertEquals ( 3 , postCommentScores . size ( ) )
assertThat ( Moments . today ( ) , equalTo ( new DayMonthYear ( today . getDayOfMonth ( ) , Months . fromCalendar ( today . getMonthValue ( ) - 1 ) , today . getYear ( ) ) ) )
assertEquals ( "float: 1.2" , b . primitiveFloat ( 1.2f ) )
paths . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertEquals ( 1 , managementService . createJobQuery ( ) . priorityHigherThanOrEquals ( 5 ) . count ( ) )
assertEquals ( "new StringBuilder(payload).reverse()" , props . get ( "expression" ) )
assertEquals ( post . getUnsubscribeLinkForSubscribersOf ( Branch . class ) , "/branches/1/unsubscribe" )
assertTrue ( ( boolean ) AviatorEvaluator . execute ( "date1>date2" , env ) )
assertEquals ( "test (REG_SZ) = ? (0x3F000000)" , value . toString ( ) )
assertEquals ( 18 , result . size ( ) )
assertTrue ( event . getId ( ) > - 1 )
assertEquals ( wrappedTemplate + " > ?" , test . build ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( "Interceptor should apply" , result )
Assert . assertEquals ( message , o1 . getResultQuality ( ) , mapper . valueToTree ( found . getResultQuality ( ) ) )
assertEquals ( expResult , result )
assertEquals ( texExpected , actual )
assertEquals ( request . getUri ( baseURI ) , expectedURI )
assertEquals ( 0 , throwables . size ( ) )
assertEquals ( "State should not be cleaned" , AnalysisCleanedState . NOT_CLEANED , notCleanedSubmission . getAnalysisCleanedState ( ) )
assertNotNull ( action )
assertEquals ( "" , r . toString ( ) )
assertTrue ( resourceExists ( childURI ) )
assertEquals ( new Integer ( 300 ) , MethodFixture . getArgNum ( ) )
assertThat ( adds , StreamMatchers . empty ( ) )
assertTrue ( "Incorrect statement in the Block" , stmt . equals ( TestCommandStatement . sample1 ( ) ) )
Assert . fail ( "Xfdf files are not equal" )
Assert . assertEquals ( 30 , count )
Assert . assertEquals ( 0 , acceptor . getBoundAddresses ( ) . size ( ) )
assertThat ( PrettyTime . of ( Locale . US ) . print ( dur , TextWidth . WIDE ) , is ( "124 milliseconds" ) )
Assert . assertTrue ( uploadedFile . exists ( ) )
assertArrayEquals ( TEST_BYTES , outputStream . toByteArray ( ) )
assertEquals ( count , rows . size ( ) )
assertTrue ( hashSet . contains ( p1 ) )
assertArrayEquals ( CAFEBABE_MD5 , md5 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( ages . size ( ) , greaterThanOrEqualTo ( 3 ) )
assertThat ( numFound ( query ( "q=2a00" ) ) , is ( 2L ) )
assertEquals ( 5 , d . asInt4 ( ) )
assertEquals ( "uk.ltd.getahead.dwr.DWRServlet" , result )
Assert . assertNull ( "Race list should be null" , result )
assertEquals ( 1 , instance . getNeuronsCount ( ) )
assertFalse ( mock . booleanReturningMethod ( 12 ) )
assertTrue ( "Provider http server mechanism factory should be created" , ops . exists ( TEST_SERVER_MECHANISM_FACTORY_ADDRESS ) )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , FooSteps . class )
assertNull ( result )
assertEquals ( false , new String ( generatedfile . getContent ( ) , "utf-8" ) . contains ( "testOperation" ) )
assertNotNull ( response )
Assert . assertEquals ( ref , Preconditions . checkNotNull ( ref , "%s should not be null" , "Reference" ) )
assertEquals ( response , webRespose )
Assert . assertEquals ( expectedResponse , proxy . sayHello ( message ) )
Assert . assertEquals ( functionColumn , ( ( String [ ] ) result ) [ 0 ] )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( p1 , p2 )
assertTrue ( ValidationUtilities . validateRegExp ( regex , "abc\n def" ) )
assertNotNull ( con . prepareStatement ( "select 1" ) )
Assert . assertEquals ( "<br/>b" , out . toString ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del 3)" , aa_change_deletion . toStringTree ( parser ) )
Assert . assertTrue ( "TMRAP servlet accepted bad topic map ID" , code == 400 )
assertEquals ( "{\"value\": \"b\\\"ar\"}" , r . toString ( ) )
assertTrue ( response . getBody ( ) . contains ( "<ns2:out>test</ns2:out>" ) )
Assert . assertNull ( pdoc . get ( new Path ( "field7" ) ) )
assertThat ( date . plus ( 0 , DAYS ) == date , is ( true ) )
assertPostFails ( "4" , variant , OntopiaRestErrors . MANDATORY_OBJECT_IS_NULL )
assertNotNull ( TOKEN )
assertEquals ( 4 , packetIn . getCount ( ) )
assertTrue ( "xlist must have BasicXListUI instead of " + list . getUI ( ) . getClass ( ) . getSimpleName ( ) , list . getUI ( ) instanceof BasicXListUI )
assertEquals ( emptyList ( ) , tags )
assertEquals ( 1 , actualData . size ( ) )
assertEquals ( expResult , result )
assertEquals ( 1.6 , pdop , 0.001 )
Assert . fail ( "Failure expected on an unauthorized call" )
assertTrue ( latch . await ( 5 , TimeUnit . SECONDS ) )
assertQ ( req , "//result[@name='response'][@numFound='1']" , "//result[@name='response']/doc[1]/str[@name='id'][.='1']" )
assertThat ( versionedIdsOf ( units ) , bagEquals ( versionedIdList ( REFERENCED_BUNDLE_V2 ) ) )
assertEquals ( "xxxxA" , result )
assertThat ( coll . size ( ) , equalTo ( 0 ) )
assertEquals ( 20 , rowCount )
assertThat ( other , LocalTimeMatchers . sameHourOfDay ( date ) )
assertEquals ( ImmutableList . of ( 4 , 6 , 7 , 8 ) , query ( ) . select ( cat . name . length ( ) . as ( length ) ) . from ( cat ) . orderBy ( length . asc ( ) ) . groupBy ( length ) . fetch ( ) )
assertPermanentCount ( playerB , "Craw Wurm" , 1 )
assertListTEquals ( listOneTwo , 1 , 2 , 3 , 4 , 5 )
assertNotNull ( sub2 . getDefaultEdgeTable ( ) . getColumn ( "ASDFASDF" ) )
assertEquals ( "test@elasticinbox.com:special" , key )
assertEquals ( expected , removed )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "aClass" ) )
assertThat ( parentId , equalTo ( tweetComment . getTweetId ( ) . toString ( ) ) )
assertEquals ( d1 , d2 )
assertE ( "�尖�尖�尖�尖��" + "�� �� ��" + "�� �� ��" + "��   ��" + "�尖�尖�尖�尖��" )
assertEquals ( "{\"options\":{}}" , result )
assertEquals ( 3 , artists . size ( ) )
assertEquals ( "Projected point should be located on plane" , 0 , valTest , epsilon )
Assert . assertEquals ( "incorrect number of branches" , 3 , branchesData . size ( ) )
assertTrue ( true )
assertCandidateList ( expectedCandidates , actualCandidates )
assertEquals ( isTouched , true )
assertThat ( mergedCss . toString ( ) , is ( ".clz" ) )
assertEquals ( false , active )
Assert . assertNull ( result )
assertEquals ( "SELECT fname, children FROM tutorial WHERE children IS NULL" , statement . toString ( ) )
Assert . assertTrue ( ! nodeKey . isEmpty ( ) )
assertNotNull ( dealershipDocument . get ( ) . getAutomobiles ( ) )
assertEquals ( "<div xmlns=\"http://www.w3.org/1999/xhtml\">HELLO WORLD</div>" , actual . getText ( ) . getDiv ( ) . getValueAsString ( ) )
Assert . assertNull ( header )
assertThat ( propertyGetter . propertyByType ( testInstance , List . class ) , sameInstance ( testInstance . list ) )
assertResponseContainsModel ( "<img class=\"componentIcon\" src=\"modelregistry/api/componenticon\"/> nt:unstructured" , Model . class , 123L , "modelName" )
assertTrue ( symbols . isEmpty ( ) )
assertObject ( args )
assertEquals ( 3 , graph . size ( ) )
assertTrue ( Collections . nonNullElementsIn ( c ) . isEmpty ( ) )
assertEquals ( 7 , result )
assertThat ( iterateModel . getIncrement ( ) , is ( 2 ) )
assertEquals ( null , stack . getImmutableStackOrNull ( ) )
assertEquals ( 0 , buffer . buffer ( ) . refCnt ( ) )
assertSchema ( expected , plan . getOutSchema ( ) )
assertTrue ( true )
assertTrue ( ! nnList . isEmpty ( ) )
assertThat ( all ( ) , everyItem ( completelyScheduled ( ) ) )
assertTrue ( game2 . isGameOver ( ) )
assertEquals ( i & 0xFF , ubyte ( ( byte ) i ) . intValue ( ) )
assertTrue ( out . equals ( "G0 X10.1235 A10.123457" ) )
Assert . assertEquals ( expected , BloomFilter . nextHighestPowerOfTwo ( expected - 1 ) )
assertNotNull ( result )
assertNotNull ( plannerBenchmark )
assertEquals ( "Revision null ()" , nullRevision . toString ( ) )
assertThat ( source . getName ( ) , is ( nullValue ( ) ) )
assertTrue ( "OSX icon exists" , icon . exists ( ) )
assertEquals ( "6b4e03423667dbb73b6e15454f0eb1abd4597f9a1b078e3f5b5a6bc7" , DigestUtils . sha3_224Hex ( EMPTY_STRING ) )
assertEquals ( uri , Tools . uriWithTrailingSlash ( uri ) )
assertEquals ( "DATA" + i ++ , new String ( buffer , "UTF-8" ) )
Assert . assertEquals ( 70 , analyser . getLoadDelivered ( ) . get ( 0 ) , 0.01 )
assertNotNull ( envelope )
Assert . assertTrue ( validator . isSignatureValid ( doc ) )
assertEquals ( 1 , handler . recover ( new Object [ ] { "Randell" } , new RuntimeException ( "Planned" ) ) )
assertThat ( xray . getInterfaceMethods ( ) . keySet ( ) , empty ( ) )
assertThat ( "colorProperties.size()" , colorProperties . size ( ) , is ( 0 ) )
assertEquals ( "Dest should have all the fields altered" , new FourLongs ( 1 , 2 , 3 , 4 ) , dest )
assertNonNullTaint ( ret )
assertThat ( options . toJSON ( ) , is ( ( JsonElement ) json ) )
assertTrue ( Ordering . natural ( ) . isOrdered ( array ) )
assertEquals ( "(foo void ;)\n" , found )
assertTrue ( job . waitForCompletion ( true ) )
Assert . assertEquals ( 1 , this . cq ( "select p from Person p where p.manager = false" , Person . class ) . getResultList ( ) . size ( ) )
assertEquals ( expResult , result , 0.0001 )
assertThat ( existingProduct . compareTo ( product ) , is ( 0 ) )
Assert . assertEquals ( "value1" , pyObjectValue . get ( ) )
Assert . assertNull ( userValidated )
assertTrue ( diff . conflicts ( diff2 ) )
Assert . assertEquals ( new HashSet < String > ( Arrays . asList ( "edOrg1" ) ) , resolver . findGoverningEdOrgs ( disciplineAction ) )
assertTrue ( "" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) )
Assert . assertEquals ( result , new Integer ( 3 ) )
assertThat ( queryContext . get ( ) , is ( instanceOf ( RoutingContext . class ) ) )
assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<app:service xmlns:atom=\"http://www.w3.org/2005/Atom\" " + "xmlns:app=\"http://www.w3.org/2007/app\" " + "xmlns:metadata=\"http://docs.oasis-open.org/odata/ns/metadata\" " + "metadata:context=\"http://host/svc/$metadata\">" + "<app:workspace><atom:title>service.test</atom:title></app:workspace>" + "</app:service>" , IOUtils . toString ( serializer . serviceDocument ( metadata , "http://host/svc" ) . getContent ( ) ) )
assertMockEndpointsSatisfied ( )
assertThat ( selected . entrySet ( ) , is ( empty ( ) ) )
Assert . fail ( "Should have Assert.failed on the second parameter to 'ends-with' not " + "being bound." )
assertEquals ( "http://example.com/fhir/EpisodeOfCare?patient=123&_revinclude=Encounter%3Aepisode-of-care&_revinclude%3Aiterate=Observation%3Aencounter" , capt . getAllValues ( ) . get ( idx ) . getURI ( ) . toString ( ) )
assertResultSet ( fc . getMembers ( filter , new TypedObjectNodeXPathEvaluator ( ) ) , "PHILOSOPHER_1" )
Assert . assertEquals ( "2011-04-25" , datatype . serialize ( date ) )
assertThat ( graph . getNodeSet ( ) . isEmpty ( ) , is ( true ) )
assertEquals ( ValidationResult . Result . OK , vr . getStatus ( ) )
assertThat ( result , is ( jsonNull ( ) ) )
Assert . assertEquals ( ProcessState . EXECUTION_SUCCEEDED , process . getState ( ) )
Assert . assertEquals ( false , getValue ( map , "?t" ) . booleanValue ( ) )
assertEquals ( 25 - 3 , execute ( Painting . class , parsed1 ) . size ( ) )
authRule . assertScenario ( scenario )
assertEquals ( 482196050000L , date . getTime ( ) )
assertEquals ( "1" , out . toString ( ) )
assertThat ( result , equalTo ( emailMessage ) )
assertFalse ( episode . getEpisodeName ( ) . isEmpty ( ) )
assertThat ( command . accept ( state ) , is ( true ) )
assertEquals ( 8000 , model . getProxyPort ( ) )
assertNull ( array )
assertEquals ( true , result )
assertThat ( code , is ( nullValue ( ) ) )
assertTrue ( failure )
assertNull ( "Last child Task in the list should not have a 'next' task" , nextTask )
assertEquals ( agency , value )
assertEquals ( "T" + ( char ) ( 223 ) + "G" , BufferTools . byteBufferToString ( buffer , 0 , 3 ) )
assertCreateUser ( userA )
assertThat ( statement . createStatement ( ) , is ( "ALTER TABLE testTable ADD COLUMN \"stringField\" string" ) )
assertThat ( plugin . out , is ( equalTo ( new URL ( "file:halp/" ) ) ) )
assertEquals ( 5L , ByteBuffer . wrap ( value . asBytes ( ) ) . asLongBuffer ( ) . get ( ) )
JsonAssert . assertJsonEquals ( "{id: 'id', result: {foo:'bar'}}" , getOutput ( ) )
assertTrue ( "Equivalent set criteria don't compare as equal: " + c1 + ", " + c2 , c1 . equals ( c2 ) )
Assert . assertEquals ( notaInfo , nota . getInfo ( ) )
assertEquals ( "Did not find 1 statement in named graph" , 1 , m . size ( ) )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertThat ( methodSignature ( "method" , String . class , classes , new Class < ? > [ 0 ] ) , equalTo ( "String method(String,int)" ) )
assertThat ( sublist , is ( emptyList ) )
Assert . assertEquals ( 2 , s . x )
assertEquals ( expectedQuery , actualQuery )
assertIndex ( )
assertEquals ( rpcsid . toString ( ) , "RPC_SID{Revision:200, SubAuthorityCount:3, IdentifierAuthority:[1, 2], SubAuthority: [2, 5, 7]}" )
assertXmlEquals ( "<cit:CI_Citation xmlns:cit=\"" + Namespaces . CIT + "\">\n" + "  <cit:presentationForm>\n" + "    <cit:CI_PresentationFormCode codeListValue=\"imageDigital\">Image digital</cit:CI_PresentationFormCode>\n" + "  </cit:presentationForm>\n" + "  <cit:presentationForm>\n" + "    <cit:CI_PresentationFormCode codeListValue=\"test\">Test</cit:CI_PresentationFormCode>\n" + "  </cit:presentationForm>\n" + "</cit:CI_Citation>\n" , xml , "xmlns:*" , "codeList" , "codeSpace" )
assertSame ( DefaultCookieParamProcessor . INSTANCE , actual )
Assert . assertEquals ( "nestedArrObjString1" , found . getName ( ) )
assertTrue ( LibUsb . getDeviceList ( this . context , list ) >= 0 )
assertEquals ( 3 , counter . getBeforeFileTreeWalkCount ( ) )
assertThat ( graphs . stream ( ) . anyMatch ( it -> it . getName ( ) . equals ( GRAPH_NAME ) ) , is ( true ) )
assertTrue ( result . length ( ) > 0 )
assertEquals ( moscowString , testObject . getLabel ( ) )
assertThat ( path , is ( pathTmpl ) )
mojos . assertBuildOutputs ( new File ( basedir , "target" ) , "classes/proc/Source.class" , "generated-sources/annotations/proc/GeneratedSource.java" , "classes/proc/GeneratedSource.class" )
assertEquals ( "test" , echo . echo ( "test" ) )
assertOut ( "/**\n * @export\n */\nB.prototype.b = function() {\n  var self = this;\n  function c(s, f) {\n  };\n  function d() {\n  };\n  c('foo', d);\n}" )
assertThat ( target . readValue ( value ) , is ( true ) )
assertEquals ( 7100 , ceosReader . readB4 ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 3 , new Calculator ( ) . add ( 1 , 2 ) )
assertOutWithMetadata ( "/**\n" + " * foo.bar.baz.A\n" + " *\n" + " * @fileoverview\n" + " *\n" + " * @suppress {checkTypes|accessControls}\n" + " */\n" + "\n" + "goog.provide('foo.bar.baz.A');\n" + "\n" + "\n" + "\n" + "/**\n" + " * @constructor\n" + " */\n" + "foo.bar.baz.A = function() {\n" + "};\n" + "\n" + "\n" + "/**\n" + " * Prevent renaming of class. Needed for reflection.\n" + " */\n" + "goog.exportSymbol('foo.bar.baz.A', foo.bar.baz.A);\n" + "\n" + "\n" + "/**\n" + " * Metadata\n" + " *\n" + " * @type {Object.<string, Array.<Object>>}\n" + " */\n" + "foo.bar.baz.A.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'A', qName: 'foo.bar.baz.A', kind: 'class' }] };\n" + "\n" + "\n" + "\n" + "/**\n" + " * Reflection\n" + " *\n" + " * @return {Object.<string, Function>}\n" + " */\n" + "foo.bar.baz.A.prototype.ROYALE_REFLECTION_INFO = function () {\n" + "  return {\n" + "    variables: function () {return {};},\n" + "    accessors: function () {return {};},\n" + "    methods: function () {\n" + "      return {\n" + "        'A': { type: '', declaredBy: 'foo.bar.baz.A'}\n" + "      };\n" + "    }\n" + "  };\n" + "};\n" + "/**\n" + " * @export\n" + " * @const\n" + " * @type {number}\n" + " */\n" + "foo.bar.baz.A.prototype.ROYALE_REFLECTION_INFO.compileFlags = 15;\n" )
assertEquals ( 5 , g . size ( ) )
Assert . assertEquals ( toArray ( "json" , "aaa" ) , merged )
assertEquals ( Avros . doubles ( ) , t . getSubTypes ( ) . get ( 0 ) )
assertEquals ( hashCodeBeforeActivation , hashCodeAfterActivation )
assertTrue ( configuration != null )
assertNotNull ( ExecutionTime . forCron ( parser . parse ( "*/ * * * * ?" ) ) )
assertEquals ( "3 ���� ��" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( "123ABC" , dealId )
assertThat ( request . getReservationId ( ) , equalTo ( anInteger ) )
Assert . assertEquals ( " Echo Message = Foo" , client . echoMessage ( param0 ) . getOut ( ) )
Assert . fail ( "Remote invocation on a local view " + LocalEcho . class . getName ( ) + " was expected to fail" )
CompileUtils . assertCompiles ( "QEntity" , writer . toString ( ) )
assertThat ( testOutcome . getFailureCount ( ) , is ( 2 ) )
assertEquals ( true , result )
assertOut ( "switch (i) {\n  case 1:\n    break;\n}" )
Assert . assertTrue ( zero . isZero ( ) )
assertEquals ( t1 , UUIDUtils . max ( t1 , null ) )
assertOut ( "var /** @type {number} */ a = 1" )
assertEqArgumentGeneratesXPath ( 0 , eq0XPathExpression )
mockOutput . assertIsSatisfied ( )
assertTrue ( isEqual ( d1 , d2 ) )
assertTrue ( appValidationService . validate ( "AAA" , ApplicationType . task ) )
assertEquals ( Arrays . asList ( "ls" , "-al" ) , retryCommandSpy . getCommandToExecute ( ) )
Assert . assertTrue ( "did not find null" , foundNull )
assertEquals ( numberOfExceptions , 8 )
assertAnnotations ( 3 , Quantity . class , new TestEntity < > ( 0 , "50cm" , "50cm" ) , new TestEntity < > ( 1 , "50 centimeters" , "50 centimeters" ) , new TestEntity < > ( 2 , "50 centimetres" , "50 centimetres" ) )
Assert . assertEquals ( StringUtils . trimAllWhitespace ( result . toString ( ) ) , "{\"$or\":[{\"username\":{\"$ne\":\"\"}}]}" )
assertEquals ( params , project . marshallize ( ) )
assertEquals ( "GetSongsBySongIdAndSongIdResponse" , Names . responseClassName ( resource , method ) )
assertEquals ( 40.0 , Solutions . bestOf ( solutions ) . getCost ( ) , 0.1 )
Assert . assertFalse ( r . isSuccess ( ) )
assertEquals ( result , subject . unmodifiableSet ( ) )
assertEquals ( "{\"d\":{\"isScrumTeam\":false}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( 6 , distinct . solution ( array ) )
assertNoDataValue ( targetPoduct . getBand ( FLOAT_BAND_NAME ) , new PixelPos ( 23.5f , 13.5f ) , 42.0 , 42.0 )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE UPPER(NAME(nodes)) <= 'literal'" ) )
assertFiltersDefined ( configurationUnit , filter ( "Name field filter" , "name" ) , filter ( "Surname field filter" , "surname" ) )
assertEquals ( save , repository . findOne ( save . getId ( ) ) . get ( ) )
Assert . assertEquals ( tree , commit . getTree ( ) )
assertEquals ( "456/i_have________*_________spaces.log" , tokenId )
assertSerializedEquals ( c )
assertEquals ( "S.a\n" , found )
assertEquals ( "TestPassword" , envVars . get ( "COVERITY_PASSPHRASE" ) )
assertEquals ( expectedResult , entityParser . parseSensor ( json ) )
assertEquals ( "Conversion did not match" , value , to )
Assert . assertEquals ( dataString . trim ( ) , outString )
assertFalse ( ProtocolConstants . StatusCodes . Create . TYPE_INVALID . equals ( this . jsonResponse . get ( ProtocolConstants . STATUS_MESSAGE ) ) )
assertThat ( f1 . get ( ) , not ( equalTo ( 55 ) ) )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertEquals ( 0 , array . length )
arrays . assertDoesNotHaveDuplicates ( description , actual )
assertThat ( greetingFromController , is ( "Hello World, duke" ) )
assertEquals ( "test/test" , test . getFunction ( ) )
assertEquals ( "init;f();" , WithInitializer . log )
assertNull ( p . getText ( ) )
assertEquals ( "Accepted" , result )
assertNotNull ( fixture )
assertEquals ( "[{\"name\":\"Stars\",\"requestsLeft\":0,\"data\":[0,0,0,0,0,0,0]}]" , response . getBody ( ) )
assertSame ( builtIn , c )
Assert . assertTrue ( command . apply ( bkFlags , new String [ ] { "" } ) )
assertEquals ( expectedMap , map )
Assert . assertEquals ( expected , actual )
assertNotNull ( injector )
assertEquals ( "THE REASON" , person . getPersonVoidReason ( ) )
Assert . assertEquals ( true , tableColumnMeta . isNullable ( ) )
Assert . assertArrayEquals ( VALUE . toArray ( ) , dataItems . toArray ( ) )
assertThat ( issues , is ( empty ( ) ) )
Assert . assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.processing.runtime.fieldselector.FieldSelectorRuntime" ) )
assertFalse ( isDynamicCSVFormat )
assertTrue ( this . testBulkListRequestHandlerAdvice . executeLatch . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( 77. , violation , 0.01 )
assertEquals ( extractedYAML , expectedYAML )
assertFalse ( "our member-group shouldn't have set our attribute" , retAttr . contains ( attributes . get ( 0 ) ) )
Assert . assertEquals ( fieldsCountExpected . get ( clazz ) . intValue ( ) , fieldsMetadata . getFields ( ) . size ( ) )
assertThat ( mergedExplicitField . getValues ( ) , Matchers . is ( IsCollectionContaining . hasItems ( "String" , "Integer" ) ) )
assertOperationLog ( decisionDefinition )
assertThat ( readString , is ( not ( nullValue ( ) ) ) )
Assert . assertTrue ( "did not seek and read the same data that I originally wrote" , Arrays . equals ( expectedBytes , bytesToRead ) )
assertEquals ( ipv4Prefixes , result )
assertionHelper . assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile , ( File ) targetFile )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
assertTrue ( exceptionThrown )
assertThat ( noOfSolutions , is ( 741642 ) )
assertTrue ( Files . isDirectory ( gfs . getPath ( "/test_dir" ) ) )
assertEquals ( "_cat/nodes" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertEquals ( 5 , result )
assertEquals ( "3F000000" , value . getDataAsHexStr ( ) )
assertEquals ( expectedSignature , signature )
assertFalse ( "'destroy sub-branch' was configured to be ignored" , filter . accept ( "destroy sub-branch \"esmalling_branch\" of branch" , "/main/sit_r6a/11" ) )
Assert . assertEquals ( actual , expected , "Returned an invalid property value." )
assertEquals ( "did not get expected number of roles " , 9 , list . size ( ) )
Assert . assertEquals ( query , interpretedQuery )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( doc1 , io . getDocumentById ( id1 ) )
assertTrue ( result . isUndefined ( ) )
Assert . assertEquals ( "1v4QKuIUT6HHRkbq0MPL" , entry . getPassword ( ) )
assertEquals ( event1 , event2 )
assertNotNull ( x509Attestation . getClientCertificatesFinal ( ) )
assertThat ( expectedResult , is ( actualResult ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertTrue ( constraintValidator . isValid ( Money . of ( 0 , "EUR" ) , null ) )
assertTrue ( resultSq == Position . NOPOSITION )
assertTrue ( newHardwareClient . isClosed ( ) )
maps . assertContainsOnly ( info , actual , expectedEntries )
assertEquals ( "token1" , target . getToken ( ) )
Assert . assertEquals ( 0 , lifeMembers ( ) )
assertEquals ( a1 , a2 )
assertSame ( shouldFind , selection . multiSelect ( By . id ( "test" ) ) )
assertEquals ( 100 , array . length )
assertEqualsJson ( expected , actual )
Assert . assertEquals ( expectedSpec , actualSpec )
assertEquals ( "baz/\n" + "  foo/\n" + "    bar/\n" + "      wooz 0 (S_IFREG)\n" + "    rooz -> bar/wooz\n" , sw . toString ( ) )
assertEquals ( ( long ) 8 , ( long ) result . getLongWrapperValue ( ) )
Assert . fail ( )
assertThat ( bishop , is ( board . getChessBoard ( ) [ startRow + 1 ] [ startCol + 1 ] . getFigure ( ) ) )
assertThatCellReaderWasCalled ( )
assertEquals ( expected , emptyGraph . getImmediateDominators ( ) )
Assert . assertEquals ( "Num tasks not correct" , 1 , job . getTasks ( ) . size ( ) )
Assert . assertNotNull ( view )
Assert . assertEquals ( "Barcode Test Content" , result )
assertNotNull ( applicationContext . getBean ( "rewardNetwork" ) )
assertNotNull ( result )
Assert . assertEquals ( new Integer ( 15 ) , store . countAll ( ) )
assertEquals ( "1" , result )
Assert . assertEquals ( outContent . toString ( ) . trim ( ) , "1.2.1" )
assertEqualsIgnoreWhitespace ( expected , real )
assertThat ( output , containsString ( "Dataset retrieved:" ) )
assertThat ( time . with ( PlainTime . COMPONENT . setToNextFullMinute ( ) ) , is ( PlainTime . of ( 0 , 1 ) ) )
Assert . assertArrayEquals ( EXPECTED , data )
Assert . assertEquals ( expected , actual )
assertThat ( extension . getServerNames ( ) . get ( ServerName . NameType . HOST_NAME ) , is ( iotEclipseOrg ) )
assertTrue ( info . isEmpty ( ) )
assertNull ( changeEvent [ 0 ] )
assertTrue ( psa . getLegend ( ) instanceof UniqueSymbolPoint )
assertTrue ( futureDigest . digest ( ) . keyDigest ( ) . isEmpty ( ) )
assertNull ( ret )
assertFalse ( topic . hasTopic ( ) )
assertThat ( list . size ( ) , is ( 2 ) )
assertArrayEquals ( new char [ ] { '1' , '2' , '3' , '\0' } , buffer )
assertFalse ( hasPermission )
assertNoViolations ( violations )
assertEquals ( "" , result )
assertEquals ( "Invalid argument passed" , value , supportedArgument )
Assert . assertTrue ( ! seenKeys . contains ( pwmSetting . getKey ( ) ) )
assertEquals ( "test" , msg . getText ( ) )
assertParseTree ( rootNode ( "helloworld" , stringNode ( "greeting" , "helloworld" , stringNode ( "hi you" , "helloworld" ) ) ) , tree )
assertEquals ( "something == x && something == y" , result )
assertArrayEquals ( Arrays . toString ( d . getResult ( ) ) , refar , d . getResult ( ) )
assertThat ( execreport , is ( not ( nullValue ( ) ) ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Siprec>" + "before" + "<Child>content</Child>" + "after" + "</Siprec>" , builder . build ( ) . toXml ( ) )
assertThat ( downstream , hasSize ( 0 ) )
assertEquals ( "'foo'" , sw . toString ( ) )
Assert . fail ( )
assertEquals ( result , currentUser . getLanguage ( ) . getLocale ( ) )
assertEquals ( expectedOutput , actualOutput )
assertEquals ( count , expectedCount )
assertEquals ( tail . getMissing ( 7 ) , new HashSet < Long > ( Arrays . asList ( 5l , 6l ) ) )
Assert . assertNull ( header )
Assert . assertFalse ( result )
assertEquals ( end - start , 100 , 50 )
assertEquals ( expected , actual )
assertEquals ( c , c )
assertEquals ( "? hello ?" , s . sql ( ) )
assertTrue ( Arrays . equals ( getPacketData ( "34 00 10 00 F8 FF 3C 00 10 0E 08 08 00" ) , request . serialize ( ) ) )
assertEquals ( expected , actual )
assertEquals ( "failed to generate variable declaration using a literal initialization and type inference" , "Integer n = 10;" , declaration )
assertSchemaValue ( subject , version , 1 , "{\"type\":\"record\",\"name\":\"myrecord\"," + "\"fields\":[{\"name\":\"f1067572235\",\"type\":\"string\"}]}" , false , schemaValue )
assertEquals ( original , converted )
Assert . assertEquals ( 2 , ddf2 . getNumRows ( ) )
Assert . assertEquals ( 10 , controller . getCurrentRunLevel ( ) )
assertDtos ( expected , actual )
assertThat ( taskService . createTaskQuery ( ) . taskId ( task . getId ( ) ) . count ( ) , is ( 1L ) )
Assert . assertEquals ( "output_folder" , params . getProperties ( ) . getProperty ( "outputDir" ) )
assertEquals ( reference , toTest )
Assert . assertEquals ( expected , actual )
Assert . assertArrayEquals ( array , ( Object [ ] ) ArrayUtils . cloneArray ( array ) )
assertThat ( new SelectBest ( ) . selectSolution ( Arrays . asList ( sol1 ) ) , is ( sol1 ) )
assertEquals ( expectedResult , actualResult )
assertTrue ( fr . getAuthors ( ) . isEmpty ( ) )
assertEquals ( "<i>test</i>" , italicsDecorator . toDisplay ( ) )
Assert . assertNull ( valueWrapperResult )
assertEquals ( "#: expected type: String, found: Integer" , actual )
assertEquals ( 1_000_000 , this . sqlgGraph . traversal ( ) . V ( ) . count ( ) . next ( ) , 0 )
assertFileExists ( file )
assertNull ( result )
Assert . assertEquals ( 20f , rad , EPSILON )
test . assertResult ( )
Assert . assertNull ( u )
assertThat ( status , is ( ApplicationLauncher . LAUNCH_ERROR ) )
softly . assertThat ( skipInstallationChecker )
assertEquals ( CSV_FILE , writer . toString ( ) )
Assert . assertEquals ( "1\n1\n3" , formatted )
assertEquals ( "00FF" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertEquals ( "output must be empty array" , 0 , output . length )
assertEquals ( "echo:" , result )
assertEquals ( uri , f . getBaseUrl ( ) )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
Assert . assertEquals ( Boolean . valueOf ( config . isBoolValue ( ) ) , Boolean . valueOf ( result . isBoolValue ( ) ) )
assertEquals ( "" , output )
assertEquals ( - 1 , sumIpv4Prefixes ( ipvXPrefixes ) )
assertEquals ( male , repository . getSingleResult ( query ) )
Assert . assertTrue ( ( end - start ) > 500l )
assertEquals ( "^/cntrl/actn$" , pattern )
assertEquals ( form , duplicateForm )
assertArrayEquals ( expected , actual )
assertEquals ( 60f , a . intersectionArea ( b ) , 0.0001 )
assertTrue ( properties . isEmpty ( ) )
assertThat ( observedBatches , hasItem ( hasSize ( 3 ) ) )
assertEquals ( i & 0xFF , ubyte ( ( byte ) i ) . intValue ( ) )
Assert . assertTrue ( true )
assertThat ( request1 , is ( request2 ) )
assertNotNull ( partitionDistribution )
assertDrlHasCompilationError ( drl1 , 1 )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
Assert . assertEquals ( "Value is incorrect" , map ( TIME_2_STRING , "test" ) , value )
assertions . isNotEmpty ( )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( remoteClientOID . getServiceID ( ) ) )
UnitTestUtils . assertEquals ( new double [ ] { - 1 , 3 , 1 } , b . toArray ( ) , 1.0e-12 )
Assert . assertTrue ( this . mocker . getComponentUnderTest ( ) . getGroupsForUser ( user ) . isEmpty ( ) )
Assert . assertFalse ( config1 . equals ( config2 ) )
assertThat ( result , is ( true ) )
assertTrue ( result1 == result2 )
assertNull ( "Unexpected value in outputTriple: " + outputTriple , outputTriple )
Assert . assertEquals ( "Count of customer" , 2 , res )
Assert . assertEquals ( SECRET + "-test" , secret . get ( "serverKeystorePass" ) )
assertEquals ( "mystring" , result )
Assert . fail ( "this test should not execute based on Runner logic" )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 2 ) )
assertAllCommandsUsed ( )
Assert . assertEquals ( "readIndex('nodes').select('node.get(\\'name\\')==\"root\"')" , t . toString ( ) )
assertEquals ( expected , actual )
assertFlowState ( ACCEPTED_FIRST_MONTH )
Assert . assertEquals ( ServerParse . UNSUPPORT , sqlType )
Assert . assertEquals ( "a" , stringAppender . toString ( ) )
assertEquals ( "Hello, World!" , value . evaluateAttributeExpressions ( createFlowFile ( attributes ) ) . getValue ( ) )
assertMessagesEquals ( union ( expectedIn1 , expectedIn2 ) , actual )
assertTrue ( verifyProps ( a , LIST_AB ) )
Assert . assertTrue ( EqualsBuilder . reflectionEquals ( expected , store . findVirtualServer ( "www" ) , true ) )
assertXpathNotExists ( "/a:entry/m:properties" , xmlString )
assertEquals ( uuid , urlToken )
assertEquals ( "gerrit approve --project projectname --message \"Some\n message\" --code-review -1 1,2" , command )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertTrue ( lastReadPosts . isEmpty ( ) , "For passed empty list of topics it should return empty list." )
assertEquals ( "[1, 2]" , algorithm . getQuestions ( ) . toString ( ) )
Assert . assertEquals ( expectedRegex , pattern . compiled ( ) . toString ( ) )
assertThat ( rubyVersion , equalTo ( "1.9.3-p125" ) )
Assert . assertArrayEquals ( new String [ ] { ".sql" , ".test" } , language . getFileSuffixes ( ) )
assertEquals ( "InputStreamTest" , toString ( stream ) )
assertEquals ( GitSCM . class , blacklist . getClassLoader ( fakeProject ) . loadClass ( GitSCM . class . getName ( ) ) )
assertEquals ( "from SURVEY SURVEY\njoin table(functionCall()) as fc\nwhere SURVEY.NAME is not null" , query . toString ( ) )
assertFalse ( constraint . fulfilled ( iContext ) )
Assert . assertEquals ( "SELECT 3 + 5;" , text )
assertEquals ( expectedValue , propertyValue )
assertEquals ( "wrong number of enumerated values... test should be examined and updated" , 7 , ParseResult . values ( ) . length )
assertEquals ( getFailureMessage ( ) , assertion , neg )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes WHERE (nodes.col1 IS NOT NULL AND nodes.col2 IS NOT NULL)" ) )
assertTrue ( readVrp . getJobs ( ) . get ( "1" ) . getRequiredSkills ( ) . containsSkill ( "skill2" ) )
assertions . hasContentEqualTo ( FakeFile . newDirectory ( "directory" ) )
assertOut ( "var /** @type {Array} */ a = new Array()" )
Assert . assertEquals ( "(aa_change_deletion (aa_range (aa_point_location (aa_char Cys) 123) _ (aa_point_location (aa_char Arg) 125)) del 3)" , aa_change_deletion . toStringTree ( parser ) )
assertEquals ( "GBP 5.82" , test . toString ( ) )
Assert . assertEquals ( count - 1 , nowcount )
assertClosed ( toClose )
assertEquals ( entry . getValue ( ) , actual )
assertThat ( expected . equals ( document ) , is ( true ) )
assertEquals ( vars , variablesTyped )
Assert . assertTrue ( Arrays . equals ( entry . getBytes ( ) , fmt . toBytes ( e ) ) )
Assert . assertTrue ( score > 0 )
Assert . assertNotNull ( dbVXString )
assertEquals ( "Git" , descriptor . getDisplayName ( ) )
assertEquals ( future , underTest . collectAndDiscard ( futures ) )
assertEquals ( 0 , x )
assertEquals ( ROUTE_KEY , instanceIdentifier . firstKeyOf ( L3vpnMcastRoute . class ) )
Assert . assertNotNull ( resultEntity )
assertObjectEquals ( "{A:{foo:'bar'}}" , b . build ( ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 4 objectClass: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.oxm.rev150225.match.entries.grouping.MatchEntry" + " msgType: 32768 oxm_field: 42 experimenterID: null" , key1 . toString ( ) )
assertThat ( display , is ( "" ) )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertEquals ( "package org.kissmda.test.junit;\n" + "import static org.junit.Assert.assertNotNull;\n" + "public class ClazzName {\n" + "  public void doSomething(  Name values){\n" + "    assertNotNull(values);\n" + "  }\n" + "}" , cu . toString ( ) . trim ( ) )
assertThat ( dao . getById ( co . getId ( ) ) , equalTo ( co ) )
assertThrows ( IllegalArgumentException . class , ( ) -> AccumuloInputFormat . configure ( ) . clientProperties ( clientProps ) . store ( new JobConf ( ) ) )
Assert . assertArrayEquals ( source , b . array ( ) )
assertThat ( manager . evaluate ( selectorConfiguration , variableSource ) , is ( true ) )
Assert . assertEquals ( new URI ( "http://localhost:80/" ) , result )
assertThat ( message , equalTo ( EXAMPLE_WITH_NAME_MESSAGE ) )
assertConnection ( sqlInputs , 1 , "jdbc:jtds:sybase://localhost:30/dbName;prepareSQL=1;useLOBs=false;TDS=4.2;" , null )
assertFalse ( "Comparaison OK => Erreur" , comparator . compare ( ) )
assertNotNull ( solution )
context . assertIsSatisfied ( )
assertTrue ( list . hasNext ( ) )
assertions . doesNotContain ( values )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertNotNull ( billingServices )
assertThat ( client . getNamesOfRepositories ( ) , hasItems ( "Aircraft" , "Cars" , "Vehicles" ) )
assertEquals ( "Incorrect add news" , 3 , news . size ( ) )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertSame ( "control" , choice . get ( ) )
assertEquals ( Lists . newArrayList ( "value1" , "false" , "1.02" , "1,-1" ) , Pql . getRowStringValues ( row ) )
Assert . assertEquals ( "PK2222" , result )
assertEquals ( 100. , absFixedCosts . getCosts ( context ) + relFixedCosts . getCosts ( context ) , 0.01 )
assertEquals ( 4 , ex . getMax ( 4 , 4 ) )
assertEquals ( "stilton" , list . get ( 0 ) )
assertEquals ( expecting , found )
assertNull ( s )
assertEquals ( expResult , result )
Assert . assertEquals ( XML_STRING , result )
this . assertGet ( "relationshiptypeimplementations/http%253A%252F%252Fwinery.opentosca.org%252Ftest%252Frelationshiptypeimplementations%252Ffruits/kiwi_implementation/inheritance" , "entityimplementations/relationshiptypeimplementations/kiwi_initial_inheritance.json" )
Assert . assertTrue ( command instanceof AuditConnectionCommand )
assertFalse ( connectionManager . isConnected ( ) )
assertEquals ( expectedEntry , result )
Assert . assertNotNull ( jurl . getResponseJsonList ( EatStreetState . class ) )
assertTrue ( result )
assertEquals ( "The return value is not correct." , Tag . EVAL_PAGE , this . tag . doEndTag ( ) )
assertNull ( obj )
assertEquals ( "Expected number of results returned was incorrect!" , 0 , map . size ( ) )
assertEquals ( 0 , container . size ( ) )
assertNotNull ( error )
assertThat ( label , emptyString ( ) )
assertEquals ( "abc, def\n" , found )
assertTrue ( lhs . equals ( rhs ) )
assertThat ( log , instanceOf ( NoLoggingImpl . class ) )
assertTotalDocs ( )
assertThat ( verifyModelVersionsSaved ( ) , is ( ImmutableMap . of ( "foo" , "1.2" , "bar" , "1.1" , "wibble" , "2.0" ) ) )
assertEquals ( "Failed at index " + i , assertions [ i ] , arr )
assertFalse ( violated )
assertSame ( field , converter )
assertEquals ( valueOf ( v ) , s . serialize ( ( HttpPartSchema ) null , v ) )
assertEquals ( "Has one child with jssonns:ns" , 1 , childList . size ( ) )
Assert . assertEquals ( expected , BitBufferHelper . toNumber ( array , i ) )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertThat ( performanceLoggers . get ( 1 ) . getLoggedValues ( ) . get ( ComparisonLoggerDecorator . ARITHMETIC_COMPARISON_COMP0 ) , is ( ( long ) 80 ) )
Assert . assertEquals ( "Invalid result" , "text" , result )
Assert . assertTrue ( "Authenticated" , authenticated )
Assert . assertEquals ( false , errors . hasFieldErrors ( "states" ) )
assertThat ( data , is ( test1 ) )
assertNotSame ( Thread . currentThread ( ) , results [ 0 ] )
Assert . assertNotNull ( tasks )
assertThat ( studies . size ( ) , is ( 0 ) )
assertNotEquals ( array , result )
assertEquals ( "Incorrect unsigned byte value" , MAGIC , s . u8 . shortValue ( ) )
context . assertIsSatisfied ( )
assertFalse ( groups . hasNext ( ) )
assertNull ( "Got an unexpected number of rows - no data should be returned with the NoDataFromScan coprocessor. Found: " + r , r . list ( ) )
assertEquals ( Order . sellAt ( 0 , NaN , NaN ) , uncoveredTrade . getEntry ( ) )
assertThat ( channelCaptor . getValue ( ) , is ( "#dev-group" ) )
assertAnnotations ( 2 , MilitaryPlatform . class , new TestEntity < > ( 0 , "HMS Troutbridge" , "HMS Troutbridge" ) , new TestEntity < > ( 1 , "H.M.S. Hidden Dragon" , "H.M.S. Hidden Dragon" ) )
assertEquals ( request . toHexString ( ) , "000000008e3039708fdd9f488f9665426d0d9c5702000000020000001a001a00000002001c001c00040002000d000000000000000d000000410064006d0069006e006900730074007200610074006f00720000000e000000000000000e000000410064006d0069006e006900730074007200610074006f007200320000000000000000000100000000000000" )
assertEquals ( "FAIL:Failure Demonstration" , result )
assertEquals ( "Good" , at . convert ( null , null , "Good" ) . arg_ )
assertFalse ( loader . load ( "scrypt" , true ) )
assertIsEphemeral ( "ephemeral testValue" , testVal )
result . assertIsSatisfied ( )
assertNull ( out )
assertTrue ( Arrays . equals ( data , ( boolean [ ] ) deserialize . readObject ( ) ) )
assertThat ( list . size ( ) , is ( 2 ) )
assertThat ( copy ( calendar ) , is ( equalTo ( calendar ) ) )
assertTrue ( match )
assertEquals ( vr . getValidity ( ) , Validity . VALID )
assertEquals ( 1 , change1 )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
assertEquals ( 4 , route . getTourActivities ( ) . getActivities ( ) . size ( ) )
assertTrue ( true )
assertEquals ( 0 , int0 )
assertEquals ( str , quote ( ExampleBuilder . SAMPLE_UUID_PROPERTY_VALUE ) )
assertThat ( list . toString ( ) , is ( copy . toString ( ) ) )
Assert . assertTrue ( success )
Assert . assertEquals ( expected , actual )
assertEcssEquals ( ".menu{background-position:\"#{notemptyrichSkin.menu1?richSkin.menu2:''}\";}" , convertFragment ( xcss ) )
assertThat ( task , is ( nullValue ( ) ) )
assertThat ( LongUtil . toLong ( value ) , is ( value ) )
Assert . assertEquals ( expected , actual )
assertArrayEquals ( array ( 'a' , 'b' , 'c' , '#' , '#' ) , rpad ( array ( 'a' , 'b' , 'c' ) , 5 , '#' ) )
assertNodeTriggered ( processInstance . getId ( ) , "Start" , "User Task" , "MyBoundaryErrorEvent" )
Assert . assertEquals ( DefaultJobPriorityProvider . DEFAULT_PRIORITY_ON_RESOLUTION_FAILURE , job . getPriority ( ) )
assertArrayEquals ( new int [ ] { 0 } , findFusionStartIndices ( schedulingStrategies ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "A" } , { "B" } , { "C" } } ) ) )
assertEquals ( machine , MACHINE_NAME_USED . getValue ( ) )
assertEquals ( ( i / 3 ) + " : " + testData [ i ] + ", " + testData [ i + 1 ] , expectedResult , actualResult )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( 0 , map . size ( ) )
assertNull ( "Got a frame" , stream . nextFrame ( ) )
assertEquals ( "20110103201412297033000000" , d . getId ( ) )
assertTrue ( "Timeout reached. Message latch value: " + messageLatch . getCount ( ) , messageLatch . await ( 5 , TimeUnit . SECONDS ) )
assertEquals ( "94.142.215.39" , _transformer . transform ( new MockInputRow ( ) . put ( _col , "eobjects.org" ) ) [ 0 ] )
Assert . assertEquals ( 1024.0 , a . divide ( b ) . doubleValue ( ) , 1.0e-15 )
assertEquals ( t , HttpURL . toAbsolute ( s , "xyz.html" ) )
assertEquals ( "kHz" , khz . toString ( ) )
assertEquals ( " WHERE \"NAME\" LIKE ? AND \"AGE\" > ?" , QueryBuilder . getWhereStringForFilters ( filters , sh ) )
assertEquals ( topic . getUnsubscribeLinkForSubscribersOf ( PostSubClass . class ) , "/topics/1/unsubscribe" )
assertEquals ( BatchStatus . FAILED , jobExecution . getBatchStatus ( ) )
assertThat ( ids , not ( empty ( ) ) )
assertEquals ( ( long ) 8 , ( long ) result . getLongWrapperValue ( ) )
assertTrue ( reset . await ( 10 , TimeUnit . SECONDS ) )
assertFlowState ( ACCEPTED_FAILED )
assertEquals ( offset , options . getOffset ( ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertEquals ( "Failed to generate two dimensional array" , "new Integer[][] { { 1, 2 } }" , s )
assertThat ( plugin . getClass ( ) , is ( equalTo ( UsageFormatter . class ) ) )
assertEquals ( expected , y [ i ] , 1e-7d )
Assert . assertEquals ( SERVICE_NAME , name )
assertEquals ( concepts , Collections . emptyList ( ) )
assertArrayEquals ( plaintext , correctPlaintext )
assertEquals ( ValidationResult . Result . OK , result . getStatus ( ) )
assertEquals ( 4 , fixture . mark ( ) )
assertContentEquals ( style , Arrays . asList ( "tte" , "r" , "loo" , "ooo" , "ooo" , "ooo" , "oon" , "gwo" , "rd" ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( b1 , b2 )
assertThat ( termCollection , is ( empty ( ) ) )
Assert . assertEquals ( orig , clone )
Assert . assertEquals ( "9999999999.9999" , cide . getValorAliquota ( ) )
Assert . assertNull ( actual )
assertEquals ( expected , query . export ( ) )
assertTrue ( LibUsb . getDeviceList ( null , deviceList ) >= 0 )
assertEquals ( val , 4 )
assertNull ( metadata . getEntityListenersMetadata ( ) . getCallbacks ( ) )
assertEquals ( 1 , result . getSize ( ) )
assertThat ( unit . shouldGenerateInvocationId ( ) , is ( false ) )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
assertNotNull ( callback . asError ( reply ) )
Assert . assertFalse ( this . target . isMachineRunning ( parameters , null ) )
assertEquals ( "\"a\\?c\"" , ctxName )
Assert . assertNotNull ( imposto . toString ( ) )
assertSame ( test . with ( Month . JUNE ) , test )
Assert . assertTrue ( ctx . getResult ( ) )
assertEquals ( nestedMap . get ( "key1" ) , complexPojo . getNestedMapString ( ) . get ( "key1" ) )
assertNotNull ( result )
assertThat ( OUT . get ( "a" ) , is ( nullValue ( ) ) )
assertEquals ( Arrays . asList ( new JoinExpression ( JoinType . DEFAULT , str ) ) , metadata . getJoins ( ) )
assertNotNull ( result )
assertTrue ( instance . isClosed ( ) )
assertEquals ( "Unexpected widgetset configuration option value" , widgetset , config . getWidgetset ( widgetset ) )
assertEquals ( "GET:testSimpleGetRequest" , responseBody )
assertNotNull ( vbInjectable . getTarget ( ) )
assertEquals ( ContentType . APPLICATION_JSON , transport . getUncompressedContentType ( ) )
assertEquals ( expResult , result )
assertEquals ( packet , p )
Assert . assertEquals ( 2 , nbConceptsAlignedToExtThes . longValue ( ) )
assertFalse ( fencer . fence ( MOCK_TARGET ) )
assertIsOutputEqualTo ( "Using parameter name 'name' for parameter position 0" )
assertFalse ( violation )
Assert . assertTrue ( "Failure expected true" , r . getLeft ( ) )
this . assertGet ( "servicetemplates/http%253A%252F%252Fplain.winery.opentosca.org%252Fservicetemplates/ServiceTemplateWithTwoNodeTemplates_w1-wip2/" + "?compareTo=ServiceTemplateWithTwoNodeTemplates_w1-wip1" , "servicetemplates/difference.json" )
Assert . assertEquals ( 4 , analyser . getNumberOfDeliveries ( ) , 0.01 )
Assert . fail ( "Tendria que haber saltado un Asn1Exception" )
assertEquals ( "Length: 5" , engine . compileMustache ( "if_helper_custom_else" , "{{#if this else='Length: $$this.toString.length$$'}}hello{{/if}}" ) . render ( Boolean . FALSE ) )
Assert . assertArrayEquals ( "Wrong data" , data , builtByFactory . getData ( ) )
assertThat ( withResult ( TestResult . SUCCESS ) . matches ( testOutcome ) , is ( true ) )
assertEquals ( "<html><head></head><body><span class=\"foo\">bar</span></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertNotNull ( style )
assertEquals ( Arrays . asList ( "myForm:outerOutput" , "myForm:table:0:nestedOutput" , "myForm:table:1:nestedOutput" ) , trackingVisitCallback . getVisitedIds ( ) )
assertTrue ( false )
assertEquals ( messagePage . getNumber ( ) , pageCount , "Incorrect page number" )
assertFalse ( lockAcquired )
assertThat ( edges . size ( ) , is ( 0 ) )
assertSame ( list . get ( 4 ) , SolutionListUtils . findBestSolution ( list , comparator ) )
assertNotEquals ( column1 , column2 )
Assert . assertTrue ( clickMe . getText ( ) . contains ( buttonText ) )
assertNull ( group )
assertNotNull ( json )
assertSimilarXml ( TestUtils . getResource ( "/org/sonar/plugins/groovy/codenarc/exportProfile/exportNullParameters.xml" ) , writer . toString ( ) )
assertEquals ( 2 , mapper . get ( e ) . other . size ( ) )
assertEquals ( HttpMethod . GET , HttpMethod . of ( request ) )
assertTrue ( result )
Assert . assertEquals ( "select DATE(STUDENT.ID) from student" , getSql0 ( node ) )
assertThat ( releaseGroup . getGids ( ) , hasSize ( 1 ) )
assertEquals ( "+a -a/b" , s . getPattern ( ) )
assertEquals ( "sample_Name_on_edit" , nominalLabel . getName ( ) )
assertThat ( DataUtils . isTimeValid ( timeStamp ) , equalTo ( true ) )
assertPutFails ( name , OntopiaRestErrors . MANDATORY_OBJECT_IS_WRONG_TYPE )
assertThat ( result . getName ( ) , is ( "Mircosoft涓���" ) )
assertWaitUntil ( ( ) -> received . get ( ) == 2048 )
assertEquals ( asList ( listener , listener ) , newBuilder . getConfig ( ) . getPermanentListeners ( ) )
assertEquals ( "" , result )
assertEquals ( "3 kuu p盲rast" , t . format ( new Date ( 1000L * 60 * 60 * 24 * 30 * 3 ) ) )
assertThat ( results , is ( new String [ ] [ ] { { "A" , "B" , "C" } } ) )
assertThat ( controller , is ( equalTo ( method ) ) )
assertEquals ( "Continue" , x . getDescription ( ) )
assertNotNull ( response )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=waiting&minSupportCount=0" ) )
assertEquals ( 1 , results . length )
context . assertIsSatisfied ( )
assertThat ( applicationSettings . getProjectUploadSetting ( ) , is ( PROJECT_UPLOAD_ALLOWED ) )
Assert . assertEquals ( "container-2" , ContainerNamingUtil . formatContainerName ( imageConfiguration ( "jolokia/jolokia_demo" , "nameAlias" , "container-%i" ) , null , new Date ( 123456 ) , Collections . singleton ( container1 ) ) )
assertThat ( index , is ( 0 ) )
assertThat ( building . isPresent ( ) , is ( false ) )
assertContains ( "Master footer is here" , content )
Assert . assertEquals ( 0 , sut . getWeekdayCountBetweenDates ( start , end ) )
assertEquals ( TEST_2007_07_15_PONE , t )
assertEquals ( left , right )
assertThat ( result , is ( expected ) )
assertEquals ( "oddevenodd" , mustache . render ( new String [ ] { "1" , "2" , "3" } ) )
assertThat ( result , is ( equalTo ( expected ) ) )
assertThat ( isValid , is ( true ) )
assertThat ( geometry . getArea ( ) , is ( 125.0 ) )
assertEquals ( 0 , BulkImport . filterInvalid ( files ) . size ( ) )
assertTrue ( bonefetcher . hasAttribute ( Attribute . DEFLECT ) )
assertEquals ( expected , actual )
assertThat ( plugin . isNoOutput ( ) , equalTo ( false ) )
assertNull ( "State returned is not null" , state )
Assert . assertSame ( sampleHandler , challengeHandler )
assertPermanentCount ( playerA , "Selvala, Explorer Returned" , 1 )
assertions . isEqualTo ( expected )
assertThat ( "no issue shall be found in a valid relationship" , validation . pass ( Report . WITHOUT_WARNING ) )
assertThat ( result , is ( packetStatus ) )
assertEquals ( expected , actual )
assertThat ( location , is ( "conf" ) )
assertTrue ( text . matches ( "(?s).*<head.*alert\\(\\'ok\\'\\);.*</head.*" ) )
assertArrayEquals ( new String [ 0 ] , args )
assertThat ( XMLAdapter . XML_DATE_TIME_OFFSET . translate ( cal ) , is ( expected ) )
assertEquals ( expected , actual , delta )
assertArrayEquals ( new byte [ ] { 0x00 } , response . getStub ( ) )
Assert . assertTrue ( response . contains ( blogTitle ) )
assertNotNull ( node . findComponentsByID ( ctxVars . get ( "comp" ) ) )
assertStat ( result )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( found )
assertEquals ( "" , DomainFormatUtility . buildCapabilitiesString ( list ) )
assertEquals ( DecodeQualification . INTENDED , plugIn . getDecodeQualification ( path ) )
assertEquals ( ints , ints2 )
assertEqual ( "1" , query . execute ( ) )
assertEquals ( Collections . EMPTY_LIST , errors )
Assert . assertEquals ( expected , predicted )
assertNull ( KeyValueStoreRW . get ( vutDiv , vutKey1 ) )
assertNotNull ( ShortCode . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertNotNull ( Config . get ( request . getSession ( ) , Config . FMT_LOCALE ) )
Assert . assertEquals ( "Copy of Sample Sheet" , sheets . getData ( ) . get ( 0 ) . getName ( ) )
assertEquals ( previous , size )
assertEquals ( expected , d_smd . getCohenD ( ) , 0.0001 )
Assert . assertEquals ( expResult , result )
assertThat ( hash . length ( ) , comparesEqualTo ( 25 ) )
assertThat ( childElementsByNameNs . size ( ) , is ( 1 ) )
assertPhotosForContact ( places )
Assert . assertEquals ( "{var}" , e . toString ( ) )
assertThat ( s , is ( not ( nullValue ( ) ) ) )
assertThat ( sampledValue . getContext ( ) , equalTo ( readingContext ) )
assertEquals ( expected , actual )
assertEquals ( testString , avroField . convertToKettleValue ( record , schema , mock ( Schema . class ) , false ) )
Assert . assertEquals ( "\"etag1\"" , result . getFirstHeader ( "ETag" ) . getValue ( ) )
assertThat ( builder . getPatches ( ) , hasItemInArray ( "REMOVE /status/replicas" ) )
assertEqualObjects ( f , f2 )
Assert . assertEquals ( dataHoraProcessamento , retornoConsultaCadastroDados . getDataHoraProcessamento ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
Assert . assertEquals ( "shrinkwrap" , value )
assertTrue ( validator . validate ( EntityNames . STUDENT_SECTION_ASSOCIATION , associations ) . equals ( associations ) )
assertTrue ( StreamUtils . compareCharStreams ( "<shopping>\n" + "    <category type=\"groceries\">\n" + "        <item>Luxury Chocolate</item>\n" + "        <item>Luxury Coffee</item>\n" + "    </category>\n" + "    <category type=\"supplies\">\n" + "        <item>Paper</item>\n" + "        <item quantity=\"6\" when=\"Urgent\">Pens</item>\n" + "    </category>\n" + "    <category type=\"present\">\n" + "        <item>Mum's Birthday</item>\n" + "        <item when=\"Oct 15\">Monica's Birthday</item>\n" + "    </category>\n" + "</shopping>" , result . getResult ( ) ) )
assertEquals ( 2 , numberUsersWithPreference )
assertThat ( size , equalTo ( 0 ) )
assertEquals ( expected , pu . getCharsetProperty ( "sun.stdout.encoding" ) )
Assert . assertEquals ( 1L , result . at ( 0 ) . getLong ( 0 ) . longValue ( ) )
assertEquals ( "abc\n" , found )
Assert . assertEquals ( jdkHands , ggHands )
assertTreeEquals ( top , result )
assertEquals ( "A" , output )
assertEquals ( "void dest7(int, @A @B @C int, @B @C @D int, @C @D @E int)" , toString ( dest ) )
assertTrue ( handler instanceof DisruptorBasedRelatedContentSearchRequestProcessorHandler )
Assert . assertTrue ( tempFontFile . exists ( ) )
assertResultSet ( res )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertThat ( getRecordedDomain ( ) , not ( hasCondition ( Available ) ) )
assertEquals ( counter . getValue ( ) , 0 )
context . assertTrue ( result . isEmpty ( ) )
assertTrue ( result . getException ( ) instanceof FlowExecutionException )
Assert . assertEquals ( 0 , norm , 6.0e-13 )
assertEquals ( endingDateTime , topic . getPoll ( ) . getEndingDate ( ) )
assertEquals ( expected [ i ] , actual )
Assert . assertEquals ( "�注�� 3 砖���" , t . format ( new Date ( 2629743830L * 12L * 3L ) ) )
assertTrue ( translator . isMethodSupported ( "refreshServiceAcl" ) )
Assert . fail ( "'MustUnderstand headers' exception should be thrown." )
assertEquals ( "Wrong child index" , - 1 , handler . indexOfChild ( parent , child ) )
assertThat ( domain . getSpec ( ) . isDomainHomeInImage ( ) , is ( false ) )
assertTrue ( errorsContainer . equals ( errors ) )
assertTrue ( "static Base64.encodeBase64() test-" + i , b )
assertEquals ( expectedPanel , actualPanel )
assertFalse ( victim . accept ( request ) )
assertThat ( result , is ( new String [ 0 ] [ 0 ] ) )
assertEquals ( TEST_CLUSTER_NAME , clusterNameElement . getValue ( ) )
assertEquals ( key . length , Sodium . crypto_aead_chacha20poly1305_keybytes ( ) )
assertEquals ( expected , result )
assertThat ( ruleManager . listGlobals ( ) . get ( "bla" ) , is ( "java.util.Random" ) )
assertNull ( Util . extractFileExtension ( fullName ) )
assertThat ( clusterVO , is ( nullValue ( ) ) )
assertTrue ( futures [ 0 ] . isWritten ( ) )
assertFalse ( actualAfterProcess . equals ( wrongAfterProcess ) , "Values which seems to be encoded should not be decoded." )
assertEquals ( expected , paths )
assertEquals ( childName , mappedStart . getTo ( ) )
assertThat ( true , equalTo ( result ) )
Assert . assertNotNull ( matrixSets )
assertEquals ( "validating the bean" , obj , new TestBean ( "testVal" ) )
assertNull ( output )
assertSame ( authority , forward . authority ( ) )
assertEquals ( "http://example.com/fhir/?name=james" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertEquals ( 8 , passingCars . solution ( array ) )
assertFalse ( result . passedValidation ( ) )
assertNotNull ( injector )
assertEquals ( user . getNickname ( ) , username )
Assert . assertEquals ( userRepo , settings . getLocalRepository ( ) )
assertEquals ( parent . models . size ( ) , 1 )
assertThat ( constant ( Descriptions . valueOf ( array ) ) , equalTo ( ( Object ) array ) )
Assert . assertTrue ( value )
Assert . assertEquals ( "Remote invocation of EJB was not successful" , StatelessBeanRemote . ANSWER , response )
assertEquals ( 2 , pResult . getValues ( ) . size ( ) )
assertFalse ( result )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
assertEquals ( "unexpected errors: " + equeue , 0 , equeue . errors . size ( ) )
assertFalse ( panelManager . mapPanelDefinitionToPresenter . containsKey ( customPanel ) )
assertTrue ( "Inner transaction must be able to update outer transaction state" , flag )
assertTrue ( victim . find ( ) . isEmpty ( ) )
assertTrue ( o instanceof Runnable )
assertEquals ( Location . LOCATION_LHS_INSIDE_CONDITION_START , getLastIntegerValue ( parser . getEditorInterface ( ) . get ( 0 ) . getContent ( ) ) )
assertEquals ( "Index is 3" , 3 , _index . intValue ( ) )
assertEquals ( 3 , element . length ( ) )
assertFalse ( mockListener . propertyChangedFired )
Assert . assertTrue ( context . getResult ( ) )
Assert . assertEquals ( simpleJson , roundTripJson )
assertSelectResults ( results , one , two , three )
Assert . assertEquals ( "RIGHT" , value . toString ( ) )
assertEquals ( expected , s . getTextSearchConfig ( ) . getTextSearchOperand ( ) )
assertEquals ( "unable to fetch rule by name" , mock , rs . getRuleByName ( "name" ) )
assertThat ( action . remove ( server ) , is ( false ) )
assertThat ( "group name" , sut . getGroupName ( ) , is ( equalTo ( groupName ) ) )
assertEquals ( "Dest should remain unchanged with zero copies" , new FourLongs ( 0 , 0 , 0 , 0 ) , dest )
assertThat ( HiveCliEmulator . INSTANCE . preProcessor ( ) . script ( hiveSql ) , is ( "set x=1;" ) )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( ( a , b ) -> x + a + b ) . intValue ( ) )
assertEquals ( 16 , availableProperties . size ( ) )
assertEquals ( 0 , adaptiveGrid . occupiedHypercubes ( ) )
assertNull ( edmProvider . getEntityType ( new FullQualifiedName ( "Test.IllegalNamespace.entity" ) ) )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
Assert . assertEquals ( "This monkey." , this . realiser . realiseSentence ( sentence_1 ) )
assertEquals ( asList ( sampleShortAlbum , aLoveSupreme ) , result )
assertTrue ( "unknown ID should have no class" , classdb . getClass ( "id3" ) . isEmpty ( ) )
assertThat ( argument . getValue ( ) . getName ( ) , is ( "step_with_parameters: <span class='step-parameter'>Joe, 10</span>" ) )
assertFalse ( job . hasPlayerMoved ( ) )
assertTrue ( FileUtil . gitDirectoriesAreEqual ( getResource ( "/canCloneDuplicateBinaryFiles/state/testproj" ) , testprojDir . toPath ( ) ) )
assertSame ( cache , cacheManager . getCache ( name ) )
MatcherAssert . assertThat ( ( String ) FieldAccessUtil . getFieldVal ( interceptor , "profile" ) , is ( "testProf" ) )
assertEquals ( "result10.5" , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
assertEquals ( mySize , adapter . getNumBytes ( ) )
context . assertIsSatisfied ( )
assertEquals ( "getSkipLines() did not return SKIP_LINES_DEFAULT" , VariablesFromCSV . SKIP_LINES_DEFAULT , element . getSkipLines ( ) )
assertEquals ( "foo,bar,,!" , engine . compileMustache ( "list" , templateContents ) . render ( data ) )
assertEquals ( 1 , list . size ( ) )
assertEquals ( expected , elements )
Assert . assertEquals ( versao , eventoRetorno . getVersao ( ) )
Assert . assertTrue ( myRecordV2 . equals ( result ) )
assertEquals ( EMPTY_LIST , testLogger . getLoggingEvents ( ) )
assertEquals ( "on failure" , pp . getValue ( ) )
assertEquals ( "payload size" , 156 , payload . size ( ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( mockResponse , testResponse )
Assert . assertEquals ( key1 , key2 )
assertQuery ( em , 1 , query )
Assert . assertEquals ( "unexpected XML protocol result" , sb . toString ( ) , tagOut )
Assert . assertTrue ( isActive )
assertions . isNotEqualTo ( expected )
assertEquals ( crossoverProbability , ( Double ) ReflectionTestUtils . getField ( crossover , "crossoverProbability" ) , EPSILON )
assertEquals ( "foobar" , s )
assertNotNull ( resp )
assertEquals ( 4 * diffusioncoefficient * timelag , res , 0.01 )
assertTrue ( matcher . matches ( mockElement ) )
TestCase . assertTrue ( result )
assertNull ( position )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( expected , actual )
assertTrue ( Arrays . equals ( password , entity . getPassword ( ) ) )
Assert . assertTrue ( - 65535.65535f == _c . convert ( "-65535.65535" ) )
assertEquals ( "`tmp`.`intColumn`,`tmp`.`stringColumn`" , HiveUtility . getTmpTableColumns ( writable ) )
Assert . assertEquals ( "[\"bob\"]" , writer . toString ( ) )
Assert . assertEquals ( 0 , a . rank ( ) )
Assert . assertEquals ( " UPDATE t_pet SET id = ? , name = ?  " , sql )
assertThat ( exit , is ( 0 ) )
assertEquals ( JSON_ARRAY , json )
assertEquals ( 2015 , CalendarUtils . get ( todayGerman , Calendar . YEAR ) )
assertEquals ( 1 , searcher . search ( q , 100 ) . totalHits )
assertThat ( target . getStatus ( ) , is ( nullValue ( ) ) )
assertThat ( target , is ( notNullValue ( ) ) )
Assert . assertTrue ( CompareUtil . compareArraysAndNull ( instance , copy ) )
assertEquals ( Arrays . asList ( 1 , 2 , 3 ) , slot . events )
assertTrue ( alice . out ( "friend" ) . toList ( ) . isEmpty ( ) )
assertThat ( result , is ( Arrays . toString ( ( String [ ] ) input ) ) )
assertThat ( converter . convert ( formattedValue , Float . class , bundle ) , is ( equalTo ( theValue ) ) )
assertSame ( error , stream . getError ( ) )
assertEquals ( ( int ) 8 , result . getIntValue ( ) )
assertNull ( dynamicProperties )
Assert . assertEquals ( "138240687.91500000" , miniCube . sum ( "csm" , filter ) . toString ( ) )
assertTrue ( response != null && CollectionUtils . isEmpty ( response . getObservations ( ) ) )
assertSame ( content , response )
assertEquals ( 2 , list . size ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertScore ( serviceDocumentRenderer , AbstractRenderer . MAXIMUM_FORMAT_SCORE )
Assert . assertFalse ( "Validation should have failed with no bodySHA256" , isValid )
assertThat ( getBranchInstrumentor ( ) . getLinePosition ( gtNode ) , equalTo ( 4 ) )
assertEquals ( 2 , todoRepository . count ( ) )
assertTrue ( b )
assertValue ( testDate , getConverter ( ) . convertToModel ( new java . sql . Date ( time ) , new ValueContext ( Locale . ENGLISH ) ) )
assertThat ( serverSocket . isBound ( ) , is ( true ) )
assertSame ( expectedInput , result )
assertEquals ( generatedJavascript , expectedJavascript )
TestUtil . assertEquals ( exp , getSpans ( ) )
Assert . assertSame ( component , table . getHeader ( ) )
assertEquals ( new ModelId ( "Test" , "com.bosch" , "1.0.0" ) , ModelId . fromPrettyFormat ( modelId ) )
connectionLeakUtil . assertNoLeaks ( )
assertTrue ( skills . containsSkill ( "skill1" ) )
Assert . assertTrue ( "The file" + fileName + "doesn't contain expected content." , checkFileContains ( path , "Release: " ) )
Assert . assertSame ( 1L , food . getPersonId ( ) )
assertStatementCanBeDeparsedAs ( select , statement )
assertEquals ( relative , da . getDocType ( ) )
Assert . fail ( "Exception should have been thrown" )
Assert . assertEquals ( "FROM Person T0 WHERE (T0.birthday IS NULL)" , query . toQuery ( ) )
arrays . assertEndsWith ( description , null , sequence )
Assert . assertFalse ( verifyTest ( builder ) )
assertNull ( ServiceProviders . load ( ServiceProvidersTestAbstractProvider . class , NO_HARDCODED , cl , ACCESSOR ) )
Assert . assertNotNull ( drk )
assertThat ( target . getData ( ) , is ( value ) )
assertEquals ( expected . trim ( ) , output . trim ( ) )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 1E-1 )
assertArrayEquals ( bytes , field . getBytes ( ) )
assertEquals ( "name cannot be null" , AzureStorageConnectionEditWizardDefinition . COMPONENT_WIZARD_NAME , name )
assertNotNull ( mpd . getServerStatistics ( ) )
assertFalse ( "equals(null)" , a1 . equals ( null ) )
assertThat ( target . parse ( ) , is ( false ) )
assertTextPresent ( "Invalid password" )
Assert . assertEquals ( 2 , sc . getAttribute ( "number-of-routes" ) )
assertEquals ( 2 , new Mirror ( new DefaultMirrorReflectionProvider ( ) ) . on ( fixture ) . get ( ) . field ( "finalField" ) )
assertEquals ( "https://foobar.us-phoenix-1.oci.oracle.com" , endpoint )
assertEquals ( list , mockResult . included ( "words" ) )
Assert . assertTrue ( XmlHelper . compareXMLStrings ( expectedXML , xml ) )
assertMaps ( new HashMap < String , String > ( ) , pairs )
assertEquals ( reader , readerResult )
Assert . assertFalse ( allowedCRUDL )
Assert . assertTrue ( errors . hasFieldErrors ( "name" ) )
assertEquals ( 0.5d , e . evaluate ( ) , 0.0 )
assertEquals ( 1 , routingResult . getRouteHandlerMatches ( ) . size ( ) )
assertTrue ( tt2 == tt )
assertEquals ( "Common exception" , ms . getText ( ) )
assertFalse ( isBundle )
assertEquals ( mclass . toString ( ) , 0.0 , ref3 . minus ( m3 ) . getRMS ( ) , TOLERANCE )
assertEquals ( agentFcd2 . sinkConfig , ans2 )
assertFalse ( MethodChecksUtils . hasTestMethodKeyword ( parentNode ) )
assertEquals ( true , result )
Assert . assertNotNull ( entity )
Assert . assertEquals ( "rows in db" , 40 , outputOperator . getNumOfEventsInStore ( TABLE_POJO_NAME ) )
assertNotNull ( point )
assertTrue ( "Precedence rules violated" , content . getContent ( ) . indexOf ( "default1osml2inline3external4" ) > 0 )
Assert . fail ( "Expected WSSecurityException is not thrown " )
assertTrue ( "header height must be > 0" , xTable . getTableHeader ( ) . getPreferredSize ( ) . height > 0 )
assertEquals ( storageClass . toString ( ) , request . getStorageClass ( ) )
assertStatus ( 2 , expectedNumRows , expectedNumBytes , expectedReadBytes )
Assert . assertEquals ( "" + "[{\"type\":\"static\",\"name\":\"Java\",\"url\":\"https://www.java.com\"}," + "{\"type\":\"dynamic\",\"name\":\"Ruby\",\"url\":\"https://www.ruby-lang.org\"}," + "{\"type\":\"dynamic\",\"name\":\"Python\",\"url\":\"https://www.python.org\"}]" , result )
Assert . assertEquals ( 0 , resultList . size ( ) )
Assert . assertEquals ( expResult , result )
Assert . assertEquals ( 13 , incompleteLangCoverage . size ( ) )
Assert . assertEquals ( this . list1Realisation , realised . getRealisation ( ) )
assertThat ( result . properties ( ) . size ( ) , is ( 0 ) )
assertEquals ( expected , actual )
assertEquals ( "fra poco" , t . format ( new Date ( 6000 ) ) )
assertFalse ( x . isEq ( y ) )
assertEquals ( "Auto Wrap" , true , config . isAutoWrap ( ) )
assertEquals ( "123" , customDecimalFormat . format ( 123L ) . toString ( ) )
assertValidEntity ( task )
assertEquals ( "\"collection@" + pcollectionImpl . hashCode ( ) + "@" + jobPrototype . hashCode ( ) + "\" [label=\"collection 0.49 Mb\" shape=box];" , dotfileWriter . formatPCollectionNodeDeclaration ( pcollectionImpl , jobPrototype ) )
assertFalse ( store . confirmToken ( TEST_USERNAME , BAD_TOKEN ) )
assertEquals ( 1 , x . size ( ) )
assertTrue ( binary . exists ( ) )
Assert . assertEquals ( 6 , a . getCbo ( ) )
assertEquals ( expResult , result )
assertThat ( request . equals ( request2 ) , is ( false ) )
assertEquals ( 0 , tasks . size ( ) )
assertFalse ( connectFuture . isConnected ( ) )
assertEquals ( new Customer ( "Person" , new BigDecimal ( 70 ) ) , customer )
assertTrue ( sprinkler1 . isOn ( ) )
assertEquals ( count , 7 )
assertImmutableList ( components )
assertFalse ( results . hasNext ( ) )
Assert . assertEquals ( "澶�����璇�锛�" , sqltrue , sqlnew )
assertEquals ( "Expected 0 results!" , 0 , count )
assertThat ( standardDeviation , is ( 1.0 ) )
assertNull ( item . getList ( ) )
assertNull ( a . get ( "outro atributo" ) )
assertEquals ( "GET&http%3A%2F%2Fexample.com%2F&a%3D1" , sbs . generate ( ) )
assertFalse ( "Cache believes cache is up to date when a classpath file changed" , reloadedCache . isUpToDate ( sourceFile ) )
assertEquals ( "!Proxy!" + servletName + "JSESSIONID=1234;path=" + servletPath , rsp . getHeaderField ( "Set-Cookie" ) )
assertEquals ( event , fromJson )
assertEquals ( "foo" , result )
assertTrue ( strategy . isActive ( state , user ) )
assertEqualsIgnoreWhitespace ( expected , drl )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( expected , actual )
assertEquals ( "One folder" , 1 , holder . sourcePath . size ( ) )
assertTrue ( json . contains ( expected ) )
assertFalse ( "Cache believes a known, changed file is up to date" , cache . isUpToDate ( sourceFile ) )
assertEquals ( Collections . emptySet ( ) , result )
assertTrue ( caught )
assertEquals ( "master" , payload . getBranch ( ) )
assertFalse ( isBundle )
assertTrue ( reader . hasNext ( ) )
Assert . assertTrue ( "report should be filled in but was size " + fileProvenanceReport . size ( ) , fileProvenanceReport . size ( ) == 483 )
assertArrayEquals ( data , ( long [ ] ) deserialize . readObject ( ) )
assertNull ( Deencapsulation . getField ( deviceRegistrationState , "createdDateTimeUtcDate" ) )
assertEquals ( _client . get ( keyValue ) , keyValue )
assertThat ( writer . toString ( ) , equalTo ( "{\"queries\":[{\"results\":[{\"name\":\"group1\",\"tags\":{\"tag1\":[\"tag1Value\"],\"tag2\":[\"tag2Value\"]},\"values\":[[1,10],[1,20],[1,3],[2,1],[2,3],[2,5],[3,25]]}]},{\"results\":[{\"name\":\"group2\",\"tags\":{\"tag3\":[\"tag3Value\"],\"tag4\":[\"tag4Value\"]},\"values\":[[1,5],[1,20],[1,14],[2,6],[2,9],[2,8],[3,7]]}]}]}" ) )
assertThat ( bodyWriter . getValue ( ) . objectsWriter , instanceOf ( ObjectsStreamPDFBodyObjectsWriter . class ) )
assertEquals ( mockedProvisioningConnectionString , resultConnectionString )
assertFalse ( b64 . isUrlSafe ( ) )
assertEquals ( networkView , ev3 . getSource ( ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertTrue ( result )
assertFalse ( result . passedValidation ( ) )
assertEquals ( "CycleItself[c=CycleItself@" + identityHashCode ( value ) + "]" , logAdapter . asString ( value ) )
assertThat ( TypeUtil . mapValueTyep ( new MethodInfo ( method ) ) == String . class , is ( true ) )
Assert . assertEquals ( 1 , routes . size ( ) )
assertEquals ( one , two )
assertEquals ( "GET" , captured . getMethod ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff45_" ) )
assertEquals ( expected , actualQuery )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertOut ( "this[\"knownMember\"]" )
descriptor . assertValid ( )
assertThat ( file . readUTF ( ) , is ( "" ) )
response . then ( ) . log ( ) . ifValidationFails ( ) . assertThat ( )
assertTrue ( emptyList . isEmpty ( ) )
assertSame ( "base" , res )
assertThat ( target . getDescriptionClass ( ) , equalTo ( ExporterDescription . class ) )
assertFalse ( ( Boolean ) result . get ( "successful" ) )
assertEquals ( "Mismatched detection value" , expected , OsUtils . getCurrentUser ( ) )
Assert . assertFalse ( "Should not be displaying the dialog" , driver . getPageSource ( ) . contains ( expectedText ) )
Assert . assertEquals ( MEDITECHHandler . formatDateTime ( getElement ( "MSH.7" ) ) , handler . getMsgDate ( ) )
Assert . assertNotNull ( schema )
assertSearchYields ( fooIndex , "foo:aaa" , "foo" )
assertThat ( sentRequest ( "http://127.0.0.1:19000/api/job/register" , "POST" , CloudJsonConstants . getJobJson ( ) ) , is ( 500 ) )
Assert . assertEquals ( expected , component )
assertNotNullOrEmpty ( "Questions should never be null." , questions )
assertEquals ( ids , Arrays . asList ( "GT" , "DP" , "EC" , "CONFS" ) )
Assert . assertEquals ( "" , printCircular . printCircular ( array ) )
Assert . assertTrue ( ( scopePath . findScopeByName ( ClassScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( CodeDefaultScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( DefaultScopeDescriptor . NAME ) != null ) && ( scopePath . findScopeByName ( ClassScopeDescriptor . NAME ) . containsAllProperties ( properties ) ) )
assertTrue ( extension . isActive ( ) )
assertEquals ( expectedMap , map )
assertEquals ( "[AllFigureLevels, EasyLevels, HardLevels, " + "ProbabilityLevels, ProbabilityWithoutOverflownLevels]" , list . toString ( ) )
assertNotNull ( "Testing to string" , mr . toString ( ) )
assertEquals ( NOT_DECODED , color , object . getColor ( ) )
assertEquals ( propExp . toString ( ) , propRes . toString ( ) )
assertEquals ( minutes , testResult )
assertThat ( age , isOneOf ( 20 , 22 ) )
assertEquals ( 99 , config . getMinConnectionsPerPartition ( ) )
Assert . assertTrue ( reuseStrategy . keepAlive ( request , response , context ) )
assertThat ( ifCounterDataIndexable . matchesPojo ( this . counterData ) , is ( false ) )
assertThat ( steps . getPages ( ) , is ( pages ) )
assertEquals ( "Empty name provided for insert action!" , result . get ( RETURN_RESULT ) )
assertObjectEquals ( "{f1:'f1e'}" , bs . getClassMeta ( E1 . class ) . getExample ( bs ) )
Assert . assertEquals ( "someTableName" , overriddenTableName )
assertEquals ( expResult , result )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Siprec>" + "<Parameter name=\"name\" value=\"value\"/>" + "</Siprec>" , elem . toXml ( ) )
assertTrue ( "multiLineSubstitutionFailure2" , "prefix {PI\n} suffix" . equals ( result ) )
assertThat ( entities . getTotalElements ( ) , equalTo ( 1L ) )
Assert . assertEquals ( "cognition" , word . get ( ) )
rule . assertScenarioEnded ( )
Assert . assertEquals ( expected , component )
Assert . assertEquals ( "" , mainAttributes . get ( new Attributes . Name ( "Import-Package" ) ) )
Assert . assertEquals ( 0 , count )
assertFalse ( vs . exists ( ) )
assertEquals ( servers , clientWrapper . getAvailableServers ( ) )
assertEquals ( 22 , sumIpv4Prefixes ( ipvXPrefixes ) )
assertNotNull ( validator )
Assert . assertTrue ( exceptionText )
assertEquals ( "default" , theProperty . get ( ) )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertEquals ( Lists . < String > newArrayList ( ) , getStringsFromElements ( elements ) )
Assert . assertNotNull ( tags )
context . assertIsSatisfied ( )
assertEquals ( "http://example.com" , actual )
arrays . assertDoesNotContainSubsequence ( someInfo ( ) , actual , subsequence )
assertThat ( xray . getConstructors ( ) , hasSize ( 0 ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertEquals ( expected , actual )
assertThat ( "getChildCount" , node . getChildCount ( ) , is ( 0 ) )
assertTrue ( gw . lines . isEmpty ( ) )
Assert . assertSame ( sections , result . getSectionsOverride ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertions . doesNotContain ( entries )
assertTrue ( true )
assertEquals ( asList ( info ( message ) , info ( mdcValues , message ) ) , testLogger . getAllLoggingEvents ( ) )
assertEquals ( result , expecting )
assertTrue ( daysOfWeekAsList . size ( ) == 6 )
Assert . assertEquals ( "Data inconsistency in Elastic Search" , writtenTupleIDs , tupleIDsRead )
assertThat ( view , nullValue ( ) )
assertEquals ( "It shall return null value" , CtxNames . VALUE_NULL , name . getValueAsString ( evalCtx ) )
Assert . assertEquals ( tag . getInnerType ( ) , TagType . INT )
assertEquals ( 20 , rowCount )
assertTrue ( "Same cost solution (2.0 == 2.0) should not be accepted" , schrimpfAcceptance . acceptSolution ( memory , createSolutionWithCost ( 2.0 ) ) )
assertEquals ( 13 , value )
assertEquals ( "34 abc\n" , found )
MatcherAssert . assertThat ( new PiParsedPlainText ( new BasicTemplateParser ( TemplateLexer . LINE_CONTENT , markup ) . rawText ( ) ) . fillUp ( Mockito . mock ( ActualArguments . class ) , Mockito . mock ( Vocabulary . class ) ) , CoreMatchers . equalTo ( markup ) )
Assert . assertEquals ( Arrays . asList ( new String [ ] { "property1" } ) , versionProperty . getPropertyNames ( ) )
Assert . assertEquals ( "type=" + type , extected , test ( extected , type ) )
assertEquals ( JobStatus . ACCEPTED , jobResultArgumentCaptor . getValue ( ) . getStatus ( ) )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'dsgsdg'+ 'the' " ) )
assertEquals ( "noventa e nove" , actual )
assertEquals ( "Hash is invalid" , Blake2_DIGEST_EMPTY_STRING , HEX . encode ( result ) )
assertThat ( resource , is ( equalTo ( method ) ) )
assertSame ( SystemClock . class , ClockFactory . getClock ( ) . getClass ( ) )
assertEquals ( expected , actual )
assertOut ( "\"\\u2029\"" )
assertEquals ( "http://example.com/" , con . request ( ) . url ( ) . toExternalForm ( ) )
Assert . assertEquals ( "SELECT 3 - 5;" , text )
assertTrue ( "address read from audit tables after envers implementation is 99 Purkynova REDHAT BRNO CZ" , "99 Purkynova REDHAT BRNO CZ" . equals ( st . getAddress ( ) ) )
Assert . assertNotEquals ( "Paths must be different!" , mapOut . getParent ( ) , mapOutIdx . getParent ( ) )
assertMetric ( "mmv.v2.integer[instance_name_over_63_characters_instance_name_over_63_characters_instance]" , is ( "11.000" ) )
assertThat ( metrics . newConnection ( "server1" ) , instanceOf ( BasicConnectionMetrics . class ) )
assertEquals ( expectedDeletes , attributes . getDeletes ( ) )
assertEquals ( expResult , result )
assertEquals ( "x123" , s )
Assert . assertEquals ( inet , inet2 )
Assert . assertTrue ( check . equals ( o ) )
assertTrue ( "could not find logging interceptor." , in . stream ( ) . anyMatch ( i -> i . getClass ( ) == org . apache . cxf . interceptor . LoggingInInterceptor . class ) )
assertTrue ( type . equals ( type2 ) )
assertArrayEquals ( "invalid tokens" , expectedAcceptableTokens , check . getAcceptableTokens ( ) )
this . assertOneMatcher ( is ( instanceOf ( ParameterRequestMatcher . class ) ) )
assertThat ( getHandlerFieldValue ( ) , nullValue ( ) )
assertThat ( children . size ( ) , is ( 2 ) )
assertThat ( ( String ) commands . get ( asList ( "test" ) ) . getFullHelp ( PLAIN ) , is ( "long help" ) )
assertEquals ( ValidateGBIDsEnum . INVALID , GcdUtilities . validateGbids ( invalidGbids , gcdGbId , validGbids ) )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertEquals ( actualAfterProcess , expectedAfterProcess )
assertThat ( FullHalfPair1 . equals ( FullHalfPair2 ) , is ( false ) )
assertReflectionEquals ( existingItem , item )
assertNull ( containerRequest . evaluatePreconditions ( now ) )
assertThat ( mockLogger . isLogpCalled ( ) , is ( false ) )
assertThat ( actual , containsInAnyOrder ( expected . toArray ( ) ) )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
assertEquals ( d , result )
assertEquals ( 0 , records . size ( ) )
assertExpectedMinMax ( )
assertFalse ( actual )
Assert . assertThat ( i , is ( 17 ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
Assert . assertEquals ( config . directoryListingEnabled , false )
assertEquals ( "java.util.Collection<String>" , tp . toString ( ) )
assertFalse ( currentData . isPresent ( ) )
Helpers . assertJson ( querySpecification . toJson ( ) , "{\"query\":\"select * from enrollments where validWhere\"}" )
assertEquals ( 403 , response . statusCode ( ) )
assertSame ( "OutoutStream is not set correctly." , outputStream , entrancePi . getOutputStream ( ) )
assertEquals ( 0xffeeddccbbaa0088L , result )
assertEquals ( "bcd" , new String ( out . toByteArray ( ) ) )
assertTrue ( commiters . isEmpty ( ) )
assertEquals ( 1305 , result )
assertTrue ( isEqual ( distance , expected ) )
Assert . assertTrue ( "The re-generated and the read record do not match." , k1 . equals ( k2 ) && v1 . equals ( v2 ) )
assertEquals ( "file:/foo/bar/" , moduleDir )
assertEquals ( "PONG" , response )
Assert . assertTrue ( execute ( args ) . startsWith ( "usage" ) )
assertEquals ( "010101" , sut . getDateOfBirth ( ) )
Assert . assertEquals ( 0 , allRes . size ( ) )
Assert . assertEquals ( "Session Application-Id should be the same as indicated." , SLh_APPID , sessionAppId )
runner . assertTransferCount ( QueryRecord . REL_FAILURE , 1 )
Assert . assertEquals ( "Incorrect mandatory message returned" , msg , diags . get ( 0 ) . getDescription ( ) )
assertThat ( newStart , equalTo ( IntraDayDate . create ( new LocalDate ( 2009 , 1 , 19 ) , hours ( 1 ) ) ) )
assertNotNull ( pathToTest . getFileSystem ( ) . getSeparator ( ) )
assertEquals ( Rect . centeredRect ( 10 , 20 , 30 , 40 ) , g1 . getBounds ( ) )
assertThat ( isValid , is ( true ) )
assertEquals ( UriStatus . VALID_UNVERSIONED , manager . validateRenderingUri ( uri ) )
assertEquals ( expResult , result )
assertThat ( tuple . getIntegerOrDefault ( "field" , 2 ) , equalTo ( 2 ) )
Assert . assertEquals ( expectedTree , serialized )
assertEquals ( "scenario name" , runner . getDescription ( ) . getDisplayName ( ) )
assertEquals ( "Response uploads should be equal to the mocked uploads" , mockedFileInfos , responseFileInfos )
assertEquals ( expected , elements )
assertNotNull ( mqttConnectOptions )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertGoAwayFrame ( frame , lastStreamId , errorCode )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
Assert . assertFalse ( new LogAdapter ( "logger.name.here" , mockConfigCompact ( ) ) . isDebugEnabled ( ) )
Assert . assertEquals ( 2 , res . size ( ) )
assertEquals ( body . toString ( ) , "error 4 test error" )
assertEquals ( entry1 . getRequest ( ) , queue . peek ( ) . getRequest ( ) )
assertTrue ( readCount == TEST_SIZE )
assertRequestDoesNotMatch ( "foo" )
assertEquals ( Status . FAIL , jxm . getStatus ( ) )
assertThat ( map . size ( ) , is ( 0 ) )
assertThat ( rbenvRubyRuntimeLocatorService . isInstalled ( ) , equalTo ( true ) )
TestUtils . assertPropertyChangeEvent ( report , "visibleColumnCount" , count , count + 1 )
assertOut ( "a = '' + '' + '' + ''" )
Assert . assertThat ( message , containsString ( "contained" ) )
assertThat ( f . getAbsolutePath ( ) , startsWith ( filter . getAbsolutePath ( ) ) )
assertEquals ( State . PARTIAL , result )
assertEquals ( 0 , result )
assertThat ( "Expceted principal not found" , rmap , hasItem ( KERMIT_PRINCIPAL ) )
assertEquals ( expected , service . getSignatureMethod ( ) )
assertOut ( "var a:String = unescape('%25')" )
assertEquals ( CALCULATED_LENGTH , binary . length , prepare ( object ) )
assertEquals ( - 1234f , ConfigUtils . getFloat ( config , 0 , "some-number" ) , 0.1f )
assertThat ( optionsByType . get ( Timeout . class ) , is ( timeout ) )
assertEquals ( 0 , exitCode )
assertEquals ( 0 , historicIncidents )
assertTrue ( result , result . contains ( "\nfieldName=foreign\nforeign=true\n" ) )
assertArrayEquals ( expectedFamilies , actualFamilies )
assertNull ( personName )
assertEquals ( "Expected 3 results!" , 3 , n )
assertSeen ( visible )
assertTrue ( matched )
assertThat ( state . isEnabled ( ) , equalTo ( false ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 10" ) )
assertEquals ( isTouched , true )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . ACTIVITIES_UPDATE , ScopePathType . ORCID_WORKS_UPDATE , ScopePathType . ORCID_WORKS_CREATE , ScopePathType . FUNDING_UPDATE , ScopePathType . FUNDING_CREATE , ScopePathType . AFFILIATIONS_UPDATE , ScopePathType . AFFILIATIONS_CREATE , ScopePathType . ORCID_PATENTS_CREATE , ScopePathType . ORCID_PATENTS_UPDATE , ScopePathType . PEER_REVIEW_UPDATE , ScopePathType . PEER_REVIEW_CREATE , ScopePathType . ACTIVITIES_UPDATE )
Assert . assertEquals ( 2 * before , after )
Assert . assertEquals ( 4 , ( ( java . util . concurrent . Callable ) result ) . call ( ) )
Assertions . assertNotNull ( docker , "should be passed as a parameter" )
assertEquals ( "Mismatched data" , expected , res )
assertNotNull ( DnsNameResolver . maybeChooseServiceConfig ( choice , new Random ( ) , "localhost" ) )
assertEquals ( 1 , TextFileUtils . getAmountOfNewlinesAtFileEnd ( file0 ) )
assertTrue ( "package not build" , new File ( "target/test-classes/test.deb" ) . exists ( ) )
Assert . assertFalse ( res . isPresent ( ) )
assertEquals ( expResult , result )
assertEqualsIgnoreWhitespace ( expected , drl )
assertThat ( count , is ( equalTo ( 1L ) ) )
assertThat ( duration . dividedBy ( - 3 ) , equalTo ( TimeDuration . ofSeconds ( - 0.4 ) ) )
assertNotEquals ( oid1 , oid2 )
assertEquals ( TargetType . PILLAR_EXACT , target . getType ( ) )
Assert . assertEquals ( nocp , cp0 )
assertFalse ( validator . validate ( "student" , ids ) . containsAll ( ids ) )
assertEquals ( conf . getRest ( ) . get ( 0 ) . getResource ( ) . get ( 0 ) . getType ( ) . toString ( ) , "Patient" )
Assert . assertEquals ( expectedResult , result )
assertSnake ( "       \n" + "   ��   \n" + "   ��   \n" + "   ��   \n" + "       \n" + "       \n" + "       \n" )
assertEquals ( expected , arguments . profilers )
Assert . assertEquals ( expected , testIndex . findConc ( "(c:'NOTININDEX')? a:[] 'aap' b:[] :: c -> a.word = b.word" ) )
assertEquals ( Arrays . asList ( "Div" , "Nom" , "StrMap" ) , ObjectInspector . list ( jmxObject ) )
assertThat ( DoubleUtil . toDouble ( i ) . doubleValue ( ) , is ( 1d ) )
assertDtos ( expected , actual )
assertEquals ( ImmutableList . of ( - 5.0 ) , renderNode ( invertNode ) )
assertTrue ( output . contains ( "'TIMEZONE'='GMT+2'" ) )
Assert . assertEquals ( csvString , "\"col1\",\"col2\"\n\"val1\",\"val2\"\n\"val3\",\"val4\"\n" )
assertEquals ( "The count of open popups should be one" , 1 , count )
Assert . assertNotNull ( mat )
assertTrue ( entity . getId ( ) > 0L && ! entity . isAwesome ( ) )
Assert . assertEquals ( b , a . removeRow ( 1 ) )
assertFalse ( validator . isValid ( max + positiveInteger ( ) + "" , null ) )
Assert . assertEquals ( "http://foo.com/one/two/three" , result )
assertEquals ( "File to string example" , fileContents )
Assert . assertNull ( actualNode )
assertEquals ( "ISA*00*          *00*          *ZZ*SENDERID       *ZZ*RECEIVERID    *030409*0701*U*00401*0000000001*0*T*:^" + "GS*1212*SENDERID*RECEIVERID*0701*000000001*X*00401^" + "ST*835*000000001^" + "BPR*DATA*NOT*VALID*RANDOM*TEXT^" + "TRN*1*0000000000*1999999999^" + "DTM*111*20090915^" + "N1*PR*ALWAYS INSURANCE COMPANY^" + "N7*AROUND THE CORNER^" + "N4*SHINE CITY*GREEN STATE*ZIP^" + "REF*DT*435864864^" + "N1*PE*FI*888888888*P.O.BOX 456*SHINE CITY*GREEN STATE*ZIP*EARTH^" + "LX*1^" + "CLP*PCN123456789**5555.55**CCN987654321^" + "CAS*PR*909099*100.00^" + "NM1*QC*1*PATIENT*TREATED*ONE***34*333333333^" + "DTM*273*20020824^" + "AMT*A1*10.10^" + "AMT*A2*20.20^" + "LX*2^" + "CLP*PCN123456789**4444.44**CCN987654321^" + "CAS*PR*909099*200.00^" + "NM1*QC*1*PATIENT*TREATED*TWO***34*444444444^" + "DTM*273*20020824^" + "AMT*A1*30.30^" + "AMT*A2*40.40^" + "SE*24*000000001^" + "GE*1*000000001^" + "IEA*1*000000001^" , x12 . toString ( ) )
assertEquals ( "Results were not in the order of the provided keys" , keys . get ( index ) , bytes )
assertEquals ( expected , bos . toString ( ) )
assertTrue ( getString ( baos ) . contains ( needleToFind ) )
assertFalse ( c . remove ( "sadsdf" , null ) )
assertThat ( method . invoke ( obj , "self" ) , is ( ( Object ) "self" ) )
assertEquals ( new String ( Base64 . decodeBase64 ( ANDROID_CONFIG_CONTENT ) , Charsets . UTF_8 ) , content )
assertEquals ( "uses V.W;\n" , modelWriter . toString ( ) )
assertEquals ( firstInvocation , secondInvocation )
GwtAssertions . assertThat ( a )
assertFalse ( b )
assertEquals ( violation . getMessage ( ) , "Message is {escaped}" )
assertTrue ( XMLUnit . compareXML ( result ( "xquery/string-q1.xml" ) , zapResult ) . similar ( ) )
assertEquals ( field . getSqlName ( ) , "Table.Field" )
assertThat ( messages . getList ( ) , is ( Arrays . asList ( msg1 , msg2 ) ) )
assertTrue ( permissionEvaluator . hasBranchPermission ( authentication , "project" , "branch" , Permission . EDIT_PAGE ) )
assertEquals ( "[9, 8, 7, 6, 5, 4, 3, 2, 1]" , Arrays . toString ( dataReversed ) )
assertEquals ( 15 , cap . get ( 0 ) )
assertEquals ( 2 , ( long ) sut . execute ( new UsageMetricDailyStreamInfoRequest ( april4th , streamScopeId ) ) )
assertEquals ( expectedPlan , actualPlan )
assertEquals ( test1 . toHexString ( ) , test2 . toHexString ( ) )
assertXMLIdentical ( new Diff ( result , combineWithKey ( "name" , recessive , dominant ) ) , true )
assertNotNull ( assertionDocument )
assertTrue ( actual . isEmpty ( ) )
assertEquals ( comp , array )
assertEquals ( v21Fundings1 , v21Fundings2 )
assertArrayEquals ( expectedFamilies , actualFamilies )
assertTrue ( "testIsModelNominalLabelExists" , exists )
assertEquals ( 200 , status . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( matches )
Assert . assertTrue ( response . isSuccessful ( ) )
assertSizes ( validator , char [ ] . class )
assertEquals ( "testutils/calculator.wsdl" , info . getWsdlLocation ( ) )
assertTrue ( interceptor . preHandle ( request , null , null ) )
assertThat ( violations . size ( ) , is ( 1 ) )
assertEquals ( this . viTlv , tlvsBuilder . getVendorInformationTlv ( ) . get ( 0 ) )
Assert . assertEquals ( expected , testIndex . findConc ( "a:[] 'aap' b:[] :: a.word = b.lemma & a.word = b.pos" ) )
assertThat ( found , nullValue ( ) )
assertAllGoodAfterRemovePauses ( )
assertTrue ( Cells . isEmpty ( cell ) )
assertEquals ( expResult , result , 0.0001 )
assertEquals ( expected , actual )
assertEquals ( 0 , actual . size ( ) )
assertThat ( output . readKeyValuesToMap ( ) , equalTo ( expectedOutput ) )
Assert . assertTrue ( processor . getSupportedAnnotationTypes ( ) . contains ( AlexaIntentListener . class . getTypeName ( ) ) )
assertThat ( errors , hasFieldErrors ( "givenName" , "Patient.names.required.given.family" ) )
assertEquals ( 0x00FFFF , result . getVoxel ( 0 , 4 , 0 ) , .01 )
assertTrue ( ml . isEmpty ( ) )
assertEquals ( JreVersion . Java_9 , version )
assertThat ( dest . ddd , is ( 1000 ) )
assertEquals ( expected , actual )
assertSame ( INITIATIVE_PUBLIC , result )
assertEquals ( false , isEmpty )
assertTrue ( service . publish ( "message" ) )
assertEquals ( solution , newSolution )
assertTrue ( infoValidator . validate ( info ) )
assertNonLLStar ( g , altsWithRecursion )
assertEquals ( "http://test.com/1?a=&b=" , HttpRequest . append ( "http://test.com/1" , params ) )
assertEquals ( "[= foo]" , m . toString ( ) )
Assert . assertTrue ( zero . isZero ( ) )
Assert . assertTrue ( written . contains ( "<exclude name=\"MockRule2\"" ) )
assertScoreAndParse ( content , null , 2 )
assertFalse ( "Unable to update non existing user" , success )
Assert . assertEquals ( "GET" , s )
assertThat ( WorkflowStatus . statusType ( stageInProgress ) , is ( StatusType . RUNNING ) )
assertTrue ( BufferedImageComparer . isRGBSimilar ( sourceImage , img ) )
assertEquals ( 0 , delta )
assertEquals ( commentObject . getCommentUuid ( ) , commentUuid )
assertThat ( config . getDefaultCharset ( ) , equalTo ( charset ) )
assertThat ( result , is ( "GRS rebuild started" ) )
assertCallTree ( callTree , callStack . getStackEvents ( ) , true )
assertThat ( uri , equalTo ( url + "?media=xml" ) )
Assert . assertEquals ( icmsSetado , icms . getIcmsst ( ) )
assertEquals ( openInterest , instance . getOpenInterest ( ) )
assertEquals ( "Hello ^^ John" , ResponseBodyInterpolator . interpolate ( "Hello ^^ :name" , req ) )
assertThat ( stateStore . size ( ) , equalTo ( 0L ) )
arrays . assertIsSorted ( description , null )
assertFalse ( checker . isFormat ( handle ) )
assertThat ( map . get ( "Changeset" ) , is ( "12492" ) )
assertEquals ( expected , result )
assertEquals ( 1 , constraintViolations . size ( ) )
assertTrue ( Arrays . equals ( a , ( Object [ ] ) ElsaSerializerBaseTest . clone ( a ) ) )
Assert . assertNull ( "Should be null for option with null code" , SelectListUtil . getOptionWithMatching ( options , "A" ) )
assertLogContains ( "Tests summary: 1 suite, 2 tests" )
assertTrue ( reference instanceof WeakReference )
assertEquals ( asList ( "0" , "1" , "2" , "3" , "4" , "5" , "6" , "7" ) , mp . getParameters ( ) )
assertEquals ( sessionInfo . getIdentity ( ) . getIdentifier ( ) , username )
assertEquals ( "X-NaN-02-01" , dateSortString )
Assert . assertEquals ( "Should out of memory when i = " + 8 , i , 8 )
assertEquals ( hashCode , "253ac1b8" )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , n ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertE ( "  4 " + "    " + "    " + "    " )
assertEquals ( assertion , base )
assertSame ( aggregateRoot , a )
assertNull ( event . get ( ) )
assertEquals ( - 10 , testApp . executeApplication ( args ) )
assertTrue ( result . hasErrors ( ) )
assertEquals ( 0 , received . length )
assertSame ( root , transform ( root ) )
assertEquals ( ImmutableVariantScore . of ( ReadType . REF , 10 ) , SamRecordScoring . getVariantScore ( ref , SNV ) )
Assert . assertArrayEquals ( list . toArray ( ) , ListUtil . valueToLowerCase ( list ) . toArray ( ) )
assertEquals ( "true is true" , aviatorBoolean . add ( aviatorString , createEnvWith ( "s" , " is true" ) ) . getValue ( null ) )
assertThat ( "Event did not return correct event type" , listener . getEvents ( ) . get ( 0 ) . getType ( ) , is ( Event . NODE_ADDED ) )
Assert . assertEquals ( numeroControleFCI , produto . getNumeroControleFCI ( ) )
Assert . assertEquals ( Object . class , t . getType ( ) )
assertEquals ( Quote . ALL , formatWithQuotePolicy . getQuotePolicy ( ) )
assertTrue ( propertiesManager . getPropertyChangeListeners ( ) . isEmpty ( ) )
Assert . assertEquals ( 1 , get . getVersion ( ) )
assertEquals ( "abc" , subject . getCurrentState ( ) . getID ( ) )
assertThat ( result , equalTo ( SAT . ordinal ( ) ) )
assertPlanMatches ( expected )
assertThatSql ( query , is ( "SELECT t1.c1, t2.c2 FROM table1 AS t1 INNER JOIN table2 AS t2 ON t1.c0 = t2.c0" ) )
assertEquals ( 0 , ix . count ( null , null ) )
assertFalse ( schema . hasIndices ( ) )
assertThat ( readElement , is ( new User ( "alex" , "soto" ) ) )
assertEquals ( "Input " + v + " does not match output " + o , v , o )
assertEquals ( Reflect . on ( object ) . hashCode ( ) , object . hashCode ( ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( 5 , products . size ( ) )
Assert . assertNotNull ( dbMap )
assertEquals ( other , dir . getLastModified ( ) )
assertEquals ( 2 , s . getRequiredSkills ( ) . values ( ) . size ( ) )
context . assertEquals ( patternStr , pH . toString ( ) )
assertEquals ( expectedColumnCombination , statistic . getColumnCombination ( ) )
assertThat ( step . getResult ( ) , is ( TestResult . SUCCESS ) )
assertThat ( result . toBase64Encode ( ) , is ( "bnVsbDpudWxs" ) )
assertThat ( result , is ( false ) )
assertEquals ( "{\"a\":[0,2]}" , n )
Assert . assertNotNull ( entityManager )
assertTrue ( downloader . waitForReportReady ( ) )
assertNoViewCalls ( )
runner . assertAllFlowFilesTransferred ( PutHDFS . REL_FAILURE )
assertEquals ( expected , this . output . toString ( ) )
assertThat ( "Some elements were not added." , index . getSize ( ) , equalTo ( 2 ) )
assertFalse ( messageSent )
assertThat ( hybrid2 , is ( sameInstance ( hybrid ) ) )
Assert . assertNotNull ( builderFactory . createArrayBuilder ( ) )
assertEquals ( expected , actual )
Assert . assertFalse ( artifactFilter . match ( getArtifact ( ) ) )
assertEquals ( timeFrameEditor . isFirstMonthAvailable ( ) , false )
assertNotNull ( result )
assertThat ( returned , is ( result ) )
assertTrue ( peerAcceptanceUtil . isPeerInterestedOnRemoteClient ( clientID . getServiceID ( ) ) )
assertEquals ( "Failed Matching" , VersionMatchResult . REJECTED , p . matches ( info ) )
assertEquals ( "MYD13A2" , typeString )
assertTrue ( hasActivityIn ( solution . getRoutes ( ) . iterator ( ) . next ( ) , "s2" ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
Assert . assertEquals ( actualDependencies , expectedDependencies , "Unexpected dependencies for process: " + inputFeedToTest )
assertEquals ( "File transfer request" , shadowDialog . getTitle ( ) )
Assert . assertTrue ( createdEventFired )
Assert . assertEquals ( "http://example.com/{#foo*}" , template . getTemplate ( ) )
assertThat ( gtx . get ( Hoge . class , hoge . getKey ( ) , 1 ) , is ( notNullValue ( ) ) )
assertThat ( regionalBreweries , hasItems ( containsString ( "Brew" ) , endsWith ( "y" ) ) )
assertFalse ( isPropertyValueSet )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertNotNull ( informe . getId ( ) )
assertEquals ( "Expected 0 results!" , 0 , count )
assertTrue ( vRoute . getStart ( ) . getLocation ( ) . getId ( ) . equals ( "start" ) )
assertEcssEquals ( ".menu{left:\"#{notemptya4jSkin.menu1?'10px':''}\";}" , convertFragment ( xcss ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertEquals ( expected , elements )
assertEquals ( Constants . KB , mInfo . getLength ( ) )
assertEquals ( "Java" , optionalFramework . get ( ) . name )
assertThat ( result , is ( "http://localhost:8080/test" ) )
assertEquals ( result , one )
assertEquals ( 0 , v . get ( ) . length )
assertEquals ( "vZtaWIw-zw95JNzzURg1YB7mWNLlm44YZDZzhrPNetM" , thumbprint )
assertThat ( pattern . matchAsExclusive ( "Test.class" , "method" ) , is ( false ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , empty ( ) )
assertTrue ( sf . getSocketCreated ( ) )
statusChecker . assertContainsMatch ( Status . ERROR , "File property must be set before any triggeringPolicy " )
assertNotNull ( Country . reader ( ) . read ( ) )
assertNotNull ( instance )
Assert . assertNotNull ( object )
assertEquals ( "index--" , expr . getParameterValue ( ) )
Assert . assertEquals ( Integer . valueOf ( 1 ) , variablesUsageA . get ( "a" ) )
assertTrue ( resultComparator . compare ( ucc1 , ucc2 ) < 0 )
assertNull ( request . getVisitorCountry ( ) )
assertTrue ( cleanExit )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEqualDoubleVectors ( pyinv , inv , epsilon )
assertEquals ( expected , actual )
assertThat ( Functions . bondBasedDBStereo ( g ) . toSmiles ( ) , is ( "CC=[C@]=CC" ) )
assertEquals ( date . toInstant ( ) , deserializedDate )
assertThat ( resultedQuery , is ( expectedQuery ) )
assertThat ( transitioningEncryptor . checkPassword ( singleCharacterPwd , encryptedPassword ) , is ( true ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFInfoEventoCartaCorrecao ( ) . toString ( ) )
assertTrue ( additions . isEmpty ( ) )
assertEquals ( map , map2 )
assertEquals ( "a" , Util . getName ( mock ) )
assertThat ( g . getTitle ( ) , is ( "ethanol" ) )
assertEquals ( 0 , buffer . length ( ) )
assertNotNull ( entities )
Assert . assertNotNull ( geocodingServlet )
assertEquals ( expected , d_riskRatio . getError ( ) , 0.00001 )
assertThat ( this . start . plus ( period ) , is ( this . end ) )
assertTrue ( hasReset )
assertEquals ( TestUtil . HTTP_TEST_PROXY , result . get ( 0 ) )
assertSame ( shouldFind , selection . fileSelects ( By . id ( "test" ) ) )
context . assertIsSatisfied ( )
assertEquals ( "" , query . toString ( ) )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertEquals ( "X" , res . get ( "foo" ) )
assertEquals ( "text/html; charset=UTF-8" , headers . get ( "Content-Type" ) . iterator ( ) . next ( ) )
assertEquals ( "user_id userId,user_name userName,pwd pwd" , t . getColumnsSql ( ) )
assertEquals ( 12800000f , sum , 0.01f )
assertEquals ( buildValue ( i ) , new String ( value . getBytes ( ) , 0 , value . getLength ( ) ) )
assertFalse ( listMultipartFormDataMessageBodyReader . isReadable ( type , genericType , new Annotation [ 0 ] , null ) )
assertEquals ( UNAUTHORIZED_401 , response . getStatus ( ) )
Assert . assertEquals ( value , writeTest ( kernelServices , "max-permgen-size" , value ) )
assertEquals ( "failed with seed: " + seed , expected , actual )
assertEquals ( false , result )
assertTemplateEvaluatesTo ( "1, 2, 4" )
classes . assertIsAbstract ( someInfo ( ) , actual )
assertFalse ( new BytecodeAnnotationBuilder ( true ) . sanityCheckBranch ( instrAaload ) )
assertEquals ( 0.5 , comp . compare ( "41.5,27.2" , "41.5127.21" ) )
assertActive ( player1 , player2 , player3 , player4 )
Assert . assertTrue ( "The list is not ordered descending" , sortedAges . equals ( ages ) )
Assert . assertTrue ( zero . isZero ( ) )
Assert . assertEquals ( "bla" , retinaCookieValue )
assertFalse ( a . isThereChanges ( b ) )
assertThat ( result . isEmpty ( ) , is ( true ) )
assertEquals ( expResult , result )
Assert . assertTrue ( offlineMsg2 . getStatus ( ) == MessageStatus . READ )
assertions . isNotEqualByComparingTo ( actual )
assertTrue ( result )
assertCollection ( collection )
Assert . assertTrue ( result == null )
assertNotNull ( "getHTTPTime should return a non-null value for " + randomExpirationTime + " days" , Cookie . getHTTPTime ( randomExpirationTime ) )
assertTrue ( "Repository should contain newly added statement" , testCon . hasStatement ( bob , name , nameBob , false ) )
assertNotNull ( writer )
assertNotNull ( "Must not allow using a defaultSchemaName that is different from the DB user's login schema." , caughtException )
assertEquals ( 18 , fileInBytes . length )
assertEquals ( - 2d * Math . cos ( Math . E ) , e . evaluate ( ) , 0d )
assertThat ( RpslObjectFilter . diff ( original , updated ) , is ( "@@ -1,4 +1,2 @@\n" + " mntner:         UPD-MNT\n" + "-description:    descr\n" + "-mnt-by:         UPD-MNT\n" + " source:         TEST\n" ) )
assertTrue ( filter . allow ( event , listener ) )
Assert . assertEquals ( "SELECT 3 * 5;" , text )
assertEquals ( expResult , result )
assertEquals ( expected , stats )
assertEquals ( ValidationResult . Result . OK , vr . getStatus ( ) )
assertSame ( expected , result )
Assert . assertEquals ( 2 , result . size ( ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 8 )
assertNotNull ( "ClientContact is null" , entity )
assertNull ( endTime )
Assert . assertEquals ( sortStringToList ( getElement ( "OBX.3" , "CE.1" ) . trim ( ) ) , sortStringToList ( stringBuilder . toString ( ) ) )
assertThat ( results . subList ( 0 , 5 ) , is ( Arrays . asList ( ProcessHadoopScriptHandler . CLEANUP_STAGE_CLASS , "tbatch" , "tflow" , "texec" , context . getArgumentsAsString ( ) ) ) )
Assert . assertEquals ( THIRTEEN_SHORT , pi . getThirteenShort ( ) )
assertEqualsQL ( Ar , ql . factor ( new DenseMatrix ( Ar ) ) )
assertThat ( definition . getTenantId ( ) , is ( TENANT_ONE ) )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , "test; foo=\"bar\"; uuid=\"" + uuid . toString ( ) + "\"" )
assertNull ( oAuth2AccessToken )
Assert . assertEquals ( expectedXML , actualXML )
assertEquals ( 3 , map . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertThat ( toType , is ( equalTo ( new QName ( "java:java.lang.String" ) ) ) )
assertNotNull ( waitOn ( browser , 6000 ) . untilRemoved ( By . id ( "wait-if" ) ) )
assertPermanentCount ( playerA , "Myr Enforcer" , 3 )
assertRelativeEffectEqual ( expected , actual )
assertEquals ( "foo=bar" , capt . getAllValues ( ) . get ( 0 ) . getFirstHeader ( "Cookie" ) . getValue ( ) )
assertTrue ( violations . hasNext ( ) )
assertTrue ( Arrays . equals ( getPacketData ( "AA 00 02 01 04 01 00 00 00 00 00" ) , request . serialize ( ) ) )
Assert . assertNotNull ( foo )
assertThat ( processors . size ( ) , equalTo ( 0 ) )
assertEquals ( "000000000000000000000000000000000000ffff7f000001208d" , Utils . bytesToHexString ( pa . bitcoinSerialize ( ) ) )
Assert . assertEquals ( "https://automated-testing.visualstudio.com:443/" , actual )
assertFalse ( ex . canBeDividedby3 ( "-" ) )
assertEquals ( "1" , parameters . get ( "key" ) )
assertEquals ( 5 , points )
assertThat ( provider , instanceOf ( AuthSchemeProvider . class ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
Assert . assertTrue ( isValid ( resp , FORMAT_JSON , true , 1 ) , "Response is not valid" )
assertThat ( list . first ( ) , is ( "a" ) )
Assert . fail ( )
assertEquals ( expectedSchema , AvroTypeConverter . convertToAvro ( TalendType . STRING , null ) )
Assert . assertEquals ( 1 , size )
assertNull ( "An empty byte array should be translated to null" , ser . fromByteBuffer ( ByteBuffer . wrap ( new byte [ 0 ] ) ) )
Assert . assertEquals ( asDTO . getPassengerCount ( ) , 500 )
MatcherAssert . assertThat ( new SingleFormLexeme ( dude ) . defaultSpelling ( ) . string ( ) , CoreMatchers . equalTo ( dude ) )
Assert . assertEquals ( expectedHash , computedHash )
Assert . assertEquals ( "SELECT 3 - 5;" , text )
Assert . assertEquals ( TestHelper . getPoint ( 30 , 10 , 10 ) , result . getValue ( ) )
assertEquals ( "" , string )
assertTrue ( "Failed to create appending stream" , new String ( buf , 0 , buf . length ) . equals ( "HI" + fileString ) )
assertTrue ( 1 == lambda . apply ( 0 ) )
assertEquals ( "1/one/two" , facets . get ( 1 ) )
assertEquals ( new Values ( true , null , null , true , true , true , true , false , null ) , v )
assertEquals ( "Expected " + expectedQuery + " but was " + newQuery , expectedQuery , newQuery )
assertEquals ( "" , result )
assertEquals ( "field.keys()" , p . toString ( ) )
Assert . assertEquals ( beforeNumTasks , getDefaultQueue ( ) . fetchStatistics ( ) . getNumTasks ( ) )
assertTrue ( g1 instanceof PublicCloneable )
assertThat ( DoubleUtil . toDouble ( i ) . doubleValue ( ) , is ( 1d ) )
Assert . assertTrue ( Math . abs ( vega - vegaFiniteDiffAnalytic ) < 1E-01 )
Assert . assertEquals ( "Fail find by romm ID and room member" , whitelistExist . getRoom_member ( ) , cr . getRoom_member ( ) )
assertEquals ( "" , result )
assertThat ( interfaceNames , containsInAnyOrder ( "Interface1" , "Interface2" , "Interface3" ) )
assertFalse ( zeroEuros . hashCode ( ) == zeroDollars . hashCode ( ) )
assertNotNull ( entity . getId ( ) )
assertFalse ( isValid )
assertNull ( found )
assertTrue ( EXPECTED_DS_INDEX_MSG + " instead got " + e . toString ( ) , e instanceof DatastoreNeedIndexException )
assertTrue ( handler . wrongContentType ( wrongContentType ) )
Assert . assertEquals ( null , ( Long ) a . v )
assertThat ( result , equalTo ( v + "-" + s ) )
assertArrayEquals ( new String [ ] { "55555" , "4444" , "333" , "22" , "1" } , strings )
assertEquals ( tropo . text ( ) , "{\"tropo\":[{\"transfer\":{\"to\":\"tel:+14157044517\",\"allowSignals\":[\"exit\",\"stopHold\"]}}]}" )
Assert . assertEquals ( "password/change/expired" , view )
assertIs ( 14 , score )
assertTrue ( latch . await ( 2 , SECONDS ) )
assertEquals ( "Count of customer" , 0 , res )
Assert . assertTrue ( this . manager . remove ( this . family1 ) )
assertEquals ( Property . INSTANCE_SECRET . getDefaultValue ( ) , accClientConf . get ( Property . INSTANCE_SECRET ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( config . getUserID ( ) , result . getUserID ( ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "A" , 0.234 , 1.0 ) ) )
assertTrue ( kb . hasErrors ( ) )
assertThat ( value , is ( "test_value" ) )
assertThat ( authorities . stream ( ) . map ( a -> a . getAuthority ( ) ) . collect ( Collectors . toList ( ) ) , containsInAnyOrder ( WebSecurityConfiguration . ADMIN_GRANT , WebSecurityConfiguration . AUTHENTICATED_GRANT ) )
assertEquals ( testCardList . get ( 0 ) , testCard )
assertEquals ( "Longitude is not properly parsed" , 5d , mapper . readLongitude ( columns ) , 0 )
assertThat ( foo . getBar ( ) , sameInstance ( bar ) )
Assert . assertFalse ( types . isEmpty ( ) )
assertThatClassExpressionIsTranslatedAs ( classExpression , initialStateAsserted , expectedPropertyValue )
assertEquals ( null , result )
Assert . assertEquals ( projectorForward . getTranscriptStartingAtCDS ( ) , resultTranscript )
assertTrue ( clippedGeometry == null )
assertTrue ( WroUtil . matchesUrl ( request , "wroApi/test" ) )
assertAllTargetsCount ( 0 )
assertNull ( map . getFirst ( new LeftTupleImpl ( stiltonHandle , null , true ) ) )
assertThat ( get , isAllowed ( ) )
assertFalse ( property . toStringValues ( ) . isEmpty ( ) )
assertEquals ( 1 , childCount )
assertTrue ( "MyApp.app folder is missing in AppstoreUploadFile." , files . length == 1 && files [ 0 ] . getName ( ) . equals ( "MyApp.app" ) )
Assert . assertNull ( obs . getFormFieldNamespace ( ) )
assertEquals ( "[1080:0:0:0:8:800:200c:417a]:0" , StringUtils . formatSocket ( socket ) )
assertThat ( log , instanceOf ( NoLoggingImpl . class ) )
assertFalse ( "Parental guide list is empty for " + imdbId , result . isEmpty ( ) )
assertEquals ( 1 , found . size ( ) )
Assert . assertTrue ( kernelServices . isSuccessfulBoot ( ) )
assertEquals ( "cabbage" , out )
assertEquals ( 0 , p . getMaskGroup ( ) . getNodeCount ( ) )
assertEquals ( ChargingCapability . V_240V_3_PHASE_16A , ChargingCapability . fromConnector ( connector ) )
assertOut ( "a.setMinutes(10)" )
assertEquals ( register , newRegister )
assertCSVEquals ( "Incorrect query result" , result , new String [ ] { "s" , "p" , "o" } , new String [ ] { "ex://s" , "ex://p" , "o" } )
Assert . assertTrue ( isValidUuid ( id ) )
assertEquals ( "{" + newLine ( ) + "    modify ($p) { name = \"Luca\" };" + newLine ( ) + "}" , printConstraint ( expression ) )
Assert . assertEquals ( record . get ( "name" ) . toString ( ) , decoded . get ( "name" ) . toString ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertNull ( res )
Assert . assertArrayEquals ( cmpAlignAndMeet , outAlignAndMeet )
assertByteArraysEquals ( new byte [ ] { 0x61 , 0x62 , 0x63 } , out . toByteArray ( ) )
Assert . assertEquals ( 6 , count )
assertThat ( mustache . render ( Arrays . EMPTY_OBJECT_ARRAY ) , is ( "label.unknown" ) )
assertThat ( damageComponent . getDamage ( ) , IsEqual . equalTo ( 560f ) )
assertRecord ( record )
editor . assertContextualCompletions ( c -> c . getLabel ( ) . equals ( "�� jobs" ) , "jo<*>" , "  jobs:\n" + "  - name: $1\n" + "    release: $2<*>" )
Assert . assertEquals ( "Drop what?!?!" , responseResult . getText ( ) )
assertChangeListContains ( ontologyChange )
Assert . assertTrue ( "gpiano3.wav" . equals ( ( ( JsonObject ) ( ( JsonArray ) ( ( JsonObject ) result ) . get ( "piano" ) ) . get ( 0 ) ) . get ( "name" ) . getAsString ( ) ) )
assertEquals ( expected , actual )
assertNotEquals ( originalEdgeValue , decodedEdgeValue )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertNotNull ( result )
assertTrue ( endpointNode . exists ( ) )
runner . assertValid ( )
Assert . assertEquals ( "Convert Array value should be equal" , CONVERT_RESULT , TreeItemUtil . convertDataToSet ( data ) )
Assert . assertTrue ( RestUtil . ipMatches ( "fe80::202:b3ff:fe1e:8329" , candidateIps ) )
assertEquals ( expected , actual )
assertEquals ( 1 , search . getSize ( ) )
assertViewName ( mav , "redirect:/topics/1" )
Assert . assertEquals ( 0 , first . compareTo ( second ) )
assertArrayEquals ( expected , actual . getHandsComp ( ) )
Assert . fail ( "Test encountered an unexpected exception." )
assertTokenSurfacesEquals ( Arrays . asList ( "iPhone4 S" ) , tokenizer . tokenize ( input ) )
assertThat ( configuration . getECMAVersion ( ) , equalTo ( Config . LanguageMode . ECMASCRIPT7 ) )
assertThat ( ListNumbers . binarySearchValueOrHigher ( values , 2 ) , equalTo ( 9 ) )
arrays . assertContains ( description , new short [ 6 ] , ( short ) 3 , null )
assertTrue ( "DataSeriesItem.isCustomized() was false after serialization" , outputDataSeriesItem . isCustomized ( ) )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertSame ( expr . accept ( visitor ) , visitResult )
assertThat ( val , is ( equalTo ( "something" ) ) )
Assert . assertNotNull ( account )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( 5L ) , mapper . readBitemporalDate ( columns , "vtFrom" ) )
assertEquals ( "" , result )
Assert . assertEquals ( 1 , events . size ( ) )
assertThat ( d . doGetTags ( ) , containsInAnyOrder ( new TagImpl ( "salesforce" , CommonTags . CLOUD_TAG ) , new TagImpl ( "salesforce" , CommonTags . BUSINESS_TAG ) ) )
assertThat ( control . matches ( "/clientsWhatever" ) , is ( equalTo ( true ) ) )
MatcherAssert . assertThat ( root , Matchers . hasToString ( Matchers . containsString ( "failed to load 'junit-broken:" ) ) )
assertEquals ( 1 , index . estimateTotalCount ( ) )
assertEquals ( this . toBaseString ( objects ) + "[{" + this . toBaseString ( objects ) + "}]" , ToStringBuilder . reflectionToString ( objects ) )
assertUnderflow ( new BigDecimal ( x ) . divide ( new BigDecimal ( y ) ) , result , x / y )
assertResponse ( DataMockery . createOPTIONSResponse ( ) , response )
assertEquals ( "scoreHolder.addHardConstraintMatch(kcontext, -1)" , marshaledAction )
assertEquals ( result . size ( ) , 2 )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectType: org.opendaylight.yang.gen.v1.urn" + ".opendaylight.openflow.protocol.rev130731.BarrierInput" , key1 . toString ( ) )
assertEquals ( 1 , model . getObject ( ) . getPersons ( ) . size ( ) )
assertEquals ( "blue" , proxy . getColor ( ) )
assertThat ( resolved , contains ( "-P" , "a" , "A" , "-P" , "b" , "B" , "-P" , "c" , "C" ) )
assertThat ( iface , _isA ( IFaceImpl . class ) )
assertNotNull ( ui . getErrorInternalFrame ( new JPanel ( ) ) )
assertEquals ( "34 + 2\n" , found )
assertFalse ( item1 . equals ( item2 ) )
assertEquals ( actualCountPostsToTopics , listCountPostsToTopics )
Assert . assertNotNull ( entityManager )
assertEquals ( 10 , ZippelGCD ( aL , bL ) . size ( ) )
assertEquals ( 10.5d , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
assertFileContentEquals ( inputFile , expectedFile )
assertLabelQueryResult ( query . toString ( ) , both ( binds ( "p" , URI . class ) ) . and ( binds ( "pLabel" , Literal . class ) ) )
assertNotNull ( User . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEqualObjects ( cpuOuts . get ( 0 ) , gpuOuts . get ( 0 ) )
Assert . assertEquals ( "Hallo 'Test'" , I18N . tr ( "helloQuotesParam" , "Test" ) )
assertArrayEquals ( writeBytes , readBytes )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . APPLICATION_XML ) . get ( ) . getStatus ( ) )
assertEquals ( false , isEmpty )
assertTaskEvents ( task , 2 , TaskListener . EVENTNAME_ASSIGNMENT , TaskListener . EVENTNAME_CREATE )
assertEquals ( "key2=value12 key=value1 key=value2" , m . toString ( ) )
assertEquals ( "{" + newLine ( ) + "    delete($person);" + newLine ( ) + "}" , printConstraint ( expression ) )
Assert . assertEquals ( "Unable to process file" , result . getError ( ) )
assertNotNull ( "AO1 not found" , adminObject1 )
Assert . assertTrue ( ( "a =b%2C+&c=32626%26" ) . equals ( KeyValueFormatter . format ( params , true ) ) || ( "c=32626%26&a =b%2C+" ) . equals ( KeyValueFormatter . format ( params , true ) ) )
assertEquals ( ERROR_FACTORY_RESPONSE , handleResponse )
AvroAssertTestUtil . assertEqualsWithJsonIgnoreOrder ( outputDirPath , jsonOutputFile , DocumentMetadata . class )
assertEquals ( 1 , result . size ( ) )
assertUnion01Delta ( userDeltaUnion )
assertNotEquals ( command , null )
Assert . assertEquals ( 2 , terms . size ( ) )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertEquals ( 0 , result . size ( ) )
assertArrayEquals ( "Option value" , new String [ 0 ] , commandLine . getMultipleOption ( "array" ) )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 , 4 , 5 , 6 } , out . read ( queue , e ) . getInts ( ) )
assertEquals ( expected , omList )
authRule . assertScenario ( scenario )
assertThat ( subject . getById ( 1 ) . getRpslObject ( ) , is ( object1 ) )
assertEquals ( "From is not properly parsed" , new Date ( 5 ) , mapper . readFrom ( columns ) )
Assert . assertEquals ( 6. , analyser . getDistanceAtActivity ( route . getActivities ( ) . get ( 0 ) , route ) , 0.01 )
assertEquals ( Lists . newArrayList ( 1 ) , listBad )
assertTrue ( e instanceof ExprNone )
assertSuccess ( validationResult )
assertThat ( validationList , is ( Collections . < String > emptyList ( ) ) )
Assert . assertEquals ( "auto" , r . get ( String . class ) )
Assert . assertEquals ( "{\"@xmlns\":\"http://some-namespace\",\"$\":\"bob\"}" , result . toString ( ) )
Assert . assertTrue ( s . isEnabled ( ) )
assertArrayEquals ( new double [ ] { 1d } , StatisticUtils . determineStandardDeviationDoubles ( subSingleBenchmarkResultList , SimpleScore . of ( - 3 ) , subSingleBenchmarkResultList . size ( ) ) , DELTA )
assertEquals ( expected , result )
assertEquals ( expectedOffset , offset )
Assert . assertEquals ( "0" , entregaSemDataDefinida . getTipoPrazoDataEntrega ( ) . getCodigo ( ) )
assertions . containsSequence ( sequence )
assertDateEquals ( new DateTime ( 2013 , 5 , 1 , 0 , 0 , 0 , 0 ) , date )
assertAxisEquals ( - 10.0 , 0.0 , new double [ ] { - 10.0 , - 9.0 , - 8.0 , - 7.0 , - 6.0 , - 5.0 , - 4.0 , - 3.0 , - 2.0 , - 1.0 , 0.0 } , new String [ ] { "-10" , "-9" , "-8" , "-7" , "-6" , "-5" , "-4" , "-3" , "-2" , "-1" , "0" } , axis )
assertStatus ( 2 , expectedNumRows , expectedNumBytes , expectedReadBytes )
assertEquals ( null , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( childProject1 . getCustomWorkspace ( ) , childWorkspace )
assertEquals ( "3 屑�遥卸�谢写�� 斜冶��薪" , t . format ( new Date ( 0 ) ) )
assertEquals ( ComponentElementGetValue . FIELD_VALUES [ 1 ] , labelChangeValue . getText ( ) )
assertThat ( testOutcome . getResult ( ) , is ( TestResult . FAILURE ) )
assertEquals ( "_all/_count" , count . getURI ( ElasticsearchVersion . UNKNOWN ) )
Assert . assertFalse ( component . isValid ( ) )
Assert . fail ( )
Assert . assertNotNull ( "URL not null" , resurl )
assertFalse ( b1 . equals ( b2 ) )
assertEquals ( AuthenticationMechanismOutcome . AUTHENTICATED , outcome )
assertEquals ( "a/b(@a != 's')/c" , SelectorStepBuilder . toString ( steps ) )
assertThat ( expected . getMessage ( ) , startsWith ( "[foo] did not satisfy [" + getClass ( ) . getName ( ) ) )
assertEquals ( user . getUserName ( ) , "admin" )
assertNotNull ( "AppointmentAttendee is null" , entity )
assertEquals ( ref , tokens )
assertEquals ( e1 . evaluate ( new Object ( ) ) , e2 . evaluate ( new Object ( ) ) )
assertEquals ( 1.5f , entry . getEffectiveDurationHours ( ) , Float . MIN_NORMAL )
assertThat ( context , is ( notNullValue ( ) ) )
assertXpathExists ( "timestamp header not found" , "/SOAP-ENV:Envelope/SOAP-ENV:Header/wsse:Security/wsu:Timestamp" , document )
assertEquals ( files . size ( ) , Iterables . size ( s ) )
assertHandCount ( playerA , 2 )
assertEquals ( value2 , cache . get ( key2 ) )
assertEquals ( "text/html" , get ( url ) . contentType ( ) )
assertThat ( parsedContextParams , hasEntry ( TraceeConstants . INVOCATION_ID_KEY , "ANU0N88T6YASTEVHN9VK0HJ75SXB87ZQ" ) )
assertTrue ( Arrays . equals ( new int [ ] { - 453549 , 150239 } , coordinate ) )
assertEquals ( 0 , int0 )
assertNotNull ( subject . toString ( ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( 1000.0 , balance , 0.0 )
assertEquals ( "Hello World!" , sample . helloWorld ( ) )
files . assertIsFile ( someInfo ( ) , actual )
assertFalse ( result . passedValidation ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( horizontalRule ) instanceof WHorizontalRuleRenderer )
assertThat ( codes , containsInAnyOrder ( "43343-4" , "47239-9" ) )
assertThat ( exclusions , containsInAnyOrder ( "this key" ) )
Assert . assertFalse ( bundleFile . exists ( ) )
assertEquals ( "CN=server,O=OPS4J,C=PL" , server . getName ( ) )
assertEquals ( "aTestString" , classUnderTest . getClientVersion ( ) )
assertTrue ( new File ( "target/prefix/com/querydsl/apt/domain/query3/QTAnimalTest_Animal.java" ) . exists ( ) )
assertEquals ( BOLD . foreground ( RED ) , style )
Assert . assertTrue ( one . equals ( two ) )
assertTrue ( analyser . getCommands ( ) . values ( ) . stream ( ) . flatMap ( c -> c . getCommands ( ) . stream ( ) ) . collect ( Collectors . toList ( ) ) . get ( 0 ) . getMainStatmtEntry ( ) . isPresent ( ) )
assertEquals ( new Integer ( 1 ) , cf . getSegmentQualPos ( ) )
assertEquals ( "2013-01-01 12:30:45" , result )
assertNotNull ( ctxt )
Assert . assertEquals ( 0 , issues . length )
Assert . assertEquals ( user , result )
assertTrue ( resolverCalled . get ( ) )
assertTrue ( builder . hasErrors ( ) )
Assert . assertEquals ( "x = " + x , FastMath . sin ( x ) , actual [ i ] , 0.0 )
assertEquals ( 1 , people [ 0 ] [ 0 ] )
assertEquals ( Collections . EMPTY_SET , nullFieldProblems )
assertEquals ( times , victim . getTotalResources ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 4 , warnings . size ( ) )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertTrue ( true )
assertEquals ( tft , expected )
assertEquals ( "zero" , actual )
Assert . assertEquals ( journalTable . getKeyColumnNames ( ) , ImmutableList . of ( "foo" ) )
Assert . assertEquals ( expected , actual )
assertSame ( context . unwrap ( HibernateMessageInterpolatorContext . class ) . getRootBeanType ( ) , rootBeanType )
assertNull ( newForbid )
assertions . add ( sql )
assertEquals ( true , cache . isProduced ( "a" ) )
assertEquals ( 7 , result )
assertEquals ( 1 , executor . run ( adultUnit ) )
assertFalse ( "Should have failed to create a Text command without a search term." , built )
assertNotNull ( _coprocessor )
assertThat ( leftMost , equalTo ( asList ( statefulRegion3 , statefulRegion5 ) ) )
assertArrayEquals ( splitString , testString9ExpectedSplit )
assertThat ( response . getBody ( ) , containsString ( "Hello World" ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertThat ( newCode , is ( equalTo ( code ) ) )
assertEquals ( expected , actual )
assertEquals ( ASSIGNED , status )
assertEquals ( "Created Incorrect File " , addTrailingSlash ( tempDirectory . getPath ( ) ) + "input.tst" , f . getPath ( ) )
assertNotNull ( entryRelationship )
assertEqualsIgnoreWhitespace ( expected , drl )
runner . assertNotValid ( )
assertEquals ( expectedXml , actualXml )
assertTrue ( a1 instanceof PublicCloneable )
assertThat ( result , equalTo ( false ) )
assertThat ( algorithm . computeDigest ( ) , is ( helloWebProtegeDigest ) )
assertNull ( uit . getEncoder ( ) )
assertEquals ( 7 , oddOccurrency . solution ( A ) )
assertEquals ( "No test case should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
Assert . assertEquals ( "roleName1" , userName )
Assert . assertThat ( rec , Matchers . allOf ( LogMatchers . hasMatchingArguments ( Matchers . arrayContaining ( ( Matcher ) Matchers . equalTo ( "a" ) , ( Matcher ) Matchers . equalTo ( "b" ) , ( Matcher ) Matchers . allOf ( Matchers . greaterThan ( 1L ) , Matchers . lessThan ( 7L ) ) ) ) ) )
assertEquals ( expected , elements )
assertEquals ( 42 , in . read ( ) )
assertVariable ( "character_set_client" , "utf8" )
assertNotNull ( entity . getId ( ) )
assertThat ( rendering , is ( "'A,B'" ) )
assertThat ( isMatch , description ( theDescription ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertNotNull ( response )
assertTrue ( passwordEncoder . checkpw ( plaintext , encoded ) )
Assert . assertTrue ( RequestObjectHelper . getShowTypes ( jsonWithBooleanValueForKey ) )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , FooSteps . class , FooStepsWithDependency . class )
assertEquals ( 39 , chargeCount )
assertEquals ( "%0.5s" , instance . formatMessage ( record ) )
assertEquals ( expected , test . atYear ( YEAR_STANDARD ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertFalse ( fi1 . sameFormatAs ( fi2 ) )
assertThat ( co . getCachedSize ( ) , is ( actualCachedSize ) )
assertEquals ( "/project/index" , view )
assertSame ( conf , table . getConfiguration ( ) )
assertNotNull ( pathToTest . getFileSystem ( ) . getSeparator ( ) )
Assert . assertFalse ( errors . hasFieldErrors ( ) )
Assert . assertEquals ( IPV4_ADDRESS , nextHop . getIpAddress ( ) . getIpv4Address ( ) . getValue ( ) )
assertThat ( output . getMessages ( ) . toString ( ) , containsString ( "Element 'Bundle.type': minimum required = 1" ) )
assertEquals ( 0 , list . size ( ) )
assertEquals ( res [ i ] , v )
assertRowsEqual ( expected , primaryData )
assertEquals ( 61750L , m . getLastMillisecond ( ) )
assertTrue ( instance . getTotalNetworkError ( ) < maxError )
assertSame ( "bus must be retrievable after set" , mockBus , handler . getData ( ) . getBus ( ) )
assertEquals ( clip ( value ) , ra . get ( ) . get ( ) )
assertThat ( proxyRecipe . isFeatureEnabled ( ) , is ( equalTo ( false ) ) )
assertFalse ( p . apply ( createWithProperty ( name , value ) ) )
assertThat ( request . getConnectorId ( ) , equalTo ( zeroValue ) )
assertEquals ( asList ( Weather . values ( ) ) , WikipediaHMM . INSTANCE . model . getReachableStatesFor ( o ) )
assertEquals ( 0 , hits . totalHits )
assertEquals ( 0 , actualBases )
assertNotNull ( entity . getId ( ) )
Assert . assertTrue ( evaluator . evaluate ( offsets ) )
AssertAnnotations . assertPOS ( posMapped , posOriginal , select ( jcas , POS . class ) )
assertNull ( i . getParent ( ) )
assertTrue ( "Got default lookups" , interpolator . getDefaultLookups ( ) . isEmpty ( ) )
assertSame ( cause , new ApplicationException ( cause ) . getCause ( ) )
assertEquals ( expResult , result )
Assert . assertEquals ( pis , imposto . getPis ( ) )
assertEquals ( graduate , result )
assertEquals ( "{ }" , content )
assertEquals ( 71 , pathMap . size ( ) )
assertTrue ( idx . toString ( ) . contains ( "2" ) )
assertEquals ( "msg" , sut . getMessage ( ) )
assertSequence ( visitor . getNodes ( ) , "a" , "b" , "c" , "d" , "e" )
Assert . assertNull ( example . evaluate ( null ) )
assertEquals ( asList ( "/root[1]/node[1]" , "/root[1]/node[1]/node[1]" , "/root[1]/node[1]/ns:node[1]" , "/root[1]/ns:node[1]" , "/root[1]/nested1[1]" , "/root[1]/nested1[1]/node[1]" , "/root[1]/nested1[1]/node[1]/node[1]" , "/root[1]/nested1[1]/node[1]/ns:node[1]" , "/root[1]/nested1[1]/ns:node[1]" , "/root[1]/nested2[1]" , "/root[1]/nested2[1]/node[1]" , "/root[1]/nested2[1]/node[1]/node[1]" , "/root[1]/nested2[1]/node[1]/xx:node[1]" , "/root[1]/nested2[1]/xx:node[1]" ) , xpaths )
assertEquals ( source , builder . getPropertyState ( ) )
assertThat ( actual . getText ( ) . getDiv ( ) . getValueAsString ( ) , containsString ( "<td>Identifier</td><td>testSearchByResourceChain01</td>" ) )
assertThat ( editor . getValue ( ) , is ( ( Object ) ReadPreference . PRIMARY ) )
assertTrue ( calledExceptionHandler . isProtectedHandlerCalled ( ) )
assertObject ( args )
assertEquals ( getPatientJson ( patient ) , writer . toString ( ) )
assertEquals ( "{\"store\":{\"book\":[{\"category\":\"reference\",\"author\":\"Nigel Rees\",\"title\":" + "\"Sayings of the Century\",\"price\":8.95},{\"category\":\"fiction\",\"author\":\"Evelyn Waugh\"," + "\"title\":\"Sword of Honour\",\"price\":12.99}],\"bicycle\":{\"color\":\"red\",\"price\":19.95}," + "\"new Author\":\"new Author value\"},\"arrayTest\":[1,2,3]}" , result . get ( RETURN_RESULT ) )
assertEquals ( 4 , beanMap . size ( ) )
assertThat ( bic1 , is ( not ( equalTo ( bic2 ) ) ) )
Assert . assertTrue ( got . contains ( "Created device: {" ) )
assertThat ( bookRepository . findOne ( id ) , is ( notNullValue ( ) ) )
assertEquals ( expected , contentSummary . toString ( true ) )
assertResultSet ( res )
assertTrue ( config . isUseUSBDK ( ) )
assertEquals ( TRANSACTIONTYPE_LEAN_MONO , tx . transactionType )
Assert . assertEquals ( node , restGraphDatabase . getNodeById ( node . getId ( ) ) )
Assert . assertTrue ( errors . hasFieldErrors ( "concept" ) )
Assert . assertEquals ( "QueueInfo children weren't properly converted" , returned . getQueueChildren ( ) . size ( ) , 1 )
assertEquals ( "value" , getLastRequestHeaders ( ) . get ( "my" ) . getFirst ( ) )
Assert . assertEquals ( "\"SELECT \n  \\\"mytable\\\".\\\"ID1\\\", \n  \\\"mytable\\\".\\\"NAME1\\\"\nFROM \\\"mytable\\\"\"" , result )
assertTrue ( resMap . getResourcesMap ( ) != null )
assertEquals ( expResult , result )
assertEquals ( "00FF" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertTrue ( "Should get 'lollol'" , test . equals ( value ) )
assertFalse ( cs . communicationAllowed ( ) )
assertEquals ( 0 , nbResult ( gg ) )
assertThat ( PathUtil . getRelativePath ( root , child ) , is ( "/xyz/file" ) )
assertEquals ( "IDX1" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertTrue ( isEqual ( d1 , d2 ) )
Assert . assertEquals ( deltaFiniteDifference , deltaAAD , 0.005 )
Assert . assertEquals ( "(aa_change_frameshift (aa_point_location (aa_char A) 124) (aa_char T) fs * 23)" , aa_change_extension . toStringTree ( parser ) )
Assert . assertEquals ( expected , actual )
assertEquals ( expect , actual )
assertTrue ( String . format ( "Expected error to contain string [%s]. Actual error: %s" , expected , ex . getMessage ( ) ) , ex . getMessage ( ) . contains ( expected ) )
assertThat ( "Failed to list resources: " + result , Operations . isSuccessfulOutcome ( result ) , is ( true ) )
Assert . assertTrue ( edOrgRights . isEmpty ( ) )
assertTrue ( page . getBody ( ) . getTextContent ( ) . contains ( "Username or email" ) )
assertNull ( action . getIconFileName ( ) )
assertEquals ( "token1" , target . getToken ( ) )
assertEquals ( "Date parsing is wrong" , new BitemporalDateTime ( date ) , mapper . readBitemporalDate ( columns , "vtTo" ) )
assertEquals ( "Response Processor " + ( i + 1 ) + " received wrong message content" , "This is the status of /resource" + ( i + 1 ) , coapResponse . getContent ( ) . toString ( Charset . forName ( "UTF-8" ) ) )
assertFalse ( ret )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertTrue ( a == b )
assertTrue ( sets . contains ( message1 ) )
assertTrue ( branchFilterByRemote . isLinkedTo ( branch ) )
assertFalse ( definedInContext )
assertEquals ( "test" , playlist . getCurrentSong ( ) . getName ( ) )
assertEquals ( want , doc . body ( ) . html ( ) )
assertEquals ( 42 , impl . getPercentile ( 50 ) )
assertThat ( createdPlayer == defensivePlayerWithDjAndJavaDevSkills , is ( true ) )
assertEquals ( "undefined" , e . getFileName ( ) )
assertEquals ( Role . GETTER_OR_SETTER , Role . get ( node ) )
Assert . assertArrayEquals ( expected , actual )
assertThat ( result , is ( new String [ 0 ] [ 0 ] ) )
assertThat ( mockFoo . __globalID ( ) . isTemporary ( ) , is ( false ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "JaxRs_ParserTestFile" , this . parser . getClassName ( ) )
assertEquals ( expectedScriptNode , actualScriptNode )
assertThat ( "testCreateGroup" , group , notNullValue ( ) )
assertEquals ( 0L , result )
assertEqualsIgnoreWhitespace ( expected , real )
assertTrue ( syncServer instanceof ZooKeeperSyncServerImpl )
assertObject ( args )
assertSet ( whenFilteringWith ( and ( new FilterPredicate ( SINGLE_PROPERTY_NAME , GREATER_THAN , 1 ) , new FilterPredicate ( SINGLE_PROPERTY_NAME , LESS_THAN , 2 ) ) ) , queryReturnsNothing ( ) )
assertTrue ( cache . size ( ) > 0 )
assertEquals ( new Date ( 1010101L ) , element . getValueAsObject ( ) )
Assert . assertEquals ( 0 , errors . size ( ) )
assertEquals ( 2 , em . createQuery ( criteriaQuery ) . getResultList ( ) . size ( ) )
assertEquals ( expected , actualQuery )
assertEquals ( 1 , res . join ( ) )
assertEquals ( 1 , result )
Assert . assertFalse ( mPos . has ( e ) )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
Assert . assertEquals ( filterName , victim . getName ( ) )
assertThat ( b . getConsole ( ) , Matchers . containsString ( "Checking out " + svnContainer . getUrlUnsaveRepo ( ) ) )
assertTrue ( toString . contains ( AnyByteMatcher . class . getSimpleName ( ) ) )
assertThat ( object , is ( rpslObject ) )
assertThat ( Functions . text ( "aaa" ) , is ( "name=\"aaa\" value=\"111\"" ) )
assertEquals ( "{\"errorMessage\":\"User data must contain username field.\"}" , output )
assertOut ( "<Group><Label></Label></Group>" )
assertMockEndpointsSatisfied ( )
assertEquals ( 3 , processorsFactory . getPostProcessors ( ) . size ( ) )
assertEqualsWithoutWhiteSpaces ( "translate([0, 0, -30]) (empty)" , ts )
assertTrue ( pos . index == calc . altIndex ( altIndex , pos . tag ) )
assertThat ( output , containsString ( "DICOM store retrieved:" ) )
Assert . assertEquals ( 140 + 4 * winScore - loosePenalty , scores . getScore ( ) )
Assert . assertEquals ( Integer . valueOf ( 1 ) , result )
assertEquals ( 2.0 , Evaluator . evaluate ( ex ) )
assertThat ( testValue . keywordName ( TestValueType . AGE ) , equalTo ( "AGE" ) )
assertEquals ( "ChuckNorris" , victim . readLine ( ) )
assertEquals ( Joiner . on ( "\n" ) . join ( expected ) , result )
assertThat ( classes . size ( ) , Matchers . equalTo ( 0 ) )
assertEquals ( ChatState . gone , stateHandler . getLastChatState ( ) )
assertEquals ( expResult , result )
assertThat ( result . getViewOriginalText ( ) , is ( viewOriginalText ) )
assertNotNull ( accounts )
Assert . assertEquals ( BitTag . SERVICENET_LB . tagValue ( ) , mappedUsage . getTagsBitmask ( ) )
assertTrue ( lines . contains ( ">>> should go to fallback layout (Plain and simple parameter)" ) )
Assert . assertTrue ( getSettings ( ) . getSocketSettings ( ) . getConnectTimeout ( TimeUnit . MILLISECONDS ) == 1200 )
Assert . assertEquals ( 2 , code )
assertThat ( connection . getSourceName ( ) , is ( name ) )
Assert . assertEquals ( jobParams , retrievedParams )
Assert . assertEquals ( "Link: <http://example.com/things>; rel=\"next\"" , affordance . toString ( ) )
assertThat ( rendered , is ( expected ) )
assertNotNull ( text )
assertThat ( result . isEmpty ( ) , is ( true ) )
assertEquals ( testneuron3 , lst . get ( 1 ) )
assertFalse ( "Parental guide list is empty for " + imdbId , result . isEmpty ( ) )
assertEquals ( false , options . isRecursive ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
Assert . assertTrue ( permissions . toString ( ) , permissions . size ( ) == 1 )
assertNotNull ( percentage )
assertEquals ( "path" , file . getName ( ) )
Assert . assertNull ( ArrayUtils . get ( array , 10 ) )
assertNull ( result )
assertEquals ( "FinalInterval [(1, 2) -- (3, 4) = 3x3]" , interval . toString ( ) )
assertEquals ( 10 , ports . size ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "http://localhost:8080/events/" + "topic/cg/cid" , url )
assertEquals ( expResult , result )
assertNotNull ( document )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertEquals ( "the artifact must be downloaded" , true , new File ( localRepo , "ant/ant/1.5.1/ant-1.5.1.jar" ) . exists ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( textField ) instanceof WPhoneNumberFieldRenderer )
assertThat ( iterationState . next ( ) . getChangeType ( ) , is ( ASSERTED ) )
assertNotNull ( parser )
authRule . assertScenario ( scenario )
assertNotNull ( smsd1 . getFirstAtomMapping ( ) )
assertEquals ( 3 , Nd4j . getBlasWrapper ( ) . iamax ( linspace ) )
assertEquals ( expResult , result )
Assert . assertNotNull ( c )
assertEquals ( postId , postStatistics . getTopic ( ) . getId ( ) )
assertThat ( MomentInterval . parseISO ( "2012W137T1415Z/W144T1800+02" ) , is ( expected ) )
assertEquals ( "" , result )
assertTrue ( skuWarehouse . getSkuWarehouseId ( ) > 0 )
BeanAssert . assertBeanEquals ( bean , array )
assertEquals ( anonymousID , authInfo . getUserID ( ) )
assertThat ( Unix4j . fromFile ( testFile ) . grep ( "from" ) . head ( 4 ) . tail ( 1 ) . wc ( Wc . Options . words ) . toStringResult ( ) , is ( "13" ) )
Assert . assertEquals ( 1l , handler . convertIdentifier ( v ) )
assertEquals ( "param=value and content=[]" , response . getBody ( ) )
assertThat ( anyTS . isValid ( SECOND_OF_DAY , null ) , is ( false ) )
assertEquals ( "ABC" , buf . getPrefixedString ( decoder ) )
assertEquals ( - 1 , resultComparator . compare ( od1 , od2 ) )
assertEquals ( START_WITH_PARENS_STREET_NAME , step . streetNameNoParens ( ) )
assertThat ( "system-input-def-43.xml" , systemInputDef , matches ( new SystemInputDefMatcher ( expected ) ) )
assertThat ( underTest . execute ( underTest , null , null , new Object [ ] { assetDocument , "jexlexpression" , "*" , repoToContainedGroupMap } , null ) , is ( true ) )
assertSame ( outputPortBinding , scufl2Tools . processorPortBindingForPort ( port , profile ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( java . util . Calendar . SUNDAY , calendar . getInternalCalendar ( ) . getFirstDayOfWeek ( ) )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Object" ) )
assertFalse ( collector . isMessageComplete ( ) )
assertThat ( specification . getUnits ( ) , is ( ONE ) )
assertTrue ( tested . onMayClose ( ) )
Assert . assertNotNull ( addressResultsDto )
Assert . assertTrue ( links . isEmpty ( ) )
assertEquals ( "Required parameters, values and operator, missing." , ret )
assertEqualsWithoutWhiteSpaces ( "(model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 1 ) . exclude ( 12 ) . create ( ) ) )
assertEquals ( 1 , ( int ) IteratorUtils . first ( iterator ) )
given ( ) . body ( delegate . toString ( ) ) . put ( delegate1 ) . then ( ) . assertThat ( )
assertTrue ( plot . getRangeMarkers ( 99 , Layer . FOREGROUND ) . contains ( yMarker1 ) )
assertThat ( anyTS . isValid ( SECOND_OF_DAY , null ) , is ( false ) )
Assert . assertArrayEquals ( p , VP8Util . predictRD ( above , left , aboveLeft ) )
assertEquals ( "_all/_count" , count . getURI ( ElasticsearchVersion . UNKNOWN ) )
classes . assertIsPackagePrivate ( someInfo ( ) , clazz )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertTrue ( Arrays . equals ( result , expectedOutput ) )
assertThat ( "getValue" , node . getValue ( ) , is ( false ) )
assertEquals ( script , observedScript )
assertNotNull ( process )
assertNoSpans ( )
assertEquals ( result , 200 )
assertEquals ( CENSOR_MESSAGE , client . getStringStack ( ) [ client . getStringStackSize ( ) - 1 ] )
assertThatResultContainsCorrectClassesExactlyInOrder ( result , DataConverterTest . class )
ReaderAssert . assertThat ( ImsCwbReader . class , ImsCwbReader . PARAM_SOURCE_LOCATION , "src/test/resources/tuebadz/corpus-sample-ref.txt" , ImsCwbReader . PARAM_POS_TAG_SET , "stts" , ImsCwbReader . PARAM_LANGUAGE , "de" )
assertMessage ( "<type>DELEGATED</type>" , 4 )
assertEquals ( " --vanilla " , rProcessStartUpOptions . getStartUpOptionsAsCommand ( ) )
assertEquals ( actualPostsPage , expectedPostsPage )
Assert . assertNull ( registry . getProtocol ( ProtocolDescription . DEFAULT ) )
assertNull ( parser . parseDom ( content ) . getDoctype ( ) )
Assert . assertEquals ( expResult , result , 0.0001 )
assertEquals ( false , result )
Assert . isTrue ( response )
assertEquals ( 0 , array . get ( 0 ) . val ( ) )
assertTrue ( items . size ( ) > 0 )
assertEquals ( expectedPath , actualPath )
assertNotNull ( result . getXdmValue ( ) . itemAt ( 0 ) )
assertOut ( "a(b)" )
Assert . assertEquals ( 0 , builder . akibanInformationSchema ( ) . validate ( AISValidations . BASIC_VALIDATIONS ) . failures ( ) . size ( ) )
Assert . assertNotNull ( l )
assertThat ( impl . isPermitted ( "repoName" , "repoFormat" , BreadActions . READ , variableSource ) , is ( true ) )
assertThat ( mdcValueStr , is ( userName ) )
Assert . assertTrue ( subscriber . checkUpdate ( new EndpointTitle ( testEndpoints . get ( 0 ) , HUB_SUBSCRIPTION_UPDATE_ENDPOINT_ADDED ) ) )
assertTrue ( glass . accept ( figure , WIDTH / 2 + 1 , 2 ) )
assertEquals ( "aTestString" , classUnderTest . getUser ( ) )
assertEquals ( propContName , resourceEditProperty . getPropContName ( ) )
Assert . assertEquals ( "" , unmap ( "Gen.1.1" ) )
assertThat ( result , is ( new String [ ] [ ] { { "c" } } ) )
assertTrue ( comparator instanceof UnsignedByteBuffer . LexicographicalComparatorHolder . UnsafeComparator )
Assert . assertEquals ( 2 , coveredGoals . size ( ) )
assertEquals ( expResult , result )
assertTrue ( result )
assertEquals ( "/workflowrun.json" , runReport . toString ( ) )
assertEquals ( 1 , count )
assertEquals ( "1. Selected: Item 5" , getLogRow ( 0 ) )
assertTrue ( check . isSuccess ( ) )
assertThat ( ( Integer ) ms . get ( "aaa" ) , is ( 1 ) )
assertEquals ( "%d{ISO8601} [%t][%c] %-5p %properties %ndc: %m%n" , layout . getConversionPattern ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
Assert . assertTrue ( ratingId > 1 )
assertEquals ( "<a href=\"" + BASE_URL + "#dest1?a=b&amp;c=d\">Link&amp;1</a>" + "<a href=\"http://xyz/abc?x=y&amp;z=w\">Link&amp;2</a>" , result )
assertTrue ( ( fTime - sTime < 7000L ) , "Immediate trigger did not fire within a reasonable amount of time." )
assertEquals ( expResult , result )
assertEquals ( "Column_Name" , colName )
assertJsonEqualsWithLinkResolving ( result . getActionResult ( ) , result . getMessages ( ) . values ( ) . iterator ( ) . next ( ) , mqttHelper . getTopic ( entityType , IDS . get ( entityType ) ) )
assertEquals ( "_cat/nodes" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertTrue ( "unexpected value" , value )
Assert . assertEquals ( "2017-09-20" , dateStr )
router . assertRoute ( a , "/a/b" )
assertEquals ( 203 , testResult . getError ( ) . getCode ( ) )
assertArrayEquals ( NOT_ENCODED , binary , encode ( object ) )
Assert . assertTrue ( this . manager . connectAll ( this . family1 , Arrays . asList ( this . person1 , this . person2 , this . person3 ) ) )
assertLHSParentFactPatternFor ( "$a" , "$f" )
assertTrue ( geoserverCatalog . getCatalogMode ( ) == MIXED )
Assert . assertEquals ( PseudoAuthenticationHandler . class , filter . getAuthenticationHandler ( ) . getClass ( ) )
assertTrue ( "" , types != null && types . size ( ) == 1 && types . contains ( ProfileType . JOB_FUNCTION ) )
assertEquals ( "9208675309" , parsedTelePhoneNumber )
assertFalse ( sut . isAccountNonLocked ( ) )
assertEquals ( 0.0 , diff . getValue ( METERS ) , 500 )
assertEquals ( "       _ _____       __     __ " + LINE_ENDING + "      (_) __(_)___ _/ /__  / /_" + LINE_ENDING + "     / / /_/ / __ `/ / _ \\/ __/" + LINE_ENDING + "    / / __/ / /_/ / /  __/ /_  " + LINE_ENDING + " __/ /_/ /_/\\__, /_/\\___/\\__/  " + LINE_ENDING + "/___/      /____/              " + LINE_ENDING , asciiArt )
assertEquals ( expectedParsedResult , actualParsedResult )
assertTrue ( "Name empty" , constraintViolations . size ( ) == 1 )
assertEquals ( 0x12345678 , value . getDataAsLong ( ) )
assertThat ( irsApplicable , equalTo ( true ) )
assertEquals ( "http://test.com/1?a=&b=" , HttpRequest . append ( "http://test.com/1" , params ) )
assertThat ( logRecords , containsInfo ( WLS_HEALTH_READ_FAILED , ADMIN_NAME ) )
Assert . assertEquals ( "Result is not true" , Boolean . TRUE , o )
assertEquals ( type , getContentType ( method ) )
Assert . assertEquals ( IsolationLevels . SERIALIZABLE , connection . getIsolationLevel ( ) )
assertFalse ( DefaultEditorFileUploadBase . isUploadSuccessful ( event ) )
assertSameFileContents ( reference , fileResult )
assertTrue ( "The isEmpty did not return true with an empty log set" , logset . isEmptySet ( ) )
assertEquals ( expected , sb . toString ( ) )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertThat ( result . getId ( ) , is ( notNullValue ( ) ) )
assertEquals ( mimeTypes , handler . getMimeTypes ( ) )
Assert . assertEquals ( Sets . newHashSet ( 1 ) , parser . getSecureBindIndices ( ) )
Assert . assertNotNull ( hdl )
assertFalse ( matchResult )
Assert . assertEquals ( expected , HtmlSanitizerUtil . sanitize ( input ) )
assertEquals ( "select entity_0.code, subEntity_1.name from Entity entity_0 inner join entity_0.subEntity subEntity_1" , select . getQuery ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertThat ( "generator-set-4.xml" , generatorSet , is ( expected ) )
assertThat ( dur . with ( Duration . approximateHours ( 24 ) ) , is ( Duration . ofPositive ( ) . years ( 3 ) . months ( 2 ) . days ( 4 ) . build ( ) ) )
assertNull ( uriInfo )
assertEquals ( javaTimestamp , DateTimeUtil . getDay ( TEST_DATETIME ) )
Assert . assertEquals ( infoManifestacaoDestinatario , infoEventoManifestacaoDestinatario . getManifestacaoDestinatario ( ) )
Assert . assertNull ( getMetric ( ) . calculate ( getSession ( ) ) )
assertEqualHQL ( "allen  " , sb . toString ( ) )
assertResultSet ( res )
Assert . assertEquals ( "some description" , link . getDescription ( ) )
assertEquals ( 1 , dbHandler . getDataElementCount ( ) )
assertNull ( "instance should be null because of configuration" , testInjector ( config ) . getInstance ( TransactionPruner . class ) )
Assert . assertEquals ( new BigDecimal ( "12.3456" ) , value )
Assert . assertNotNull ( asientoRecibido )
assertNotNull ( ( test . entry ) . getDatabaseName ( ) )
assertThat ( clientBackend . get ( HelloWorldTestService . TEST_KEY ) , is ( "accepted" ) )
assertTrue ( r . isResourceType ( DefaultResourceTypeDefinition . APPLICATIONSERVER ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertSame ( var3 , new RequestImpl ( m ) . selectVariant ( list ) )
assertEquals ( aNumber , result , 1E14 )
assertEquals ( SimpleScore . ofUninitialized ( 0 , - 10 ) , director . calculateScore ( ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . ORCID_PATENTS_CREATE )
assertEquals ( expected , actual )
assertEquals ( author , result . getCommit ( ) . getAuthorIdent ( ) )
assertEquals ( mls , fromJson )
assertEquals ( "qwe" , collector . getMessage ( ) )
assertEquals ( "SELECT a FROM db.g1 INNER JOIN /*+ MAKEDEP(MAX:300) */ db.g2 ON a = b" , QueryParser . getQueryParser ( ) . parseCommand ( sql , new ParseInfo ( ) ) . toString ( ) )
assertThat ( target . matchExactly ( action ) , is ( false ) )
assertEquals ( 1 , ( int ) IteratorUtils . first ( iterator ) )
arrays . assertDoesNotContain ( description , actual , value , Index . atIndex ( - 1 ) )
assertThatTestCaseObeysOracle ( 15 )
assertEquals ( results1 . size ( ) , results2 . size ( ) )
Assert . fail ( "Should have thrown exception" )
assertThat ( size , equalTo ( 0 ) )
assertFalse ( hasReset )
assertTrue ( wsos instanceof OutputStream )
assertThat ( renderer . getShortForm ( entity ) , is ( "xsd:unsignedShort" ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( padded ( OBJECT_OVERHEAD + INT + DOUBLE + LONG ) , ThreadTrackingContext . getBytes ( ) )
assertEquals ( expected , elements )
assertEquals ( "OK" , rc . put ( "/a01" , "OK" ) . run ( ) . getBody ( ) . asString ( ) )
assertEquals ( "Conquistador" , output . get ( 0 ) )
assertEquals ( "12 ���� ��" , t . format ( new Date ( 0 ) ) )
Assert . assertTrue ( jsonEqual ( expResult , EntityFormatter . writeEntity ( entity ) ) )
assertThat ( taskService . createTaskQuery ( ) . taskCandidateGroup ( "demo" ) . count ( ) , is ( 1L ) )
assertEquals ( e1 , e2 )
Assert . assertArrayEquals ( expected , processed )
assertNull ( ConfigUtils . getOrNull ( config , "hello" ) )
assertEquals ( expected , actual )
assertEquals ( "1777777777777777777777" , new String ( buffer , CharsetNames . UTF_8 ) )
assertThat ( result , is ( "PortId" ) )
assertEquals ( 1 , i )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertTrue ( result . isValid ( ) )
assertThat ( exitStatus , is ( 42 ) )
assertThat ( outcome . getFormattedIssues ( ) , is ( "(#ISSUE-123)" ) )
Assert . assertFalse ( deal . isAccepted ( ) )
Assert . assertFalse ( result )
assertEquals ( streamArns , resultAdapter . getStreamNames ( ) )
assertNull ( request . getEntity ( ) )
Assert . assertEquals ( diffusioncoefficient , result [ 0 ] , 0.1 )
assertEquals ( Collections . emptyList ( ) , result )
Assert . assertTrue ( Math . abs ( maxAbsDeviation ) < 8E-3 )
assertEquals ( expectedMessage , result )
assertTrue ( ! sw . isStopWord ( "�板�ㄦ��" ) )
assertEquals ( override , override2 )
assertOut ( "var a:RegExp = /test-\\d/i" )
assertEquals ( 2 , hammockConfigSourceProvider . getConfigSources ( getClass ( ) . getClassLoader ( ) ) . size ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertTaintHasOnlyLabel ( MultiTainter . getTaint ( y ) , "testCatchBlockNotTaken" )
Assert . assertEquals ( 0 , sut . getWeekdayCountBetweenDates ( start , end ) )
assertEquals ( 20 , result . getTotalCount ( ) )
Assert . assertNotNull ( prkdf )
Assert . assertEquals ( 1 , result )
assertThat ( frontController . processLocale ( request ) , is ( Locale . getDefault ( ) ) )
assertOutputResult ( "testDump1.result" , new String ( bos . toByteArray ( ) ) , new String [ ] { "${table.timezone}" } , new String [ ] { testingCluster . getConfiguration ( ) . getSystemTimezone ( ) . getID ( ) } )
Assert . assertEquals ( json , writer . toString ( ) )
assertEquals ( 8 , hyperLogLog . cardinality ( ) )
assertThat ( target . equals ( obj ) , is ( false ) )
assertTrue ( ss . contains ( "'a89dhd-123-abc'" ) )
assertNull ( actualResource )
Assert . assertEquals ( false , retval )
assertNotNull ( in )
Assert . fail ( ex . getMessage ( ) )
assertDirty ( file )
assertFalse ( result . isPresent ( ) )
assertThat ( domain . getDomainHome ( ) , equalTo ( "/u01/oracle/user_projects/domains" ) )
assertThat ( fieldError , is ( not ( nullValue ( ) ) ) )
assertNotNull ( instance )
assertNull ( t . detectCycle ( n1 ) )
assertThat ( errors , not ( hasFieldErrors ( "givenName" ) ) )
assertEquals ( builder . maximumLength , 15 )
Assert . assertNotNull ( bundle )
assertEquals ( "The sequence number of the recoverd.edits and the current edit seq should be same" , lastestSeqNumber , editCount )
Assert . assertEquals ( found . size ( ) , 5 )
assertTrue ( expectedOrder . isOrdered ( toSort ) )
assertEquals ( 11 , rs . get ( 0 ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfAnnotationLinkAllParams.pdf" , sourceFolder + "cmp_xfdfAnnotationLinkAllParams.pdf" , destinationFolder , "diff_" ) )
assertEquals ( s , sb . toString ( ) )
assertBeanValidation ( json , "query.metric[0].aggregators[0].m_divisor may not be zero" )
assertTrue ( ci1 . getValue ( series . getEndIndex ( ) ) . doubleValue ( ) > HIGH_CHOPPINESS_VALUE )
assertEquals ( "Expected 0 results!" , 0 , count )
assertEquals ( PREFIXED_QUERY , Prefixes . prepend ( builder ) . toString ( ) )
assertNotNull ( "ClientContact is null" , entity )
context . assertIsSatisfied ( )
assertThat ( predicate . test ( Integer . class ) , is ( false ) )
assertEquals ( RemoteAPIController . CLIENTS_PAGE , list )
assertDelivered ( q , 0 )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
assertThat ( html , is ( "" ) )
assertEquals ( expected , values [ 0 ] , 0.001 )
Assert . assertTrue ( buffer . size ( ) > 0 )
assertThat ( gitClient . getRemoteSymbolicReferences ( repoRoot . getAbsolutePath ( ) , null ) , hasEntry ( Constants . HEAD , "refs/heads/master" ) )
assertTrue ( r1 instanceof PublicCloneable )
assertEquals ( HttpStatusCode . OK . getStatusCode ( ) , response . getStatusCode ( ) )
assertEquals ( wayLessInEuros , actualValue )
assertTrue ( ValidationUtilities . validateRegExp ( regex , "abc\n def" ) )
assertTrue ( a1 . compareTo ( a2 ) < 0 )
assertEquals ( 0L , query ( ) . from ( show ) . where ( show . acts . containsValue ( "C" ) ) . fetchCount ( ) )
assertEquals ( asList ( Paths . get ( "/resources/CompressionUtilsTest.class" ) , Paths . get ( "/resources/MappingProviderTest$1.class" ) , Paths . get ( "/resources/MappingProviderTest$2.class" ) , Paths . get ( "/resources/MappingProviderTest.class" ) , Paths . get ( "/resources/ResourceObjectProviderTest$1.class" ) , Paths . get ( "/resources/ResourceObjectProviderTest$2.class" ) , Paths . get ( "/resources/ResourceObjectProviderTest$3.class" ) , Paths . get ( "/resources/ResourceObjectProviderTest$SharableObjectProvider.class" ) , Paths . get ( "/resources/ResourceObjectProviderTest.class" ) , Paths . get ( "/resources/ResourceUtilsTest.class" ) ) , paths )
assertEquals ( allMethods , allMethods1 )
assertEquals ( ZippelGCD ( a , b ) . monic ( ) , EZGCD ( a , b ) . monic ( ) )
assertNotNull ( context . getBean ( "snsOutboundChannelAdapter.snsExecutor" , SnsExecutor . class ) )
assertIsNotIdentity ( transform )
assertThat ( UNIT . render ( context ) , anyOf ( is ( "key1=value1,key2=value2" ) , is ( "key2=value2,key1=value1" ) ) )
assertFalse ( success )
Assert . assertEquals ( "#testid" , attr . get ( "xlink:href" ) )
assertNull ( clazz )
assertReportOutput ( getPath ( "ExpectedReportMessages.html" ) , outputDirectory )
assertArrayEquals ( new int [ ] { 1 , 1 , 0 } , difference )
assertEquals ( device , another )
assertTrue ( Arrays . asList ( volumes ) . contains ( "testSSLVolume" ) )
assertNotNull ( object . getItemName ( ) )
Assert . assertEquals ( results , actual )
assertEquals ( expected , actual )
assertEquals ( "folder1/folder2/resource-b598c484.css" , result )
Assert . assertEquals ( 4 , operation . operations . size )
Assert . assertEquals ( violations . size ( ) , 2 )
Assert . assertFalse ( "The error manager should not have been initialized" , TestErrorManager . INITIALIZED )
assertEquals ( expecetedTableName , builtTableName )
assertEquals ( "<p>Hello <em>there</em> <em>now</em></p>" , doc . body ( ) . html ( ) )
Assert . assertEquals ( expected , MustacheTemplatePrefixExpander . expand ( input ) )
Assert . assertEquals ( "0" , result . getReturnCode ( ) )
assertNoCause ( "value of: myObject.child.grandchild\nmessage" )
assertThat ( result , is ( expectedResult ) )
assertNotNull ( output )
assertThat ( s . getValue ( ) , is ( minValue ) )
assertTrue ( isElementPresent ( By . className ( "v-required-field-indicator" ) ) )
context . assertIsSatisfied ( )
assertEquals ( pp . getValue ( ) , new Payload < > ( "2 final" ) . getValue ( ) )
assertTrue ( got . contains ( "Key:" ) )
assertThat ( actual , is ( "hello world!" . getBytes ( ) ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoFatura ( ) . toString ( ) )
context . assertEquals ( "hello" , buf . toString ( ) )
assertThat ( cut . apply ( select ) , is ( false ) )
assertEquals ( "<!-- � � -->" , doc . body ( ) . html ( ) )
assertTrue ( "the artifact must be downloaded" , new File ( localRepo , "ant/ant/1.5.1/ant-1.5.1.jar" ) . exists ( ) )
assertFalse ( p . isWriteable ( Character . class , null , null , MediaType . valueOf ( "text/custom" ) ) )
assertEquals ( list , result )
assertEquals ( 10 * nbTasks * nbClients , reportsCounter . get ( ) )
assertContains ( e . getMessage ( ) , "'id'" )
assertThat ( cut . apply ( pageObject ) , is ( false ) )
assertNull ( actualObj ( ) . opt ( "mykey" ) )
assertNotNull ( "Valid class must be returned" , factory . getSerializer ( LongWritable . class ) )
assertEquals ( "addresses.0.street" , serializer . visit ( user . addresses . get ( 0 ) . street , null ) )
assertNotNull ( result . getOpenAPI ( ) )
assertEquals ( BODSentence . class , gl . sentenceType )
assertEquals ( expected , uri . getRawPath ( ) )
Assert . assertEquals ( "N3wP4sS" , obj . getPassword ( ) )
assertStreamEquals ( expectedBackoffs , backoffs )
assertNotNull ( doc )
Assert . assertEquals ( "2147483648" , result . getFirstHeader ( "Age" ) . getValue ( ) )
assertTrue ( loadingTypes . size ( ) == 0 )
assertTrue ( ! result )
assertEquals ( type , header . getFileType ( ) )
assertEquals ( 0 , result . numFindings ( ) )
assertTrue ( e instanceof InvalidParameterException )
assertTrue ( "no exception was thrown" , exception )
assertThat ( matcher . matches ( literal ) , is ( false ) )
assertFalse ( "objects aren't of same type" , n1 . equals ( n2 ) )
assertEquals ( 0 , orgUnits . size ( ) )
Assert . assertTrue ( s . startsWith ( "No message will be sent to " ) )
assertThat ( definition . dataTableType ( ) . transform ( dataTable . asLists ( ) ) , is ( asList ( asList ( "converts_table_cell_to_string=a" , "converts_table_cell_to_string=b" ) , asList ( "converts_table_cell_to_string=c" , "converts_table_cell_to_string=d" ) ) ) )
assertEquals ( expResult , result )
assertEquals ( expected , actual )
assertTrue ( result . length ( ) > 0 )
assertNotNull ( getRealm ( ) )
Assert . assertEquals ( "<?joe?>" , stringWriter . toString ( ) )
assertEquals ( frameData . hashCode ( ) , frameData . hashCode ( ) )
assertHelpLines ( "Option    Description" , "------    -----------" , "--apple              " , EMPTY )
assertTrue ( ! result )
assertEquals ( false , result )
assertEquals ( "娴�璇�" , response . getMsg ( ) )
Assert . assertEquals ( "test-channel-includetest-channel-includetest-channel-include" , value )
assertEquals ( "token 1\n" , found )
assertEquals ( value , actualValue )
assertTrue ( "Incorrect mapping of property with annotated setter" , actual . indexOf ( "property-2: value2\r\n" ) >= 0 )
assertEquals ( Arrays . asList ( "com." ) , complete ( "co" ) )
assertEquals ( expected , union )
assertSuccess ( result )
Assert . assertTrue ( response . contains ( "Call reached IMPL as schemaValidation went thru fine.siteid - 0clientid - abclang - 1" ) )
assertEquals ( "{ \"field name\" : { \"$bitsAnyClear\" : \"?\" } }" , filterParameters . toString ( ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expResult , result )
assertEquals ( "SELECT * FROM a WHERE id IN(1,2,3)" , sql )
Assert . assertArrayEquals ( encodedValue , byteOutputStream . toByteArray ( ) )
dataLoader . assertDataToJsonEqualsExpectedFileContent ( "shouldInPriceAscOrder.json" , result )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertFalse ( valid )
assertEquals ( "1.0" , o )
assertTrue ( plot . getDomainMarkers ( 99 , Layer . FOREGROUND ) . contains ( xMarker1 ) )
assertThat ( result . replaceAll ( "\\s+" , "" ) , equalTo ( expectedOutput . replaceAll ( "\\s+" , "" ) ) )
assertEquals ( new RegisterDocumentSet ( ) , result )
Assert . assertTrue ( urlResponse . status == 404 )
assertEquals ( future , underTest . collectAndDiscard ( futures ) )
assertEquals ( expResult , result )
assertEquals ( "Columns size is wrong" , 2 , columns . size ( ) )
Assert . assertEquals ( true , ( boolean ) equalsMethod . invokeExact ( resultArray , expectArray ) )
assertAllCommandsUsed ( )
Assert . assertEquals ( 1 , r )
assertMockEndpointsSatisfied ( )
assertEquals ( "Expected 3 results!" , 3 , n )
Assert . assertNotNull ( jis . getManifest ( ) )
assertEquals ( "one thousand and thirty-one dollars" , actual )
assertTrue ( called . compareAndSet ( false , true ) )
assertEquals ( "{a:'a1',b:'b1',c:'c1',e:'',g:'\\'true\\'',h:'\\'123\\''}" , r )
assertNotNull ( newMap )
assertNull ( value . getValue ( 99L ) )
assertTrue ( "objectClass should still be in the registry after delete failure" , getObjectClassRegistry ( ) . contains ( OID ) )
assertEquals ( selector1 . hashCode ( ) , selector2 . hashCode ( ) )
assertEquals ( 1 , docs ( ) )
assertEquals ( used + ( 4 << 10 ) , Jvm . usedDirectMemory ( ) )
assertThat ( result , is ( IdentityMapping . EMPTY_PREFIX ) )
assertThat ( array2 , equalTo ( new int [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 } ) )
Assert . assertNotNull ( conceptService . getConcepts ( "VOIDED" , Collections . singletonList ( Locale . ENGLISH ) , false , null , null , null , null , null , null , null ) )
Assert . assertFalse ( pool . isComplete ( ) )
assertEquals ( OTHER_GRAPHITE_IPPORT , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( expected , exts )
assertTrue ( "Incorrect hashCode returned.  Wanted: " + hashCode + " got: " + tVector . hashCode ( ) , tVector . hashCode ( ) == hashCode )
assertEquals ( "test value" , mongoStore . get ( name , sessionId , String . class ) )
assertEquals ( "Incorrect string returned" , "This is a test string" , sw . toString ( ) )
assertEquals ( "failed to generate class with method having throws declaration" , CLASS_WITH_METHOD_HAVING_THROWS_DECLARATION , cls )
Assert . assertNull ( "Result is not null" , o )
assertTrue ( "Must have a writable ledgerDir" , writeDirs . size ( ) > 0 )
assertThat ( result , equalTo ( expectedURI ) )
assertEquals ( "over 3 weken" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertEquals ( expected , array . toString ( ) )
assertEquals ( sumLabel . getText ( ) , String . valueOf ( number ) )
assertThat ( value . getLeft ( ) , is ( "name" ) )
assertEquals ( "3 爻丕卅�鬲 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
assertEquals ( "incorrect number of mappings found for username2" , 2 , userMappings . size ( ) )
assertNotNull ( result )
assertEquals ( 0 , results . size ( ) )
assertEquals ( 8 , t . indexOfUnquoted ( str , ">>" ) )
arrays . assertContains ( description , actual , other )
assertEquals ( "text" , json . getJSONObject ( AbstractComponentState . JSON_CONTENT ) . getString ( AbstractComponentState . JSON_VALUE ) )
assertTrue ( verifier . verify ( input ) )
assertEquals ( r1 , r2 )
assertEquals ( "expect bookie idx 2 first" , expectedSet , reorderSet )
assertThat ( DataenumUtils . equal ( o , o ) , is ( true ) )
maps . assertContainsAnyOf ( someInfo ( ) , actual , new MapEntry [ 0 ] )
Assert . assertEquals ( expect_sql , sql )
assertThat ( fmt . getTimeZone ( ) , is ( TimeZone . getTimeZone ( "Europe/Brussels" ) ) )
assertThat ( ids , contains ( locId ) )
assertEquals ( expected , actual )
Assert . assertEquals ( VmInstanceState . Stopped . toString ( ) , vm . getState ( ) )
assertEquals ( expected , clusters )
assertThat ( toUnqualifiedVersionlessIdValues ( result ) , containsInAnyOrder ( pt0id . getValue ( ) ) )
assertEquals ( "{\"foo\":\"bar\"}" , result . toString ( ) )
Assert . assertNotNull ( uuid )
assertTrue ( aNumber == Double . NEGATIVE_INFINITY )
assertEquals ( void . class , t . findClass ( "void" ) )
assertEquals ( "True has to be returned in this case" , replication , inf . getBlockReplication ( ) )
assertJSLintOK ( builder . fromFile ( f ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( expectedText , testText )
Assert . assertTrue ( clientSnapshot . abort ( ) )
assertThat ( answer , allOf ( containsString ( "Michail" ) , endsWith ( "invocationId was 123" ) ) )
assertEquals ( first , ( ( BasicMonthViewUI ) monthView . getUI ( ) ) . getFirstDisplayedYear ( ) )
assertThat ( selectionModel . getSelectedClass ( ) , is ( Optional . empty ( ) ) )
assertThat ( SpringFacesContext . getCurrentInstance ( false ) , is ( nullValue ( ) ) )
Assert . assertArrayEquals ( longArray , decompressedArray . array ( ) )
assertEquals ( exp , zF )
assertTrue ( authorizer . isAuthorized ( context , profiles ) )
Assert . assertEquals ( Double . toString ( x ) , expected , actual , tol )
assertTrue ( configurationDeserialized )
assertEquals ( 204 , response . getStatus ( ) )
Assert . assertEquals ( "password" , codec . decode ( "cGFzc3dvcmQ=" ) )
assertNotNull ( Reservation . reader ( "WSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "WKXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( 0 , deleter . deletedVersions . size ( ) )
Assert . assertEquals ( 1 , model . getId ( ) . intValue ( ) )
assertFalse ( impl . mustRevalidate ( entry ) )
arrays . assertContainsOnly ( description , actual , newArray ( true , false ) )
assertThat ( os , instanceOf ( Slf4jInfoOutputStream . class ) )
Assert . isTrue ( parent . getChildrens ( ) . size ( ) > 0 )
assertThat ( violations . size ( ) , is ( 1 ) )
Assert . assertFalse ( item . matches ( divNode ) )
Assert . assertTrue ( "no users returned" , users . size ( ) > 0 )
Assert . assertEquals ( entrega , notaInfo . getEntrega ( ) )
assertEquals ( assertion , otherAppend )
assertTrue ( wordLineCounts . get ( "." ) . firstObject ( ) == 12 )
assertEquals ( singletonList ( SimpleInterface . class ) , actual )
assertEquals ( "[Array released]" , v8Object . toString ( ) )
assertEquals ( ace , parsed )
assertEquals ( "10" , document . getDocumentElement ( ) . getAttribute ( "project-version" ) )
assertEquals ( expectedResult , result )
assertEquals ( ( byte ) 0 , data . getData ( ) )
assertNull ( contextResult )
Assert . assertTrue ( ext != null )
assertThat ( evenNumbers , contains ( new Integer ( 2 ) , new Integer ( 4 ) , new Integer ( 6 ) , new Integer ( 8 ) , new Integer ( 10 ) ) )
assertNumberOfViolations ( constraintViolations , 0 )
assertEquals ( value , testee . resolveExpressions ( value ) )
assertTrue ( writeLatch . await ( 5 , TimeUnit . SECONDS ) )
assertThat ( result , is ( "123" ) )
assertEquals ( "ZZZZZZ" , function . execute ( "zzzzzz" ) )
assertThat ( sut . getTotalPrice ( ) , is ( 4500 ) )
assertThat ( HiveObjectUtils . getParameter ( table , AVRO_SCHEMA_URL_PARAMETER ) , is ( "test" ) )
assertEquals ( newArrayList ( "hello" , "world" ) , result )
Assert . assertEquals ( 3 , ee . evaluate ( ) )
assertTrue ( checkContains ( reasoned , "SubClassOf(<http://x.org/XA> <http://x.org/XB>)" ) )
assertEquals ( "{\"Books\":{\"books\":[{\"id\":123,\"name\":\"CXF in Action\"}]}}" , getStringFromInputStream ( in ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 1 , warnings . size ( ) )
assertTrue ( CycleDetection . hasCycle ( TestGraphFactory . createDirectedNew ( data ) ) )
assertThat ( DoubleUtil . toDouble ( i ) . doubleValue ( ) , is ( 1d ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , firstOutbound )
assertEquals ( 5 , i )
TestCase . assertTrue ( result )
assertEquals ( "The value is not correct." , Long . toString ( date . toInstant ( ) . toEpochMilli ( ) ) , value )
assertProcessInstanceFinished ( processInstance , ksession )
assertEquals ( new Sequence ( 2015 , 0 , 0 ) , sequence )
assertThat ( retryAfter , is ( expected ) )
assertEvent ( "org/osgi/framework/ServiceEvent/REGISTERED" , FilterUtils . eq ( "service.objectClass" , "org.knowhowlab.osgi.testing.it.testbundle.service.Echo" ) , 2 , TimeUnit . SECONDS )
assertThat ( appl , is ( JavaSignatureComparator . MATCH_BOXING ) )
assertTrue ( descriptor . hasConstrainedParameters ( ) , "Setting given for parameter should take precedence" )
assertFalse ( property . isRowIdentifier ( ) )
assertFalse ( isHoliday )
assertEquals ( FFmpegJob . State . FINISHED , job . getState ( ) )
Assert . assertEquals ( "Preface" , text )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
Assert . assertFalse ( isValid )
assertEquals ( HardActivityConstraint . ConstraintsStatus . FULFILLED , status )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( "stuffmorestuff" , result )
assertEquals ( expected , result )
Assert . assertEquals ( Permission . YES , providerPermission )
assertTrue ( found )
assertEquals ( OptionalLong . empty ( ) , queue . checkTimeout ( ticker . read ( ) ) )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
assertEquals ( "((hello == 'stringgoodbye') or (key1 == 'boolean1'))" , jexl )
assertEquals ( 1 , classes . size ( ) )
assertEquals ( "[]" , toString )
assertEquals ( 34.5 , mda . getAbsoluteHumidity ( ) , 0.1 )
spliterators . assertHasOnlyCharacteristics ( INFO , actual , DISTINCT )
assertEquals ( 0 , lintresult . getIssues ( ) . size ( ) )
Assert . assertTrue ( "report should be filled in but was size " + fileProvenanceReport . size ( ) , fileProvenanceReport . size ( ) == 483 )
assertEquals ( "test_metric" , sentMetric . getKey ( ) )
assertFalse ( frameData . equals ( null ) )
assertEquals ( "wrong tree" , expected , parser . getParseTree ( ) )
assertEquals ( "isNull()" , buffer . toString ( ) )
assertEquals ( "stream: input" , result )
Assert . assertEquals ( i . ordinal ( ) , obj )
assertEquals ( "JSON serialization is wrong" , json1 , json2 )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "[Test] expecting:\n<['Yoda', 'Luke']> to end with:<['Han', 'Leia']>" , message )
assertTrue ( filter . allow ( event , listener ) )
assertSingleNotificationType ( EventType . FAILED_AUTHENTICATION )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
Assert . assertTrue ( content . contains ( "imports-cleaner" ) && content . contains ( "src" ) )
assertTrue ( g1 instanceof PublicCloneable )
assertThat ( unmarshal ( sb ) , allOf ( hasEntry ( "some key" , "some value" ) , hasEntry ( "explicit key" , "explicit value" ) ) )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertEquals ( expected , actual )
assertEquals ( VisitStatus . BYPASS , visit ( node ) )
Assert . fail ( "Exception should be Thrown" )
assertFalse ( connection . isConnected ( ) )
assertTrue ( k1 . equals ( k2 ) )
assertEquals ( 4 , m . payloadSize ( ) )
Assert . assertTrue ( true )
assertXMLStringsEquals ( "<Root>\n" + "   <Intermediate>\n" + "      <X>Passed</X>\n" + "      Value\n" + "   </Intermediate>\n" + "</Root>\n" , test . toString ( ) )
Assert . assertSame ( "Same request was not returned as expected." , request , returnedRequest )
assertEquals ( 3 , lines . split ( "\n" ) . length - 1 )
assertNull ( result . get ( RETURN_RESULT ) )
assertFalse ( isCalled [ 0 ] )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
Assert . assertEquals ( "Unexpected result: " + result , expectedResult , result )
assertNotNull ( result )
assertTrue ( ! call ( ) . isGeo ( ) )
responseObserver . assertThatNoErrors ( )
Assert . assertArrayEquals ( array , ( Object [ ] ) ArrayUtils . cloneArray ( array ) )
assertEquals ( new Date ( futureDate ) , job . getNextRun ( ) )
Assert . assertTrue ( downlodedFile . exists ( ) )
assertCustomerWithLinksSample ( )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertThat ( threads . size ( ) , is ( 1 ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + "<fields templateEngineKind=\"Velocity\" >" + "<description><![CDATA[A description...]]></description>" + "<field name=\"developers.Name\" list=\"true\" imageName=\"\" syntaxKind=\"\">" + "<description><![CDATA[A field description...]]></description>" + "</field>" + "</fields>" , writer . toString ( ) )
assertNotNull ( result )
assertEquals ( N , Iterators . size ( client . createScanner ( tableName , Authorizations . EMPTY ) . iterator ( ) ) )
assertEquals ( "Wrong class" , CLS_NAME , ConfigurationUtils . loadClass ( CLS_NAME ) . getName ( ) )
assertEquals ( expectedTokens . get ( i ) , token )
assertThat ( systemOutRule . getLog ( ) , containsString ( "test help" ) )
assertSame ( LITTLE_ENDIAN , ChannelBuffers . unmodifiableBuffer ( buf ) . order ( ) )
assertTrue ( contentType . getValue ( ) . contains ( expectedformat . getContentType ( ) ) )
assertEquals ( "0123/0123456789abcdefghijklmnopqrstuvwxyz0123456789abcdefgh/0123456789abcdefghi/012345==" , accessToken )
assertOrder ( true , query ( ) . sortDescending ( "one" ) )
assertEquals ( "3 timer siden" , t . format ( new Date ( 0 ) ) )
assertThat ( unmarshal ( sb ) , hasEntry ( "some key" , HACK_ATTEMPT ) )
assertFalse ( data . isExceptionNow ( ) )
Assert . assertEquals ( "PK2222" , result )
assertThat ( dialect , instanceOf ( H2Dialect . class ) )
assertEquals ( expectedDateTime , parsedTime )
assertTrue ( emptyMap . isEmpty ( ) )
assertEquals ( "http://example.com/" , result )
Assert . assertEquals ( "Incorrect render output" , expected , actual )
assertSame ( value , result )
assertEquals ( expResult , result , 0.0 )
assertEquals ( "This   has  some  name.txt" , new PrefixTypesChain ( prefix ) . process ( prefix , nameRequest ( "txt" ) . originalName ( "name.pdf" ) . text ( "  This \n   has \t some $搂掳茅莽" ) ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertArrayEquals ( packet , Handshake . loadFromPacket ( packet ) . toPacket ( ) )
Assert . assertEquals ( "prefix.correctreplacement" , result )
assertEquals ( "GBP 0.94" , test . toString ( ) )
assertEquals ( "transaction TX:sessionId:99 sessionId BEGIN 3 unique-qualifier 100\r\n" , new String ( buf . array ( ) ) )
assertEquals ( Arrays . asList ( LRL , LR , LRR , R ) , paths )
assertEquals ( 3 , seqResetCount )
Assert . assertEquals ( 0 , actionService . list ( ) . size ( ) )
assertEquals ( 5l , d . asInt8 ( ) )
assertEquals ( expResult , result )
assertEquals ( PaxDate . of ( 2012 , 7 , 27 ) , test )
assertEquals ( SERVICE_UNAVAILABLE . getStatusCode ( ) , result . getCode ( ) )
assertFalse ( testPropertyLoader . properties . isEmpty ( ) )
assertSame ( activeElement , targetLocator . activeElement ( ) )
assertThat ( HtmlFormEntryUtil . getFullNameWithFamilyNameFirst ( name ) , is ( "Goodrich, Mark" ) )
assertTrue ( v1 . compareTo ( v2 ) < 0 )
assertEquals ( "http://example.com/fhir/?name=james" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertResultSetOrderAgnostic ( resultSet , expectedRows )
Assert . assertEquals ( expected , s , 1e-15 )
assertEquals ( "Unexpected primary style name" , state . primaryStyleName , layout . getPrimaryStyleName ( ) )
assertFalse ( conv . canConvert ( String . class ) )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( expected , actual )
assertTrue ( service . publish ( "message" ) )
assertEquals ( Math . sqrt ( 18 ) , FrontUtils . distanceToClosestPoint ( point3 , front ) , EPSILON )
assertEquals ( object . longs , result . longs )
assertProcessInstanceCompleted ( processInstance )
assertTrue ( true )
Assert . assertEquals ( "Go to <a href=\"web:http://www.company.com/\">http://www.company.com/</a> <br>Enjoy!" , value )
Assert . assertEquals ( expectedSub , subtracted )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertEquals ( 2 , result . getSize ( ) )
Assert . assertEquals ( "getName" , readMethod . getName ( ) )
assertEquals ( expResult , result )
assertThat ( runtimeInfo . getRuntimeClassName ( ) , is ( "org.talend.components.simplefileio.runtime.SimpleFileIODatastoreRuntime" ) )
assertThat ( s , is ( EXPECTED_CONTENT ) )
assertEquals ( snapshot , lastEscalation . getSnapshot ( ) )
assertEquals ( "refName" , op . refSpec )
assertEquals ( "anchor must be invariant to timezone change" , anchor , monthView . getAnchorDate ( ) )
assertEquals ( Sets . newHashSet ( "ru.kfu.itis.cll.uima.commons.DocumentMetadata" , "ru.kfu.itis.issst.evex.Person" , "ru.kfu.itis.issst.evex.Organization" , "ru.kfu.itis.issst.evex.Artifact" , "ru.kfu.itis.issst.evex.Weapon" , "ru.kfu.itis.issst.evex.Job" , "ru.kfu.itis.issst.evex.Time" , "ru.kfu.itis.issst.evex.Event" , "ru.kfu.itis.issst.evex.Die" , "ru.kfu.itis.issst.evex.StartPosition" ) , typeNames )
assertThat ( decision . getResult ( ) , is ( false ) )
assertPushPromiseFrame ( frame , streamId , promisedStreamId , headerBlock )
assertTrue ( elementMock . getGraphIds ( ) . isEmpty ( ) )
assertEquals ( y , pradf . getNextLineOffset ( x ) )
assertTrue ( instance . validate ( file ) )
Assert . assertEquals ( mockA , a1 )
assertEquals ( 12 , jpegBitsPerSample ( "MR2_UNC-JPLL.dcm" ) )
assertArrayEquals ( PASSWORD . toCharArray ( ) , actual )
Assert . assertNotNull ( "null result from rule execution" , result )
assertThat ( rendering , startsWith ( "Yesterday at " ) )
assertEquals ( "{\"store\":{\"book\":[{\"category\":\"reference\",\"author\":\"Nigel Rees\",\"title\":" + "\"Sayings of the Century\",\"price\":8.95},{\"category\":\"fiction\",\"author\":\"Evelyn Waugh\"," + "\"title\":\"Sword of Honour\",\"price\":12.99},{\"category\":\"fiction\",\"author\":\"test1\"," + "\"title\":\"title1\",\"price\":13}],\"bicycle\":{\"color\":\"red\",\"price\":19.95}}," + "\"arrayTest\":[1,2,3]}" , result . get ( RETURN_RESULT ) )
assertThat ( formatter . format ( jcal ) , is ( "April/14, Heisei 29" ) )
assertStoppedEventOnValidValue ( table , 0 , throwOnEmpty , false )
assertTrue ( failure . cause ( ) instanceof LeadershipTransferFailedException )
assertEquals ( post . getUnsubscribeLinkForSubscribersOf ( Post . class ) , "/topics/1/unsubscribe" )
Assert . assertTrue ( copyFrom . equals ( builder . offset ( 11 , 10 ) . build ( ) , EqualCondition . EXPECT_BORDER ) )
assertEquals ( new BigDecimal ( "19.00" ) , maximum )
assertBeanValidation ( json , "query.metric[0].aggregators[0].m_divisor may not be zero" )
assertEquals ( CellImgFactory . class , imgFactory . getClass ( ) )
assertEquals ( Arrays . asList ( mockSourcePath ) , modulePathIds )
assertNotNull ( s )
Assert . assertFalse ( ipList . isEmpty ( ) )
assertEquals ( 2.71828 , dt . doubleValue ( ) , 0.0001 )
Assert . assertTrue ( "Protocol Version should be HTTP/1.1." , response . getProtocolVersion ( ) . toString ( ) . contains ( "HTTP/1.1" ) )
assertTrue ( calendar instanceof Calendar )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , not ( hasEnvVar ( "STARTUP_MODE" , ADMIN_STATE ) ) )
assertThat ( dialect . addOptimizerHints ( sql , hints ) . toString ( ) , is ( "SELECT /* SQL_ID */ /*+ INDEX (PUBLIC.TEST_1 test_ix) USE_NL */" + System . lineSeparator ( ) + " * FROM PUBLIC.TEST_1" ) )
assertTrue ( roles . size ( ) > 0 )
assertTrue ( cs . communicationAllowed ( ) )
assertThat ( order , is ( equalTo ( expected ) ) )
assertSame ( authority , forward . authority ( ) )
Assert . assertTrue ( true )
assertTrue ( "audit should contain change of institutionsCountries" , msgs . get ( 0 ) . getMessage ( ) . contains ( "friendlyName=<institutionsCountries>" ) )
assertEquals ( "Local variable is 788" , 788 , ret )
assertSame ( expected , result )
assertEqualsIgnoreWhitespace ( expected , drl )
Assert . assertEquals ( expResult , result )
assertThat ( query . count ( ) , is ( 1L ) )
arrays . assertContainsOnly ( description , actual , other )
assertThat ( anyTS . getMinimum ( DIGITAL_HOUR_OF_DAY ) , is ( 0 ) )
Assert . assertEquals ( msg , expected , actual , delta )
assertNull ( result )
assertEquals ( "predicate names not recorded properly in grammar" , expectedPreds , preds )
assertEquals ( "Select one or more tags" , element . getChildMarkup ( ) )
assertThat ( result , is ( instanceOf ( resultClass ) ) )
assertEditorClosed ( )
assertTrue ( branch . getSubscribers ( ) . contains ( user ) )
assertEquals ( 1 , executeSolrQuery ( "firstname_s:John lastname_s:Doe" ) . size ( ) )
assertFalse ( validatorLoadbalancer . validate ( meta , POST ) . passedValidation ( ) )
assertThat ( eqlTranService . queryDataCount ( ) , is ( 0 ) )
Assert . assertNotNull ( result )
assertEquals ( true , deadClient . getClient ( ) . isBroken ( ) )
assertNull ( this . memcachedClient . get ( key ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertTrue ( captor . getValue ( ) instanceof EventBusBeanPostProcessor )
assertArrayEquals ( bytes , x )
Assert . assertEquals ( str . property , sc2 . property )
assertEquals ( "Junit error" , expectedString , p . toURLParameterString ( ) )
assertEquals ( "2012-08-09 00:00:00" , runtime )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertTrue ( errors . hasGlobalErrors ( ) && errors . getGlobalError ( ) . getCode ( ) . equals ( PermissionsValidator . ERROR_CODE_ADMIN_TYPE ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 3456.098F % 1.088F , r )
Assert . assertNotNull ( dbRangerServiceDefList )
switchyardConfig . assertModelValid ( )
assertEquals ( "org.test.Hello" , new ImportsToFQCN ( imports ) . resolveFQCN ( "Hello" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertThat ( notifier . notify ( notice ) , is ( 200 ) )
assertEquals ( Sets . newHashSet ( role1 , role2 ) , sentryStore . getRolesByGroups ( SEARCH , twoGroups ) )
assertThat ( issues , is ( empty ( ) ) )
assertEquals ( "hello" , filterResult . getValue ( ) )
assertEquals ( FilterReply . NEUTRAL , filter . decide ( event ) )
assertFalse ( "Handler was run" , ran . get ( ) )
assertThat ( references . size ( ) , equalTo ( 0 ) )
assertThat ( source , is ( instanceOf ( TFilterRowSink . class ) ) )
assertTrue ( envVars . size ( ) == 0 )
assertThat ( sb . toString ( ) , is ( String . format ( "TinyTablesPreproSBool[value=%s]" , e ) ) )
assertEquals ( context , classLoaderContextStr . get ( ) )
assertExec ( "Unicode is OK" , StringSample . class , "unicode__Ljava_lang_String_2" , exp )
assertEquals ( 1 , result )
assertTrue ( ( boolean ) AviatorEvaluator . execute ( "date1>date2" , env ) )
assertThat ( text , equalTo ( originalString ) )
Assert . assertNull ( targetHours )
assertEquals ( Arrays . asList ( testDirectors . toArray ( ) ) . toString ( ) , Arrays . asList ( Arrays . copyOf ( movie . getDirectors ( ) . toArray ( ) , 1 ) ) . toString ( ) )
assertEquals ( alpha , res , 0.04 )
Assert . assertTrue ( "did not find command in output" , false )
assertThat ( formattedString , is ( "100001m" ) )
assertEquals ( map1 , map2 )
assertNotNull ( javaxSchema )
assertThat ( result , is ( expected ) )
Assert . assertEquals ( "Action command should defualt to the string value" , value , input . getActionCommand ( ) )
assertMatchAnyMethodsCalled ( "SFF_0" )
assertEquals ( firstWord , futureWord . get ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( Result . ERROR , properties . afterFormFinishMain ( repo ) . getStatus ( ) )
assertEquals ( Status . NOT_ACCEPTABLE . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( scope . getProperties ( ) , is ( not ( sameInstance ( properties ) ) ) )
assertTrue ( keyValueTableView . getItems ( ) . size ( ) == 5 )
context . assertIsSatisfied ( )
assertEquals ( "one or two null values" , result )
assertTrue ( result . contains ( "THE_ERROR" ) )
assertEquals ( false , wizard . canComplete ( ) )
assertEquals ( expected , actual )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertMockEndpointsSatisfied ( )
assertThat ( querys , is ( contains ( Arrays . asList ( "SELECT /* _TESTSQL_ID_ */" , "\t*" , "FROM" , "\tPRODUCT" , "WHERE 1 = 1" , "ORDER BY PRODUCT_ID" ) ) ) )
assertEquals ( singlePropertyHash ( booleanValue ) , booleanProperty . hashCode ( ) )
assertThat ( routing . route ( request , "/abc/111/222" ) , is ( "/abc?xxx=111&yyy=222" ) )
assertEquals ( 200 , response . getStatus ( ) )
assertNull ( s )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 01" ) )
mockery . assertIsSatisfied ( )
assertNotNull ( Sim . reader ( ) . read ( ) )
assertEquals ( expectatedMessage . trim ( ) , e . getMessage ( ) . trim ( ) )
assertEquals ( "hello" , template . format ( getResolver ( ) ) )
assertThat ( page2 , is ( page1 ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "12.3" ) )
assertThat ( base . thenApplyCompleted ( fn , from ) , is ( new ImmediateFailed < > ( caller , cause ) ) )
Assert . assertEquals ( "Expected HTTP 404 to be returned as process instance is aborted." , Response . Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertFalse ( isMappingModelExists ( ) )
assertEquals ( expResult , result )
assertEquals ( 0.5d , cacheManager . getMaximumSizePercent ( ) , 1e-9 )
Assert . assertFalse ( json . has ( DATA_NAME ) )
assertFalse ( constraintValidator . isValid ( Money . of ( 1 , "EUR" ) , null ) )
assertArrayEquals ( exceptedIdx , originalIdx )
assertTrue ( lhs . equals ( rhs ) )
assertTrue ( graph . isEmpty ( ) )
assertThat ( fieldName + " should be public, static, and final" , isValidConstantField ( field ) , equalTo ( true ) )
assertResult ( "checking single-branch with no skip" )
assertThat ( target . setProperty ( PropertyNames . OBJECT_TYPE , "NewObjctType" ) , is ( nullValue ( ) ) )
Assert . assertThat ( t , matchesKey ( "STRING" ) )
assertEquals ( token . serialise ( ) , result . serialise ( ) )
assertEquals ( false , result )
assertEquals ( "?a=b" , qs . toQueryString ( ) )
TestUtils . assertEquals ( "preMultiply(Vector) returns wrong result" , diagResult , denseResult , 0d )
assertThat ( e . hasMoreElements ( ) , is ( false ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertSame ( expected , result )
Assert . assertEquals ( Status . AWAITING , status )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( extraFile ) ) )
assertEquals ( Join . Type . FULL , join . getType ( ) )
assertEquals ( val . getGrowthRate ( ) , Rate . of ( 0.03 ) )
Assert . assertEquals ( expected , actual )
assertEquals ( tempFileName , appender . getFileName ( ) )
assertEquals ( Constants . CT_FHIR_XML_NEW , ourContentTypes . get ( 0 ) )
assertEquals ( expected , actual )
assertEquals ( "Long null parsed by DateParser(\"yyyy/MM/dd\") must return null" , null , dateOut )
assertEquals ( testHelper . formatPercent ( dataQuality . get ( p2 ) ) , testHelper . formatPercent ( params . get ( p1 ) ) , 0.05 )
assertListTEquals ( listT , 42 )
assertNotNull ( tf )
assertThat ( encoded , stringContainsInOrder ( "{" , "\"resourceType\": \"Patient\"," , "\"contained\": [" , "{" , "\"resourceType\": \"Condition\"," , "\"id\": \"1\"" , "}" , "]," , "\"extension\": [" , "{" , "\"url\": \"test\"," , "\"valueReference\": {" , "\"reference\": \"#1\"" , "}" , "}" , "]," , "\"birthDate\": \"2016-04-05\"" , "}" ) )
assertMockEndpointsSatisfied ( )
assertSendAndReceiveTextMessage ( cf , queue , text )
assertEquals ( null , def )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( 6 , tuple . len ( ) )
editor . assertProblems ( "resources|Duplicate key" , "my-repo|Unused 'Resource'" , "resources|Duplicate key" , "your-repo|Unused 'Resource'" , "type|Duplicate key" , "type|Duplicate key" )
assertThat ( toml . entrySet ( ) , empty ( ) )
Assert . assertEquals ( ImmutableList . of ( ThresholdFilterHeaderExtender . FILTER_GT_MIN_AAF_HOM_ALT ) , annotator . getFiltersFor ( gt ) )
assertNotNull ( "Unread Priority Messages are not null" , unreadMessages )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertThat ( request . equals ( request2 ) , is ( false ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
Assert . assertTrue ( ClassScanner . getAllWithAnnotation ( basePackage , SomeAnnotation . class ) . contains ( SomeClass . class ) )
assertFalse ( next )
assertEquals ( "poster,style=bubble,foo" , options . docStyle ( ) )
assertUpdatedVasyaAndPetya ( all )
assertTrue ( scope , scope . contains ( "Horizontal component of 3D system" ) )
Assert . assertTrue ( resources . getResourceNames ( ) . isEmpty ( ) )
mock . assertIsSatisfied ( )
assertEquals ( "a copyright" , id3v2Tag . getCopyright ( ) )
assertEquals ( testNode2 , PolyElement . getLastNode ( ) )
assertFalse ( HttpMessageUtils . isText ( message ) )
assertEquals ( STATIC , CorrectEquals . staticValue )
assertEquals ( "stilton" , ( ( List ) session . getGlobal ( "list" ) ) . get ( 0 ) )
Assert . assertNull ( instanceTypes )
assertTrue ( h == null )
assertThat ( myEqler . queryByMap ( map ) , is ( equalTo ( "bb" ) ) )
Assert . assertEquals ( "NDC is wrong" , ndcData , jsonObject . get ( "ndc" ) )
assertTrue ( response . isSuccess ( ) )
Assert . assertTrue ( pid > 0 )
scope . assertMetrics ( TestHelper . constructDatum ( "name" , StandardUnit . COUNT , 3.0 , 2.0 , 5.0 , 2 ) )
assertEquals ( InterpreterResult . Code . ERROR , ret . code ( ) )
doThrow ( new ValidationFailedException ( "" ) ) . when ( messages ) . assertAbsenceOfErrors ( )
assertEquals ( Sets . newHashSet ( "server=server1->db=jranalyst1" , "server=server1->functions" ) , backend . getPrivileges ( Sets . newHashSet ( "manager" ) , new ActiveRoleSet ( Sets . newHashSet ( "junior_analyst_role" , "functions" ) ) ) )
Assert . assertEquals ( PersistenceState . NOT_PERSISTED . toString ( ) , fileInfo . getPersistenceState ( ) )
assertThat ( command . accept ( state ) , is ( false ) )
assertFalse ( sf . getCache ( ) . containsEntity ( AnnotatedEntity . class , 0L ) )
assertNull ( myDtoClass )
assertTrue ( elapsed < context . getConfigParams ( ) . getElectionTimeOutInterval ( ) . toMillis ( ) )
assertNotNull ( result )
Assert . assertFalse ( sparkRestClient . killJob ( ) . withSubmissionId ( submissionId ) )
assertThat ( NoReasonsAllowed . noReasonsAllowed ( ) , not ( allows ( reason ) ) )
assertThat ( result , is ( jsonNull ( ) ) )
assertEquals ( "?p2=v2" , query . toString ( ) )
assertEquals ( expected , actual )
assertEquals ( Result . PASS , ok . apply ( item ) )
assertEquals ( "labelled" , mm . get ( m . expandPrefix ( "p:thing" ) ) )
UnitTestUtils . assertEquals ( new Array2DRowFieldMatrix < Fraction > ( testDataPlus2 ) , m . scalarAdd ( new Fraction ( 2 ) ) )
assertArrayEquals ( new String [ ] { "root" , "leftLeaf" , "rightLeaf" } , treeContent )
assertFalse ( "RM never turned active" , - 1 == cluster . getActiveRMIndex ( ) )
assertEquals ( 0 , list . size ( ) )
assertNull ( x . getValue ( ) )
assertThat ( estimator . getCardinality ( ) , is ( 34L ) )
assertEquals ( true , extractedBool )
Assert . assertEquals ( "A one." , output )
assertEquals ( "<p><del>123</del></p>" , result )
assertFalse ( DialectFactory . isProgress ( mockSqlDatabaseMetaData ) )
rule . assertScenarioEnded ( )
assertEquals ( V8_OBJECT , v8Object . getType ( "key" ) )
assertThat ( queriesString , is ( nullValue ( ) ) )
assertThat ( rasterNames , equalTo ( expected ) )
assertThat ( fieldError , is ( nullValue ( ) ) )
assertEquals ( expected , actual )
assertSignalEventDefinition ( "start" , "signal" )
assertThat ( g . toSmiles ( ) , is ( "CC=[C@]=C1OCCCC1" ) )
Assert . assertEquals ( nowTopOfTheHour , hourToStop )
AssertAnnotations . assertToken ( tokens , select ( jcas , Token . class ) )
assertTrue ( result . getFailures ( ) . isEmpty ( ) )
assertEquals ( 4 , baos . toByteArray ( ) . length )
assertEquals ( "/topic" , m_callback . getTopic ( ) )
assertEquals ( "msg=Hello\\World+With+SpecChars+搂*)$!卤@-_=;`:\\,~|" , request . getQueryString ( ) )
assertEquals ( "Stratio Decision" , name )
Assert . assertEquals ( ultimoOrden , maxOrden )
assertTrue ( errorIndicator . isEmpty ( ) )
assertTrue ( chars . length ( ) == 10 )
assertStreamOpenedExactlyOnce ( )
assertContentEquals ( style , Arrays . asList ( "tte" , "r" , "loo" , "ooo" , "ooo" , "ooo" , "oon" , "gwo" , "rd" ) )
Assert . assertTrue ( "Expected: 'Hello John Doe' Actual: " + hi . getName ( ) , "Hello John Doe" . equals ( hi . getName ( ) ) )
assertOut ( "var /** @type {Object} */ a" )
Assert . assertTrue ( servlet . isDebugMode ( ) )
assertSerializerDetectsEmptyValue ( )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( IssueStatus . ASSIGNED , taskFound . getStatus ( ) )
assertEquals ( suggestedName , hive2DatabaseMeta . generateColumnAlias ( columnIndex , suggestedName ) )
assertEquals ( 2 , fields . size ( ) )
assertTrue ( detail )
assertEquals ( true , cluster . getDataNodes ( ) . get ( 0 ) . isBPServiceAlive ( cluster . getNamesystem ( ) . getBlockPoolId ( ) ) )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , secondOutbound )
assertEquals ( "## Changes from version  to w1-wip1\n" + "\n" + "### Added\n" + "- topologyTemplate/relationshipTemplates/NodeTypeWithoutProperties_RelationshipTypeWithoutProperties_NodeTypeWithTwoKVProperties\n" + "- topologyTemplate/relationshipTemplates/NodeTypeWithoutProperties_RelationshipTypeWithTwoKvPropertie_NodeTypeWithXmlElementProperty\n" + "- topologyTemplate/relationshipTemplates/NodeTypeWithTwoKVProperties_RelationshipTypeWithXmlElementProperty_NodeTypeWithXmlElementProperty\n" + "\n" + "### Changed\n" + "- id\n" + "  changed from \"ServiceTemplateMinimalExampleWithAllPropertyVariants\" to \"ServiceTemplateMinimalExampleWithAllPropertyVariants_w1-wip1\"\n" + "- name\n" + "  changed from \"ServiceTemplateMinimalExampleWithAllPropertyVariants\" to \"ServiceTemplateMinimalExampleWithAllPropertyVariants_w1-wip1\"\n" + "- topologyTemplate/nodeTemplates/NodeTypeWithoutProperties/otherAttributes/{{http://www.opentosca.org/winery/extensions/tosca/2013/02/12}location}\n" + "  changed from \"undefined\" to \"\"\n" + "- topologyTemplate/nodeTemplates/NodeTypeWithXmlElementProperty/otherAttributes/{{http://www.opentosca.org/winery/extensions/tosca/2013/02/12}location}\n" + "  changed from \"undefined\" to \"\"\n" + "- topologyTemplate/nodeTemplates/NodeTypeWithTwoKVProperties/otherAttributes/{{http://www.opentosca.org/winery/extensions/tosca/2013/02/12}location}\n" + "  changed from \"undefined\" to \"\"\n" + "- topologyTemplate/nodeTemplates/NodeTypeWithTwoKVProperties/properties/KVProperties/{key1}\n" + "  changed from \"value\" to \"testValue\"\n" + "\n" + "### Removed\n" + "- topologyTemplate/relationshipTemplates/con_16\n" + "- topologyTemplate/relationshipTemplates/con_28\n" + "- topologyTemplate/relationshipTemplates/con_40" , toscaDiff . getChangeLog ( ) )
assertTrue ( validScrollRange . contains ( getGridVerticalScrollPos ( ) ) )
assertTrue ( history . startsWith ( "+COMMIT_FLUSH_A,+COMMIT_FLUSH_B,-COMMIT_FLUSH_A,+COMMIT_FLUSH_C" ) )
assertEquals ( 0 , branch_conditions . size ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertTrue ( HttpTestUtils . semanticallyTransparent ( originResponse , result ) )
assertSame ( perspectiveContextActivity , presenter . resolveContext ( mockPartView . getPresenter ( ) . getDefinition ( ) ) )
assertNonAccessibleDefaultAccessControl ( result )
assertTrue ( testFailed . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( "/" , r . matches ( Collections . < String , String > emptyMap ( ) ) . render ( ) )
assertNotNull ( result )
assertTrue ( result )
assertEquals ( 4. , pickup . getArrTime ( ) , 0.01 )
assertEquals ( ( ( ObjectWithOptions ) options . optOp ) . required , 10101 )
Assert . assertEquals ( createEmbedding ( v0 , e0 , v1 , e1 , v2 , v3 , e2 , e3 , v4 ) , result . get ( 0 ) )
assertEquals ( 2f , w . getValue ( ) , 0.01 )
assertEquals ( tstName , map . getName ( ) )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( 2 , instances . size ( ) )
assertTrue ( System . currentTimeMillis ( ) - now > 59 * 1000 )
assertServiceResource ( resource )
assertThat ( component . execute ( ) , is ( expected ) )
assertions . doesNotContain ( ( short ) 4 , index )
assertThat ( arguments . get ( 0 ) . getValue ( ) , is ( equalTo ( DataTable . create ( singletonList ( singletonList ( "content" ) ) ) ) ) )
assertEquals ( expResult , result )
assertEquals ( LOG_CONFIG_FILE , applicationArgumentsUnderTest . getLoggingConfigFileName ( ) )
Assert . assertEquals ( "Upload File\nNew Folder" , resultPage . getText ( ) )
assertEquals ( "Hello " + request , g . greetMeLater ( - 5000 ) )
assertFalse ( Futures . getUnchecked ( collector ) )
assertFalse ( inputMeta . getJaasConfigService ( ) . isPresent ( ) )
assertEquals ( t , new HttpURL ( s ) . toString ( ) )
assertEquals ( "\"1\"truenull" , mustache . render ( Json . createReader ( new StringReader ( "[\"1\",true,null]" ) ) . read ( ) ) )
assertEquals ( "a" , object . getStringValue ( ) )
Assert . assertNotEquals ( hmacExpected , hmac )
assertThat ( other , LocalTimeMatchers . sameSecondOfMinute ( date ) )
assertEquals ( "scheduleDeviceMethod" , Deencapsulation . getField ( jobsParser , "jobType" ) )
assertTrue ( this . reconnectManager . isValidTask ( task ) )
assertEquals ( asList ( 21 , 25 , 34 ) , scores )
assertThat ( server1 , not ( equalTo ( server2 ) ) )
assertEquals ( "public static void main(String[] args) {}" , actualContent )
assertEquals ( 4 , occ . getLocation ( ) . getBeginLine ( ) )
assertTrue ( closeLatch . await ( 1 , TimeUnit . SECONDS ) )
Assert . assertEquals ( "c" , sibling . getText ( ) )
assertEquals ( Integer . valueOf ( 1 ) , parseResults . get ( FILE_PATH ) . getHitsByLine ( ) . get ( NO_BRANCH_LINE ) )
Assert . assertEquals ( "true" , "true" )
assertNull ( e . getNetworkViews ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( "[1, 2, 3, 4, 6, 7, 5]" , result . toString ( ) )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertThat ( factory . create ( value ) , hasContent ( value . toString ( ) ) )
assertEquals ( "^~(.+)$" , pattern )
assertEquals ( 4 , actualEntries . size ( ) )
assertEquals ( "param.properties" , lineArgs . getParameterFilePath ( ) )
Assert . assertEquals ( key1 , actual )
assertNotNull ( entity . getId ( ) )
assertEquals ( Boolean . TRUE , result )
assertTrue ( filter . isDetected ( ) )
assertEquals ( "one or two null values" , result )
assertTrue ( "Chars not flushed" , new String ( buf , 0 , buf . length ) . equals ( testString ) )
assertHandCount ( playerA , BROOD_OF_COCKROACHES , 1 )
assertThat ( decodedValue , is ( actualValue ) )
assertTrue ( logger . isInfoEnabled ( ) )
assertThat ( this . appRegistryService . find ( "foo" , ApplicationType . sink ) . getUri ( ) . toString ( ) , is ( "maven://org.springframework.cloud.stream.app:log-sink-rabbit:1.2.0.RELEASE" ) )
assertEquals ( true , result )
assertEquals ( expected , result , .000001 )
assertThat ( list , ( Matcher ) contains ( new Object [ ] { "1" , "1" } , new Object [ ] { "1" , "1" } ) )
assertEquals ( "world" , result )
assertEquals ( expectedYAML , extractedYAML )
assertArrayEquals ( new String [ ] { "value1" , "value2" } , strings )
assertEquals ( "[[John], [Jane]]" , results . toString ( ) )
assertEquals ( new TupleN ( 1 , false , true , 2 , 3 ) , xtupleN ( sf , xint ( ) , xboolean ( ) , xboolean ( ) , xint ( ) , xint ( ) ) . extract ( "1,false,true,2,3" ) )
assertNode ( "/" , "mode:root" )
assertFalse ( classificationRule . test ( patent ) )
assertEquals ( "BEGIN\n" + "SELECT * FROM feature;\n" + "END;\n" , stmts . toString ( ) )
assertEquals ( "\"t\" '><'" , unescaped )
assertTrue ( "Multiple serializer registrations for one class " + "should throw an IllegalStateException" , thrown )
assertEquals ( "" , room . getAlias ( ) )
assertEquals ( 404 , response . status )
assertEquals ( expr , printConstraint ( expression ) )
Assert . assertEquals ( Status . FORBIDDEN . getStatusCode ( ) , resp . getStatus ( ) )
Assert . assertEquals ( result_backward_with_cats , result )
Assert . assertEquals ( ( threadCount * loopCount ) , txIds . size ( ) )
assertTokens ( Tokens . LP , new IntValueToken ( 239 ) , Tokens . RP )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
Assert . assertTrue ( pause )
assertEquals ( type , field . getType ( ) )
assertThat ( Util . stringValue ( "foo" , scope ) , is ( "bar" ) )
assertEquals ( TEST_2007_07_15_PONE , t )
Assert . assertEquals ( url . toExternalForm ( ) , filterResult )
assertThat ( target , is ( notNullValue ( ) ) )
assertEquals ( 0 , consumerPrefetch . retriesAttempted )
assertThat ( keyspace . getCqlStatement ( ) , is ( equalTo ( "CREATE KEYSPACE IF NOT EXISTS test WITH REPLICATION = {'class':'SimpleStrategy','replication_factor':1} " + "AND DURABLE_WRITES = true" ) ) )
assertThat ( results , is ( Arrays . asList ( "Hello, world!" ) ) )
assertEquals ( same . sum ( 1 ) , sum )
assertNull ( filterable . getFilter ( ) )
assertThat ( "generator-set-4.xml" , generatorSet , is ( expected ) )
assertNumEquals ( 4 , numberOfBars . calculate ( series , t ) )
assertThat ( example , version . toString ( ) , is ( projectVersion ) )
assertEquals ( true , result )
assertThat ( className , is ( "com.wideplay.warp.hibernate.HibernatePersistenceService" ) )
assertEquals ( "baz/\n" + "  foo/\n" + "    bar/\n" + "      wooz 0 (S_IFREG)\n" + "    rooz -> bar/wooz\n" , sw . toString ( ) )
assertEquals ( NodeValue . FALSE , r )
assertListIsEmpty ( driver ( ) . findElements ( By . linkText ( "notThere" ) ) )
assertNotNull ( instance )
assertThat ( keys , empty ( ) )
assertEquals ( "Expected 0 results!" , 0 , n )
assertEquals ( "Registered alias should be found." , "/a" , OSGiCleanMapper . map ( "/a/index.html" , true ) )
assertEquals ( - 10. , c , 0.01 )
assertArrayEquals ( new String [ ] { "Wyalusing State Park" , "Mill Bluff State Park" , "Roche-A-Cri State Park" , "Willow River State Park" , "Amnicon Falls State Park" , "Big Foot Beach State Park" } , wiStateParks )
Assert . assertEquals ( expected , actual )
assertEquals ( BAD_REQUEST . getStatusCode ( ) , response . getStatus ( ) )
assertThat ( s , is ( notNullValue ( ) ) )
assertThat ( fe , notNullValue ( ) )
assertThat ( "String schema" , combined , matches ( new SchemaMatcher ( expected ) ) )
assertEquals ( playlist , playlist )
assertEquals ( 1 , pagedResult . getTotalPages ( ) )
assertEquals ( 2 , tasks . size ( ) )
assertTrue ( Initialize . isInitialized ( fs , sconf , conf ) )
assertNull ( interfaceType . getArrayElementType ( ) )
assertEquals ( "SELECT Account.Name, (SELECT Account.Name FROM ChildAccounts) FROM Account WHERE Account.Name = 'x'" , visitor . getQuery ( ) . toString ( ) . trim ( ) )
assertTrue ( element . children ( ) . isEmpty ( ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoFatura ( ) . toString ( ) )
TestCase . assertTrue ( attribute . match ( t ) )
Assert . assertNotNull ( appStatsCenter )
assertEquals ( "Expected response not seen." , "Hi There!" , response )
Assert . assertNull ( "Value should not be found." , value )
assertEquals ( values , retrievedValues )
assertThat ( read ( format , written ) , contains ( 1.25d ) )
Assert . assertEquals ( String . class , clazz )
assertThat ( "active on problems" , monitor . isActivated ( ) , is ( true ) )
assertThat ( uuids . size ( ) , is ( 10 ) )
assertNull ( attr )
assertFalse ( actionValid )
Assert . assertEquals ( StatusCodes . NOT_FOUND , result . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "with SURVEY (ID, NAME) as (select survey2.ID, survey2.NAME\n" + "from SURVEY survey2)\n\n" + "from dual" , q . toString ( ) )
assertThat ( other , DateMatchers . sameMillisecondOfSecond ( date ) )
assertEquals ( expResult , result )
assertNotNull ( User . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( - 1.0 , wnd . rate ( ) , 0.0001 )
assertThat ( target . matchExactly ( match ) , is ( false ) )
assertThat ( future . get ( ) , is ( - 1 ) )
assertEquals ( "test-index-pattern" , defaultPattern )
assertRequest ( "POST" , "Subaccount/" )
Assert . assertEquals ( 0 , addresses . length )
Assert . assertEquals ( "Invalid conditions returned" , Arrays . asList ( condTrue1 , condTrue2 ) , and . getConditions ( ) )
Assert . assertEquals ( 1.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
assertThat ( subject . getArtifactDescriptors ( SOURCE_ARTIFACT_KEY ) . length , is ( 1 ) )
assertEquals ( results . size ( ) , 2 )
assertEquals ( expectedResult , verifyTomcat . invoke ( audit ) )
assertThatObjectsAreWritten ( root )
assertEquals ( "Should return SUCCESS" , ServiceTestConstants . SUCCESS_RESPONSE , jsonObj . get ( "status" ) . getAsString ( ) )
assertTrue ( ! sw . isStopWord ( "�板�ㄦ��" ) )
testContext . assertNull ( returnedExpireValue )
assertEquals ( "UUUU-04-01" , result . getParameters ( ) . get ( "date" ) . getAsString ( ) )
assertCorrectVariableInitialisation ( new long [ ] { length } , array )
Assert . assertEquals ( a * FastMath . cos ( w * v + p ) , f . value ( v ) , 0 )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . REPLACE , v , TERM_FACTORY . getConstantLiteral ( "^Ste(v|ph)en$" ) , TERM_FACTORY . getConstantLiteral ( "" ) , TERM_FACTORY . getConstantLiteral ( "i" ) ) , translation )
assertEquals ( "T" , plan . getTableRef ( ) . getTable ( ) . getTableName ( ) . getString ( ) )
assertEquals ( "defaulLabel,defaulLabel,defaulLabel" , sqlInputs . getStrColumns ( ) )
Assert . assertNotNull ( internalCache )
assertThat ( this . url , is ( equalTo ( "/context/customdispatcher/method" ) ) )
assertEquals ( IOTester . VALUES_OUT_PAYLOAD , buf . toString ( ) )
assertEquals ( expected , result )
assertEquals ( s3 , unassigned . iterator ( ) . next ( ) )
Assert . assertEquals ( Constants . GENERIC_SERIALIZATION_BEAN , url . getParameter ( Constants . GENERIC_KEY ) )
Assert . assertEquals ( Sets . newHashSet ( 1 ) , parser . getSecureBindIndices ( ) )
Assert . assertNotNull ( select )
assertThat ( view . estimatedDuration ( ) , is ( "" ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( 400 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertNotNull ( object )
assertEquals ( "Result" , 2 , map . size ( ) )
assertTrue ( "Directory not created" , dir . exists ( ) && dir . listFiles ( ) . length > 0 )
assertThat ( actual , is ( nullValue ( ) ) )
assertTrue ( value . equals ( httpContent . getHeader ( key ) ) )
assertEquals ( sid . getSubAuthorities ( ) . length , 0 )
Assert . assertEquals ( expected , actual )
assertEquals ( "Status code should be OK" , Response . Status . OK . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( "making sure that only one was deleted" , totalBeforeDelete - 1 , totalAfterDelete )
DelegationTestUtil . assertDelegationToSpy ( messageProducer )
assertHeader ( header , name , value )
assertEquals ( ChrisProductReaderPlugIn . class , plugIn . getClass ( ) )
assertEquals ( 2 , context . getTableCount ( ) )
Assert . assertEquals ( limit , resultsSize ( rc ) )
assertNotNull ( processInstance . getId ( ) )
assertEquals ( markerName , value )
assertEquals ( expected , actual )
assertThat ( I18nUtil . pre ( TEST_STRING ) , is ( TEST_STRING ) )
assertEquals ( searchConfigurationRest , searchConfigurationResource . getContent ( ) )
assertNull ( activity . getParent ( ) )
assertEquals ( "sekrit" , c . get ( Property . INSTANCE_SECRET ) )
assertThat ( result , equalTo ( false ) )
assertTrue ( elementsEqual ( successors , expected ) )
Assert . assertEquals ( expected , testIndex . findConc ( " 'May' 'dsgsdg'+ 'the' " ) )
assertThat ( resp . statusCode , is ( Response . NOT_FOUND ) )
assertThat ( description . getTitle ( ) , is ( "A step" ) )
assertEquals ( "Wrong mapper found for NullPointerException" , RuntimeExceptionMapper . class , exceptionMapper . getClass ( ) )
Assert . assertFalse ( iterator . hasTop ( ) )
assertThat ( result , nullValue ( ) )
Assert . assertNotNull ( app )
assertNull ( chain . generateSql ( new MockSqlStatement ( ) , new MockDatabase ( ) ) )
assertNotNull ( result )
Assert . assertEquals ( null , p . getValue ( ) )
Assert . assertEquals ( "�肩��|灏辫�|��|浜�" , words )
assertTrue ( p . getAmwProperty ( ) )
Assert . assertTrue ( clazz1 . isAssignableTo ( clazz2 ) )
assertEquals ( "00000000" , Hex . toHexString ( outputStream . toByteArray ( ) ) . toUpperCase ( ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
assertEquals ( expectedParsedResult , actualParsedResult )
assertNotNull ( "ClientContact is null" , entity )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertResponse ( DataMockery . createOPTIONSResponse ( ) , response )
Assert . assertTrue ( originalId . equals ( packetExternal . getID ( ) ) )
assertTrue ( BitsInt . test ( v , 0x10 , 0 , 8 ) )
Assert . areEqual ( "1" , hs . get ( "count" ) . toString ( ) , "select count(*) as count from test1 where test1.clum <= 199 " )
assertTrue ( getNoErrorMsg ( ) , result )
Assert . assertEquals ( "a {\n" + "  width: 2px;\n" + "}\n" , compilation . getValue ( ) )
assertTrue ( AcceptanceTestUtil . isInterested ( component , remoteWorkerStub . getDeploymentID ( ) . getServiceID ( ) , rmwOD . getDeploymentID ( ) ) )
Assert . assertEquals ( "(nt_change_indel (nt_range (nt_point_location (nt_base_location (nt_number 123))) _ (nt_point_location (nt_base_location (nt_number 124)))) del (nt_number 2) ins (nt_number 4))" , nt_change_indel . toStringTree ( parser ) )
assertEquals ( vr . getValidity ( ) , Validity . INVALID )
assertArrayEquals ( new long [ ] { 5 } , result )
assertEquals ( "myTestId" , history . getIdElement ( ) . getIdPart ( ) )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( "Wrong class" , MATCH_CLASS , provider . determineConfigurationClass ( decl , Collections . singleton ( params ) ) )
assertEquals ( name . getName ( ) , request . getLogName ( ) . getName ( ) )
Assert . assertEquals ( 1 , ( int ) person . getPersonId ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( test , result )
assertEquals ( "</6>,</6/0>,</6/0/0>,</6/0/1>,</6/0/2>,</6/0/3>,</6/0/4>,</6/0/5>,</6/0/6>" , strLinks )
assertThat ( Util . stringValue ( "foo" , scope ) , is ( "bar" ) )
assertHandCount ( playerA , 1 )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
assertNotNull ( accounts )
assertThat ( builder . statsCounterSupplier , is ( Caffeine . ENABLED_STATS_COUNTER_SUPPLIER ) )
assertArrayEquals ( splitString , testString9ExpectedSplit )
assertThat ( PrettyTime . of ( Locale . GERMANY ) . withReferenceClock ( clock ) . printRelative ( PlainTimestamp . of ( 2014 , 9 , 3 , 14 , 0 ) . atUTC ( ) , Timezone . of ( ZonalOffset . UTC ) , TimeUnit . HOURS ) , is ( "jetzt" ) )
assertEquals ( until . getDays ( ) , days )
assertNull ( next )
assertEquals ( "1" , e . eval ( ) . toPlainString ( ) )
assertEquals ( account . getType ( ) , AccountProvider . ALIYUN )
assertNotNull ( result . getRows ( ) )
assertTrue ( r1 instanceof PublicCloneable )
Assert . assertEquals ( 0.0 , error , 1.0e-6 )
assertCompensationEventDefinition ( "subProcessStart" )
assertEquals ( "JPY 2.34" , test . toString ( ) )
Assert . assertEquals ( ( threadCount * loopCount ) , txIds . size ( ) )
assertEquals ( ( long ) 8 , result . getLongValue ( ) )
Assert . fail ( "Did not throw expected exception for first char '" + c + "'" )
assertEquals ( "HTTP/1.1 200 OK" , conn2 . getHeaderField ( 0 ) )
assertTrue ( instance . canSelectArbitrarily ( ) )
assertThat ( datePeriod . with ( Duration . STD_CALENDAR_PERIOD ) , is ( Duration . ofCalendarUnits ( 3 , 3 , 24 ) ) )
assertCollectionSerialization ( expected , collection )
assertTrue ( Files . isSameFile ( p1 , p2 ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertThat ( whoisResources . getWhoisObjects ( ) , is ( empty ( ) ) )
context . assertIsSatisfied ( )
assertEquals ( aMessage , res )
assertEquals ( 1 , postDTOs . size ( ) )
assertAuthenticationResult ( getCurrentTestName ( ) , s . auth ( ) , false )
assertThat ( set . size ( ) , is ( 0 ) )
assertEquals ( 80 , config . httpPort ( ) )
assertFalse ( getSubject ( ) . isEnforcementEnabled ( ) )
assertArrayEquals ( "Explicit visible columns, " + i + " alignments set" , currentAlignments , t . getColumnAlignments ( ) )
Assert . assertEquals ( versao , protocolo . getVersao ( ) )
assertEquals ( expectedNode , actualNode )
assertEquals ( 1 , hits . totalHits )
assertNull ( output )
assertEquals ( "Privacy policy generated not equal to the original policy" , "<?xml version=\"1.0\" encoding=\"UTF-8\"?><RequestPolicy></RequestPolicy>" , privacyPolicy )
assertNotNull ( provider )
assertThat ( host , is ( equalTo ( "192.168.1.1" ) ) )
assertEquals ( "value" , node . getProperty ( "myproperty" ) )
assertEquals ( Long . valueOf ( 321 ) , ttlLongArgumentCaptor . getValue ( ) )
assertThat ( eqler . queryCnt ( ) , is ( 33 ) )
Assert . assertEquals ( expected , s , 1e-15 )
Assert . assertSame ( configuration , victim . getConfiguration ( ) )
assertMeasure ( measure , CommitsPerWeekDayMeasure . class , 9 )
assertEquals ( testSesameTripleTypedLiteral , tripleAsStatement )
Assert . assertNotNull ( "AppProperty " + appProperty + " does not have a key" , key )
assertEquals ( expResult , result )
GAssert . assertEquals ( expected , actual )
assertEquals ( HttpStatusCodes . INTERNAL_SERVER_ERROR . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( 1024 , cli . getOptionValue ( "block size" ) )
assertEquals ( "0: General use CPU\n" + "1: CPU not available\n" + "2: Thread[logger,5,main] alive=true\n" + "3: Thread[engine,5,main] alive=true\n" + "4: General use CPU\n" + "5: CPU not available\n" + "6: Thread[main,5,main] alive=false\n" + "7: Thread[tcp,5,main] alive=true\n" , actual )
assertEquals ( "Incorrect qualifyFreq" , 6000 , ( int ) response . getQualifyFreq ( ) )
assertEquals ( v1 . getId ( ) , id . get ( ) )
assertNull ( presenter . getLastSearch ( ) )
Assert . assertEquals ( 3 , retireable . getRetiredBy ( ) . getId ( ) . intValue ( ) )
assertEquals ( "From Server 123.123" , client . testPrimitiveTypes ( request ) . getOut ( ) )
assertTrue ( "adapter does not support method" , result )
assertSame ( a1 , a2 )
files . assertHasDigest ( INFO , actual , algorithm , expected )
assertEquals ( DecodeQualification . SUITABLE , decodeQualification )
assertEquals ( message . toString ( ) , sb . toString ( ) )
assertThat ( result , instanceOf ( type ) )
assertNotNull ( crs )
assertThat ( info . mapSize , is ( MEBIBYTES . toBytes ( 1 ) ) )
assertThat ( response , is ( String . format ( "" + "{\n" + "  \"link\" : {\n" + "    \"type\" : \"locator\",\n" + "    \"href\" : \"http://localhost:%d/test/person\"\n" + "  },\n" + "  \"objects\" : {\n" + "    \"object\" : [ {\n" + "      \"type\" : \"person\",\n" + "      \"link\" : {\n" + "        \"type\" : \"locator\",\n" + "        \"href\" : \"http://rest-test.db.ripe.net/test/person/PP1-TEST\"\n" + "      },\n" + "      \"source\" : {\n" + "        \"id\" : \"test\"\n" + "      },\n" + "      \"primary-key\" : {\n" + "        \"attribute\" : [ {\n" + "          \"name\" : \"nic-hdl\",\n" + "          \"value\" : \"PP1-TEST\"\n" + "        } ]\n" + "      },\n" + "      \"attributes\" : {\n" + "        \"attribute\" : [ {\n" + "          \"name\" : \"person\",\n" + "          \"value\" : \"Pauleth Palthen\"\n" + "        }, {\n" + "          \"name\" : \"address\",\n" + "          \"value\" : \"Singel 258\"\n" + "        }, {\n" + "          \"name\" : \"phone\",\n" + "          \"value\" : \"+31-1234567890\"\n" + "        }, {\n" + "          \"name\" : \"e-mail\",\n" + "          \"value\" : \"noreply@ripe.net\"\n" + "        }, {\n" + "          \"link\" : {\n" + "            \"type\" : \"locator\",\n" + "            \"href\" : \"http://rest-test.db.ripe.net/test/mntner/OWNER-MNT\"\n" + "          },\n" + "          \"name\" : \"mnt-by\",\n" + "          \"value\" : \"OWNER-MNT\",\n" + "          \"referenced-type\" : \"mntner\"\n" + "        }, {\n" + "          \"name\" : \"nic-hdl\",\n" + "          \"value\" : \"PP1-TEST\"\n" + "        }, {\n" + "          \"name\" : \"remarks\",\n" + "          \"value\" : \"remark\"\n" + "        }, {\n" + "          \"name\" : \"created\",\n" + "          \"value\" : \"2001-02-04T17:00:00Z\"\n" + "        }, {\n" + "          \"name\" : \"last-modified\",\n" + "          \"value\" : \"2001-02-04T17:00:00Z\"\n" + "        }, {\n" + "          \"name\" : \"source\",\n" + "          \"value\" : \"TEST\"\n" + "        } ]\n" + "      }\n" + "    } ]\n" + "  },\n" + "  \"terms-and-conditions\" : {\n" + "    \"type\" : \"locator\",\n" + "    \"href\" : \"http://www.ripe.net/db/support/db-terms-conditions.pdf\"\n" + "  }\n" + "}" , getPort ( ) ) ) )
assertEquals ( IS_NULL . toString ( ) , res . getHibernateCriterion ( ) . toString ( ) )
assertThat ( derivedAllocation . asDerivedFrom ( GenericResourceAllocation . create ( ) ) , sameInstance ( derivedAllocation ) )
assertEquals ( result , "L" )
assertThat ( view . elementIsPresent ( By . id ( "some-element" ) ) , is ( false ) )
assertTrue ( true )
Assert . assertTrue ( hTriggerInfoEntities . size ( ) == 1 )
Assert . assertEquals ( ValidationResult . Result . OK , sink . validate ( null ) . getStatus ( ) )
assertArrayEquals ( new byte [ ] { ( byte ) 0x1F , ( byte ) 0xCC , 0x3B , 0x60 , 0x59 , 0x4B , 0x08 , 0x4E , ( byte ) 0xB7 , 0x24 , ( byte ) 0xD2 , ( byte ) 0xC6 , 0x29 , 0x7E , ( byte ) 0xF3 , 0x51 } , asn1 . getOctets ( ) )
assertEqualsIgnoreWhitespace ( expected , real )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( "/tmp/filename" , fixture . getFileName ( ) )
assertEquals ( webSocketHandler . calculateHeaderSize ( WebSocketHeader . PAYLOAD_MEDIUM_MAX ) , WebSocketHeader . MED_HEADER_LENGTH_MASKED )
assertEquals ( WashingMachineState . WASHING , machineStateGlobal )
Assert . fail ( )
assertNotNull ( appContext . getResourceDocument ( new StringBufferInputStream ( xml ) ) )
assertTrue ( params . isEmpty ( ) )
assertEquals ( expResult , result )
assertNotNull ( result )
assertNoResults ( net , add1 )
assertThat ( b , is ( true ) )
assertThat ( supported , is ( true ) )
assertThat ( cursor . proceedTo ( 'b' ) , is ( true ) )
assertTrue ( capabilities . isOperationSupported ( GetMap ) )
assertEquals ( 2.5d , item . getDouble ( ) , 0 )
assertTrue ( result . size ( ) == 1 )
Assert . assertEquals ( "[6, 2, 8, 1, 4, 3, 5]" , values . toString ( ) )
assertNull ( out )
assertTrue ( s . deserialize ( Create . class , s . serialize ( new Create ( ) ) ) instanceof Create )
assertEquals ( "Expected 0 results!" , 0 , n )
Assert . assertTrue ( res . failed ( ) )
assertEquals ( "rf-dg-body" , ( ( HtmlElement ) dataGrid . getFirstByXPath ( "tbody[@id='dataGrid2:dgb']" ) ) . getAttribute ( "class" ) )
assertThat ( subject . getFormattedKey ( ) . toString ( ) , is ( "[mntner] DEV-ROOT-MNT" ) )
assertNotNull ( path )
assertNotNull ( result )
assertErrorEventDefinition ( "end" , "myErrorCode" , null )
assertEquals ( expected , actual )
assertElementPresent ( By . className ( "v-datefield-popup" ) )
assertEquals ( true , result . getResult ( ) )
assertSame ( p3 , result )
assertSame ( stringMessageBodyReader , applicationProviders . getMessageBodyReader ( String . class , null , null , TEXT_PLAIN_TYPE ) )
assertEquals ( true , this . repositoryFactory . getRepository ( createUserContext ( "admin" ) ) . getById ( modelId ) . isHasImage ( ) )
assertThat ( students . size ( ) , is ( 1 ) )
assertTrue ( ws . isConnected ( ) )
assertThat ( axioms , hasItem ( axiom ) )
assertArrayEquals ( "Arguments" , null , new ConciergePlatformBuilder ( m_bundleContext , "version" ) . getArguments ( m_platformContext ) )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( "SELECT 3 + 5;" , text )
assertEquals ( current . < String > getAs ( field . name ( ) ) , format . format ( new Date ( currentTimeMillis ) ) )
assertEquals ( "void dest1()" , toString ( dest ) )
assertTrue ( "FastMap Contains Value TestValue" , _fastIdentityMap . containsValue ( int . class ) )
assertTrue ( "Option 'list-inventory' not found in " + Arrays . deepToString ( optionSet . specs ( ) . toArray ( ) ) , optionSet . has ( "list-inventory" ) )
assertThat ( errors . getAllErrors ( ) , hasSize ( 0 ) )
assertEquals ( p . getName ( ) , "testDefined" )
assertEquals ( before , after )
assertTrue ( "Streams should be equal" , Arrays . equals ( stringBytes , ByteStreams . toByteArray ( inputStream ) ) )
assertTrue ( io . markTouched ( mock ( DocumentID . class ) , "tag" ) )
Assert . assertTrue ( row . matches ( guess ) )
assertThat ( target , notNullValue ( ) )
assertEquals ( file . getName ( ) , expected , html . trim ( ) )
Assert . assertEquals ( "Check the credentials " , MessageTypeEnum . OK , messagetypeenum )
assertEquals ( expected , result )
assertEquals ( 1 , processorsFactory . getPreProcessors ( ) . size ( ) )
assertTrue ( page . asXml ( ) . contains ( "Great! You are now in the correct destination view." ) )
assertFuzzy ( restrict , result , createFromGiven ( 20.0 , 10 ) )
assertEquals ( connMock , connection )
assertTrue ( className . equalsIgnoreCase ( Number . class . getSimpleName ( ) ) )
Assert . assertNotNull ( testSession )
assertNull ( fileInfo )
assertFalse ( "unexpected value" , value )
assertEquals ( cfType , conf . get ( PropertyConstants . COLUMN_FAMILY_TYPE . txt ) )
assertEquals ( logLine , "log line" )
assertTrue ( foundClassData . length > 0 )
Assert . assertFalse ( eventSchedulerService . isRunning ( ) )
assertProcessInstanceAborted ( processInstance )
Assert . assertNotNull ( tested . prepareESBulkRequestBuilder ( ) )
assertEquals ( player . getMinions ( ) . size ( ) , 0 )
assertThat ( Version . parse ( items ) , is ( Version . parse ( "1.2.3" ) ) )
Assert . assertTrue ( success )
assertThat ( option . isNull ( ) , is ( true ) )
Assert . assertNull ( identifierType )
Assert . assertEquals ( ste . toString ( ) , frame . toString ( ) )
assertEquals ( expected , actual )
Assert . assertNull ( retireable . getRetireReason ( ) )
assertNull ( "To is not properly parsed" , mapper . readTo ( columns ) )
Assert . assertEquals ( 0.0 , error , 1.0e-11 )
Assert . assertNotNull ( hostname )
assertThat ( main . getResourceName ( ) , equalTo ( classNameToPath ( TEST_ROOT_CLASS ) + ".class" ) )
assertEquals ( expecting , result )
assertSame ( 0 , ids . size ( ) )
assertNull ( p2 )
assertThat ( InterfaceWrapperHelper . getId ( testModelRef ) , is ( testModelRef . getRecord_ID ( ) ) )
assertEquals ( "d/bitcoin" , new String ( ns . getOpName ( ) . data , "ISO-8859-1" ) )
assertThat ( e . hasMoreElements ( ) , is ( false ) )
Assert . assertNotNull ( "The TestCases should not be null" , singleTestCase )
Assert . assertEquals ( "Incorrect Compare Type" , AbstractCompare . CompareType . GREATER_THAN , compare . getCompareType ( ) )
assertEquals ( 5L , count )
assertEquals ( expected , result )
Assert . assertTrue ( docIn == elementOut . getParentNode ( ) )
assertThat ( boundSql . getSql ( ) , Matchers . equalTo ( "select  ok " ) )
assertEquals ( "the_value" , obj )
Assert . assertFalse ( result . isEmpty ( ) )
Assert . assertEquals ( 3 , resourceList . size ( ) )
assertTrue ( ! result )
assertEquals ( "llvalue1" , result )
assertEquals ( 50 , p . getAge ( ) )
assertTrue ( prefs . matches ( t ) )
assertOut ( "var a:URIError = new URIError()" )
assertFalse ( history . isStepForwardAllowed ( ) )
assertThat ( this . refrigWar . getProducts ( ) . get ( 0 ) , is ( apple ) )
assertEquals ( "Expected 0 splits" , 0 , splits . size ( ) )
assertEquals ( ( ( ObjectWithOptions ) options . optOp ) . required , 10101 )
assertThat ( response . getBody ( ) , containsString ( "Hello World, Buddy" ) )
assertThat ( description . toString ( ) , is ( "got <2> cell(s) on row <1> expected <3> sheet \"Sheet1\"" ) )
Assert . assertEquals ( "" , WebUtil . getContextPath ( ) )
assertEquals ( Person . class , treeGrid . getBeanType ( ) )
assertEquals ( expected , sb . toString ( ) )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response5 . getResponseObject ( ) )
assertThat ( response . getStatus ( ) , equalTo ( 403 ) )
assertEquals ( result , "John,Jane,Adam,Tom" )
Assert . assertEquals ( fsAccess . serviceHadoopConf . get ( "foo" ) , "FOO" )
assertThat ( list . size ( ) , is ( 1 ) )
assertEquals ( "V1 Comment" , wrapper . getComment ( ) )
assertThat ( decodedURL , equalTo ( URL_VALUE ) )
assertEquals ( "bar" , cl . getOptionValue ( "foo" ) )
assertEquals ( padded ( OBJECT_OVERHEAD + OBJECT_REF ) , ThreadTrackingContext . getBytes ( ) )
assertEquals ( expecting , found )
assertThat ( response . getBody ( ) , equalTo ( "Hello World" ) )
Assert . assertNotNull ( devBean )
assertEquals ( value , new WStringTypeNode ( testBinaryReaderBuilder . putWString ( value ) . build ( ) , chunkHeader , parent , value . length ( ) * 2 ) . getValue ( ) )
assertEquals ( "dois reais" , actual )
assertOut ( "<Button id=\"myBtn\"></Button>" )
assertEquals ( "submission was not properly returned" , 0.0f , percentageComplete , DELTA )
assertEquals ( IllegalArgumentException . class , e . getClass ( ) )
assertFalse ( result )
assertEquals ( "LIMIT 5" , statement . toString ( ) )
assertEquals ( Result . FAIL , nogroup . apply ( item ) )
assertEquals ( "<p><del>123</del></p>" , result )
Assert . assertEquals ( 401 , statusCode )
assertEquals ( expectedInstructions , actualInstructions )
assertThat ( context . canExecute ( new SimulatableObject ( ) ) , is ( true ) )
assertEquals ( true , result )
Assert . assertFalse ( types . isEmpty ( ) )
assertEquals ( 500 , response . getStatus ( ) )
assertTrue ( zoomUI . canZoomIn ( ) )
Assert . assertNull ( this . manager . get ( this . family1 ) )
assertEquals ( renderGroupIdArtifactIdVersionResult ( ) , result )
assertEquals ( "" , result )
assertTrue ( row . get ( 2 ) . text ( ) . equals ( "R0C2" ) )
assertCharlieAndDelta ( alpha )
Assert . assertEquals ( "�驻�� 41 �拽�转" , prettyTime . format ( prettyTime . calculatePreciseDuration ( new Date ( new Date ( ) . getTime ( ) - 40 * 60 * 1000 - 40 * 1000 ) ) ) )
assertNotNull ( controlLoopState )
assertEquals ( 5 , vowelCount )
Assert . assertEquals ( 4 , decomposition . size ( ) )
assertEquals ( PhoenixContextExecutor . class . getClassLoader ( ) , Thread . currentThread ( ) . getContextClassLoader ( ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertThat ( books , hasItems ( new Book ( "New Book #1" , 1 ) , new Book ( "New Book #2" , 2 ) , new Book ( "New Book #3" , 3 ) , new Book ( "New Book #4" , 4 ) ) )
assertThat ( actual , equalTo ( expected ) )
assertEquals ( expecting , found )
assertEquals ( 40 , new AcceptsLambda < Integer > ( ) . accept ( l ) . intValue ( ) )
assertEquals ( RIB_NOT_FOUND , this . output . toString ( ) )
assertTrue ( result >= 33d && result <= 42d )
assertFalse ( monitorEvent . isPresent ( ) )
assertTrue ( entity . getId ( ) > 0L && entity . getSex ( ) == null )
assertEqualsIgnoreLineEnding ( Json . pretty ( rep ) , "{\n" + "  \"name\" : \"hi!?\"\n" + "}" )
assertThat ( result , isFailedCommand ( ) )
Assert . assertThat ( i , is ( 6 ) )
assertTrue ( aNumber == result )
assertEquals ( new Float ( 10 ) , maxPreference )
assertOut ( "var a:Number = parseInt(\"666\", 10)" )
Assert . assertEquals ( configNew , configOld )
assertEquals ( HttpStatusCode . NO_CONTENT . code , response . getStatus ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
given ( ) . port ( jettyPort ) . log ( ) . all ( ) . accept ( ContentType . JSON ) . when ( ) . get ( "/openapi" ) . then ( ) . log ( ) . all ( ) . assertThat ( )
assertEquals ( "<a>One</a> Two Three <i>Four</i> Fix <i>Six</i>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertEquals ( r . size ( ) , 1 )
assertEquals ( LockMode . WRITE , mComposite . getLockMode ( ) )
assertEquals ( "no-transform" , cc . toString ( ) )
assertEquals ( expected , AuthorizationsUtil . minimize ( expected ) )
assertEquals ( AbstractSuperclass . class , fr2 . getSource ( ) . getVariableClass ( ) )
assertThat ( indexPage . isElementVisible ( By . id ( "visible" ) ) , is ( true ) )
assertNull ( scanner . parse ( "--hello" ) )
assertEquals ( "hdfs://uri1:8200/blah" , uri . getName ( ) )
assertEquals ( "california street, ca" , real )
assertEquals ( originalFetchCount , timeline . getFetchCount ( ) )
assertTrue ( true )
assertSame ( platformTransactionManager , configuration . getTransactionManager ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertEquals ( RESOURCE_MANAGER , action . getResourceManager ( ) )
Assert . assertFalse ( policy . isResponseCacheable ( "HEAD" , response ) )
assertTrue ( "Chars not flushed" , new String ( buf , 0 , buf . length ) . equals ( testString ) )
assertDirectoryNotEmpty ( CSS_LOCATION )
Assert . fail ( "Payloads are not equal" )
assertEquals ( "[x=10.0][y=0.0]" , s . getDeliveryLocation ( ) . getId ( ) )
FactorDecompositionTest . assertFactorization ( lPoly , MultivariateSquareFreeFactorization . SquareFreeFactorizationMusser ( lPoly ) )
assertCursor ( meta . pofClassAttribute , 1 , 1 , 10 , 17 )
Assert . assertEquals ( expectedName , publicName )
assertEquals ( "Must return self" , fooResult , result )
assertEquals ( "Wrong ID." , ( Long ) f . getPersistentState ( ) . getId ( ) , f . getRelationshipId ( ) )
assertE ( "         " + "         " + "         " + "         " + "         " + "    x    " + "   xxx   " + "  oxoox  " + "oxooooox " )
assertNull ( result )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertNotNull ( personStructure )
assertEquals ( "test(from getter)" , beanWrapper . getPropertyValue ( "readableProperty" ) )
assertEquals ( "[{\"groupName\":\"SomeCounterGroupName\",\"counters\":[{\"counterNa" + "me\":\"SomeCounterName\",\"value\":3}]}]" , json )
assertTrue ( toolSpec . getOutstreamIds ( ) . size ( ) == 1 )
Assert . assertFalse ( readable )
assertThat ( messageIdLocalPart , is ( "20120527220444.GA6565" ) )
assertFalse ( broker . isPresent ( ) )
assertEquals ( 403 , response . getStatus ( ) )
assertEquals ( "(SOURCEFIELD1 == 'sourceValue' AND TARGETFIELD1 == 'targetValue' AND ENRICHFIELD1 == 'enrichValue1') OR (SOURCEFIELD2 == 'sourceValue' AND TARGETFIELD2 == 'targetValue' AND ENRICHFIELD2 == 'enrichValue2')" , transformed )
assertTrue ( false )
assertFalse ( ca . isStrokeEnabled ( ) )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
Assert . assertTrue ( msg . size ( ) == 1 )
context . assertIsSatisfied ( )
assertEquals ( response . asString ( ) , SUCCESS , response . get ( OUTCOME ) . asString ( ) )
assertThat ( editor . getValue ( ) , is ( ( Object ) ReadPreference . preferSecondary ( ) ) )
assertOut ( "var /** @type {number} */ a = 0xabc" )
assertArrayEquals ( expected , list . toArray ( ) )
assertEquals ( 6 , services . size ( ) )
Assert . assertFalse ( verifyTest ( builder ) )
assertPlanMatches ( sort )
assertEquals ( ImmutableList . of ( $2 ( 4 , "foot" ) , $2 ( 4 , "ball" ) , $2 ( 6 , "bazzar" ) ) , Lists . newArrayList ( out . materialize ( ) ) )
Assert . fail ( "build listing failure" )
Assert . assertEquals ( testDN , actual . getUserDN ( ) )
assertThat ( "ORACLE" , is ( ( String ) this . rootNode . getProperty ( StandardDdlLexicon . PARSER_ID ) ) )
assertNotNull ( count )
Assert . assertTrue ( marshalled . contains ( Namespace . CURRENT . getUriString ( ) ) )
assertArrayEquals ( getEncoded ( expectedCsr ) , csr . getEncoded ( ) )
assertFalse ( alive )
Assert . assertEquals ( expected , actual )
assertEquals ( "Should return HTTP 400 (Bad Request)" , HttpStatus . BAD_REQUEST , mongodbFeedSource . getFeed ( getFeedRequest ) . getResponseStatus ( ) )
Assert . assertTrue ( resultFuture . get ( ) . isSuccessful ( ) )
assertEquals ( format ( "%s should have been valid=%s but was valid=%s" , name , expectedResult , result ) , expectedResult , result )
Assert . assertEquals ( 0 , request . getHeaders ( ) . length )
Assert . assertNull ( "Should be null, as it is also null in the original process definition on the server." , returnedResourceName )
assertEquals ( "Expected 0 results!" , 0 , n )
shorts . assertNotLessThan ( description , actual , expected )
assertThat ( result , is ( jsonBoolean ( true ) ) )
assertThat ( subject . toFilterExpression ( ) , is ( "(osgi.os=macosx)" ) )
assertNotNull ( "Configuration for todo REST must not be null." , configuration )
assertEquals ( "Failed to convert to a Calendar and back" , date1 , DateUtils . toCalendar ( date1 ) . getTime ( ) )
assertEquals ( "Ls.getReplacementCommand" , expected , actual )
assertThat ( list . isEmpty ( ) , is ( true ) )
rule . assertScenarioEnded ( )
Assert . assertTrue ( ldap . authenticate ( "user" , "password" ) )
assertEquals ( expected , actual )
assertThat ( ms . contains ( "aaa" ) , is ( false ) )
assertEquals ( "Mexican Rigatoni and Cheese" , microdata . getFirstProperty ( "name" ) )
assertEquals ( 3 , testSet . getTestResults ( ) . size ( ) )
assertEquals ( SCHEME_DOMAIN , shortForm )
assertEquals ( "Successfully registered applications: [source.foo, sink.bar]" , result )
Assert . assertEquals ( "unexpected xml protocol values" , expected , dataObjCopyInp . getParsedTags ( ) )
assertThat ( PathUtil . getRelativePath ( root , child ) , is ( "/xyz/file" ) )
assertTrue ( now . getValue ( ) . before ( then . getValue ( ) ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Refer/>" , elem . toXml ( ) )
assertPotentialOwnerIsPresent ( )
assertThat ( view . getRenderKitId ( ) , is ( renderKitId ) )
assertThat ( actual , is ( notNullValue ( ) ) )
assertEquals ( 1 , r )
assertThat ( request , instanceOf ( VaadinPortletRequest . class ) )
assertTrue ( CycleDetection . hasCycle ( TestGraphFactory . createDirectedNew ( data ) ) )
assertEquals ( documento , documentoModificado )
assertEquals ( Integer . parseInt ( EVSE_ID . getId ( ) ) , unlockConnectorArgument . getValue ( ) . getConnectorId ( ) )
assertTrue ( authService . isLoggedIn ( ) )
Assert . assertNull ( "Should be null for option with null code" , SelectListUtil . getOptionWithMatching ( options , "A" ) )
assertEquals ( "1. Shift-Enter button pressed" , getLogRow ( 0 ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
Assert . assertEquals ( "answer=42" , actual )
assertEquals ( 90 , ( ( Service ) vrp . getJobs ( ) . get ( "2" ) ) . getServiceDuration ( ) , 0.1 )
assertEquals ( "bar" , response . getHeaderString ( "foo" ) )
assertEquals ( expected , actual )
Assert . assertEquals ( elements . size ( ) , dto . getElements ( ) . size ( ) )
assertEquals ( Integer . valueOf ( HttpServletResponse . SC_OK ) , status . get ( ) )
assertThat ( newerBundleInfo . isNewerVersionThan ( olderBundleInfo ) , is ( true ) )
Assert . assertEquals ( 1 , lines . length )
Assert . assertTrue ( response . getStatus ( ) == NO_CONTENT . getStatusCode ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_" + file , destinationFolder , "diff_" ) )
Assert . assertEquals ( 1 , list . size ( ) )
Assert . assertEquals ( "" , result )
assertEquals ( 1 , testMap . keySet ( ) . size ( ) )
assertThat ( result , is ( IdentityMapping . EMPTY_PREFIX ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( SAFE_NAME , getAppId ( conf ) )
assertEquals ( "[{\"name\":\"table 1\",\"pkPolicy\":\"user_generated_value\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"isPrimaryKey\":true},{\"name\":\"column 1\",\"type\":\"convertedType\",\"nullable\":true,\"defaultValue\":\"default\"}]}]" , content )
assertEquals ( "Unexpected number of user information rows in table" , 6 , detailPage . getTableDataSize ( ) )
assertTrue ( MessageController . isBroken ( child ) )
assertThat ( "default minimun number of cores" , sut . getMinCores ( ) , is ( equalTo ( VM . DEFAULT_MIN_CORES ) ) )
assertValid ( "//s:Body/w:receiveUserResponse" , response )
assertEquals ( "Name" , f . getHumanName ( ) )
assertEquals ( expected , actual )
assertEquals ( "TARGET:" , annotate ( "TARGET:" ) )
assertTrue ( pages . contains ( arbitraryPagePresenter ) )
assertTrue ( ValidationUtilities . validateRegExp ( regex , "abc\n def" ) )
assertEquals ( "DELETE FROM person WHERE last_name = ? AND favourite_number = ? AND first_name LIKE ? AND first_name != ?" , sql . trim ( ) )
assertEquals ( 100 , frame . getInt ( ) )
Assert . assertEquals ( input , HtmlSanitizerUtil . sanitize ( input ) )
assertNotNull ( result )
assertThat ( renderer . getShortForm ( entity ) , is ( "owl:topDataProperty" ) )
assertNotNull ( arrayPath . get ( ConstantImpl . create ( 0 ) ) )
ModelTestBase . assertIsoModels ( expected , y )
a . assertStringNode ( "/wps:ProcessDescriptions" )
assertTrue ( opt . isRequired ( ) )
assertDateEquals ( new DateTime ( 2013 , 5 , 20 , 9 , 59 , 59 , 999 ) , date )
assertOut ( "public interface IA extends IB, IC, ID {\n}" )
assertEquals ( "" , found )
assertNull ( "The appender should be null." , appender )
assertEquals ( counter . getValue ( ) , 0 )
assertTrue ( comparePomFiles ( reactorProjects ) )
rule . assertScenarioEnded ( )
assertTrue ( containsJob ( vrp . getJobs ( ) . get ( "1" ) , getRoute ( "21" , Solutions . bestOf ( solutions ) ) ) )
Assert . assertFalse ( "should have gotten a false on this delete" , status )
assertEquals ( 0 , runtimeService . createEventSubscriptionQuery ( ) . count ( ) )
assertEquals ( "1.1" , decoder . encode ( BigDecimal . valueOf ( 11 , 1 ) , DOT_DEC_DELIMITERS ) )
assertEquals ( "_cat/allocation/testNode1%2CtestNode2" , cat . getURI ( ElasticsearchVersion . UNKNOWN ) )
assertThat ( output . getValue ( ) , equalTo ( "You entered FOO!\n" ) )
assertThat ( Files . exists ( Paths . get ( stringFromStdout ) ) )
assertArrayEquals ( mac , correctMac )
Assert . assertEquals ( 1L , Long . parseLong ( result + "" ) )
assertNotNull ( config )
assertEquals ( "A2" , cache . get ( "a" ) )
Assert . assertNotNull ( "no result row created" , resultRow )
Assert . assertTrue ( "We should have a complete header" , bufPos != - 1 )
Assert . assertEquals ( - 1L , ( long ) request . getBodySize ( ) )
assertEquals ( witness , node )
Assert . assertEquals ( expectedPath , normalizedPath )
child . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertEquivalent ( bufferB , new Buffer ( ) . writeUtf8 ( us + xs + ys ) )
assertThat ( condition . isSatisfied ( ) , is ( false ) )
assertEquals ( mockBase64BinaryValue , result )
assertIncluded ( node )
assertEquals ( 14 , metrics . size ( ) )
assertThat ( value , equalTo ( "set_VALUE_get" ) )
assertThat ( $ . url ( ) , endsWith ( "WithoutJSTest_2.html?aName=aValue" ) )
assertThat ( data . getDateStamp ( ) , is ( "[2019-01-30T10:17:09.848Z]" ) )
assertNotEquals ( hsr1 , hsr2 )
arrays . assertContainsSequence ( description , actual , sequence )
assertEquals ( "select length(entity_0.code) from Entity entity_0" , select . getQuery ( ) )
assertEquals ( fieldDefinition , res )
Assert . assertEquals ( 0.0 , median , 0.2 )
assertNotNull ( result )
Assert . assertEquals ( generatedStrPath , expectedStrPath )
assertEquals ( "token1" , target . getToken ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
assertNull ( array )
assertTrue ( rt . getEventType ( ) . equals ( EventType . FSERVER_ZK_ENTITYGROUP_CLOSED ) )
assertTrue ( nullCap == null )
assertSchemaExists ( "person" )
assertThat ( PlainTime . axis ( ) . getBaseUnit ( CLOCK_HOUR_OF_AMPM ) , is ( unit ) )
assertEquals ( expected , this . fsParser . extractFlowspec ( entry . build ( ) ) )
assertEquals ( 42 , value . get ( ) )
assertNotNull ( s )
assertThat ( command . accept ( state ) , is ( true ) )
assertTrue ( actual . isEmpty ( ) )
assertLog ( Log . DEBUG , "test debug argument" )
assertFalse ( "Data was not removed" , appDataTestInstanceRemoved . getValues ( ) . containsKey ( "nonexistent" ) )
assertThat ( ints , notNullValue ( ) )
assertThat ( parameters , is ( "?searchView=own&offset=5&limit=10&orderBy=mostSupports&show=running&minSupportCount=50" ) )
assertEquals ( ia , result )
assertEquals ( Optional . empty ( ) , path )
Assert . assertTrue ( intersect instanceof EmptyRange )
assertEquals ( 1_000 , rmw . getNumber ( ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertThat ( ctrl . createMock ( ToMock . class ) , is ( ToMock . class ) )
assertEquals ( cd , cdc . get ( null , "id1" ) )
assertThat ( newFormTester . getTextComponentValue ( "newPropertyKey" ) . isEmpty ( ) , is ( true ) )
assertEquals ( 0.8830402459180449 , r , 1e-3 )
assertEquals ( false , options . isRecursive ( ) )
assertFalse ( i1 . equals ( new Object ( ) ) )
Assert . assertEquals ( new URI ( url + "/" + suffix ) , UriUtils . buildNewURI ( new URI ( url ) , suffix ) )
assertEquals ( result , range . exclude ( other ) )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 1 ) )
assertEquals ( expectedReference , summary . getReference ( ) )
assertNotNull ( result )
assertTrue ( p . matcher ( tags ) . matches ( ) )
assertNotNull ( Deencapsulation . getField ( job , "jobClient" ) )
assertTrue ( result . size ( ) > 5 )
assertThat ( tupleComparator . compare ( new Tuple ( - 1 , 1 ) , new Tuple ( 1 , - 1 ) ) , is ( 1 ) )
assertEquals ( BuilderFactory . start ( ) . addMinKey ( "a" ) . build ( ) , doc )
assertObjectEquals ( "[null,{f:'a'},{f:'a'},{f:'b'},{f:'c'}]" , p . run ( bs , in , sa ) )
assertThat ( caughtException ( ) , instanceOf ( TaxServiceUnavailableException . class ) )
assertTrue ( provided instanceof HTableFactory . HTableFactoryImpl )
assertEquals ( expected , built )
runner . assertNotValid ( serviceImpl )
assertNotNull ( op )
assertNotNull ( injector )
Assert . assertEquals ( "URI don't match and Hnadshake  exception is not thrown" , true , exThrown )
assertEquals ( Code . INTERNAL , statusCaptor . getValue ( ) . getCode ( ) )
assertInState ( STATE . STOPPED , services )
assertEquals ( expResult , result )
assertTrue ( lastRefLog . getComment ( ) . startsWith ( "branch: Created from branch" ) )
Assert . isTrue ( orders . get ( 0 ) . getOrderId ( ) . equals ( 50000280834672L ) )
assertEquals ( "(1,2,3,4,5)" , asSequenceStr ( result ) )
Assert . assertNull ( mLB . getLoadBalancerUsage ( ) )
assertTrue ( satisfiesPrecondition ( cu ) )
assertThat ( domain . getValidationFailures ( resourceLookup ) , contains ( stringContainsInOrder ( "clusters" , "cluster1" ) ) )
assertTrue ( i + ", " + file . getAbsolutePath ( ) , file . delete ( ) )
Assert . assertEquals ( 2 , count )
assertTrue ( mdxBaseComponent . prepareQuery ( "select * from table" ) )
assertEquals ( "$5$abc$HbF3RRc15OwNKB/RZZ5F.1I6zsLcKXHQoSdB9Owx/Q8" , Sha2Crypt . sha256Crypt ( buffer , "$5$abc" ) )
quote . assertIsSatisfied ( )
assertEquals ( "twenty-seven" , lts . get ( Long . valueOf ( 27 ) ) )
Assert . assertTrue ( "Queue name not encoded correctly into job history file" , jobHistoryFile . contains ( QUEUE_NAME_WITH_DELIMITER_ESCAPE ) )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , FooSteps . class )
Assert . assertEquals ( expected , actual )
assertNotNull ( result )
assertThat ( info . getServerService ( SERVER ) , sameInstance ( currentService ) )
assertEquals ( 1 , findings . size ( ) )
assertArrayEquals ( "Option value" , new String [ 0 ] , commandLine . getMultipleOption ( "array" ) )
Assert . assertEquals ( expectedCarIds , actualCarIds )
assertEquals ( "USER" , dataSet . applyCaseInsensitivity ( "uSeR" ) )
assertOut ( "var a:Object = function(foo:int, bar:String = 'goo'):int {\n\treturn -1;\n}" )
Assert . assertEquals ( null , runEnv . removeNextStepPosition ( ) )
assertContains ( indels , 100 , "GNNNNNN" , "G" )
assertFalse ( problem )
Assert . assertTrue ( getException )
assertEquals ( 0 , baseTmpDir . listFiles ( new TmpDirFilter ( ) ) . length )
Assert . assertEquals ( "(1,2,3,4)" , IteratorToString . toString ( a . iterator ( ) ) )
assertFeatureValues ( expected , "document" , "document" , EXTRACTOR )
assertEquals ( EX_15_A_OUTPUT , set2 . validateAndRemovePkcsN7 ( EX_15_A_INPUT ) )
assertThat ( beforeStopAction , instanceOf ( CustomBeforeStopActionInstantiator . class ) )
assertTrue ( matcher . matches ( ) )
assertEquals ( 1 , model . getObject ( ) . getPersons ( ) . size ( ) )
assertVersionAndValue ( ref , initialVersion , initialValue )
assertDirectories ( "directories" , "foo" , "bar" )
assertEquals ( TEST_FIELD , fieldName )
assertFalse ( proxyHttpHeader . isValid ( ) )
assertTrue ( "Should have thrown exception of MyException class" , exception instanceof MyException )
Assert . assertEquals ( xmlEsperado , rastreio . toString ( ) )
assertEquals ( 2 , selected . size ( ) )
assertThat ( result , is ( lines ( new String [ ] [ ] { { "\\" , "" } } ) ) )
Assert . assertEquals ( 211 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( textEditor , defaultEditorAdapter . getTextEditor ( ) )
assertEquals ( EXPECT . getParentFile ( ) . getAbsolutePath ( ) , value )
Assert . assertTrue ( executed . get ( ) )
assertEquals ( "3" , result )
assertEquals ( object . longs , result . longs )
assertArrayEquals ( sourceData , destination . get ( ) , DELTA )
response . assertContentEquals ( "涓���" )
assertEquals ( HTTP , epp . getTransport ( ) )
assertNotNull ( "Unread Priority Messages are not null" , unreadMessages )
Assert . assertEquals ( "testBufferPinCount failed" , buffer . isPinned ( ) , false )
assertEquals ( message , "ok" )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Stop>" + "<genericTag key=\"value\">" + "someText" + "</genericTag>" + "</Stop>" , elem . toXml ( ) )
assertThat ( GraphicsUtilities . getPixels ( img , 0 , 0 , 1 , 1 , null ) [ 0 ] , is ( 0 ) )
assertEquals ( "SQL query does not match" , result , test )
Assert . assertTrue ( "no sky vertices found" , skyVertices . iterator ( ) . hasNext ( ) )
assertNotNull ( firstTask )
assertThrows ( IndexOutOfBoundsException . class , ( ) -> strings . set ( - 3 , "out of bounds" ) )
assertThat ( other , DateMatchers . sameMinuteOfHour ( date ) )
assertEquals ( 1 , rules )
assertTrue ( "Component should be focused" , isFocused ( ) )
Assert . assertEquals ( "12 位蔚��维 伪�� ���伪" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
assertThat ( Functions . blobstoreUrl ( url ) , is ( notNullValue ( ) ) )
assertTrue ( wc . get ( Boolean . class ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( "Wrong number of configurations" , 2 , config . getNumberOfConfigurations ( ) )
assertEquals ( null , testSet . getPlan ( ) . getComment ( ) )
assertNull ( group20 )
Assert . assertEquals ( "List should contain right count of term notes!" , ( long ) paginatedList . size ( ) , ( long ) noteService . getTermNoteCount ( "" ) )
assertThat ( expr . matcher ( "reposA::/a/b/c/d/e/@something" ) . matches ( ) , is ( true ) )
assertFalse ( peek . hasNext ( ) )
assertSame ( element , element . withName ( "bar" ) )
assertEquals ( expectedSplits , new TreeSet < > ( createdSplits ) )
assertEquals ( expecteds , actuals )
assertSame ( exIn , exOut )
Assert . assertEquals ( "Double encode brackets not correct" , out , WebUtilities . doubleEncodeBrackets ( in ) )
assertEquals ( HELLOWORLD_URI + "out/results" , uri . toASCIIString ( ) )
assertTrue ( m . nextShort ( ) > - 1 )
assertEquals ( "SQL query does not match" , result , test )
assertEquals ( out . get ( ) , LARGE_NUM - 1 )
assertEquals ( "ec2.us-east-1.amazonaws.com" , awsClient . getEndpoint ( ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertEquals ( Arrays . asList ( "not an identifier" , "someidentifier1" ) , doc . getContentField ( "some_output_field" ) )
assertThat ( equal , equalTo ( false ) )
assertArrayEquals ( expected , actual , 0.0 )
assertFalse ( result )
assertEquals ( "http://java.example.com:8080/" , got . toString ( ) )
assertThat ( columns , is ( expected ) )
assertEquals ( 101901 , pi . getPaymentInstrumentID ( ) , 0 )
assertEquals ( "Wrong network returned" , t . getName ( ) , result . getName ( ) )
Assert . assertEquals ( 1 , factory . getNumCarvedTestCases ( ) )
assertEquals ( CollectionUtils . list ( "LOCK-true" , "QE_CREATE" , "DESCRIBE" , "CLOSE" , "UNLOCK" ) , s . history )
assertFalse ( iterator . hasNext ( ) )
assertEquals ( "OK" , reply )
assertTrue ( converter . canConvert ( AccountActivity . class ) )
assertEquals ( result , one )
assertEquals ( "SELECT Contact.Name FROM Contact WHERE Contact.Name = Contact.AccountId" , visitor . getQuery ( ) . toString ( ) . trim ( ) )
assertEquals ( 4 , instance . getFeatures ( ) . size ( ) )
Assert . assertNotNull ( str )
assertArrayEquals ( expectedCreateSchemaStmts , statements . getLockCreateSchemaStatements ( 2 ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE LOCALNAME(nodes) LIKE $literal" ) )
assertThat ( ff . parse ( "20160504" ) , is ( PlainDate . of ( 2016 , 5 , 4 ) ) )
Assert . assertFalse ( exclusion1 . equals ( exclusion2 ) )
Assert . assertEquals ( expected , actual )
Assert . assertFalse ( "Test that hasText returns false" , element . hasText ( "This Be" ) )
assertions . doesNotContain ( false )
assertEquals ( CloseReason . NO_ACCEPTABLE_VERSION , pair . clientRecorder . q . take ( ) )
assertEquals ( 6. * 3600. + 12. * 3600. , sec , 0.01 )
assertNotNull ( result )
assertNotNull ( accounts )
Assert . assertFalse ( readable )
assertEquals ( out , frame2 )
assertEquals ( 0 , runtimeService . createProcessInstanceQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertEquals ( "A" , letterGrade )
assertTrue ( attributeDesc . isVersion ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertTrue ( drl . indexOf ( "age > \"42\"" ) > 0 )
assertFalse ( listOutput . isEmpty ( ) )
assertEquals ( expResult , result )
assertEquals ( newValue , wrapped . get ( key ) )
assertEquals ( "some text with spaces" , new NonBreakPointsEnhancer ( nullLoader ) . enhance ( "some text with spaces" , "cs" ) )
assertThat ( mt . minus ( MachineTime . ofSIUnits ( 2 , 123456789 ) ) , is ( MachineTime . ofSIUnits ( 0 , 876543212 ) ) )
Assert . assertEquals ( 183 , mapper . selectCount ( new Country ( ) ) )
assertTrue ( booster instanceof SearchResultExternalBooster )
Assert . assertTrue ( udtf . _params . l2norm )
assertFalse ( selected )
assertEquals ( parse ( "1694989 + 336131*a + 4996260*a^2 + 91*a^3 + a^4" , domain , LEX , vars ) , r )
assertThat ( this . request . getSortColumn ( ) , is ( sortColumn ) )
Assert . assertEquals ( result , expected )
assertFalse ( evaluator . shouldProxyHost ( "127.0.0.1" ) )
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) . intValue ( ) )
assertThat ( PlainDate . MAX . getMinimum ( model . weekOfYear ( ) ) , is ( 1 ) )
assertSame ( builtIn , c )
assertEquals ( "Conversion did not match" , value , to )
assertComparisonFailure ( "Fichier produit en erreur : " + toFilePath ( "FileAssertWithBoldStyle_expected.xls" ) )
Assert . assertEquals ( "(a || b) && (c || d)" , expr . asString ( ) )
Assert . assertEquals ( token , RequesterContextHolder . getContext ( ) . getToken ( ) )
Assert . assertEquals ( "涓�����" , result . toStringUtf8 ( ) )
assertEquals ( 2 , post . getComments ( ) . size ( ) )
assertTrue ( comparePomFiles ( reactorProjects ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
assertEquals ( expected , actual )
assertNull ( this . g2 . getClipBounds ( ) )
assertEquals ( tropo . text ( ) , "{\"tropo\":[{\"ask\":{\"choices\":{\"value\":\"[1 DIGIT]\"},\"say\":[{\"value\":\"Please say a digit\"}],\"bargein\":true,\"timeout\":30.0,\"sensitivity\":30.1,\"required\":true}}]}" )
Assert . assertEquals ( 4 , orders . size ( ) )
assertSame ( val , ConfigUtils . getMap ( config , val , "no-value" ) )
assertTrue ( rule . getCondition ( ) . matches ( event ) )
assertEquals ( expected , ColumnRanges . rangeAtNode ( compare ) )
assertThat ( byValue . getSingleResult ( ) . getF ( ) , equalTo ( f1 ) )
assertThat ( details . size ( ) , greaterThan ( 0 ) )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
editor . assertNoHover ( "@DeleteMapping(\"/greetings\")" )
assertArrayEquals ( new int [ ] { - 1 } , matrix [ 0 ] )
Assert . assertEquals ( "Injection points are equal" , dronePoint , dronePoint1 )
assertEquals ( CambriaConstants . kBasePath + "topic/cg/cid" , url )
assertEquals ( "<html><head></head><body></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertThat ( comment , equalTo ( "Parameter comment on interface A" ) )
assertThat ( modified , is ( expectedResult ) )
assertNull ( cursor . next ( ) )
Assert . assertEquals ( message , transformer . getMessage ( ) )
assertEquals ( "job" , manager . getType ( ) )
child . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertThat ( lines , equalTo ( extractedLines ) )
Assert . assertEquals ( jsonString , JsonUtil . toJsonString ( aclStatusBuilder . build ( ) ) )
assertEquals ( false , result )
Assert . assertEquals ( 0 , distance . compute ( a , a ) , 0d )
assertEquals ( expectedResult , entityParser . parseThing ( json ) )
assertEquals ( count , insert ( survey ) . columns ( survey . id , survey . name ) . select ( query ( ) . from ( survey2 ) . select ( survey2 . id . add ( 20 ) , survey2 . name ) ) . execute ( ) )
assertEquals ( request . getRequestHeaders ( ) , headers )
Assert . assertEquals ( - 1.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
Assert . assertEquals ( "...(2)" , result )
Assert . assertEquals ( "The quick <hl>brown fox jumps</hl> over the lazy dog." , hl . highlight ( xmlContent , hits ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
assertEquals ( NO_CONTENT . getStatusCode ( ) , response . getStatusCode ( ) )
assertSame ( copied , obj )
assertEquals ( ElasticsearchClient . ELASTICSEARCH_HOSTS_DEFAULT , client . getHosts ( ) )
Assert . assertNotEquals ( noDebug , null )
assertEquals ( "fa 3 desenis" , t . format ( new Date ( 0 ) ) )
Assert . assertEquals ( result , cohort )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
Assert . assertEquals ( endereco , retorno . getEndereco ( ) )
assertEquals ( 22 , context . getTableCount ( ) )
assertBuildException ( "id" )
assertTrue ( page . asText ( ) . contains ( "MESSAGE 3" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 07" ) )
assertEquals ( res . getStatus ( ) , Response . Status . CONFLICT . getStatusCode ( ) )
assertTrue ( "should contain self ref" , result . indexOf ( "(this" ) > - 1 )
assertThat ( readBytes ( testee ) , is ( "Hello|World|!" ) )
assertEquals ( 7 , count )
Assert . assertSame ( configuration , victim . getConfiguration ( ) )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
Assert . assertTrue ( dao . insert ( person ) )
assertTrue ( diff . similar ( ) )
assertTrue ( Collections . nonNullElementsIn ( c ) . isEmpty ( ) )
assertThat ( fibonacci , is ( 55 ) )
assertFalse ( result . passedValidation ( ) )
assertTrue ( Configurator . compareFs ( fs1 , fs2 ) )
assertTriggered ( messageCountAlertCondition , result )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
assertAnnotations ( 1 , Quantity . class , new TestQuantity ( 0 , "9.8 million square kms" , 9800000 , "km^2" , 9.8E12 , "m^2" , "area" ) )
assertEquals ( 5 , tokens . size ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( "Assigned primitive field _staticAssVal equals 4." , 4 , unAssVar )
assertions . isNotEqualByComparingTo ( actual )
assertEquals ( expected , matrix . toString ( ) )
assertEquals ( expected , AuthorizationsUtil . minimize ( authSets ) )
Assert . assertEquals ( "RAND" , actual )
Assert . assertEquals ( expected , rows . next ( ) . toString ( ) )
editor . assertProblems ( "resorces|Unknown property" )
Assert . assertNull ( this . mocker . getComponentUnderTest ( ) . hasAccess ( this . user , this . right , this . documentReference ) )
Assert . notEmpty ( allUsers , "allUsers should not be empty or null" )
Assert . assertTrue ( ValidationUtils . isNullOrEmpty ( quickMap ) )
assertEquals ( "0.022" , event . stripUnit ( "0.022 sec." ) )
Assert . assertFalse ( json . has ( DATA_NAME ) )
longs . assertLessThan ( description , actual , expected )
assertEquals ( 100 , frame . getInt ( ) )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( multi ) instanceof WMultiSelectRenderer )
assertThat ( sut . getIndexOfCode ( 30 ) , is ( 1 ) )
Assert . assertTrue ( ShareUserSearchPage . checkSearchResultsWithRetry ( drone , ADV_FOLDER_SEARCH , searchText , "House 1" , true ) )
assertEquals ( 10 , content . split ( "\n" ) . length )
Assert . assertEquals ( - 1 , i )
Assert . assertEquals ( scorer . scoreSplit ( a , b ) , 0.5 , 1E-7 )
assertFalse ( d . isUsingPerformanceMeasurementServer ( ) )
assertEquals ( commit , gfs . getStatusProvider ( ) . commit ( ) )
assertTrue ( hv > 0.65 )
assertThat ( xoManager . find ( D . class , "1" ) . iterator ( ) . next ( ) , equalTo ( a1 ) )
assertOut ( "public class A implements IA, IB, IC {\n}" )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( clientID . getServiceID ( ) ) )
assertTrue ( componentSet . size ( ) == componentList . size ( ) )
assertEquals ( encoded1 , encoded2 )
assertEquals ( "{\"number\":null,\"string\":null,\"raw\":null}" , writer . toString ( ) )
assertEquals ( "Failed to generate while loop with chained lhs and body" , WHILE_WITH_BODY , s )
assertEquals ( "Base value is not properly parsed" , "f1" , parsed )
Assert . assertEquals ( 0 , violations . size ( ) )
assertThat ( comments , contains ( COMMENT1 , COMMENT2 ) )
assertEquals ( "Failed to trim capacity" , 1 , v . capacity ( ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertEquals ( "/foo=bar/baz=quux:add(name=abc)" , ModelNodeOperationToCliString . convert ( op ) )
assertNull ( params . valueAsParam ( "a" ) )
assertTrue ( String . format ( "[%s] should be valid." , coord ) , validator . isValid ( coord , null ) )
assertEquals ( contentSize , objFile . length ( ) )
Assert . fail ( "Connection succeeded, but impersonation should be denied." )
assertEquals ( new Boolean ( true ) , new Boolean ( loop . hasLoop ( "ST" ) ) )
assertEquals ( "{message=Hello Spring MVC}" , response . getContent ( ) )
Assert . assertEquals ( expect , sortedRules )
assertOut ( "color=\"16711680\"" )
assertInvocations ( invocations )
assertEquals ( expectForbid , newForbid )
assertEquals ( "Expected aggregate exec output to be 'Hello\nWorld!', " + "but got '" + output + "'" , output , "Hello\nWorld!\n" )
Assert . assertEquals ( "SHOW STATUS LIKE 'Key%';" , text )
assertSame ( camundaDatasourceMock , getDataSourceFromConfiguration ( ) )
assertTrue ( "No random port has been allocated" , url . getPort ( ) > 0 )
assertNull ( messageOut . getDdid ( ) )
assertThat ( vi . getBoundaries ( ) , is ( interval ) )
assertEquals ( sanitized , rewrite ( gadgetNoCacheAndDebug , markup , set ( "img" ) , set ( "src" ) ) )
assertThat ( driver . findElement ( By . id ( "exceptionCode" ) ) . getText ( ) , is ( "e.xx.9999" ) )
assertThat ( values , containsInAnyOrder ( "example1.test1" , "example1.test2" , "example2.test1" , "example2.test2" ) )
Assert . assertEquals ( 140 + 4 * winScore - loosePenalty , scores . getScore ( ) )
runner . assertNotValid ( service )
assertEquals ( button . getText ( ) , "Compute Sum" )
assertEquals ( "<TimePosition/>" , xmlWriter . getOutput ( ) )
Assert . assertNotNull ( resource )
assertThat ( this . converter . matches ( this . sourceType , targetType ) , is ( true ) )
assertMsg ( )
assertTrue ( "Expected the DependencyCheck report to be generated" , report . exists ( ) )
assertTrue ( cause . getMessage ( ) . startsWith ( "No key found in" ) )
assertEquals ( "aTestString" , classUnderTest . getVersion ( ) )
assertEquals ( expected , buf )
assertEquals ( null , secondVictim . getValue ( KEY ) )
assertEquals ( value , columnMaxValue , LARGEST_MIN_MAX_ERROR )
assertTrue ( cohortService . getCohortMembershipByUuid ( RestTestConstants2_1 . COHORT_MEMBERSHIP_UUID ) . getVoided ( ) )
assertThat ( converter . transform ( message ) , is ( prop ) )
assertEquals ( "Property not added" , "newvalue" , conf . getString ( "element2.newKey" ) )
assertEquals ( 15 , atAct1 . get ( 0 ) )
assertEquals ( 10 , distincted . size ( ) )
assertNotNull ( user )
Assert . assertEquals ( 0 , trimmed . size ( ) )
assertEquals ( 0 , result )
assertEquals ( 1 , metadata . getSlices ( ) )
assertNotEquals ( 0 , tokenLists . size ( ) )
assertEquals ( resourceIdentifier , loaded )
AssertAnnotations . assertLemma ( lemmas , select ( jcas , Lemma . class ) )
assertTrue ( metaUncle . isAssignableFrom ( metaChild ) )
assertThat ( description . toString ( ) , is ( "SomeClass {\n" + "  baz(): SomeClass {\n" + "    foo(): was <42>\n" + "  }\n" + "  ...\n" + "}" ) )
assertEquals ( entry . getValue ( ) , actual )
assertions . containsOnly ( values )
assertEquals ( "Correct Platform is not fetched" , platform , testPlatform )
assertEquals ( "job" , manager . getType ( ) )
Assert . assertEquals ( 10 , result . size ( ) )
Assert . assertEquals ( "abc" , html )
assertEquals ( "d/bitcoin" , new String ( ns . getOpName ( ) . data , "ISO-8859-1" ) )
assertThat ( target , is ( instanceOf ( BasicFlowMatch . class ) ) )
assertEquals ( renderWithNonConflictingVersionResult ( ) , result )
assertTrue ( detector . isLegacyDataFrameworkEnabled ( ) )
assertNotNull ( connectorInstanceTO )
assertEquals ( "" , stringBuilder . toString ( ) )
assertEquals ( "onTargetsChanged should have updated targets list" , createUrlFromTargetName ( healthInfoInstances . get ( 0 ) . Service . Address ) , targetProvider . provideTarget ( ) )
Assert . assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , status )
assertEquals ( "A1=a, A2=b" , selectionValue )
assertEquals ( exp , array . percentileNumber ( 75 ) )
Assert . assertEquals ( new URI ( "http://stuff@localhost:80/stuff?param=stuff" ) , result )
assertFalse ( attr . isEmpty ( ) )
assertArrayEquals ( array ( 'a' , 'b' , 'c' , '#' , '#' ) , rpad ( array ( 'a' , 'b' , 'c' ) , 5 , '#' ) )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertNull ( contentType ( resp ) )
assertThat ( options . getLogPath ( ) , is ( new Path ( "hdfs://localhost:8020/logs/" ) ) )
assertEquals ( headers , newHeaders )
assertXpathExists ( "Absent SAML Assertion element" , "/SOAP-ENV:Envelope/SOAP-ENV:Header/wsse:Security/saml:Assertion" , document )
assertFalse ( result )
assertEquals ( 2 , tasks . size ( ) )
assertIsGreenwich ( pm )
assertNull ( runTest ( true ) )
assertNotEquals ( "${project.version}" , appProperties . getVersion ( ) )
assertTrue ( easyCriteria . count ( ) > 0 )
Assert . assertNull ( "No se deber�a haber encontrado la aplicaci�n" , aplicacion )
assertThat ( provider . getSubject ( axiom ) , is ( iriOptional ) )
Assert . assertTrue ( sample . equals ( ret ) )
Assert . assertEquals ( "Date " + date + " was not correctly truncated to minutes" , dateTruncExpected , dateTruncActual )
Assert . assertNull ( job )
assertOut ( "a(false)" )
assertEquals ( OkHttpClientTransport . toGrpcStatus ( ErrorCode . CANCEL ) . getCode ( ) , listener . status . getCode ( ) )
Assert . assertNotSame ( cfg , newCfg )
assertEquals ( 1 , actualData . size ( ) )
Assert . assertEquals ( ",\n" , writer . toString ( ) )
assertEquals ( o1 , o2 )
Assert . assertTrue ( provider . isKeyword ( "SELECT" ) )
assertEquals ( 1599 , result )
assertTrue ( result1 == result2 )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertThat ( ages . size ( ) , greaterThanOrEqualTo ( 3 ) )
assertEquals ( 31 , videoCapture . getiExceptionCount ( ) )
assertThat ( content , containsString ( "1 + 1 = 2" ) )
assertEquals ( "{}" , result )
assertEquals ( Order . sellAt ( 1 , NaN , NaN ) , newTrade . getExit ( ) )
Assert . assertEquals ( testConfig . getInstanceCapacityKeys ( ) , Collections . emptyList ( ) )
TestCase . assertEquals ( 7 , after )
assertNull ( writer . docMgr )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertTrue ( rec_cnt == 3 )
org . junit . Assert . assertEquals ( expected , actual )
assertTrue ( map . isEmpty ( ) )
assertEquals ( "Wrong # of cases found" , 1 , cases . size ( ) )
assertNotNull ( "The list of DataObject3 should not have been nulled out" , dataObject . getDataObject3s ( ) )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( 0 , result . size ( ) )
Assert . assertNotNull ( "AppProperty " + appProperty + " does not have a key" , key )
Assert . assertEquals ( "{}" , to . toString ( ) )
assertEquals ( 404 , clientResponse . getStatus ( ) )
assertNotNull ( instance )
assertTrue ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertThat ( builder . getPatches ( ) , hasItemsInOrder ( "ADD /status/conditions []" , "ADD /status/conditions/- {'message':'hello','reason':'because','status':'true','type':'Available'}" , "ADD /status/conditions/- {'reason':'ok now','status':'true','type':'Progressing'}" ) )
assertTrue ( Arrays . equals ( s , multiEntry ) )
Assert . assertEquals ( content , str )
softly . assertAll ( )
assertThat ( driver . findElement ( By . id ( "item1" ) ) . getText ( ) , is ( "" ) )
assertEquals ( exp , rc . getReplicaSelector ( ) )
assertThat ( objects , hasSize ( 0 ) )
BufferedImageAssert . assertMatches ( result , new float [ ] { 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 } )
assertEquals ( "dist job res is not 0:" , 0 , res )
assertThat ( optionsByType . get ( Timeout . class ) , is ( timeout ) )
assertTrue ( result )
assertEquals ( ids . getExternalIdentifier ( ) . get ( 0 ) . getNormalized ( ) . getValue ( ) , "normalized-value" )
assertBeanBinding ( camelctx )
assertEquals ( true , outcome . isFound ( ) )
assertEquals ( expectedQuery , actualQuery )
assertFalse ( property . toStringValues ( ) . isEmpty ( ) )
assertThat ( result , instanceOf ( WebElement . class ) )
assertEquals ( result , "John,Jane,Adam,Tom" )
assertEquals ( "Expected another stopwords" , DutchAnalyzer . getDefaultStopSet ( ) , stopwords )
assertThat ( item . getItemProperty ( NAME ) . getValue ( ) . toString ( ) , is ( "foo" ) )
assertThat ( ex , not ( nullValue ( ) ) )
Assert . assertNotSame ( account1 . toString ( ) , account2 . toString ( ) )
assertFalse ( tokenizer . hasHeader ( ) )
Assert . assertEquals ( "RAND" , actual )
assertEquals ( 7F , strategy . getMedian ( evenNumberOfFloatBandValues ) , 0.0001 )
Assert . assertFalse ( result )
assertThat ( status . getStoragePolicy ( ) , is ( LAZY_PERSIST_POLICY_ID ) )
Assert . assertThat ( i , is ( 6 ) )
assertTrue ( emptyMap . isEmpty ( ) )
MiniDfsResource . assertReadFile ( fs , fileSpec , "1;one" , "2;two" )
assertions . doesNotContain ( values )
assertSkipped ( myTasks , 2 , 3 )
Assert . assertEquals ( "Not null string" , expectedBinaryString , bitmaskInBinaryString )
assertTrue ( results . hasMessages ( Message . Level . ERROR ) )
assertThat ( info . getServerService ( SERVER ) , sameInstance ( newerService ) )
assertEquals ( expected , result )
assertEquals ( "娴�璇�" , response . getMsg ( ) )
assertTokens ( new IdentifierToken ( "x" ) , Tokens . LP_CALL , Tokens . RP , comment ( "test" ) )
assertEquals ( "esting" , removeSentenceDecorator . toDisplay ( ) )
assertEquals ( false , result )
assertTrue ( isEnabled )
classes . assertIsAssignableFrom ( someInfo ( ) , actual , int . class )
Assert . assertArrayEquals ( cmpAlignAndMeet , outAlignAndMeet )
assertFalse ( subject . getSourceFrameRate ( ) . isPresent ( ) )
assertThat ( new String ( baos . toByteArray ( ) ) , equalTo ( data ) )
assertThat ( tuple . getCollectionOrDefault ( "field" , Collections . emptyList ( ) ) , equalTo ( value ) )
assertThat ( "Returned value is sum of provided ones, not sum of values defined in deactivated code." , response , containsString ( expected ) )
Assert . assertTrue ( ops . exists ( TEST_SOCKET_BINDING_ADDRESS ) )
Assert . assertFalse ( "Ids should not be the same: " , deterministicId . equals ( deterministicId2 ) )
assertEquals ( expected , baseString )
assertThat ( emailAddress , startsWith ( "aeiou@" ) )
Assert . fail ( "Missing required input" )
Assert . assertEquals ( "`user`" , ctx . getSqlStatement ( ) )
assertThat ( "" , equalTo ( ( r ) ) )
assertNotNull ( target )
assertNull ( actualState )
assertEquals ( "8 ��� 卅��诏�乇�" , t . format ( new Date ( 0 ) ) )
assertThat ( client . getScope ( ) . contains ( SystemScopeService . OFFLINE_ACCESS ) , is ( equalTo ( false ) ) )
Assert . assertEquals ( String . class , TestUtils . getPropertyValue ( transformer , "resultType" , Class . class ) )
assertEquals ( null , CollectionUtils . getByPath ( input , "3" ) )
assertTrue ( hasRelationship )
assertNotNull ( "Expected an exception to be thrown due to null param" , result1 )
assertTrue ( closed . await ( 2 , SECONDS ) )
assertThat ( service . countByQuery ( ) , is ( 0L ) )
assertEquals ( Type . High , filterResult . getValue ( ) )
assertEquals ( AbstractPanel . class , renderer . getComponentClass ( ) )
assertEquals ( 0 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( LocalDate . of ( 1972 , Month . JANUARY , 1 ) , firstDayOfMonth )
assertNotNull ( result )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 ) ) )
log . assertContent ( "" )
assertEquals ( 0L , query ( ) . from ( employee ) . where ( where ) . fetchCount ( ) )
assertEquals ( "refName" , op . refSpec )
Assertion . assertEquals ( loadedDataSet , actualDataSet )
assertTrue ( 0 > v1 . compareTo ( v2 ) )
assertThat ( d , is ( nullValue ( ) ) )
assertTrue ( startsWithHttp )
assertEquals ( "(& [* fo.*] [* .*oo] [= foo])" , m . toString ( ) )
assertEquals ( 0L , networkStates . documentCount . longValue ( ) )
assertTrue ( connection . toString ( ) + " is not transaction aware" , connection . toString ( ) . startsWith ( "Transaction-aware proxy for target Connection  from DataSource [Mock for DataSource" ) )
Assert . assertEquals ( name . get ( 0 ) , "Christian Holm" )
assertTrue ( "Got parameters" , builder . getParameters ( ) . isEmpty ( ) )
Assert . assertTrue ( accept )
Assert . assertEquals ( message , 0.0 , error , 1E-10 )
assertEquals ( 0 , size )
assertThat ( client . getHost ( ) , equalTo ( "localhost" ) )
assertThat ( client . isVerifyingSsl ( ) , is ( true ) )
assertEquals ( 265463 ^ 342 , executeTestMethod ( test , Integer . class , null , 265463 ) . intValue ( ) )
assertEquals ( 6 , StorageUtil . getMaxFileSequence ( fs , testDir , true ) )
Assert . assertNull ( ArrayUtils . get ( array , 1 ) )
assertScoreAndParse ( content , null , 1 )
assertTrue ( squaresCache . get ( 6 ) == 36 )
assertEquals ( 0 , list . size ( ) )
assertThat ( f . apply ( good_uris ) , equalTo ( asList ( new URL ( "http://example.com/example_a" ) , new URL ( "http://example.com/example_b" ) , new URL ( "http://example.com/example_c" ) ) ) )
comparator . assertSizesMatch ( )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( "SELECT * FROM v WHERE _user_ = 'me' AND (STR_TO_DATE(`UPTIME.`, '%a %b %e %H:%i:%s GMT %Y') BETWEEN STR_TO_DATE('Tue Apr 8 10:30:57 GMT 2014', '%a %b %e %H:%i:%s GMT %Y') AND STR_TO_DATE('Wed Apr 9 10:30:57 GMT 2014', '%a %b %e %H:%i:%s GMT %Y'))" , sql )
assertEquals ( "ext" , sub . getExtension ( ) )
assertThat ( results , is ( notNullValue ( ) ) )
assertEquals ( ImmutableSet . of ( "b" ) , ex . getMissingIds ( ) )
assertArrayEquals ( new int [ ] { 0 , 0 } , matrix [ 0 ] )
assertEquals ( 2 , tasks . size ( ) )
assertTrue ( dto . getSeoImageId ( ) > 0 )
Assert . assertEquals ( "Some Privilege" , privilege . getPrivilege ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 03" ) )
assertEquals ( "tunni p盲rast" , t . format ( new Date ( 1000 * 60 * 60 * 1 ) ) )
assertThat ( headlineOf ( view ) , is ( "2 builds have failed since Ben, Connor and Daniel committed their changes" ) )
assertEquals ( read ( pom ) , "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<project>\n" + "    <!-- Repositories --> \n" + "    <repositories>\n" + "        <repository>\n" + "            <releases>\n" + "                <updatePolicy>monthly</updatePolicy>\n" + "                <checksumPolicy>fail</checksumPolicy>\n" + "            </releases>" + "        </repository>" + "    </repositories>\n" + "</project>" )
assertEquals ( 0 , size )
editor . assertHoverContains ( "name" , "**Deprecated!**" )
assertEquals ( 2 , context . getTableCount ( ) )
assertThat ( debugArg , is ( nullValue ( ) ) )
Assert . assertEquals ( 65. , tdCosts . getBackwardTransportTime ( loc ( "from" ) , loc ( "to" ) , 100. , null , null ) , 0.01 )
assertEquals ( "Unexpected read concern" , ReadConcern . DEFAULT , clientOptions . getReadConcern ( ) )
assertTrue ( valid )
assertEquals ( 1 , lastBuildId )
assertThat ( result . toString ( ) , is ( equalTo ( "HELLO WORLD" ) ) )
Assert . assertEquals ( 200 , resp . getStatus ( ) )
assertEquals ( result , expecting )
assertFalse ( "permission should not be granted." , updateUserPermission . isAllowed ( auth , 1L ) )
Assert . assertEquals ( "ActionInvoker.ERROR_0012 - Could not invoke action \"foo\" locally: Map = " + NL + "{" + NL + "    key1 = val1 java.lang.String" + NL + "    key2 = val2 java.lang.String" + NL + "} java.util.HashMap" + NL , messages . getCouldNotInvokeActionLocally ( "foo" , params ) )
assertFalse ( mainServices . isSuccessfulBoot ( ) )
assertTrue ( "Hash is invalid" , Arrays . equals ( TestVectors . SHA256_DIGEST . getBytes ( ) , result . getBytes ( ) ) )
assertEquals ( "[(foobar:1>7)>(AppNode:file:10>14)]" , sn . stringify ( true ) )
assertEquals ( 12.5664 , perim , .01 )
assertEquals ( 404 , response . getStatus ( ) )
assertEquals ( 1 , results . length )
Assert . assertFalse ( "this should not exist" , exists )
assertEquals ( parent . models . size ( ) , 1 )
assertFalse ( validator . validate ( EntityNames . STUDENT , studentIds ) . containsAll ( studentIds ) )
Assert . assertNotNull ( factory )
assertEquals ( "#" , exc . getPointerToViolation ( ) )
Assert . assertEquals ( 0 , network . getInputsCount ( ) )
assertDegenerate ( scan )
assertEquals ( exp , array1 )
Assert . assertEquals ( "null" , result )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Unexpected size observed" , 0 , fail . value )
assertEquals ( Type . INT8 , d . type ( ) )
assertEquals ( expectedValue , value . getValue ( 101L ) )
assertEquals ( 0. , calc . getInsertionData ( route , job , nVehicle , 0.0 , null , Double . MAX_VALUE ) . getInsertionCost ( ) , 0.01 )
assertThat ( nameList . toString ( ) , is ( "[Joe, Chris, Steven, Patrick]" ) )
assertFalse ( aNumber . equals ( bNumber ) )
assertTrue ( proxy . isClosed ( ) )
Assert . assertEquals ( 1 , countNumberOfOccurence ( fullyQualifiedName , "adm1Name" ) )
Assert . assertEquals ( reply , receivedReply )
assertEquals ( nodeName , node . getName ( ) )
assertEquals ( "" , val )
assertThat ( property . getValueOr ( "Value" ) , is ( "Value" ) )
assertEquals ( "\t\tcontext.checking(new Expectations(){{\r\n			// e.g. : allowing(mocked).called(); will(returnValue(1));\r\n		}});\r\n" , buf . toString ( ) )
assertEquals ( service . getSize ( new String [ ] { "" , "" , "" } ) , 3 )
Assert . assertEquals ( 2 , index )
assertEquals ( "Unexpected locale from component" , UI_LOCALE , locale )
assertThat ( banco . getAgenciaECodigoBeneficiario ( beneficiario ) , is ( "1234/12345678" ) )
assertThat ( config . get ( "a.b.c" ) , is ( "Hello world!" ) )
assertEquals ( expected , actual )
assertFalse ( "Should not be equal" , time . equals ( differentTime ) )
assertFalse ( icons . isEmpty ( ) )
assertEquals ( 7 , paragraphElement . getElementCount ( ) )
assertThat ( cursor . asListRemaining ( ) , hasItems ( "actors/Keanu" ) )
assertEquals ( "Value not set" , VALUE , config . getString ( keyAttr ) )
Assert . assertEquals ( 1L , result . longValue ( ) )
assertThat ( Datastore . keyToString ( key ) , is ( encodedKey ) )
assertFalse ( proxy . isTableExists ( "foo" ) )
assertTrue ( "marker is replaceable when it when timestamp after expiry" , marker . isReplaceableBy ( 101L , null , null ) )
assertEquals ( HttpStatus . BAD_REQUEST , result . getStatusCode ( ) )
assertThat ( context . size ( ) , is ( 6 ) )
Assert . assertEquals ( "should have updated comment" , updateUser . getComment ( ) , updatedUser . getComment ( ) )
assertPermanentCount ( playerA , "Hinterland Logger" , 1 )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . PEER_REVIEW_READ_LIMITED )
assertEquals ( "11111111" , value . getDataAsStr ( ) )
assertThat ( file . getAbsolutePath ( ) , is ( "/Users/bbejeck/dev" ) )
assertEquals ( count . longValue ( ) , 0 )
assertEquals ( cfProvider . getConfiguredProperties ( ) , ImmutableMap . of ( "brokerURL" , SINGLE_ACTIVEMQ_BROKER ) )
Assert . assertEquals ( IsolationLevels . SERIALIZABLE , connection . getIsolationLevel ( ) )
assertEquals ( 0.72 , result , 0.0001 )
assertOut ( "var /** @type {*} */ a = (a + b)" )
assertNull ( "Duplicate revision" , duplicate [ 0 ] )
assertEquals ( "{\"name\":\"Barry\"}" , name )
assertEquals ( 0x1234 , dongle . getZigBeePanId ( ) )
assertTrue ( result instanceof V8Object )
assertNotNull ( action )
assertIntersect ( ranges , "b" , "l" , "j" )
assertEquals ( "{\"a\":{\"b\":[{\"a\":1,\"b\":2},{\"c\":1.0,\"d\":2.0}],\"c\":[\"a\",\"b\",\"c\"]}}" , json )
assertTrue ( list instanceof Vector )
Assert . assertNotNull ( Files . getOwner ( path ) )
assertEquals ( "test" , empty . getMessageType ( ) )
Assert . assertEquals ( 0 , a . getMaxNestedBlocks ( ) )
assertEquals ( "1" , idCaptor . getValue ( ) . getIdPart ( ) )
assertTrue ( delete . isSuccessful ( ) )
assertEquals ( geo , expResult )
Assert . assertEquals ( monitor1 , monitor2 )
assertEquals ( "First Value After Reset Is e" , 'e' , ( char ) _textReader . read ( ) )
assertTrue ( runtimeTestComparator . compare ( runtimeTest1 , runtimeTest2 ) > 0 )
assertEquals ( expected , actual )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response6 . getResponseObject ( ) )
Assert . assertFalse ( matcher . acceptAll ( ) )
assertEquals ( "id" , portResult . getComponent ( ) . getId ( ) )
Assert . assertEquals ( "password/change/expired" , view )
assertThat ( table . asString ( ) , equalTo ( tableAsString ) )
assertEquals ( Boolean . TRUE , results . get ( ) )
assertEquals ( o , mockPlaylist )
assertThat ( numbers , is ( array ( equalTo ( 10 ) , equalTo ( 15 ) , equalTo ( 20 ) ) ) )
assertEquals ( toString ( expected ) , toString ( actual ) )
Assert . assertTrue ( sitePublish . isRunning ( ) )
assertThat ( renderedProjectName , startsWith ( "test_prefix_master" ) )
Assert . assertEquals ( result . size ( ) , str . length ( ) )
assertPaths ( executionPaths , executionPath ( JCTry . class , JCBlock . class , JCBlock . class , JCExpressionStatement . class , JCReturn . class ) )
paths . assertIsNotEmptyDirectory ( INFO , actual )
assertEquals ( "slaveName_2" , helper . nextFreeIdentifierForResourceEditRelations ( relations , 21 , StringUtils . EMPTY ) )
assertTrue ( service . publish ( "message" ) )
assertOk ( client . executePost ( "/foo" , "{\"key_a\":\"value_a\", \"key_b\":\"value_b\"}" , ContentType . APPLICATION_JSON ) )
assertEquals ( "tableName" , database . escapeTableName ( null , null , "tableName" ) )
context . assertTrue ( result . isEmpty ( ) )
Assert . assertNotNull ( connection . getClientInfo ( ) )
assertEquals ( expected , result )
runner . assertTransferCount ( SplitText . REL_SPLITS , 4 )
assertOut ( "var a:String = unescape('%25')" )
assertThat ( option , is ( new IntOption ( ) ) )
assertEquals ( 1.234 , empty . getDeviation ( ) , 0.001 )
assertThat ( errors , not ( hasFieldErrors ( "middleName" ) ) )
Assert . assertEquals ( 30 , count )
assertEquals ( 2 , Solutions . bestOf ( solutions ) . getRoutes ( ) . size ( ) )
assertEquals ( 1 , result )
assertThat ( cb . getForwardCallback ( ) , nullValue ( ) )
assertNull ( context )
Assert . assertEquals ( "The response status to a reqeuest with 'if-non-match=*' header should be NOT_MODIFIED(304), if the file exists" , 304 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertSame ( this . edit , this . mocker . getComponentUnderTest ( ) . resolveAccessLevel ( "edit" ) )
assertThat ( method . propertyName ( ) , is ( "meOnFire" ) )
Assert . assertEquals ( 0.0d , singletest , 0 )
assertEquals ( "Hawk ts=\"1\",tsm=\"abcdefghij\"" , h . toString ( ) )
assertThat ( falsePositiveCount < 5 , is ( true ) )
assertTrue ( result . isEmpty ( ) )
Assert . assertEquals ( "Alignment " + i + " refinement wrong" , expect , refined )
assertEquals ( "modify stream" , output )
assertEquals ( true , out . firstElement ( ) . get ( ) )
assertNotNull ( entity . getId ( ) )
assertEquals ( expected , elements )
assertTrue ( ARQ . isTrueOrUndef ( ARQ . optTopNSorting ) )
assertEquals ( expected , service . getSignatureMethod ( ) )
assertTrue ( squaresCache . get ( 4 ) == 16 )
assertThat ( NF . textNode ( "foo" ) , is ( sut ) )
assertThat ( results . hasNext ( ) , equalTo ( false ) )
assertSuccess ( errors , wait , TimeUnit . SECONDS )
Assert . assertNull ( sut . execute ( "mrburns" ) )
assertTrue ( rf . supportsMultiSpop ( ) )
Assert . assertEquals ( "{\"@odata.context\":\"../$metadata#ESAllPrim(4242)/PropertyString\"," + "\"@odata.metadataEtag\":\"W/\\\"metadataETag\\\"\",\"value\":null}" , resultString )
assertTrue ( p . isReadable ( byte [ ] . class , null , null , null ) && p . isReadable ( InputStream . class , null , null , null ) && p . isReadable ( File . class , null , null , null ) && p . isReadable ( StreamingOutput . class , null , null , null ) && ! p . isReadable ( int [ ] . class , null , null , null ) )
Assert . assertEquals ( tree . getSize ( ) , 4 )
assertEquals ( LazyInitRegistration . APPLICATION_CONTEXT , applicationContextMock )
Assert . assertTrue ( new JSONObject ( PEDIGREE_1_MIGRATED_DATA ) . similar ( new JSONObject ( captured ) ) )
assertThat ( filteredProperties . size ( ) , is ( 4 ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( 2 , myClass . getValue ( ) )
assertEquals ( 0 , client . getIntStack ( ) [ client . getIntStackSize ( ) - 3 ] )
assertEquals ( "id" , entity . getId ( ) )
Assert . assertEquals ( "SELECT pet.id, pet.num, pet.name, pet.age, pet.cate, pet.master_id, pet.user_id FROM t_pet pet  ORDER BY id" + fieldAdd + " DESC LIMIT 0, 2 ;" , sql )
assertEquals ( "1.2." + part , cfBundleShortVersionStringTransformer . transform ( "1.2." + part ) )
assertTrue ( isNotebookWritable )
assertEquals ( 30.0 , y . get ( InsideOutsideDepParse . ROOT_IDX , 0 , 0 ) , 1e-13 )
Assert . assertEquals ( expectedAnswer , answer )
assertNotNull ( foundVarArgsMethod )
assertThat ( writer . get ( ) , is ( 100 ) )
assertTrue ( output . startsWith ( "<!DOCTYPE html>" ) )
assertEquals ( expected , actual )
assertFalse ( "Challenges with differ challenge can't be equal" , pChallenge1 . equals ( pChallenge2 ) )
assertEquals ( 6 , result . size ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 105 , warnings . size ( ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
Assert . assertEquals ( id , infoEventoManifestacaoDestinatario . getId ( ) )
assertEquals ( "Message: [some.value]" , ResponseBodyInterpolator . interpolate ( "Message: [some.value]" , req ) )
assertB ( "�尖�尖�尖��" + "��12��" + "��34��" + "�尖�尖�尖��" )
Assert . assertTrue ( success )
assertEquals ( BIG_DECIMAL_VAL_7 , p . getBigDecimal ( ) )
assertObjectEquals ( "[[{f:'foo'}]]" , run ( in , "f=foo" ) )
assertResultSet ( res , "testDistinctAggregation_case10.result" )
assertThat ( converter . toWritableObject ( 1 ) , is ( ( Object ) new IntWritable ( 1 ) ) )
assertEquals ( dto , dto2 )
assertEquals ( "Base for strings is wrong" , Integer . valueOf ( 3 ) , parsed )
assertStoreContainsAll ( entities )
assertEquals ( expectedStringRepresentation , functionalDependency . toString ( ) )
iterables . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Yoda" ) )
assertTrue ( matcher . matches ( newMutableReasonDetail ( unusedClassName , unusedCodeLocation , CAN_BE_SUBCLASSED ) ) )
assertEquals ( "HelloWorldImpl not properly saying hi" , "Hello Sam" , response )
assertEquals ( expResult , result )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 ) ) )
assertEquals ( value , propertiesConfigurationProperties . getProperty ( key ) )
assertEquals ( "<span>1</span>" , filter . process ( html ) )
assertEquals ( new Long ( 1234 ) , dss . parseDeviceId ( ) )
Assert . assertEquals ( "1" , result )
assertSamples ( )
assertObjectEquals ( "[{f1:'x1'}]" , p . run ( bs , in , sa ) )
Assert . assertEquals ( 2 , result . size ( ) )
assertEquals ( expected , actual )
assertThat ( className , is ( "org.adrianwalker.multilinestring.JavacMultilineProcessor" ) )
assertEquals ( expected , actual )
assertThat ( windows ( instance , strategy ) , equalTo ( "0.0.0.0" ) )
Assert . fail ( "an exception should have been thrown" )
Assert . assertEquals ( expectedResult , actualResult )
assertEquals ( messagePage . getContent ( ) . size ( ) , itemsOnPage , "Incorrect count of message in one page." )
assertEquals ( value , client . get ( KEY1 ) . toCompletableFuture ( ) . get ( ) )
assertEquals ( "1/l" , u . toString ( ) )
assertEquals ( noS3Link , formattedValue )
assertEquals ( "{\"levelProgress\":{\"total\":3,\"current\":3,\"lastPassed\":2}}" , playerGames . get ( "player" ) . getGame ( ) . getSave ( ) . toString ( ) )
assertNotNull ( ds . find ( ContainsDBObject . class ) . get ( ) )
assertEquals ( BatchStatus . FAILED , jobExecution . getBatchStatus ( ) )
assertEquals ( partitioner . getPartition ( key1 , null , numPartitions ) , partitioner . getPartition ( key2 , null , numPartitions ) )
assertTrue ( isWindowCreated ( appUUID , conn ) )
assertEquals ( null , actual )
Assert . assertEquals ( expected , actual )
assertThat ( view , is ( not ( instanceOf ( NavigationResponseUIViewRoot . class ) ) ) )
assertArrayEquals ( indexes , som . get ( indexes ) . getArgs ( ) )
assertThat ( result , contains ( v_11 ) )
assertThat ( user . getPassword ( ) , is ( "encrypted" ) )
assertEquals ( expectedBody , body )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertEquals ( "" , 0 , acquiredInfo . size ( ) )
assertEquals ( Arrays . asList ( category ) , mockResult . included ( "categories" ) )
assertThat ( new PdfTextExtractorByArea ( ) . extractFooterText ( page ) . trim ( ) , is ( "My Footer 20" ) )
Assert . assertEquals ( widgetSize + 1 , jq ( ".zswidget" ) . length ( ) )
assertEquals ( expected , actualQuery )
assertEquals ( gfs . getRootPath ( ) , path )
assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( expected , actual )
assertEquals ( PASSED_PAWN_BOOST , score )
assertEquals ( Type . CHAR , d . type ( ) )
assertNotEquals ( insertAction , retractAction )
Assert . assertTrue ( response . contains ( "Order Boeing with quantity 10 accepted." ) )
assertNotNull ( solver )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( VerifyFailType . STOP , pluginParameters . verifyFailType )
assertThat ( jsonGeneratorParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/StackTrace3.json" ) ) )
Assert . assertEquals ( s12 , createUnsafe ( 19 , 20 , 30 , 40 , 50 , 55 ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertNotNull ( resolved )
Assert . assertEquals ( 16 , es . size ( ) )
assertEquals ( "hi %s" , instance . formatMessage ( record ) )
assertEquals ( 1.0 , result . getOccurrenceRatio ( ) , 0.0 )
Assert . assertNull ( item . getStatus ( ) )
assertEquals ( ShardConsumerState . PROCESSING . consumerState ( ) . state ( ) , consumer . currentState ( ) . state ( ) )
Assert . assertEquals ( "some <strong>bold</strong> text" , formatter . format ( "some [B]bold[/b] text" , defaultOptions ( ) ) )
assertThat ( target . addLink ( link ) , is ( false ) )
assertEquals ( "Sondag" , translation )
assertSynchAll ( picker , date )
Assert . assertTrue ( validator . isValid ( "1234567890" , context ) )
assertEquals ( expect , pred )
assertEquals ( expectedRestriction , restriction )
assertEquals ( "XML Equals" , jdkXml , javolutionXml )
assertEquals ( input , writer . getBuffer ( ) . toString ( ) )
assertEquals ( expected , ld . getContentField ( "date" ) )
Assert . assertEquals ( "SELECT " + fixedColumns + ",`foo.bar` FROM v WHERE _user_ = 'me' ORDER BY `foo.bar`" , sql )
assertFalse ( niciraActionDeserializerKey . equals ( obj ) )
assertEquals ( 405 , getStatus ( post ) )
assertSame ( obj , actual )
assertThat ( result , is ( equalTo ( NUMPY ) ) )
assertEquals ( expected , actual )
assertEquals ( expectedResult , result )
assertThat ( parsed . getResult ( ) , is ( "testResult" ) )
Assert . assertEquals ( illegalLength . length , count )
assertEquals ( "((key == 'stringhello' or key == 'stringgoodbye'))" , jexl )
Assert . assertEquals ( i , this . targetConfigurator . candidates . size ( ) )
assertThat ( subject . supports ( update ) , is ( true ) )
assertThat ( job . getDuedate ( ) , is ( addSeconds ( removalTime , START_DELAY ) ) )
assertNotNull ( response )
assertEquals ( getMessage ( MessageKeys . LABEL_TR_MENU_MENUMESSAGE ) , driver . findElement ( By . id ( "messagesArea" ) ) . getText ( ) )
Assert . assertEquals ( THIRTEEN_SHORT , pi . getThirteenShort ( ) )
assertThat ( backend . isEmpty ( ) , is ( true ) )
assertThat ( address2 . equalsContent ( address1 ) , is ( false ) )
assertSetEquals ( Arrays . asList ( "SYMBOL" , "UCUM" , "NAME" ) , provider . getUnitFormatService ( ) . getAvailableFormatNames ( ) )
Assert . assertTrue ( matches )
assertEquals ( expected , actual )
Assert . assertTrue ( "Failure - expected to be OK" , status == 404 )
Assert . assertTrue ( service . getUserInfo ( ) instanceof CustomUserInfoImpl )
XmlAssert . assertEquals ( EXPECTED_XML_RESPONSE , xmlResponse )
assertEquals ( 2 , builder . getErrors ( ) . size ( ) )
assertTrue ( d1 . equals ( o1 ) )
assertEquals ( "1 | 2 | 3" , generate )
Assert . assertNotNull ( entity . getCreated ( ) )
assertFalse ( lock . lock ( ) )
assertEquals ( hasNextField . get ( reader ) , false , "hasNext field should be set to FALSE" )
Assert . assertEquals ( result , message )
assertRequest ( "DELETE" , "Conference/" )
Assert . assertEquals ( 0 , t1 . compareTo ( t2 ) )
assertEquals ( "Cancelled default service com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService." , result )
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertTrue ( result . isSuccess ( ) )
assertIsSemver ( semver , version , 1 , 2 , null , new String [ ] { "beta" , "11" } , "sha.0nsfgkjkjsdf" )
Assert . assertTrue ( offsetwaiter . tryWaitfor ( new HostPort ( host , port ) , masterInfo , executionLog ) )
assertEquals ( multicron , cron . asString ( ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( 4000. , Time . parseTimeToSeconds ( time ) , 0.01 )
assertObject ( args )
Assert . assertEquals ( config . getHashAlgorithm ( ) , newVal )
assertFalse ( factory == SqlGeneratorFactory . getInstance ( ) )
assertTrue ( result )
assertEquals ( childProject1 . getCombinationFilter ( ) , combinationFilter )
Assert . assertNotNull ( pojo . testManager )
Assert . assertSame ( TableTestUtils . ACTUAL_2 , actual )
assertEquals ( "Hello ^^ John" , ResponseBodyInterpolator . interpolate ( "Hello ^^ :name" , req ) )
assertEquals ( false , selector . isNeverEnding ( ) )
assertEquals ( "right way" , spec . getModulePrefs ( ) . getTitle ( ) )
assertTrue ( new EncryptionUtil ( ) . validateAESCTR ( this . unEncryptedMessage , encryption ) )
Assert . assertEquals ( "Incorrect label returned" , label , group . getDecoratedLabel ( ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertEquals ( "1/l" , u . toString ( ) )
assertEquals ( 1 , impl . getArgumentIndex ( ) )
assertEquals ( 7 , flowFiles . size ( ) )
assertEquals ( 0 , empty . getCategoryCount ( ) )
assertTrue ( result )
assertEquals ( 3 , hitCount )
assertEquals ( "x IS NOT NULL" , c . toString ( ) )
assertFalse ( in . markSupported ( ) )
assertTrue ( result . isLeft ( ) )
assertTrue ( tQuery . containsRowWithKey ( 1 ) )
assertEquals ( wrappedTemplate + " > ?" , test . build ( ) )
Assert . assertEquals ( actualMav , null )
Assert . assertEquals ( nodes . size ( ) , 2 )
assertEquals ( LOGIN_URL , response . getRedirectedUrl ( ) )
assertEquals ( 10 , reportsCount . get ( ) )
assertFalse ( glass . accept ( new FigureImpl ( ) , 0 , 0 ) )
assertEquals ( EntityNameCharType . LETTER , type )
assertEquals ( expected , new TransformerBuilder ( ) . includeAllFields ( Foo . class ) . includeGetters ( Bar . class , "extra" ) . toTransformer ( ) . transform ( new Bar ( ) ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 ) ) )
assertEquals ( "qwerty" , ExpressionFieldAction . process ( action , Arrays . asList ( "qWeRtY" ) ) )
Assert . assertEquals ( BigDecimal . ONE . setScale ( 2 ) , autorizacaoReturn . getCheckout ( ) . getPrice ( ) )
assertEquals ( "0017880100DC880B" , address . toString ( ) )
Assert . assertEquals ( 42L , rs . getInt ( 1 ) )
assertEquals ( "thumbnail-filename.middle.jpg" , filename )
assertTrue ( report . getReportLines ( ) . isEmpty ( ) )
Assert . assertEquals ( xmlEsperado , icms40 . toString ( ) )
context . assertIsSatisfied ( )
assertEquals ( "Wrong content" , CONTENT , content . getContent ( ) )
Assert . assertNotNull ( jis . getManifest ( ) )
assertSame ( expr . accept ( visitor ) , visitResult )
assertEquals ( asList ( new File ( "/opt" ) , new File ( "/var" ) ) , nonOptions . values ( options ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT selector1.* FROM nt:unstructured WHERE selector1.jcr:uuid IS NOT NULL ORDER BY NAME(selector1) ASC" ) )
assertEquals ( Rect . centeredRect ( 10 , 20 , 30 , 40 ) , g1 . getBounds ( ) )
Assert . assertEquals ( "declare const enum SomeCode {\n" + "    VALUE0 = 10,\n" + "    VALUE1 = 11,\n" + "}" , output . trim ( ) )
Assert . assertEquals ( path , ".." + File . separatorChar + ".." )
assertEquals ( NaCl . Sodium . CRYPTO_SECRETBOX_XSALSA20POLY1305_KEYBYTES , key . length )
assertFalse ( "No Longer Contains Test1" , _fastTable . contains ( "Test1" ) )
assertEquals ( newArrayList ( conditions ) , join . conditions )
assertTrue ( got . contains ( "Key:" ) )
Assert . assertTrue ( instantiatorResource . meetsGeneralRequirements ( request ) )
assertEquals ( "presenter name: This class must extend " + PresenterInterface . class . getName ( ) , e . getMessage ( ) )
assertEquals ( 404 , responseGet . getStatus ( ) )
assertThatEditorHasValue ( comboBox , "78" )
Assert . assertTrue ( "Verify log message" , LogUtils . awaitLogMessage ( ".*simple-log.*Hello Kermit]$" , 5000 ) )
assertEquals ( 41 , p . getAge ( ) )
assertThat ( project . environment ( "ASAKUSA_HOME" ) , is ( not ( "N/A" ) ) )
assertThat ( text , is ( "" ) )
assertValidReplaceKind ( repositoryRoot , revision , SVNNodeKind . FILE )
assertThat ( patients , contains ( patient ) )
assertEquals ( "{\"test123\":{}}" , json )
assertEquals ( "Locations should be the same even though they were expressed differently" , l , r )
assertContains ( "<p class=\"slide-comment\"><b>Allison, Timothy B. (ATB)" , r . xml )
assertEquals ( 3 , throughputStatistics . getUpdatesCount ( ) )
assertEquals ( "bar" , engine . compileMustache ( "cdi_rendering_context_weld_se" , "{{renderingScopedBean.name}}" ) . render ( null ) )
Assert . assertEquals ( numeroNFInicial , dados . getNumeroNFInicial ( ) )
assertEquals ( 210 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( "[]" , toString )
Assert . assertEquals ( Integer . valueOf ( i ) , iStack . peek ( ) )
assertNull ( "The appender should be null." , appender )
ConcurrentTestUtil . assertConcurrent ( "" , runnables , TEST_TIMEOUT )
assertEquals ( account , accountBalance . getAccount ( ) )
assertEquals ( 1 , results . getMessages ( ) . size ( ) )
assertArrayEquals ( expected , actual )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
assertEquals ( dto . getSignature ( ) , null , "Signature is not null" )
assertEquals ( Arrays . asList ( child ) , instance . getChildren ( ) )
Assert . assertEquals ( "handle = MethodHandles.filterReturnValue(handle, " + FilterReturn . FILTER_FUNCTION_JAVA + ");" , toJava )
Assert . assertTrue ( provider . isKeyword ( "SELECT" ) )
assertEquals ( i - 1 , ret )
assertTrue ( resolver . resolve ( ) == null )
assertEquals ( sv . getString ( context . getValue ( ) ) , provider . getString ( context . getValue ( ) ) )
assertEquals ( "Failed at " + i , reduced . getDouble ( i ) , res , 0.001 )
assertEquals ( Action . LOGIN , action . login ( ) )
assertSame ( element , element . withName ( "bar" ) )
assertEquals ( expResult , result . toString ( ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( equals )
Assert . assertTrue ( evictor instanceof GreedyEvictor )
assertEquals ( expectedMap , map )
Assert . fail ( "parse(, null) expected IllegalArgumentException" )
assertFalse ( result . contains ( "<script>" ) )
assertRowCount ( results , 1 )
PSLTest . assertModel ( dataStore , input , expected )
assertNotNull ( object )
assertEquals ( 2 , rpt . size ( ) )
assertEquals ( "<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com/\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>" , TextUtil . stripNewlines ( cleanHtml ) )
assertTrue ( mode == org . omg . CORBA . ARG_IN . value )
assertEquals ( Arrays . asList ( "BA" , "BB" , "A" , "C" , "D" ) , result )
Assert . assertEquals ( varName , expectedArray [ i ] , resultArray [ i ] )
assertFalse ( names . contains ( c . getTitle ( ) ) )
objects . assertSame ( mock ( Description . class ) , actual , actual )
assertEquals ( "Nummisuutarit" , document . get ( "title" ) )
assertEquals ( stage , c . completable . whenComplete ( consumer ) )
Assert . assertTrue ( false )
assertThat ( options . getCopyStrategy ( ) , is ( ConfigurationVariable . COPY_STRATEGY . defaultValue ( ) ) )
Assert . assertEquals ( stoppableCheckResult , "{\"stoppable\":false,\"failedChecks\":[\"Helix:EMPTY_RESOURCE_ASSIGNMENT\",\"Helix:INSTANCE_NOT_ENABLED\",\"Helix:INSTANCE_NOT_STABLE\"]}" )
assertThat ( mock . initialDelay , is ( 1L ) )
assertEquals ( "" , result )
assertOut ( "/**\n * @constructor\n */\norg.apache.royale.B = function() {\n};\n\n\n/**\n * Prevent renaming of class. Needed for reflection.\n */\ngoog.exportSymbol('org.apache.royale.B', org.apache.royale.B);\n\n\n/**\n * @export\n * @type {string}\n */\norg.apache.royale.B.prototype.baz1;\n\n\n/**\n * @export\n * @return {string}\n */\norg.apache.royale.B.prototype.foo1 = function() {\n  var self = this;\n  function bar1() {\n    return self.baz1;\n  };\n  return bar1();\n};\n\n\n/**\n * @export\n * @return {string}\n */\norg.apache.royale.B.prototype.foo2 = function() {\n  var self = this;\n  function bar2(param1) {\n    return param1 + self.baz1;\n  };\n  return bar2('foo');\n};" )
paths . assertIsRelative ( info , actual )
assertEquals ( new Integer ( "2147483647" ) , result )
assertMockEndpointsSatisfied ( )
assertThat ( LoggerFactory . getILoggerFactory ( ) , is ( expected ) )
assertTrue ( "Flag not set" , builder . isAllowFailOnInit ( ) )
assertTrue ( STRATEGY . shouldTerminate ( context ) )
assertEquals ( entityA . getIntProperty ( ) , copy . getIntProperty ( ) )
assertEquals ( hll . cardinality ( ) , hll2 . cardinality ( ) )
assertEquals ( Arrays . asList ( new Point ( 0 , 0 ) , new Point ( 0 , 1 ) , new Point ( 0 , 2 ) , new Point ( 1 , 2 ) , new Point ( 2 , 2 ) ) , s . findPath ( grid ) )
assertEquals ( responses [ 0 ] , actualResponse )
assertTrue ( failedAsExpected )
assertNull ( id )
objects . assertHasAllNullFieldsOrPropertiesExcept ( someInfo ( ) , jedi , "name" )
assertThat ( location , is ( new URL ( "https://example.org/otherlocation" ) ) )
assertEquals ( "IdentifierLabel" , resource . getIdentifier ( ) . get ( 0 ) . getValue ( ) )
assertThat ( read ( format , written ) , contains ( true ) )
Assert . assertEquals ( expected . toString ( ) , new TreeSet < String > ( policy . getAllPrivileges ( set ( "other_group" ) , ActiveRoleSet . ALL ) ) . toString ( ) )
assertMandatoryElements ( targetProduct , false )
assertChildrenInclude ( branches , "master" )
Assert . assertEquals ( 1 , result . size ( ) )
assertEquals ( "Property not correctly initialized" , "Initialized with flag true" , config . getInitProperty ( ) )
Assert . assertTrue ( "Invalid result" , result )
assertEquals ( MockHttpServletResponse . SC_OK , response . getStatus ( ) )
assertEquals ( "Foo" , "" + swct )
Assert . assertEquals ( "no-opts-command " , test . getBuffer ( ) )
assertNull ( e . getEnableCounting ( ) )
Assert . assertFalse ( this . manager . delete ( new Person ( this . doc ) ) )
assertThat ( CorcInputFormat . getFilter ( conf , typeInfo ) , is ( Filter . ACCEPT ) )
assertTrue ( res . equals ( result . toString ( ) ) )
assertEquals ( Arrays . asList ( 1 , 2 , 3 , 4 , 5 , 6 ) , bfs )
assertEquals ( expected , stringUtils . capitalizedAsConstant ( "aClass" ) )
assertEquals ( BuilderFactory . start ( ) . addMinKey ( "a" ) . build ( ) , doc )
assertThat ( request . getMeterValue ( ) , equalTo ( listOfMeterValues ) )
assertEquals ( childProject1 . getTouchStoneCombinationFilter ( ) , combinationFilter )
assertEquals ( expResult , result )
assertEquals ( "Ž" , metadata . get ( TikaCoreProperties . TITLE ) )
assertEquals ( lastModifiedDate , namedClusterBridge . getLastModifiedDate ( ) )
TestCase . assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( null , actualDate )
Assert . assertTrue ( "Best point not reported" , f . value ( sol ) <= f . value ( expected ) )
rule . assertScenarioEnded ( )
assertFalse ( order . hasSameOrderableAs ( otherOrder ) )
assertEquals ( 1 , where ( var . listProperty . get ( 1 ) . directProperty . eq ( "nsprefix" ) ) . list ( var ) . size ( ) )
assertTrue ( resultMessage ( result , POST ) , result . passedValidation ( ) )
Assert . assertEquals ( 2 , set . size ( ) )
assertions . isNotLessThan ( new Double ( 10d ) )
assertFalse ( fetchCommand . isAValidDefinition ( null ) )
Assert . assertEquals ( "RAND" , actual )
assertEqualsIgnoreWhitespace ( drl , actualDrl )
assertEquals ( "Editable master ACE for UID1 should be equal to expectedMasterAccessControlEntry" , expectedMasterAccessControlEntry , store . getEditableMasterAccessControlEntries ( UID1 ) . get ( 0 ) )
assertEquals ( "The job has been failed" , LauncherStatus . COMPLETED , AddVectorET . runAddVector ( args ) )
assertEquals ( singlePropertyHash ( booleanValue ) , booleanProperty . hashCode ( ) )
assertThat ( CompUInt128 . extractValue ( actual ) , Is . is ( expected ) )
assertEquals ( 400 , status . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Expected same message for empty and null cases" , emptyMessage . equals ( nullMessage ) )
assertTrue ( list . equals ( plist ) )
Assert . assertEquals ( 2 , this . tester . getMessages ( FeedbackMessage . ERROR ) . size ( ) )
assertTrue ( dependentService . getValue ( ) != null )
assertEquals ( orig . get ( i ) , bin )
assertThat ( matcher . matches ( list ) , is ( false ) )
assertEquals ( g1 , g2 )
assertNumberReceived ( 2 )
assertTrue ( matches )
assertIsSatisfied ( 2L , TimeUnit . SECONDS , out )
assertNotNull ( post )
assertEquals ( 84.0 , r . getUpperBound ( ) , 0.00001 )
arrays . assertDoesNotContain ( description , actual , value , index )
assertTrue ( consumerPrefetch . closed )
assertEquals ( 1 , messages . size ( ) )
assertEquals ( set1 . hashCode ( ) , set2 . hashCode ( ) )
assertEquals ( perded . getId ( ) , perded1 . getId ( ) )
assertEquals ( "a<V>\n" , found )
assertNotEqualsBothWays ( one , two )
assertThat ( catalogue . allAttributes ( ) . keySet ( ) , not ( hasItems ( "readOnlyField" , "readOnlyProperty" , "hashCode" , "class" , "toString" ) ) )
assertThat ( PrettyTime . of ( Locale . US ) . withDefaultListSeparator ( " | " ) . withLastListSeparator ( " + " ) . print ( duration , TextWidth . WIDE ) , is ( "1 year | 2 months + 3 days" ) )
assertTrue ( "The subject should have removed the fetched value" , result1 )
assertTrue ( process . getSuppressJoinFailure ( ) )
assertEquals ( ExpressionFactory . dbPathExp ( "paintingArray.toArtist" ) , translatedExpression )
assertOut ( "var /** @type {XML} */ a = XML.conversion('@')" )
assertThat ( getCreatedPodSpecContainer ( ) . getEnv ( ) , allOf ( hasItem ( configMapKeyRefEnvVar ) , hasItem ( secretKeyRefEnvVar ) , hasItem ( fieldRefEnvVar ) ) )
assertTrue ( bugs . toString ( ) , bugs . isEmpty ( ) )
assertNonNullReportAndPositiveIds ( report )
Assert . assertEquals ( expected , widgetFromService )
Assert . assertEquals ( dto . getState ( ) , entity . getState ( ) )
assertTrue ( eq . interpret ( Version . valueOf ( "1.0.0" ) ) )
Assert . assertEquals ( "Secure Hello World!" , proxy . sayHello ( ) )
assertTrue ( actual instanceof ConstSchema )
assertEquals ( expResult , result )
assertEquals ( NOT_DECODED , 1 , object . getIdentifier ( ) )
assertEquals ( 15 , atAct2 . get ( 0 ) )
TestUtil . assertEquals ( exp , spans )
assertTrue ( width == 200 )
Assert . assertEquals ( IdentityConstants . NOT_PERMITTED , IdentityResponseWrapper . buildFaultMessage ( responseMock ) . getCode ( ) )
assertEquals ( actual , expected )
Assert . areEqual ( 1 , res_2 , "验证delete成功" )
assertNull ( deliverer )
Assert . assertTrue ( cover . getBoundaries ( ) . getZ ( ) . getMax ( ) > TEST_MODEL . getBoundaries ( ) . getZ ( ) . getMax ( ) )
assertEquals ( header , convertedHeader )
Assert . assertNotNull ( products )
assertFalse ( "Rules with different names cannot be equal" , r1 . equals ( r2 ) )
assertEquals ( expected , result )
assertArrayEquals ( BufferUtils . getIncreasingByteArray ( ( int ) BLOCK_LENGTH / 2 , ( int ) BLOCK_LENGTH * 2 ) , b )
assertThat ( this . bean . getDateProperty ( ) , is ( d ) )
assertTrue ( latch . await ( 1 , TimeUnit . SECONDS ) )
Assert . assertEquals ( resourceContent , writer . toString ( ) )
Assert . assertEquals ( newSize , counter . get ( ) )
Assert . assertTrue ( queryResult . getSize ( ) >= 1 )
assertThat ( NF . textNode ( "foo" ) , is ( sut ) )
assertSame ( GBP_2_34 , test )
iterables . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Luke" , "Yoda" ) )
assertEquals ( 0 , bpt . getOutputError ( ) . getTotalNetworkError ( ) , 0.1 )
assertMessages ( "read" , 3 , "readCbufOffset" )
assertEquals ( "at 00:00:00am every day" , descriptor . describe ( cron ) )
assertEquals ( SchemaFromInd2AndSubfield2 . class , field . getDefinition ( ) . getFieldIndexer ( ) . getClass ( ) )
assertThat ( crawlRules . getWaitAfterEvent ( ) , is ( 123L ) )
Assert . assertEquals ( 6 , response . getTotalHits ( ) . value )
assertEquals ( "Expected 1 result!" , 1 , count )
assertResult ( testSubject . findAnnotatedModel ( "one" ) , ONE , "asd" )
assertEquals ( expected , replaceAclEntries ( existing , aclSpec ) )
assertEquals ( OP_VAR_VALUE , parsed . getOperationName ( ) )
assertEquals ( expected , actual )
Assert . assertEquals ( 4. , analyser . getWaitingTime ( route ) , 0.01 )
assertEquals ( p1 , p2 )
Assert . assertTrue ( Math . abs ( daycountFractionTotal - ( daycountFractionPart1 + daycountFractionPart2 ) ) < 1.0E-8 )
ConfigurationAssert . assertConfigurationEquals ( setUpDestConfig ( ) , config )
assertFalse ( alive )
assertEquals ( 1 , cost , 0 )
assertInstanceOf ( ChangeMoveSelector . class , moveSelector )
assertEquals ( asList ( error ( mdcValues , marker , message , arg1 ) ) , testLogger . getLoggingEvents ( ) )
Assert . assertEquals ( 3 , buttons . size ( ) )
Assert . assertNotNull ( controllerResponse )
Assert . assertEquals ( null , retrievedState )
assertThat ( backtrace , hasItem ( "at airbrake.Exceptions.java:16:in `newException'" ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertEquals ( true , agent . detectIos ( ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( 10 , cnt . getCount ( ) )
assertFalse ( output , output . contains ( uuid ) )
assertEquals ( expected , ex . getMessage ( ) )
assertEquals ( new org . apache . http . client . utils . URIBuilder ( SERVICE_ROOT + "/Products(5)" ) . addParameter ( "$expand" , "ProductDetails($expand=ProductInfo;$select=Price)/$count,Orders,Customers" ) . build ( ) , uri )
Assert . assertNull ( reporter . getProblemCounters ( ) . get ( Code . FIELD_ENUM_CONSTANT_ORDER_CHANGED . code ( ) ) )
assertArrayEquals ( new String [ ] [ ] { } , event . getMatrix ( ) )
throwables . assertHasMessageMatching ( info , actual , REGEX )
Assert . assertEquals ( 24 , concept . getId ( ) . intValue ( ) )
assertEquals ( 0 , tdefsRes . getBody ( ) . length )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertEquals ( ESCAPED_XML , escapedXML . toString ( ) )
assertEquals ( "new value" , result )
Assert . assertTrue ( true )
assertEquals ( expectedAst , ast . dump ( "" ) + "\n" )
assertEquals ( "Find by UoM label with unknown label is still returning a list with one reading" , 0 , readings . size ( ) )
assertOut ( "org.apache.royale.utils.Language.as(this.model, foo.bar.E, true).labelText = null" )
assertNotNull ( stream )
Assert . assertFalse ( "Method supported" , adapter . supports ( endpoint ) )
Assert . fail ( "Invalid input" )
assertEquals ( dtMatch , datatypes )
assertEquals ( "foo" , resp . getResponseAsString ( ) )
Assert . assertEquals ( "subsystem=test/resource=name" , s )
assertEquals ( Arrays . asList ( "A" , "B" , "C" ) , x )
Assert . assertEquals ( 1 , fromWords . size ( ) )
assertEquals ( 29 , result . size ( ) )
assertEquals ( METHOD_COUNT , functionImportList . size ( ) )
assertTrue ( testDecryptWithGluuDecrypter ( encryptedJweProducedByGluu ) )
assertTrue ( s . isSentToRawPubKey ( ) )
assertNotNull ( Deencapsulation . getField ( jobsResponseParser , "cloudToDeviceMethod" ) )
assertThat ( ( TraceeBackend ) FieldAccessUtil . getFieldVal ( interceptor , "backend" ) , is ( Tracee . getBackend ( ) ) )
assertEquals ( expected , actual )
Assert . assertFalse ( handle )
assertEquals ( 1 , tableDesc . getUniqueKeyDescList ( ) . size ( ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertTrue ( costs == null )
Assert . assertEquals ( expectedString , resultString )
Assert . assertEquals ( "order" , created . get ( "type" ) )
assertNotNull ( connectorInstanceTO )
Assert . assertEquals ( "Non-optimal coverage: " , 1d , best . getCoverage ( ) , 0.001 )
assertLinkWithPoolgroupsOk ( poolgroups )
assertEquals ( id3v2Tag , wrapper . getId3v2Tag ( ) )
assertNull ( classUnderTest . getOtherFontInfo ( ) )
assertNotNull ( bar )
assertThat ( f . toString ( ) , is ( "function fred()" ) )
assertThat ( result , is ( nullValue ( ) ) )
assertEquals ( "啶�啶�啷�" , t . format ( new Date ( 0 ) ) )
assertEqualsSet ( "DataComplementOf.rdf" , ax , Declaration ( DP ) )
assertFalse ( result )
assertEquals ( "!ys1\n" , sWriter . toString ( ) )
assertFalse ( "AUTH in debug output" , test ( properties , "AUTH" ) )
assertEquals ( Status . UNAVAILABLE . getCode ( ) , status . getCode ( ) )
assertNotNull ( result )
assertNotNull ( "AppointmentAttendee is null" , entity )
assertNotNull ( IpAccessControlListMapping . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "SDXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertFalse ( d_pm . getCriterionEnabledModel ( ExampleData . buildEndpointHamd ( ) ) . getValue ( ) )
assertThat ( expected , is ( nullValue ( ) ) )
assertEquals ( expecteds , actuals )
assertEquals ( AuthorizationResult . Decision . DENY , result . getDecision ( ) )
assertions . isNotEqualTo ( expected )
assertEquals ( 0 , tasks . size ( ) )
assertSerializedEquals ( c )
assertEquals ( "3 喔о副喔� 喔�喙�喔�喔�喔侧�喔�喔掂�喔掂�" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
Assert . assertEquals ( "" , result )
assertEquals ( s_expected_1 , Hex . toHexString ( item1 . getData ( ) ) . toUpperCase ( ) )
Assert . assertEquals ( "result" , testBean . getResult ( ) )
assertEquals ( exp , act )
assertions . isNotEqualByComparingTo ( actual )
assertNotNull ( Channel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( componentName , "KinesisOutput" )
assertTrue ( e . getMessage ( ) . contains ( badCell ) )
assertThat ( isValid , is ( true ) )
assertTrue ( mutationsOccurred . get ( ) )
Assert . assertTrue ( convert ( path , namespace , files ) . isEmpty ( ) )
assertThat ( constValue , equalTo ( "org.apache.kafka.clients" ) )
assertEquals ( HttpStatusCode . NOT_FOUND_404 , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( expected , actual )
assertEquals ( Status . NOT_FOUND , status )
assertEquals ( subsection , section . getConfigurationSection ( key ) )
assertTrue ( result . size ( ) >= 1 )
assertNull ( netCDFAttributes . get ( "egal_was" ) )
assertEquals ( "" , result )
assertEquals ( out . readableBytes ( ) , 0 )
assertEquals ( 174 , readValue )
assertThat ( sampleEntities . size ( ) , is ( 0 ) )
assertCharsets ( JodaBeanSer . PRETTY , json , bean , ImmOptional . class )
assertEquals ( "Good Morning!" , hello . sayHello ( ) )
assertEquals ( 0 , testApp . executeApplication ( args ) )
assertTrue ( conn . getAllConnection ( ) . hasNext ( ) )
assertEquals ( "table" + suffix , tables . toArray ( ) [ 0 ] )
Assert . fail ( "Repair failed. Missing a block." )
assertTrue ( v8 . executeBooleanScript ( "global === window" ) )
assertTrue ( this . timedTask . getInvocation ( ) > 0 )
assertEquals ( "璁＄����璇�" , 31 , rs )
assertEquals ( 255 , buffer . getInt ( 0 ) )
assertEquals ( 2 , instance . getFeatures ( ) . size ( ) )
assertEquals ( expResults , results )
assertEquals ( expected , test )
assertEquals ( expected , actual )
assertEquals ( "Bob123" , query ( ) . from ( cat ) . where ( cat . name . eq ( name ) ) . set ( name , "Bob123" ) . select ( cat . name ) . fetchFirst ( ) )
Assert . assertTrue ( errors . hasFieldErrors ( "name" ) )
SqlScriptDescriptorAssert . assertThat ( scriptDescriptors )
assertTrue ( "Failed to recognize DOI in item metadata." , doi . equals ( provider . getDOIOutOfObject ( item ) ) )
assertEquals ( propertyValue , resultMap . get ( "Name" ) )
Assert . assertEquals ( 2 , encounters . size ( ) )
assertEquals ( expecting , found )
assertThat ( references , hasSize ( 2 ) )
assertEquals ( "13978AEE95F38490E9769C39B2773ED763D9CD5F" , Hex . toHexString ( addr ) . toUpperCase ( ) )
visitor . assertSatisfied ( "checking state contains two branches" , _rootComposite )
assertEquals ( 1 , result . size ( ) )
assertTrue ( "size must be more than 0, but it is - " + queryModel . size ( ) , queryModel . size ( ) > 0 )
Assert . assertEquals ( score , 1.0 )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
Assert . assertEquals ( first , second )
assertFileContentIsMatching ( result )
assertEquals ( "foofoo" , x )
assertThat ( resultSet , hasSize ( 1 ) )
assertThat ( logRecordListener . getLogRecords ( ) . get ( 0 ) . getMessage ( ) , containsString ( "your weld container didn't shut down properly" ) )
assertModelHasProperty ( "serviceInterface" , Optional . empty ( ) )
assertEquals ( ( limit + 1 ) * ( limit / 2 ) , total . sum ( ) )
assertParseTree ( rootNode ( "12" , node ( "digits" , Arrays . asList ( "1" , "2" ) , "12" , stringNode ( "d" , "1" ) , stringNode ( "d" , "2" ) ) ) , tree )
assertEquals ( expResult , result , 0.0001 )
assertMessage ( ":1 You haven't specified the command name or its output." , response )
assertEquals ( 2 , findings . size ( ) )
assertNull ( reader . overflowAtoms ( ) )
Assert . assertEquals ( "Hash is invalid" , TestVectors . SHA256_DIGEST_EMPTY_STRING , result )
assertEquals ( "POST" , cr . getEntity ( String . class ) )
assertUserCount ( users , 6 )
assertMockEndpointsSatisfied ( )
assertFalse ( result )
assertThat ( result , is ( "OrderServiceImpl: function(): some static mocked value: staticFunction" ) )
assertTrue ( service . isExistGroupName ( "test pg" ) )
assertNull ( split )
assertEquals ( "(void foo ;)\n" , found )
Assert . assertTrue ( configuration . isAlwaysDelayComponentRemoval ( ) )
assertEquals ( "their" , selector . selectVersion ( "id" , VersionFieldType . PARENT , "our" , "their" ) )
assertFalse ( victim . isValid ( mockFile , null ) )
assertThat ( patientResource . getProfile ( ) , containsString ( PATIENT_SUB ) )
Assert . assertThat ( actual , CoreMatchers . is ( expected ) )
assertNotNull ( "invalid workflow description" , iridaWorkflowLoaderService . loadWorkflowDescription ( workflowDescriptionPath ) )
assertThat ( contentType . hashCode ( ) , is ( contentTypeString . hashCode ( ) ) )
Assert . assertNotNull ( "Expected to be able to get MeteredInterface by interface and not by class." , mi )
assertEquals ( "Message not found" , "Please enter a value" , driver . findElement ( By . cssSelector ( ".error" ) ) . getText ( ) )
assertThat ( result , is ( true ) )
assertEquals ( expectedSplits , new TreeSet < > ( createdSplits ) )
Assert . assertEquals ( "Hello, " + name , greeter . greet ( name ) )
assertThat ( result . size ( ) , is ( 0 ) )
assertEquals ( true , rm . incomingServerRequestMatchesMethod ( withResourceAndParams ( "Patient" , RequestTypeEnum . GET , inputParams ) ) )
assertThat ( tree . getBaseImage ( SimpleApplication . class ) , is ( image ) )
assertThat ( underTest . isSatisfied ( ) , is ( true ) )
assertEquals ( "Failed to get GID" , "minijello/571cd" , ripper . getGID ( url ) )
assertEquals ( ( long ) 8 , ( long ) result . getLongWrapperValue ( ) )
assertEquals ( "novecentos e noventa e nove trilh玫es, " + "novecentos e noventa e nove bilh玫es, " + "novecentos e noventa e nove milh玫es, " + "novecentos e noventa e nove mil e " + "novecentos e noventa e nove reais" , words )
mock . assertIsNotSatisfied ( )
assertThat ( found , equalTo ( expected ) )
assertEquals ( "users should be the same from both ext sources" , user , secondUser )
context . assertIsSatisfied ( )
assertIsErrorWithoutStacktrace ( "Method 'thisClassHasNoMethods' was not found in class 'com.fnproject.fn.runtime.testfns.ErrorMessages.NoMethodsClass'. Available functions were: []" )
assertCity ( docs , "Berlin" )
assertTrue ( "http://foo.bar.com/fubar?a=d&e=f" . equals ( newEu ) || "http://foo.bar.com/fubar?e=f&a=d" . equals ( newEu ) )
Assert . assertTrue ( "Expected MEDIUM cipher suites, got null" , resolved != null && resolved . size ( ) != 0 )
assertThat ( booleanProperty , is ( equalTo ( true ) ) )
assertEquals ( "V2 Artist" , wrapper . getArtist ( ) )
assertEquals ( response . getStatus ( ) , HttpServletResponse . SC_OK )
assertThat ( screenshotDirectory , endsWith ( separator + "screenshots" + separator + anyFileName + ".png" ) )
assertArrayEquals ( CAFEBABE_MD5 , md5 )
assertEquals ( "testDesc" , trace . getDescription ( ) )
assertMockEndpointsSatisfied ( )
assertTrue ( skillConstraint . fulfilled ( insertionContext ) )
service . callCounter . assertCalls ( "{findIds=1, getItems=2}" )
assertThat ( ping . getMessageObservers ( ) . size ( ) , is ( 0 ) )
assertEquals ( expected , TypeDefinition . getInstance ( Qux . class ) . getAllSetters ( ) )
Assert . assertEquals ( numero , importacaoAdicao . getNumero ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
assertEquals ( result , one )
assertTrue ( true )
assertEquals ( bigCount , service . prepare ( q ) . countEntities ( fo ) )
Assert . assertEquals ( expResult , result )
assertNull ( RenderKitUtils . decodeBehaviors ( facesContext , component ) )
Assert . assertTrue ( notify . matches ( 30 , TimeUnit . SECONDS ) )
Assert . assertTrue ( read . contains ( str ) )
assertEquals ( HttpStatusCodes . OK . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
Assert . assertEquals ( 2 , instance . list . size ( ) )
assertEquals ( MD5HashStrategy . class , actual . getClass ( ) )
assertEquals ( "Incorrect Short Reason" , "Platform Down leela.local Change (changeValue) " , alertManager . getShortReason ( testPlatformAlert ) )
Assert . assertEquals ( numeroPedidoItemCliente , produto . getNumeroPedidoItemCliente ( ) )
Assert . assertEquals ( "apk.packageName" , "com.erdfelt.android.gestures" , apk . getPackageName ( ) )
assertSame ( s , StringDistances . create ( s ) )
assertEquals ( poly , parsed )
assertFalse ( containsAll )
assertEquals ( e1 , e2 )
assertEquals ( getExpectedItemSize ( allStrings ) , DynamoDBUtil . getItemSizeBytes ( item ) )
assertNotNull ( con . getMetaData ( ) )
assertEquals ( "over 3 weken" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 7 * 3 ) ) )
assertEquals ( "generic-url" , configuration . evaluateToString ( "url" ) )
assertThat ( highAvailabilitySupportChecker . isSupported ( FORMAT_NAME ) , is ( false ) )
assertTrue ( brokenSchemaEx . getMessage ( ) != null )
assertEquals ( new HashSet < Tuple2 < Integer , String > > ( asList ( new Tuple2 < Integer , String > ( 1 , "alpha" ) , new Tuple2 < Integer , String > ( 3 , "alpha" ) , new Tuple2 < Integer , String > ( 4 , "alpha" ) , new Tuple2 < Integer , String > ( 1 , "beta" ) , new Tuple2 < Integer , String > ( 3 , "beta" ) , new Tuple2 < Integer , String > ( 4 , "beta" ) ) ) , probe . values )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertEquals ( "Wrong Query URL" , expResult , result . toString ( ) )
assertEquals ( false , bm . isBitSet ( bitNumber ) )
assertNotNull ( cert )
Assert . assertEquals ( getWebsiteUrl ( ) + "/view2" , getDriver ( ) . getCurrentUrl ( ) )
assertNotNull ( result )
Assert . assertEquals ( true , actual )
assertArrayEquals ( delegate . getSessionId ( ) , expected )
assertEquals ( createContainerCaptor . getValue ( ) . getHostConfig ( ) . getMemorySwap ( ) , - 1 )
assertEquals ( 8 , v . size ( ) )
assertThat ( actual , is ( object ) )
assertFalse ( portal . removePage ( new PageId ( "test1" , "page2" ) ) )
assertSententences ( expected , service . predict ( text , suggestions ) , text , suggestions )
Assert . assertEquals ( IOUtil . toString ( new FileInputStream ( new File ( "src/test/resources/versionInfoFileRewritten-alpha-20.xml" ) . getAbsoluteFile ( ) ) , "UTF-8" ) , IOUtil . toString ( os . toByteArray ( ) , "UTF-8" ) )
assertNull ( "The root component should be null." , root )
Assert . assertEquals ( "license1=This is mine!" , licenseContent . trim ( ) )
assertFalse ( validator . isValid ( username , null ) )
assertPhotoSizes ( sizes )
Assert . fail ( "Test should fail, user shouldn't be allowed to invoke that method" )
assertTrue ( result )
assertThat ( feature . getName ( ) , Is . is ( "test.feature" ) )
assertTrue ( tt2 == tt )
assertMappedFieldValueIs ( "CustomMappedValue" )
assertEquals ( TestHandler . GET_RESPONSE , future . get ( ) )
assertEquals ( model , RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "UnboundedQuantityValue.rdf" ) ) )
Assert . assertEquals ( 3 , bitmap . size ( ) )
assertSame ( ret , null )
Assert . assertEquals ( p4 , p3 )
assertNotEquals ( null , feedbackReceiver )
Assert . assertEquals ( font , cache . getFont ( ) )
Assert . assertEquals ( "<TestJsonBean><email>test@email.com</email><birthday>2012-11-23 00:00:00</birthday></TestJsonBean>" , json )
assertTrue ( "Values should be equal" , equals )
assertThat ( actual , is ( expected ) )
assertEquals ( control , key )
assertEquals ( "http://fhirstorm.dyndns.org:8080/FhirStorm/fhir" , actual )
assertEquals ( "UTF-8" , detector . detect ( ) . getName ( ) )
assertTrue ( "Should match" , query1 . equals ( query ) )
assertEquals ( "GET_some_path_with_multiple_parameters_fallback" , serviceId )
assertEquals ( Arrays . asList ( 0 , 1 , 2 ) , ObjectInspector . list ( list ) )
assertEquals ( "Conversion did not match" , value , to )
assertEquals ( "<order><id>123/id><customerId>4444/customerId><date>20170810</date>" + "<item><id>222</id><amount>1</amount></itemn></order>" , xml )
assertEquals ( 0 , dbHandler . getDataElementCount ( ) )
Assert . assertTrue ( check . equals ( o ) )
Assert . assertFalse ( dl . doAction ( reqNotPost , mock ( HttpServletResponse . class ) ) )
assertThat ( comparator . compare ( projectChange1 , projectChange2 ) , is ( 0 ) )
Assert . assertEquals ( 4 , result . getTotalHits ( ) )
assertEquals ( expectedArg , parsedArg )
assertTrue ( getExpectedErrorMsg ( ) , result )
assertEquals ( "EUR -5.78" , test . toString ( ) )
assertEquals ( expected , result )
assertOnResponseAttachment ( f6 , MAX_SIZE2 , "Client3gbAttachment.txt" )
Assert . assertNotNull ( String . valueOf ( obj ) , obj )
Assert . assertTrue ( dsDao . getDSInfo ( dsTestStub . getDeploymentID ( ) . getServiceID ( ) . toString ( ) ) . isUp ( ) )
assertNotNull ( UserChannel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( "!yro1\n" , sWriter . toString ( ) )
assertFrameHex ( "Lax Text Frame with RSV1" , expected , actual )
arrays . assertContainsOnly ( someInfo ( ) , actual , arrayOf ( true , false ) )
assertThat ( expectedQueryFilterSpec , new ReflectionEquals ( unmarshalledQFS ) )
assertThat ( results , samePaths ( new File ( a , "f.txt" ) , new File ( b , "f.txt" ) , new File ( c , "f.txt" ) ) )
assertEquals ( 1 , ksession1 . fireAllRules ( ) )
assertThat ( result , is ( "a,b," ) )
Assert . assertFalse ( duplicateWorkComparator . isDuplicate ( doc1 , doc2 , null ) )
assertEquals ( "Wrong property value (path=" + path + ")" , "Just do it" , property . getRealValue ( ) . getHowto ( ) )
assertEquals ( "SELECT * WHERE { ?user ?_c2 ?_c3 ; ?_c4 ?user_name . FILTER(?user_name != ?_c6) }" )
assertNull ( "Found non-existant class" , in )
assertTestRunFails ( testPlan )
assertNull ( event . getKnownType ( ) )
Assert . assertNotNull ( rsp )
assertObjectEquals ( "{f1:'f1'}" , t )
assertOut ( "/**\n * @param {string=} bar\n * @return {number}\n */\nRoyaleTest_A.prototype.foo = function(bar) {\n\tvar self = this;\n\tbar = typeof bar !== 'undefined' ? bar : \"baz\";\n\treturn -1;\n}" )
assertThat ( formatter . isMonochrome ( ) , is ( true ) )
assertEquals ( expResult , result )
assertTrue ( ripper . findJSONObjectContainingPhotoId ( "-45984105_457345201" , new JSONObject ( json ) ) . similar ( new JSONObject ( responseJson ) ) )
assertNotNull ( ldapServer )
assertTrue ( instanceConstraintViolationsList . toString ( ) , instanceConstraintViolationsList . size ( ) == 1 )
assertThat ( result , is ( new String [ 0 ] [ 0 ] ) )
assertEquals ( Address . Country . Ireland , addressMap . get ( "country" ) )
assertEquals ( "\"test\"" , s )
AssertionUtils . multiAssertEquals ( createAsDocument9 , response5 . getResponseObject ( ) )
assertObjectEquals ( "{type:'object',properties:{f1:{type:'string'}},'x-example':{f1:'baz'}}" , s . getSchema ( B1 . class ) )
assertEquals ( destination , JsonValue . NULL )
assertExpectedPreprocessingResult ( expectedResultLocation , includeReader )
assertTrue ( smileys . isEmpty ( ) )
assertArrayEquals ( new String [ ] { "a" , "b" } , mojo . getParsedMethodValue ( ) )
assertTrue ( response . getNumberOfFeatures ( ) . intValue ( ) == 1 )
assertTrue ( hasImage ( IMAGE_TAG ) )
assertEquals ( NEW_ENCODING , request . getCharacterEncoding ( ) )
assertEquals ( NODE + '@' + DOMAIN , bareJID )
Assert . assertEquals ( "cGFzc3dvcmQ=" , codec . encode ( "password" ) )
assertThat ( ( BigInteger ) getter . invoke ( instance ) , is ( equalTo ( new BigInteger ( "1337" ) ) ) )
assertThat ( impl . getOntologyAnnotations ( ontologyId ) . count ( ) , is ( 0L ) )
assertNotNull ( "converter must not be null" , s )
assertEquals ( "Test2" , gbpServicePolicyOut . getName ( ) )
assertTrue ( shortname1 . equals ( shortname2 ) )
assertArrayEquals ( expected , fileArray )
assertThat ( result , is ( CodePoints . NOT_FOUND ) )
assertTrue ( isEqual ( mockStopPoint , actualStopPoint ) )
assertEquals ( uploadLocation + FileUtils . toDir ( stateToken ) + filename + "." + subExt + extension , absFile )
assertEquals ( 8 , ( int ) result . getIntWrapperValue ( ) )
Assert . assertEquals ( "notes.txt" , actual )
assertEquals ( expResult , result )
assertEquals ( "concrete" , s )
assertThat ( roundtrippedRecord , equalTo ( record ) )
assertEquals ( "hello" , result )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR_500 , resp . getStatus ( ) )
assertEquals ( "Invalid version extracted" , expVersion , result . getParentVersion ( ) )
excelApplicationManager . assertContent ( new File ( getClass ( ) . getResource ( "expected_ok.xls" ) . toURI ( ) ) , EMPTY_LIST , EMPTY_LIST )
Assert . assertNotNull ( localFileResource )
Assert . assertTrue ( os . toString ( "UTF-8" ) . contains ( "Unknown plug-in" ) )
assertEquals ( expResult , result )
assertThat ( extractMonitorables ( adapter ) . get ( NINETY_NINETH ) . get ( ) , Matchers . < Object > is ( new99thMetric ) )
assertEquals ( "" , ListUtil . generateCommaSeparatedString ( list ) )
Assert . assertEquals ( WebUtilities . CLOSE_BRACKET_ESCAPE , HtmlSanitizerUtil . sanitize ( testString ) )
Assert . assertEquals ( "Look up failed for key: " + key , Boolean . TRUE , udf . evaluate ( bfstr , key ) )
assertThat ( representation . getName ( ) , is ( "attachment" ) )
assertEquals ( null , avg )
assertTrue ( "Should have connected to the server." , ourServer . waitForClient ( TimeUnit . SECONDS . toMillis ( 10 ) ) )
assertThat ( rendered , is ( "<table test=\"block\">\n" + "<thead test=\"head\">\n" + "<tr test=\"row\">\n" + "<th test=\"cell\">Abc</th>\n" + "<th test=\"cell\">Def</th>\n" + "</tr>\n" + "</thead>\n" + "<tbody test=\"body\">\n" + "<tr test=\"row\">\n" + "<td test=\"cell\">1</td>\n" + "<td test=\"cell\">2</td>\n" + "</tr>\n" + "</tbody>\n" + "</table>\n" ) )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
assertEquals ( "checking getFqan gets expected result" , TEST_FQAN , principal . getFqan ( ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn.opendaylight" + ".openflow.common.instruction.rev130731.instructions.grouping.Instruction msgType: 11" + " experimenterID: null" , key1 . toString ( ) )
Assert . assertEquals ( expected , this . donutShop . getTopDonuts ( 2 ) )
assertEquals ( 1 , listener . getNumberOfTimesInvoked ( ) )
assertThat ( caughtException ( ) , instanceOf ( CustomException . class ) )
Assert . assertEquals ( actual , expected , "Returned an invalid property value." )
assertEquals ( unused , h . getUnused ( ) )
assertEquals ( "(* (* (a 34) b 9) c)\n" , found )
assertServerAncestry ( trace )
assertFalse ( "The getChanges() method reported a change" , hasChange )
Assert . assertEquals ( 3 , tools . size ( ) )
assertFalse ( authorizer . isAuthorized ( context , profiles ) )
assertEquals ( expected , new WritablesToNDArrayFunction ( ) . apply ( l ) )
assertNumEquals ( 1 , averageProfit . calculate ( series , new BaseTradingRecord ( ) ) )
assertEquals ( new ArrayList < PostReport > ( ) , mockResult . included ( "reports" ) )
Assert . assertEquals ( result . getResultSize ( ) , 10 )
Assert . assertEquals ( 0 , reply . getInventories ( ) . size ( ) )
assertFalse ( "property not cleared" , config . containsKey ( "key1" ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertEquals ( actual , expected , "Method with zero parameters does not match expected" )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
Assert . assertTrue ( "Wrong canonicalization using external mapping file" , TestFileUtils . compareFileToResource ( out , base ) )
assertEquals ( "0.5" , testedString )
assertEquals ( expected , ColumnRanges . rangeAtNode ( compare ) )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoItemImpostoPISOutrasOperacoes ( ) . toString ( ) )
Assert . assertEquals ( extractor . generateKey ( host , req1 ) , extractor . generateKey ( host , req2 ) )
assertThat ( I18nUtil . pre ( TEST_STRING ) , is ( TEST_STRING ) )
Assert . assertEquals ( zero . getReal ( ) , 0 , 3.0e-16 )
assertEquals ( "CLIENT PARALLEL 1-WAY RANGE SCAN OVER _IDX_T ['me',-32767,'a'] - ['me',-32767,*]" , QueryUtil . getExplainPlan ( rs ) )
assertFalse ( episodes . isEmpty ( ) )
Assert . assertTrue ( execute ( args ) . startsWith ( "usage" ) )
assertThat ( result ( ) , is ( equalTo ( expectedResult ) ) )
assertThat ( encoded , containsString ( "\"telecom\":[{\"extension\":[{\"url\":\"http://foo\",\"valueString\":\"AAA\"}]}" ) )
Assert . fail ( "Expecting MathParseException" )
assertJsonIs ( "{\":type\":\"some/resource/type\",\"helloWorld\":\"Hello, world\",\"lazy\":\"Lazy value\",\"resource\":\"/some/resource/path\",\"subModelProperty\":\"sub model property\"}" )
assertEquals ( parseCalendar ( "20131028-00:00:00" , TimeZone . getTimeZone ( "Europe/Amsterdam" ) ) , dh . getCalendarAfter ( testingClock . getCurrentCalendar ( ) ) )
assertArrayEquals ( completeExtension , serializer . serialize ( ) )
responseAsserter . assertRegisterResponse ( )
assertEquals ( "http://test.com/1?a=&b=" , HttpRequest . append ( "http://test.com/1" , params ) )
assertEquals ( "getAllShardNames" , ImmutableSortedSet . of ( "people-1" , "cars-1" , "test-1" , "default" ) , ImmutableSortedSet . copyOf ( allShardNames ) )
assertNotNull ( "precondition was supposed to fail" , result )
assertTrue ( survey . isAnswerSelected ( 1 , 1 ) )
assertNull ( s )
Assert . assertNotNull ( "description should be present" , actualDescription )
assertEquals ( "base_domain" , wlsDomainConfig . getName ( ) )
assertEquals ( g1 , g2 )
assertEquals ( "56789" , content )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , "test; foo=\"bar\"" )
assertThat ( result , is ( "hello world" ) )
Assert . fail ( "NullPointerException should have been thrown" )
assertThat ( values . getJavaLoggingLevel ( ) , equalTo ( stringValue ) )
assertEquals ( group , found )
assertTrue ( Arrays . equals ( new int [ ] { 0 , 4 , 8 , 0 , 72 , 86 , 89 } , command . serialize ( ) ) )
assertEquals ( null , result )
assertEquals ( String . format ( "Expected [%s] but got [%s]" , expected , mapping ) , expected , mapping )
assertThat ( target . getEthType ( ) , is ( new Integer ( OFPFlowActionPushMpls . MPLS_MULTICAST ) ) )
assertThat ( createdOrUpdated . getStatusInfo ( ) . getFamily ( ) , is ( Response . Status . Family . SUCCESSFUL ) )
assertThat ( reply ( ) , is ( anAppendReply ( ) . withResult ( true ) ) )
assertThat ( text ( contents ) , is ( "a\tb\nA\tB\n" ) )
assertEquals ( FEEDBACK_MESSAGE , feedbackMessage )
Assert . assertNotNull ( service )
assertThat ( jreUnitVersions , hasItem ( "14.0.0" ) )
assertSpecialServletWasInvokedWith ( entity )
assertMockEndpointsSatisfied ( )
assertEquals ( expResult , result )
assertEquals ( OffsetDate . of ( LocalDate . of ( 2008 , 2 , 15 ) , OFFSET_PONE ) , t )
assertEquals ( "00123" , df . format ( 123 ) )
assertSchema ( schema )
Assert . fail ( "failure expected" )
Assert . assertEquals ( stNamespace . compareTo ( otherNamespace ) , serviceTemplate . compareTo ( otherServiceTemplate ) )
assertResultSet ( res )
assertEquals ( "fnord( \"cheese\" )" , returnData )
assertEquals ( datasetSchema , rt . getSchema ( ) )
assertEquals ( TestUtil . FTP_TEST_PROXY , result . get ( 0 ) )
Assert . assertEquals ( 1 , list . size ( ) )
assertEquals ( "2005-10-12T00:00:00" , v . getStringValue ( ) )
Assert . assertFalse ( tt . isPrematureBreak ( null ) )
assertEquals ( "Main class name" , "org.apache.felix.main.Main" , new FelixPlatformBuilderF100T122 ( m_bundleContext , "version" ) . getMainClassName ( ) )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertTrue ( tbce . compareScreen ( "foo" ) )
assertThat ( result , is ( "\"" + ID + "\"" ) )
assertTrue ( game3 . isGameOver ( ) )
assertTrue ( true )
assertTrue ( log . getClass ( ) . getName ( ) . startsWith ( "org.ops4j.pax.logging.avalon" ) )
assertEquals ( 6 , unit . getNumLoads ( ) )
this . assertEquals ( 19 , ami_return_val )
Assert . assertNotNull ( changed . getValue ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertThat ( result , equalTo ( v + "-" + s ) )
assertThat ( testStatus , is ( expectedStatus ) )
assertEquals ( a1 , a2 )
assertEquals ( 28 , term . evalI ( env ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertThat ( tags , hasItems ( "a" , "b" , "c" ) )
assertTrue ( glass . accept ( point , 0 , 0 ) )
assertEquals ( 1 , servers . size ( ) )
assertTrue ( fileDescriptorChecker . isDetected ( ) )
Assert . assertTrue ( time < randomQueryTimeLimitInMillis )
assertEqualsIgnoreWhitespace ( "\n\t\n\tdrools.update( myObject );" , result )
assertDROOLS2286 ( context )
assertThat ( secondPage . getUrl ( ) . toString ( ) , endsWith ( "/view-hardcoded-params" ) )
assertEquals ( 201 , status . getStatusLine ( ) . getStatusCode ( ) )
Assert . fail ( )
assertRowsEqual ( expected , primaryData )
assertNull ( v . get ( ) )
Assert . fail ( "Should have thrown SQLFeatureNotSupportedException" )
Assert . assertEquals ( Lists . newArrayList ( s ) , Promoter . listOfOne ( s ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + "<office:document-content xmlns:office=\"urn:oasis:names:tc:opendocument:xmlns:office:1.0\" " + "xmlns:text=\"urn:oasis:names:tc:opendocument:xmlns:text:1.0\" " + "xmlns:table=\"urn:oasis:names:tc:opendocument:xmlns:table:1.0\">" + "<table:table table:name=\"Compras\" table:style-name=\"Compras\">" + "<table:table-column table:style-name=\"Compras.A\"/>" + "<table:table-header-rows>" + "#foreach($item_row in $row)" + "<table:table-row>" + "<table:table-cell table:style-name=\"Compras.A1\" office:value-type=\"string\">" + "#set($___NoEscape0=${___TextStylingRegistry.transform($item_row.html,\"Html\",$false,\"ODT\",\"0_elementId\",$___context,\"content.xml\")})$___NoEscape0.TextBefore" + "<text:p text:style-name=\"P3\">$___NoEscape0.TextBody</text:p>" + "$___NoEscape0.TextEnd" + "</table:table-cell>" + "</table:table-row>" + "#{end}" + "</table:table-header-rows>" + "</table:table>" + "</office:document-content>" , writer . toString ( ) )
assertException ( "FEEL-01017" , "false" , "12" , "< 12" , "'Hello'" )
assertEquals ( assertion , result2 )
assertEquals ( expectedJson , actualJson )
assertEquals ( "Base value is not properly parsed" , "true" , parsed )
assertEquals ( "HTTP/1.1 417 Expectation Failed" , sb . toString ( ) . trim ( ) )
assertEquals ( "Project_Default(Field(0))\n" + "  Insert_Returning(INTO c)\n" + "    Project_Default(_SEQ_NEXT(test, c_cid_seq), NULL)\n" + "      ValuesScan_Default([])" , getExplain ( insert , table . getSchemaName ( ) ) )
assertArrayEquals ( new Class [ ] { int . class } , c . getParameterTypes ( ) )
assertThat ( wrappers . length , is ( 0 ) )
assertTrue ( wsss . isClosed ( ) )
assertEquals ( 42 , tf . getConvertedValue ( ) )
assertEquals ( 4 , beanMap . size ( ) )
assertMockEndpointsSatisfied ( )
assertNull ( bidService . getBid ( bidId ) )
assertEquals ( SUPPRESSABLE , strategyName )
assertTrue ( headings . get ( 1 ) . text ( ) . equals ( "H1" ) )
assertEquals ( "void dest8(@A @B @C int, @B @C @D int, int, @C @D @E int)" , toString ( dest ) )
assertThat ( c . compute ( ) , is ( 23 ) )
assertEquals ( "Hello Worldfirst" , result )
assertEquals ( 400 , PartitionUtils . getRecommendedPartitions ( pcollection ) )
assertTrue ( failListener . isFailed ( ) )
assertEquals ( 1 , regionInfoList . size ( ) )
assertFalse ( peerAcceptanceUtil . isPeerInterestedOnRemoteWorker ( clientID . getServiceID ( ) ) )
assertEquals ( "Not a BYTE size multiple" , 0 , keyLength % Byte . SIZE )
assertNotNull ( op )
Assert . assertEquals ( expectedProjectionBean , computedProjectionBean )
Assert . assertEquals ( currentYear - birthYear , AgeUtils . getFullAge ( birthDate ) )
assertEquals ( prettyPrintXml ( readContent ( EXPECTED_ABSTRACT_COMPLEX_TYPE_PATH ) ) , prettyPrintXml ( xml ) )
assertListTEquals ( listT , 12 , 13 , 14 , 15 )
assertThat ( lastCompletedBuildOf ( view ) . url ( ) , is ( "job/project-name/22/" ) )
assertEquals ( "^/cntrl/actn$" , pattern )
Assert . assertNotNull ( json . getString ( "uid" ) )
assertEquals ( expectedHashCode , is . readInt ( ) )
assertEquals ( "Wrong propert value" , " [test@cmd ~]$ " , config . getString ( "CmdPrompt" ) )
assertEquals ( "min= 0.0, max= 1.0" , range1 . toString ( ) )
assertEquals ( Rational . valueOf ( 279936 ) , result )
assertEquals ( "Check that task ran" , 1 , ran )
assertArrayEquals ( id . toByteArray ( ) , embedding . getRawId ( 0 ) )
assertEquals ( expecting , found )
assertEquals ( expectedId , result )
assertTrue ( reporterFactory instanceof GraphiteScheduledReporterFactory )
assertThat ( result , equalTo ( false ) )
assertThat ( result , is ( expected ) )
assertEquals ( unused , h . getUnused ( ) )
assertThat ( rowsModified , is ( 1 ) )
assertEquals ( "a" , mock . get ( 1 ) )
assertNotNull ( foo . field )
assertEquals ( testDays , tlsToolkitStandaloneCommandLine . createConfig ( ) . getDays ( ) )
assertArrayEquals ( d . asFloat ( ) , d2 . asFloat ( ) , 0.001f )
assertThat ( result , is ( 2 ) )
assertThat ( ontology , is ( equalTo ( ontologyC ) ) )
assertTrue ( true )
Assert . assertEquals ( PriorityBean . PRIORITY , job . getPriority ( ) )
assertThat ( result , is ( c ) )
Assert . assertEquals ( expected , testIndex . findConc ( "a:[] 'aap' b:[] :: a.word = b.lemma & a.word = b.pos" ) )
assertEquals ( model , actual )
assertThat ( StubWatchFactory . getRequestParameters ( ) . get ( 1 ) , hasEntry ( "resourceVersion" , String . valueOf ( resourceVersion - 2 ) ) )
assertFalse ( definedInContext )
assertCodeContains ( generated , "isInstanceOf(o.constructor, Int8Array)" )
assertEquals ( "Wrong parameters" , createTestParameters ( ) , params2 )
assertThat ( thrown , instanceOf ( ShardConfigStaleException . class ) )
assertNotNull ( UserChannel . reader ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "USXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
Assert . assertEquals ( "selenium.doubleClick(\"link=my_link\");" , result )
assertEquals ( t1 , t2 )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 , 5 , 6 ) ) )
assertEquals ( DistCpCopier . class , copier . getClass ( ) )
Assert . assertEquals ( 4 , collect . get ( ) . size ( ) )
assertResult ( 15 )
assertFalse ( str . isPresent ( ) )
assertSame ( Object . class , value . getValue ( ) )
assertEquals ( this . multipleCom , result . getAttributes ( ) )
assertEquals ( "package org.kissmda.test.junit;\n" + "public class ClazzName {\n" + "  public void doSomething(  Name values){\n" + "  }\n" + "}" , cu . toString ( ) . trim ( ) )
assertEquals ( "ABN is required." , violations . iterator ( ) . next ( ) . getMessage ( ) )
Assert . assertEquals ( "[1, 3]" , s . toString ( ) )
assertTrue ( xmldbURI . isAbsolute ( ) )
Assert . assertEquals ( "" , WebUtil . getContextPath ( ) )
assertThat ( formatter . format ( PlainDate . of ( 1700 , 1 , 30 ) ) , is ( "AD-1698/1700-01-30" ) )
assertEquals ( expected , actual )
assertIdentical ( "/simple_parts.owl" , filtered )
assertArrayEquals ( new Integer [ ] { 0 , 1 , 2 , 3 , 4 , 7 , 8 , 9 } , view . toArray ( new Integer [ 8 ] ) )
assertTrue ( connectFuture . isConnected ( ) )
assertEquals ( 1 , historyService . createHistoricProcessInstanceQuery ( ) . incidentStatus ( "open" ) . count ( ) )
assertEquals ( origWriteSet , reorderSet )
assertThatStepsInstancesAre ( builderAnnotated . buildCandidateSteps ( configuration ) , WeldStepBean . class )
assertEquals ( expected , actual )
assertEquals ( aNumber , bNumber )
assertTrue ( stopAtFirstIneligibleField ( field ) . isEmpty ( ) )
assertTrue ( "installed pom should exist" , destinationPom . exists ( ) )
assertNotNull ( permissionService . getPermissionsFor ( branch ) )
SelendroidAssert . assertResponseIsResourceNotFound ( response )
assertEquals ( serializedYaml , yaml )
assertSame ( result , this . logger )
assertTrue ( user1 . equals ( user2 ) )
assertEquals ( "(DUH a (DUH 1)) (DUH b (DUH 2))\n" , found )
assertEquals ( 0 , runtimeService . createProcessInstanceQuery ( ) . processInstanceId ( processInstance . getId ( ) ) . count ( ) )
assertEquals ( 0 , mark1 )
assertTrue ( rootNode . getPrimaryNodeType ( ) . isNodeType ( JcrMixLexicon . REFERENCEABLE . getString ( session . namespaces ( ) ) ) )
assertArrayEquals ( new byte [ ] { 42 } , Files . readAllBytes ( withDot ) )
AssertAnnotations . assertSemPred ( predicates , select ( jcas , SemPred . class ) )
assertNodeGetsCorrectPriority ( compoundWrite , node , PRIO_NODE )
assertNodesIn ( expected , y2Fun , Optional . of ( y2Fun ) )
assertThat ( hijri . with ( CommonElements . localDayOfWeek ( HijriCalendar . family ( ) , model ) . incremented ( ) ) , is ( hijri . nextDay ( ) ) )
assertEquals ( true , bm . isBitSet ( bitNumber ) )
assertEquals ( DOM_RPC_IMPLEMENTATION , abstractDOMRpcImplementationRegistration . getInstance ( ) )
assertEquals ( "0: General use CPU\n" + "1: CPU not available\n" + "2: Thread[logger,5,main] alive=true\n" + "3: Thread[engine,5,main] alive=true\n" + "4: General use CPU\n" + "5: CPU not available\n" + "6: Thread[main,5,main] alive=false\n" + "7: Thread[tcp,5,main] alive=true\n" , actual )
assertEquals ( 5 , searchEngineMarketShareArray . length )
assertions . contains ( null , index )
assertEquals ( json , rc . getBodyAsJson ( ) )
assertThat ( scc , is ( toPartition ( expect ) ) )
assertEquals ( result . get ( RETURN_RESULT ) , String . format ( EXCEPTION_INVALID_REMOTE_FILE , invalidRemoteFile ) )
assertThat ( quantity , equalTo ( item . getQuantity ( ) ) )
assertEquals ( Optional . of ( "A" ) , r )
assertEquals ( this . sg . getNetworkElementId ( ) , "UPDATED_SFC_ID" )
assertFailure ( subject , new HostnameFormatValidator ( ) , "[" + subject + "] is not a valid hostname" )
assertAOPFooStepsFound ( steps )
assertNotNull ( update . getId ( ) )
files . assertIsFile ( someInfo ( ) , actual )
assertTrue ( testResults . isEmpty ( ) )
assertTrue ( of ( "aaaaA" ) . toString ( ) . equals ( "aaaAa" ) )
context . assertIsSatisfied ( )
Assert . assertNull ( "Should be null for option with null code" , SelectListUtil . getOptionWithMatching ( options , "A" ) )
assertEquals ( "" , result )
Assert . assertSame ( "Different event bus instances" , eventBus , eventBus2 )
assertEquals ( 201 , response . getStatus ( ) )
Assert . fail ( "exception expected" )
assertOut ( "<script><![CDATA[\n\tprivate var GREETING:String = \"Hello world!\";\n]]></script>" )
Assert . assertEquals ( "443/MyProject" , connectionString )
Assert . assertTrue ( TestUtils . attributeEquals ( expectedResults , exactResults , attributeNames ) )
assertEquals ( 1.234 , empty . getDeviation ( ) , 0.001 )
assertArrayEquals ( expected , bson )
Assert . assertEquals ( cnpj , dados . getCnpj ( ) )
Assert . assertTrue ( "Log content should match" , "1. UserOriginated: true" . equals ( getLogRow ( 0 ) ) )
Assert . assertThat ( result . getBean ( WithTypeParam . class ) . getProperties ( ) . get ( 0 ) . tsType , CoreMatchers . instanceOf ( TsType . UnionType . class ) )
assertTrue ( new Matcher ( ) . match ( actual , cloudMLSamples . getProviderA ( ) ) )
Assert . assertEquals ( 4 , tools . size ( ) )
assertEquals ( expectedTypes , sourceTypeDAO . getTypes ( TENANT_ID ) )
Assert . assertNull ( noBean )
Assert . assertTrue ( "Property values not dereferenced when overriding bean string array property as CSV list. Expected " + Arrays . toString ( expected ) + ", but was " + Arrays . toString ( actual ) , Arrays . equals ( expected , actual ) )
assertThrows ( InvalidMethodSignatureException . class , ( ) -> new JavaDataTableTypeDefinition ( method , lookup , new String [ 0 ] ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "baz" , provider . getRelativePath ( projectBasedir , repoRoot ) )
XMLAssert . assertXMLEqual ( new InputStreamReader ( getClass ( ) . getResourceAsStream ( "v13/csv-config-03.xml" ) ) , new StringReader ( modelWriter . toString ( ) ) )
assertEquals ( "The ttl should be 50" , 50 , iSpec . getTTL ( ) )
Assert . assertEquals ( "bob" , token . getUserName ( ) )
assertThat ( match , is ( BestTypeMatch . T2 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertThat ( dest . ccc , is ( "111" ) )
assertThat ( manager . getRandomStrategy ( ) , is ( mockedStrat1 ) )
assertEquals ( emptyTile , theGhost ( ) . getTile ( ) )
assertEquals ( "Expected 5 results!" , 5 , n )
assertEquals ( 10.0 , lin . sumNumber ( ) . doubleValue ( ) , 1e-1 )
assertEquals ( "192.168.0.123/24" , ip )
Assert . assertEquals ( XMLStreamConstants . COMMENT , reader . nextEvent ( ) . getEventType ( ) )
assertPermanentCount ( playerA , "Silvercoat Lion" , 1 )
assertEquals ( "result ok?" , 1 , ( int ) query . get ( 0 ) . get ( "ONE" ) . toInt ( ) )
assertArrayEquals ( expected , actual )
Assert . assertTrue ( bean . getList ( ) != null && ! bean . getList ( ) . isEmpty ( ) )
assertFalse ( iter . hasNext ( ) )
Assert . assertEquals ( slice . toString ( ) , 9 , SlicerUtil . countNormals ( slice ) )
Assert . assertEquals ( 20 , analyser . getLoadAtEnd ( route ) . get ( 0 ) , 0.01 )
assertEquals ( expecteds , actuals )
assertEquals ( Version . valueOf ( "1.0.0-alpha+build" ) , builder . build ( ) )
Assert . assertEquals ( 200 , response . getStatus ( ) )
assertValuesEqualsResultSet ( rs , expectedResults )
assertEquals ( "5" , stringWriter . toString ( ) )
assertContainsPlot ( 1 , 1 , PlotColor . BLUE , plot )
assertEquals ( "resultxx" , aspect . aroundFlippableMethods ( pjp , flipAnnotation ) )
assertResult ( 0 )
Assert . assertNull ( webHdfs . getDelegationToken ( null ) )
Assert . fail ( "expected exception for non describe query." )
assertUpdateRecord ( "*.c1.addresses" , objId , obj , updateObj , PATCH , expected )
assertTrue ( DataTypeUtils . isCompatibleDataType ( testMap , RecordFieldType . RECORD . getDataType ( ) ) )
assertEquals ( EXPECTED_DELETE_WORKSPACE_PATH , path )
Assert . assertEquals ( "Drop what?!?!" , responseResult . getText ( ) )
assertEquals ( "two" , ( String ) event . getField ( "$.arr[0]" ) )
assertEquals ( runEnv . removeNextStepPosition ( ) , nextStepPosition )
assertEquals ( 0 , ( int ) captured . getValue ( ) )
assertTrue ( "Should not infer a reset when the sequence number is not one" , responder . disconnectCalled )
assertSame ( whitespace , tokenizer )
assertEquals ( ZERO , min . evaluate ( ZERO ) )
assertOrder ( true , query ( ) . sortDescending ( "one" ) )
assertTrue ( "fbfc986da9dc02cb5f6395d926f349b1674727be2fefda8d6044187d" . equals ( sb . toString ( ) ) )
assertTrue ( helper . shouldBeStored ( new HTTPResponse ( Status . OK , headers ) ) )
assertThat ( operatorValues . getInternalDebugHttpPort ( ) , equalTo ( stringValue ) )
assertTrue ( criteria . equals ( criteria2 ) )
Assert . assertEquals ( expResult , result )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( expected , actual )
assertThat ( className , is ( "com.wideplay.warp.hibernate.HibernatePersistenceService" ) )
assertInvocations ( client . getBusinessActivityInvocations ( ) , "complete" , "confirmCompleted" , "close" )
assertEquals ( "<chart><background-color><linear-gradient x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\"></linear-gradient>" + "<stops position=\"0\" color=\"white\"></stops>" + "<stops position=\"1\" color=\"black\"></stops>" + "</background-color></chart>" , removeWhitespacesBetweenTags ( parent . child ( 0 ) . toString ( ) ) )
assertEquals ( 0.5f , config . half ( ) , 0.01f )
assertEquals ( components . size ( ) , 1 )
Assert . assertEquals ( unidadeFederativa , consultaRetorno . getUf ( ) )
assertSanity ( expected )
assertEquals ( "Rounding exp=log(2,1e-10); 2^exp + 2^(exp-1) + 2^(exp-2) to exp" , 2 * expected , Utils . round ( value , exponent ) , 0d )
assertEquals ( BIG_DECIMAL_VAL_7 , p . getBigDecimal ( ) )
assertFalse ( rs . next ( ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertEquals ( true , out . firstElement ( ) . get ( ) )
Assert . assertEquals ( "--- a/" + projectSourcePath + "/Bar.java\n" + "+++ b/" + projectSourcePath + "/Bar.java\n" + "@@ -11,4 +11,8 @@\n" + " \n" + "-\t\t} else if (true) {\n" + "-\n" + "+\t\t} else {\n" + "+\t\t\tif (false) {\n" + "+\t\t\t\tif (true) {\n" + "+\t\t\t\t\t\n" + "+\t\t\t\t}\n" + "+\t\t\t}\n" + " \t\t}\n" , test . getPatch ( ) )
assertEquals ( 200 , action . getCode ( ) )
assertThat ( timerWheel . getExpirationDelay ( ) , is ( lessThanOrEqualTo ( SPANS [ 0 ] ) ) )
assertTrue ( Iterables . all ( evenNumbers , acceptEvenNumber ) )
testRunner . assertAllFlowFilesTransferred ( PutCassandraQL . REL_SUCCESS , 1 )
assertOut ( "/**\n * @constructor\n */\norg.apache.royale.A = function() {\n};\n\n/**\n * @type {Object}\n */\norg.apache.royale.A.prototype.foo1;\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo1', \n\t{get:function() {\n\t\tvar self = this;\n\t\treturn null;\n\t}, configurable:true}\n);\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo1', \n\t{set:function(value) {\n\t}, configurable:true}\n);\n\n/**\n * @protected\n * @type {Object}\n */\norg.apache.royale.A.prototype.foo2;\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo2', \n\t{get:function() {\n\t\tvar self = this;\n\t\treturn null;\n\t}, configurable:true}\n);\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo2', \n\t{set:function(value) {\n\t}, configurable:true}\n);\n\n/**\n * @private\n * @type {Object}\n */\norg.apache.royale.A.prototype.foo3;\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo3', \n\t{get:function() {\n\t\tvar self = this;\n\t\treturn null;\n\t}, configurable:true}\n);\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo3', \n\t{set:function(value) {\n\t}, configurable:true}\n);\n\n/**\n * @type {Object}\n */\norg.apache.royale.A.prototype.foo5;\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo5', \n\t{get:function() {\n\t\tvar self = this;\n\t\treturn null;\n\t}, configurable:true}\n);\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo5', \n\t{set:function(value) {\n\t}, configurable:true}\n);\n\n/**\n * @type {Object}\n */\norg.apache.royale.A.prototype.foo6;\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo6', \n\t{get:function() {\n\t\tvar self = this;\n\t\treturn null;\n\t}, configurable:true}\n);\n\nObject.defineProperty(\n\torg.apache.royale.A.prototype, \n\t'foo6', \n\t{set:function(value) {\n\t}, configurable:true}\n);" )
assertSame ( expected , actual )
assertThat ( PlainDate . MAX . getMinimum ( model . weekOfYear ( ) ) , is ( 1 ) )
assertCollectionCanNotBeSerialised ( collection , TreSource . ImageExtendedSubheaderData )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
assertEqualHQL ( "allen hi love  dandan" , sb . toString ( ) )
VertxAssert . assertEquals ( "The graph operation resulted in an error: " + response . getString ( "message" ) , "ok" , response . getString ( "status" ) )
assertNotNull ( extractElementDataModifier . getClassAttribute ( ) )
assertSame ( string , ObjectUtils . cloneIfPossible ( string ) )
assertEquals ( expected , got )
assertTrue ( Files . exists ( source ) )
Assert . assertNotNull ( connection )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED , status )
assertThat ( terminalStep . wasRun ( ) , is ( true ) )
assertEquals ( VALUE , victim . getValue ( KEY ) )
assertTrue ( "Directory found: " + testClasses , testClasses . isDirectory ( ) )
Boundaries3dTest . assertBoundariesEquals ( new Boundaries3d ( new Coords3d ( - 10 , - 10 , - 15 ) , new Coords3d ( 10 , 10 , 15 ) ) , testSubject . getBoundaries ( ) )
assertEquals ( required , iterateOrder )
Assert . assertEquals ( 1 , serializable . getClass ( ) . getDeclaredFields ( ) . length )
Assert . assertNotNull ( entityManager )
assertTrue ( results . toString ( ) , results . indexOf ( "Responses invalid: 0 out of " + ( cycles * tracks ) ) >= 0 )
assertEquals ( "CLOSED" , Deencapsulation . getField ( deviceIO , "state" ) . toString ( ) )
Assert . assertEquals ( Utils . createParameterizedType ( List . class , Number . class ) , type )
assertTokensEqual ( of ( value ( ) , MUL , complex ( ) , PLUS , pos ( ) ) , tokens )
assertEquals ( html , sanitized )
assertNoViolations ( constraintViolations )
assertEquals ( TimeUtil . parseTime ( time ) , "2014-11-11 10:11:11" )
assertEquals ( averageDegree , 1.5 )
assertThat ( charSourceSupplierities , notNullValue ( ) )
Assert . assertEquals ( set . iterator ( ) . next ( ) , "c" )
Assert . assertThat ( uri , CoreMatchers . equalTo ( URI . create ( "ftp://somehost//blah//blah" ) ) )
Assert . assertNull ( actual )
assertThat ( ret . size ( ) > 0 , is ( true ) )
assertEquals ( "<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img /><img /></div><a id=\"3\"></a><i></i><foo /><foo>One</foo> <hr /> hr text <hr /> hr text two" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
assertNull ( "Expected empty result" , doc . getContentField ( "alllinks" ) )
assertEquals ( expected , actual )
assertParams ( captured . getValue ( ) , E_PARAM_NAMES , false , true )
assertEquals ( expected , actual . materializeToMap ( ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
assertEquals ( Collections . singletonMap ( "x.A" , Collections . singletonList ( "y.C{x=foo\\\"\n}" ) ) , TestUtils . findMetadata ( clz ) )
assertTrue ( PropUtil . getBooleanProperty ( props , "test" , false ) )
Assert . assertEquals ( "2004-02-29" , result )
assertTrue ( "Better cost solution (1.9 < 2.0) should not be accepted since the better cost is still below the threshold" , schrimpfAcceptance . acceptSolution ( memory , createSolutionWithCost ( 1.9 ) ) )
assertEquals ( new Long ( 2 ) , response )
assertEquals ( "mes   |Thr   " , result )
Assert . assertEquals ( Short . valueOf ( ( short ) 11 ) , res )
assertThat ( params . isMonochrome ( ) , equalTo ( false ) )
assertThat ( operations . find ( query ( byExample ( example ) ) , Person . class ) , hasItems ( flynn , walter ) )
assertNullOrEquals ( "datum.anchor" , "Peg in south corner" , crs . getDatum ( ) . getAnchorPoint ( ) )
assertFalse ( "Sample Tools should be hidden from a collaborator" , page . isSampleToolsAvailable ( ) )
assertThat ( runtimeClassName , equalTo ( "org.talend.components.marklogic.runtime.input.MarkLogicInputSink" ) )
assertThat ( target . getScaleImages ( ) , JUnitMatchers . hasItems ( TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 1 } } ) , 1E-4f ) , TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 2 } } ) , 1E-4f ) , TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 3 } } ) , 1E-4f ) , TestUtils . equalTo ( new Image ( new float [ ] [ ] { { 4 } } ) , 1E-4f ) ) )
assertTrue ( book . getIsbn ( ) . startsWith ( "13" ) )
Assert . assertEquals ( 1 , c . size ( ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertThat ( copy ( array ) , is ( equalTo ( array ) ) )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( "GitHub Enterprise" , ghlogout . getGitHubText ( ) )
Assertions . assertNotNull ( docker , "should be passed as a parameter" )
arrays . assertContainsSequence ( someInfo ( ) , actual , emptyArray ( ) )
Assert . assertEquals ( "1.23E+04" , getCell ( 0 , 10 ) . getPureText ( ) )
assertTrue ( nameId . isEmpty ( ) )
assertDegenerate ( scan )
Assert . assertEquals ( expect_sql , sql )
Assert . assertEquals ( "" , readS )
assertThat ( d . doCheckScript ( "import groovy.transform.*\n" + "import jenkins.model.Jenkins\n" + "import hudson.model.FreeStyleProject\n" + "@ASTTest(value={ assert Jenkins.getInstance().createProject(FreeStyleProject.class, \"should-not-exist\") })\n" + "@Field int x\n" + "echo 'hello'\n" ) . toString ( ) , containsString ( "Annotation ASTTest cannot be used in the sandbox" ) )
assertEquals ( "No exception thrown!" , true , result )
assertThat ( Functions . url ( null ) , is ( "/bbb/" ) )
assertEquals ( "Wrong number of violations." , 1 , violations . size ( ) )
assertEquals ( "Field-Name: value1\n value2\n .\n value3\n" , field . format ( "value1\nvalue2\n\nvalue3" ) )
assertEquals ( expectedText . replace ( "\n" , "" ) . replace ( "\r" , "" ) , writer . toString ( ) . replace ( "\n" , "" ) . replace ( "\r" , "" ) )
assertEquals ( "fa 3 dies 15 hores 38 minuts" , t . format ( durations ) )
assertEquals ( "abc" , output . toString ( ) )
assertEquals ( expected , actual )
assertFalse ( this . it . hasNext ( ) )
assertEquals ( 1 , instance . evaluations )
assertEquals ( arr , resultArr )
assertEquals ( dataflow , edit . getSubject ( ) )
assertEquals ( expectedQuery , actualQuery )
assertSpanChunk ( spanChunkBo )
assertImage ( srcImg , destImg , e )
assertThat ( subject . supports ( update ) , is ( true ) )
assertEquals ( expected , actual )
assertSame ( node , transform ( node ) )
Assert . assertEquals ( "Wrong toString()" , "msgVersion: 1 objectClass: org.opendaylight.yang.gen.v1.urn.opendaylight" + ".openflow.protocol.rev130731.BarrierInput msgType: 4 msgType2: 8" , key1 . toString ( ) )
assertThat ( TestLoggerFactory . getLoggingEvents ( ) , is ( empty ( ) ) )
assertThat ( ages . size ( ) , greaterThanOrEqualTo ( 3 ) )
assertThat ( capture . toString ( ) , containsString ( ERROR_MESSAGE ) )
assertEquals ( expected , clusters )
assertEquals ( expected , actual )
assertNull ( result )
assertSorted ( )
assertNotNull ( pageEntity . getContent ( ) )
Assert . assertEquals ( childConfig . getUserID ( ) , result . getUserID ( ) )
assertEquals ( 5 , configuration . getThreadsAllowedToBlockMultiplier ( ) )
assertEquals ( null , gbids )
Assert . assertEquals ( 7 , ( ( VersionMessageWrapper ) list . get ( 0 ) ) . getMessageBuffer ( ) . readableBytes ( ) )
assertNull ( request . getEntity ( ) )
assertEquals ( expectedMap , map )
assertThat ( dao . getLongObjMoney ( id ) , equalTo ( user . getMoney ( ) ) )
assertions . containsOnly ( values )
assertTrue ( vRoute . getStart ( ) . getLocation ( ) . getId ( ) . equals ( "start" ) )
assertThat ( output , containsString ( "FHIR resource metadata retrieved:" ) )
assertNotNull ( visitor . map )
assertSame ( expected , actual )
assertNotNull ( "AuthnRequestType is not null" , authnRequest )
assertTrue ( solrCounter > 0 )
assertEquals ( ValidationResult . OK . getStatus ( ) , validationResult . getStatus ( ) )
assertEquals ( sfo , ship . getPort ( ) )
assertFalse ( countries . isEmpty ( ) )
Assert . assertEquals ( 1 , mainTag . size ( ) )
Assert . assertTrue ( firstConceptSet . getSortWeight ( ) < secondConceptSet . getSortWeight ( ) )
assertTrue ( localFileSys . mkdirs ( dir ) )
assertTrue ( post . getTopic ( ) . getSubscribers ( ) . contains ( user ) )
assertEquals ( RESULT , out )
assertEquals ( Lists . newArrayList ( "-o" , projectPath . append ( outputPath ) . append ( "org" ) . append ( "package" ) . toOSString ( ) , "-listener" , "-no-visitor" , "-encoding" , "UTF-8" ) , options . command ( file ) )
Assert . assertTrue ( "canonicalizing the test file " + filename + " gives a different result than canonicalizing the xtm export of " + filename + "." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertEquals ( Arrays . asList ( 0 , 1 , 2 ) , ObjectInspector . list ( list ) )
assertTrue ( new File ( folder . getRoot ( ) , "test/QDateTest.java" ) . exists ( ) )
assertEquals ( "{\"a\": 1}" , dbr . query ( "SELECT * FROM CC_TEST WHERE ID = 1" ) . at ( 0 ) . get ( "js" , Json . class ) . json )
assertTrue ( testMojo . shouldSkip ( ) )
assertFalse ( new DefaultSecurityContext ( p , s ) . isUserInRole ( "friend" ) )
assertTrue ( purchase . getTicket ( ) . isDiscount ( ) )
Assert . assertTrue ( "Not received media (timeout waiting playing event)" , getPage ( ) . waitForEvent ( "playing" ) )
org . junit . Assert . assertEquals ( 0 , fxForm . getElements ( ) . size ( ) )
assertEquals ( HttpStatusCode . BAD_REQUEST_400 , response . getStatus ( ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
Assert . assertEquals ( expected , actual )
assertThat ( productResultUrls . size ( ) , equalTo ( 0 ) )
assertEquals ( "Wrong list property" , list , conf . getProperty ( prop ) )
assertEquals ( 500 , r . getStatus ( ) )
assertEquals ( x , v )
assertFalse ( db . collectionExists ( methodName ) )
assertSame ( Writables . records ( TestWritable . class ) , wt )
this . assertGet ( "artifacttemplates/http%253A%252F%252Fopentosca.org%252Fartifacttemplates/MyTinyTest/source/zip" , "entitytemplates/artifacttemplates/MyTinyTest_src.zip" )
assertEquals ( "20110103201412297033000000" , d . getId ( ) )
assertEquals ( list ( "3" , "2" , "1" ) , redis . sort ( key , desc ( ) ) )
assertFalse ( "Unexpected message is present." , page . isAnyMessagePresent ( ) )
assertEquals ( 1 , map . size ( ) )
assertNotNull ( strategy )
assertLife ( playerA , 24 )
assertThat ( jsonOutputStreamParser . value ( ) , is ( jsonResource ( levelFile ) ) )
Assert . assertTrue ( new LogAdapter ( "logger.name.here" , mockConfigThreadLong ( ) ) . isDebugEnabled ( ) )
assertEqual ( "1" , query . execute ( ) )
assertEquals ( "GBP 0.94" , test . toString ( ) )
assertFalse ( namespaces . contains ( "default" ) )
Assert . assertEquals ( expected , resultOut )
assertNull ( s )
assertEquals ( 0 , buf . readableBytes ( ) )
assertEquals ( "�峰�����版�绋�瀹�涔�澶辫触" , 2 , pd . getVersion ( ) )
assertThat ( testPath , is ( expectedPath ) )
Assert . fail ( "an exception should have been thrown" )
assertEquals ( "The domain name was incorrect" , "RNO" , changeset . getDomain ( ) )
assertEquals ( true , action . isPropagatingConfiguration ( ) )
assertThat ( info . getExternalService ( SERVER ) , sameInstance ( newService ) )
assertEquals ( service . getPresentableDistance ( distances ) , "at stop" )
assertThat ( collect , not ( hasItem ( IS_CLEAN_HANDLER . getKey ( ) ) ) )
assertEquals ( "GBP 2.34" , test . toString ( ) )
assertTrue ( originalMap . isEmpty ( ) )
assertTrue ( "Agent-based allocation should have failed" , plan . getAllReservations ( ) . size ( ) == numJobsInScenario )
assertArrayEquals ( expectedData , Files . readAllBytes ( source ) )
assertEqualsJson ( expected , json )
Assert . assertTrue ( contentAsString . contains ( "archive.zip" ) )
assertEquals ( HttpServletResponse . SC_UNAUTHORIZED , response . getStatus ( ) )
assertNotNull ( context . getConfig ( ) )
Assert . assertFalse ( missing . isPresent ( ) )
assertTrue ( fr . getAuthors ( ) . isEmpty ( ) )
Assert . assertTrue ( ! testApiVerticleFile . exists ( ) )
assertThat ( hBaseConfiguration . getConfiguration ( ) , is ( configuration ) )
assertThat ( testUriStr , is ( expectedUriStr ) )
assertTrue ( session . has ( SESSION_TOKEN_LABEL ) )
assertThat ( PrettyTime . of ( Locale . US ) . withLastListSeparator ( " + " ) . print ( duration , TextWidth . WIDE ) , is ( "1 year and 3 days" ) )
assertTrue ( properties . isEmpty ( ) )
Assert . assertEquals ( AccessMode . INHERITED , sr . getSerializableAccess ( ) )
assertObjectEquals ( "{type:'array',items:{type:'object',properties:{f1:{type:'string'}}},'x-example':[{f1:'foobar'}]}" , s . getSchema ( BeanList . class ) )
assertThat ( rendered , is ( "<table test=\"block\">\n" + "<thead test=\"head\">\n" + "<tr test=\"row\">\n" + "<th test=\"cell\">Abc</th>\n" + "<th test=\"cell\">Def</th>\n" + "</tr>\n" + "</thead>\n" + "<tbody test=\"body\">\n" + "<tr test=\"row\">\n" + "<td test=\"cell\">1</td>\n" + "<td test=\"cell\">2</td>\n" + "</tr>\n" + "</tbody>\n" + "</table>\n" ) )
assertEquals ( expected , actual )
assertNull ( result )
assertEquals ( mergedCommit , getHeadCommit ( TEST_BRANCH , repo ) )
assertTrue ( Script . matchNamed ( MatchType . EQUALS , "val" , null , "{ foo: 'bar' }" , ctx ) . pass )
assertSseResponse ( sseResponse , "event:eventName" , "data:payload" )
assertTrue ( ex . isPrime ( 31 ) )
Assert . fail ( "API broken here" )
assertEquals ( "collection1" , coll . getName ( ) )
assertEquals ( acceptableValues , presenter . acceptableValues )
assertEquals ( 400 , response . getStatus ( ) )
assertEquals ( expectedBill , bill . doubleValue ( ) , 0.01 )
assertOut ( "this.b == this.c" )
assertValues ( presentFieldList , actual )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Refer/>" , elem . toXml ( ) )
authRule . assertScenario ( scenario )
assertArrayEquals ( new long [ ] { 1 , 2 } , array . slice ( 0 , 0 ) . shape ( ) )
assertTrue ( "bar" . equals ( c . getValue ( ) ) && "foo" . equals ( c . getName ( ) ) )
assertParser ( twig )
assertEquals ( versionData1 , versionData2 )
assertThat ( time , equalTo ( now ) )
assertEquals ( expected , actual )
assertEquals ( expecting , found )
assertTrue ( resultComparator . compare ( statistic1 , statistic2 ) > 0 )
assertEquals ( "The value is not correct." , date , value )
assertTrue ( Arrays . stream ( itia . getValues ( ) ) . allMatch ( v -> key == v / 2 ) )
assertEquals ( "myViewport" , viewportElement . getAttribute ( "content" ) )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( false , test5 . equals ( null ) )
assertFalse ( validator . validate ( EntityNames . GRADE , grades ) . equals ( grades ) )
assertEquals ( "foo" , uri . getLabel ( ) )
assertEquals ( "Time to upgrade..." , result )
assertEquals ( 1 , entityList . size ( ) )
assertNotNull ( exporter )
Assert . assertEquals ( IntNode . valueOf ( 0 ) , result )
assertThatSelectedValueIs ( "" )
Assert . fail ( )
assertNotNull ( queryFactory3 . update ( QAnimal . animal ) )
assertEquals ( expecting , t . toStringTree ( ) )
assertNotNull ( entity . getId ( ) )
assertEquals ( new BigDecimal ( 123 ) , arrayFirst )
assertNotNull ( wfinstances )
Assert . assertEquals ( "did not get user properly" , user , actual )
assertEquals ( "invoice.toJson('fetchPlan:customer:1')" , p . toString ( ) )
assertThat ( issues , is ( empty ( ) ) )
Assert . assertTrue ( "Not authenticated" , authenticated )
assertEquals ( OK , response . getStatus ( ) )
Assert . assertEquals ( 0 , scores . getScore ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , expectedQuery ) )
Assert . assertEquals ( MockCreditCardProcessor . class , creditCardProcessor . getClass ( ) )
assertEquals ( INTEGER , v8Object . getType ( "key" ) )
assertThat ( result . endsWith ( "[groupId=12345]" ) , is ( true ) )
assertEquals ( 1 , this . chartChangeEvents . size ( ) )
assertEquals ( "0123456789" , aiResponse . getSessionId ( ) )
assertThat ( options . getTagExpressions ( ) , contains ( "@keep_this" ) )
org . junit . Assert . assertEquals ( expected , actual )
assertPermanentCount ( playerA , "Silvercoat Lion" , 1 )
assertPaths ( paths , "a,b,c,e" , "a,b,c,e" , "a,b,d,c,e" , "a,b,c,d,b,c,e" , "a,b,c,d,b,c,e" , "a,b,c,b,d,c,e" , "a,b,c,b,d,c,e" , "a,b,d,c,b,c,e" , "a,b,d,c,b,c,e" )
assertEquals ( 2 , moduleUrls . size ( ) )
Assert . assertEquals ( "queueInfo translation didn't work." , returned . getState ( ) . toString ( ) , StringUtils . toLowerCase ( queueInfo . getQueueState ( ) . toString ( ) ) )
assertThat ( archetypeDAO , notNullValue ( ) )
assertEquals ( createContainerCaptor . getValue ( ) . getHostConfig ( ) . getMemorySwap ( ) , - 1 )
assertEquals ( 4 , acc . get ( ) )
assertEquals ( "Hello-1" , sb . toString ( ) )
assertArrayEquals ( result , CompactEncoder . binToNibbles ( test ) )
assertNotNull ( processInstance . getId ( ) )
assertNull ( "Expected null privacy policy, but it is not." , privacyPolicy )
assertEquals ( filemask , instance . getFilemask ( ) )
assertEquals ( Operation . STATUS_CODE_NOT_FOUND , failure . op . getStatusCode ( ) )
assertEquals ( "SELECT * FROM Class" , q . toString ( ) )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertNotEquals ( frameData1 , frameData2 )
assertNull ( personRepository . findOne ( this . person . getId ( ) ) )
assertTrue ( at . getTemplate ( ) . length ( ) == 0 )
assertTrue ( hand . getClassifier ( ) == HandClassifier . PAIR )
JSONAssert . assertEquals ( mapper . writeValueAsString ( expected ) , mapper . writeValueAsString ( serialized ) , JSONCompareMode . STRICT )
assertThat ( description . toString ( ) , is ( "a text node with value that is ANYTHING" ) )
assertEquals ( 204 , resp . getStatus ( ) )
assertEquals ( expected , actual )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertThat ( prepare , CoreMatchers . instanceOf ( ProfiledListenableFutureForPreparedStatement . class ) )
assertNotNull ( result )
assertEquals ( dimension , point . getDimension ( ) )
assertEquals ( expResult , result )
assertSame ( toTest , toTest . setEncoded ( true ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "com.example.ImpliedObjectProperty" ) )
assertThat ( inputStream , notNullValue ( ) )
assertNull ( ch )
AssertJUnit . assertFalse ( "filter matches object, but it should not" , match )
assertEquals ( "/tmp/filename" , fixture . getFileName ( ) )
assertEquals ( expect , pred )
assertEquals ( Color . blue . getRGB ( ) , thumbnail . getRGB ( 49 , 99 ) )
assertEquals ( 0.0d , mock . doubleReturningMethod ( 12 ) , 0.0d )
assertEquals ( "alt2\n" , found )
assertThat ( result , is ( expct ) )
assertEquals ( "id" , config . getId ( ) )
assertEquals ( RecipientListStringAnalyser . NOT_FOUND , analyser . getType ( new InternetAddress ( "mickey2@disney.com" ) ) )
assertDurationEquals ( dv3 , dv1 . minus ( dv2 ) )
assertTrue ( second1 . equals ( second2 ) )
assertThat ( impl . getOntologyAnnotations ( ontologyId ) . count ( ) , is ( 0L ) )
assertOut ( "/**\n * @const\n * @type {*}\n */\nRoyaleTest_A.foo" )
Assert . fail ( "Test should not go here - invalid deployment (invalid value of resteasy.scan.providers)!" )
assertThat ( unwrapFromSimpleResolution ( instantiation ) , equalTo ( object ) )
assertEquals ( 0.5f , config . half ( ) , 0.01f )
assertNotNull ( manager )
assertNotNull ( wsdl1 )
assertFalse ( lock2 . tryLock ( ) )
Assert . assertFalse ( sampling )
assertEquals ( globals . size ( ) , tree . getModelObject ( ) . getChildCount ( tree . getModelObject ( ) . getRoot ( ) ) )
assertEquals ( "Unexpected state class" , AbstractSelectState . class , state . getClass ( ) )
assertEquals ( buf . toString ( ) , ( result . startsWith ( "." ) ? result . substring ( 1 ) : result ) )
observer . assertObservations ( "7" , PhaseId . PROCESS_VALIDATIONS )
assertEquals ( 3 , groups20 . size ( ) )
assertEquals ( testUserProvider . getTestUserInfo ( ) . getIndividualGroup ( ) . getId ( ) , aa . getAccessorId ( ) )
Assert . assertEquals ( pn . getFullName ( ) , "Sr. Taylor Bob Mark" )
assertEquals ( "��匕 3 兀爻丕亘�毓" , t . format ( new Date ( 0 ) ) )
assertThat ( results , is ( Collections . emptyList ( ) ) )
assertSame ( config , result )
assertEquals ( "Double-It not doubling positive numbers" , 20 , resp )
assertThat ( uri , is ( new URI ( "ardulink://serial-jssc?port=COM3" ) ) )
N4CliHelper . assertExpectedOutput ( expectedString , out )
Assert . assertTrue ( lastElementIsSame ( store , new WeightedObservedPoint ( w , x , y ) ) )
assertEquals ( "root.user1group.user1" , user1Leaf . getName ( ) )
assertTrue ( gw . lines . isEmpty ( ) )
assertEquals ( 400 , fail )
assertTrue ( ( boolean ) AviatorEvaluator . execute ( "date1>date2" , env ) )
Assert . assertTrue ( ! binding . isModelValid ( ) )
assertEquals ( true , parsedTypes . get ( 0 ) instanceof RedditAccount )
assertTrue ( expectedDirection . equals ( reflectedDirection ) )
assertTrue ( Arrays . equals ( expected , value ) )
assertEquals ( "catch" , result )
assertEquals ( 3 , response . getDistances ( ) . size ( ) )
assertEquals ( Year . isLeap ( year ) ? 366 : 365 , test . lengthOfYear ( ) )
Assert . assertTrue ( Precision . equals ( 7.0 , MathArrays . distance1 ( p1 , p2 ) , 1 ) )
Assert . assertFalse ( xml . contains ( "<verse osisID=\"Rom.3.15\">" ) )
assertEquals ( defaultApiVersion , Deencapsulation . getField ( httpHsmSignatureProvider , "apiVersion" ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertTrue ( mse . getTotalError ( ) < maxError )
assertEquals ( "{\"key\":\"value\"}" , writer . toString ( ) )
assertEquals ( "/%C4%8D" , encoded . toURL ( ) )
assertNotNull ( auth . authenticate ( USERNAME , PASSWORD , mockServerSession ) )
assertEquals ( expected , output )
assertEquals ( "Expected 4 results!" , 4 , n )
Assert . assertTrue ( landingPage . getTitleText ( ) . contains ( "Landing Page" ) )
assertEquals ( "job" , manager . getType ( ) )
assertEquals ( expected , testMDCAdapter . getCopyOfContextMap ( ) )
assertAnnotations ( 2 , Coordinate . class , new TestCoordinate ( 0 , "51.507, -0.125" , "dd" , TYPE_POINT_COORDINATES_0_125_51_507 ) , new TestCoordinate ( 1 , "-3.2,56" , "dd" , TYPE_POINT_COORDINATES_56_3_2 ) )
assertEquals ( "<html><head><noscript></noscript></head><body><img src=\"foo\" /><p>Hello</p></body></html>" , TextUtil . stripNewlines ( doc . html ( ) ) )
assertEquals ( result , expecting )
assertMissing ( "set" , 1L )
assertEquals ( "foo" , s )
assertEquals ( 1 , patient . getCustomId ( ) . getUndeclaredExtensions ( ) . size ( ) )
assertEquals ( txt , normalizer . normalize ( html ) . trim ( ) )
assertThat ( chain , is ( sameInstance ( builder ) ) )
assertEquals ( "ID3v2ChapterFrameData [id=null, startTime=0, endTime=0, startOffset=0, endOffset=0, subframes=[]]" , frameData . toString ( ) )
assertEquals ( "p1" , ( ( P ) objList . get ( i - 1 ) ) . getId ( ) )
assertNotNull ( cfid2 )
assertEquals ( "bcse" , e1 , e2 )
assertEquals ( "(abc 34)\n" , found )
assertTrue ( runtime instanceof MockDirectBaseClass )
assertThat ( byValue . getSingleResult ( ) . getF ( ) , equalTo ( f1 ) )
testRunner . assertAllFlowFilesTransferred ( PutParquet . REL_FAILURE , 1 )
assertThat ( capistranoCommandBuilder . build ( ) , hasItem ( "--verbose" ) )
assertEquals ( "bar" , res . get ( "foo" ) )
Assert . assertFalse ( nodes . isEmpty ( ) )
assertArrayEquals ( new byte [ ] { 42 } , Files . readAllBytes ( withDot ) )
assertTrue ( anc . isEmpty ( ) )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( expectedResult , result )
assertThat ( result , is ( jsonArrayOfStrings ( "IAMUser" , "EX_PRINCIPAL_ID" , "arn:aws:iam::123456789012:user/Alice" , "EXAMPLE_KEY_ID_ALICE" ) ) )
assertEquals ( "fra 3 anni" , t . format ( new Date ( 1000L * 60 * 60 * 24 * 365 * 3 ) ) )
runner . assertValid ( credentialsService )
assertFilesAre ( files )
assertEquals ( "Testing Course" , courses . get ( 0 ) . getName ( ) )
assertFalse ( satisfiesPrecondition ( cu ) )
assertTrue ( transform instanceof Modifier . Defaultr )
Assert . assertTrue ( requiredCounterManager . isTransactionAvailable ( ) )
assertEquals ( "File transfer request" , shadowDialog . getTitle ( ) )
assertEquals ( "SELECT 3 + 4 AS A1 FROM test" , select . toString ( ) )
assertEquals ( instance , AbstractEntity . get ( MyEntity . class , 3L ) )
assertEquals ( "" , result )
assertEquals ( null , task )
assertEquals ( getLabel ( ) , 0.0 , eye . minus ( m3 ) . getEuklideanValue ( ) , TOLERANCE )
assertTrue ( results . containsAll ( Arrays . asList ( male , undergraduate , graduate , associate ) ) )
assertEquals ( 0.5 , result . getUniquenessRatio ( ) , 0.0 )
assertSame ( thing , bound . thing ( ) )
Assert . assertEquals ( 1.0 , DoubleArrays . sum ( props ) , 1e-13 )
Assert . assertNull ( caixa )
assertEquals ( "1.2\t2.3\t3.4\n" + "4.5\t5.6\t6.7\n" , out . toString ( ) )
assertEquals ( result , "no" )
assertEquals ( "The message is not correct." , "This is my message 01." , this . tag . getMessage ( ) )
Assert . assertTrue ( repeatableTask . execute ( ) )
assertEquals ( inc . get ( ) . get ( ) , outRA . get ( ) . get ( ) )
assertArrayEquals ( data , getInputStream ( ) . readPackedInts ( data . length / 3 , 3 , false ) )
assertEquals ( new Double ( 123 ) , arrayFirst )
assertEquals ( validateValue , "true" )
runner . assertAllFlowFilesTransferred ( SelectHiveQL . REL_FAILURE , 1 )
Assert . assertEquals ( CloseReason . CloseCodes . CLOSED_ABNORMALLY , TimeoutEndpoint . getReason ( ) . getCloseCode ( ) )
assertEquals ( - 0.09983 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( "3 爻丕毓鬲 丿�诏乇" , t . format ( new Date ( 1000 * 60 * 60 * 3 ) ) )
assertEquals ( 1 , x . size ( ) )
Assert . assertEquals ( 1 , inserted . intValue ( ) )
assertTrue ( ( hasAttachmentType == false ) )
assertEquals ( doc . getContent ( ) , FileUtils . read ( new File ( "src/test/resources/doc/doc1.txt" ) , System . getProperty ( "file.encoding" ) ) )
assertSQLException ( ( ) -> metadata . getScale ( - 1 ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertEquals ( 0 , constraintViolations . size ( ) )
assertNotNull ( method . toString ( ) , m )
assertNull ( response )
assertTrue ( output . contains ( "Buckets:" ) )
assertNotNull ( result )
assertEquals ( "getter value" , ObjectUtils . getValue ( object , "item" ) )
assertNotNull ( service )
assertRowMetaIsFilledWithFields ( )
assertThat ( isExpectedData , is ( true ) )
assertEquals ( htd . getNameAsString ( ) , deserializedHtd . getNameAsString ( ) )
assertEquals ( 5 , d , 0 )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( "job" , manager . getType ( ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Refer/>" , elem . toXml ( ) )
assertFalse ( moveIncorrect . isValid ( status ) )
assertEquals ( 20 , arguments . getPrePolicyRoutesCount ( ) )
assertEquals ( expected , javaSource . getSourceCodeWithoutComments ( ) )
assertEquals ( radius , 1.0 )
assertEquals ( expected , AuthorizationsUtil . mergeAuthorizations ( null , userAuths ) )
assertTrue ( result instanceof Date )
assertEquals ( "null is ''" , newText )
assertThat ( results , containsInAnyOrder ( ( Matcher ) hasEntry ( "name" , "no term name" ) , hasEntry ( "name" , "no term name2" ) , hasEntry ( "name" , "no term name3" ) ) )
assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( MediaType . APPLICATION_XML_TYPE , response . getType ( ) )
Assert . assertTrue ( e . toString ( ) . contains ( "Not found: Table measurement-lab:m_lab.2010_01" ) )
assertThat ( greetings , Matchers . < String > hasItems ( is ( "Goodbye, Peter" ) , is ( "Goodbye, Paul" ) , is ( "Goodbye, Mary" ) ) )
assertEquals ( "ei" , ce . getId ( ) )
assertTrue ( "The RMS relative error per bucket, " + RMSNormalizedError + ", exceeds our tolerance of " + maximumRelativeError , RMSNormalizedError <= maximumRelativeError )
assertEquals ( "512 bytes:\n" + "00000000: 0001 0203 0405 0607 0809 0a0b 0c0d 0e0f  ................\n" + "00000010: 1011 1213 1415 1617 1819 1a1b 1c1d 1e1f  ................\n" + "00000020: 2021 2223 2425 2627 2829 2a2b 2c2d 2e2f   !\"#$%&'()*+,-./\n" + "00000030: 3031 3233 3435 3637 3839 3a3b 3c3d 3e3f  0123456789:;<=>?\n" + "00000040: 4041 4243 4445 4647 4849 4a4b 4c4d 4e4f  @ABCDEFGHIJKLMNO\n" + "00000050: 5051 5253 5455 5657 5859 5a5b 5c5d 5e5f  PQRSTUVWXYZ[\\]^_\n" + "00000060: 6061 6263 6465 6667 6869 6a6b 6c6d 6e6f  `abcdefghijklmno\n" + "00000070: 7071 7273 7475 7677 7879 7a7b 7c7d 7e7f  pqrstuvwxyz{|}~.\n" + "00000080: 8081 8283 8485 8687 8889 8a8b 8c8d 8e8f  ................\n" + "00000090: 9091 9293 9495 9697 9899 9a9b 9c9d 9e9f  ................\n" + "000000a0: a0a1 a2a3 a4a5 a6a7 a8a9 aaab acad aeaf  ................\n" + "000000b0: b0b1 b2b3 b4b5 b6b7 b8b9 babb bcbd bebf  ................\n" + "000000c0: c0c1 c2c3 c4c5 c6c7 c8c9 cacb cccd cecf  ................\n" + "000000d0: d0d1 d2d3 d4d5 d6d7 d8d9 dadb dcdd dedf  ................\n" + "000000e0: e0e1 e2e3 e4e5 e6e7 e8e9 eaeb eced eeef  ................\n" + "000000f0: f0f1 f2f3 f4f5 f6f7 f8f9 fafb fcfd feff  ................\n" + "00000100: 0001 0203 0405 0607 0809 0a0b 0c0d 0e0f  ................\n" + "00000110: 1011 1213 1415 1617 1819 1a1b 1c1d 1e1f  ................\n" + "00000120: 2021 2223 2425 2627 2829 2a2b 2c2d 2e2f   !\"#$%&'()*+,-./\n" + "00000130: 3031 3233 3435 3637 3839 3a3b 3c3d 3e3f  0123456789:;<=>?\n" + "00000140: 4041 4243 4445 4647 4849 4a4b 4c4d 4e4f  @ABCDEFGHIJKLMNO\n" + "00000150: 5051 5253 5455 5657 5859 5a5b 5c5d 5e5f  PQRSTUVWXYZ[\\]^_\n" + "00000160: 6061 6263 6465 6667 6869 6a6b 6c6d 6e6f  `abcdefghijklmno\n" + "00000170: 7071 7273 7475 7677 7879 7a7b 7c7d 7e7f  pqrstuvwxyz{|}~.\n" + "00000180: 8081 8283 8485 8687 8889 8a8b 8c8d 8e8f  ................\n" + "00000190: 9091 9293 9495 9697 9899 9a9b 9c9d 9e9f  ................\n" + "000001a0: a0a1 a2a3 a4a5 a6a7 a8a9 aaab acad aeaf  ................\n" + "000001b0: b0b1 b2b3 b4b5 b6b7 b8b9 babb bcbd bebf  ................\n" + "000001c0: c0c1 c2c3 c4c5 c6c7 c8c9 cacb cccd cecf  ................\n" + "000001d0: d0d1 d2d3 d4d5 d6d7 d8d9 dadb dcdd dedf  ................\n" + "000001e0: e0e1 e2e3 e4e5 e6e7 e8e9 eaeb eced eeef  ................\n" + "000001f0: f0f1 f2f3 f4f5 f6f7 f8f9 fafb fcfd feff  ................\n" , HexDump . dump ( myArray ) )
assertEquals ( "{}" , result )
assertNotNull ( Deencapsulation . getField ( jobsResponseParser , "cloudToDeviceMethod" ) )
assertEquals ( true , start )
context . assertEquals ( 500 , res . statusCode ( ) )
assertEquals ( expected , actual )
assertEquals ( Float . valueOf ( 1234 ) , result )
Assert . assertEquals ( 0.0 , optimizer . getRootMeanSquaredError ( ) , 2E-4 )
mockery . assertIsSatisfied ( )
Assert . assertEquals ( "Hello World" , outStream . toString ( ) )
assertTrue ( landsatMetadata instanceof LandsatReprocessedMetadata )
assertPutBytes ( contentBytes )
assertFalse ( GitFileUtils . isFile ( "/test_file" , commit . getName ( ) , repo ) )
assertEquals ( "LEAST(1, 2)" , least . toString ( ) )
assertThat ( result , equalTo ( Charsets . UTF_8 ) )
assertEquals ( "<<font point-size=\"10\">text</font>>" , label )
Assert . assertFalse ( "Run should be considered new" , first . isNewRun ( ) )
context . assertEquals ( "Squid" , handler . body ( ) )
assertEquals ( "{\"value\":\"test\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( simple ) )
assertEquals ( "HELLO" , new String ( buffer . toByteArray ( ) , UTF_8 ) )
assertEquals ( filterView , filterEditor . view )
Assert . assertEquals ( "parent" , getOne ( spanCache , "parent" ) . getId ( ) )
assertThat ( c . toString ( ) , is ( "myString <= aaa" ) )
assertEquals ( expResult , result )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
Assert . assertEquals ( 12 , p . i ( 4 , new C2 ( ) ) )
assertEquals ( 0 , result )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertTrue ( b )
assertThat ( scope , equalTo ( new SciTokenScope ( READ , "/" ) ) )
assertValueEqualsResultSet ( rs , Arrays . < Object > asList ( ROW1 , ROW2 , ROW3 ) )
assertFalse ( replaced )
assertEquals ( "Clusterid should match with the existing one" , "currentcid" , storage . getClusterID ( ) )
assertFalse ( CertificateUtilExtended . isSelfSignedCertificate ( certPem ) )
assertEquals ( expectedTransportCosts + expectedActivityCosts , iCosts , 0.01 )
assertSame ( ThreadNameCachingStrategy . CACHED , tns )
assertTrue ( p . getStatusSimple ( ) . toString ( ) . equals ( "active" ) )
Assert . assertEquals ( "size" , buffer . length - 2 , size )
assertTrue ( ex . isPrime ( 31 ) )
assertThat ( result , is ( false ) )
assertNotEquals ( deleteTemplate1 , deleteTemplate2 )
assertEquals ( null , result )
assertXMLSimilar ( "Invalid message" , expected , message )
assertEquals ( account . getType ( ) , AccountProvider . ALIYUN )
assertThat ( "Wrong type of myTestFactory." , myTestFactory . getDelegate ( ) , CoreMatchers . instanceOf ( ShardedConnectionFactory . class ) )
assertTrue ( results . contains ( "Hello World" ) )
assertEquals ( "Should return failure" , "failure" , jsonObj . get ( "status" ) . getAsString ( ) )
assertEquals ( "0.002322" , buttonFunctionblockData . getStatusProperty ( "sensor_value" ) . get ( ) . getValue ( ) )
assertTrue ( "sin() had errors in excess of " + MAX_ERROR_ULP + " ULP" , maxerrulp < MAX_ERROR_ULP )
assertEquals ( "aTestString" , classUnderTest . getImportedFromTable ( ) )
assertEquals ( WRONG_NUMBER_OF_WARNINGS_DETECTED , 2 , warnings . size ( ) )
assertEquals ( lastValue , "EndNode8" )
assertThat ( pageable , is ( instanceOf ( Pageable . class ) ) )
assertEquals ( "type1" , type . getName ( ) . getLocalPart ( ) )
assertArrayEquals ( refar , d . getResult ( ) )
Assert . assertEquals ( "[{\"name\":\"name1\",\"age\":1},{\"name\":\"name2\",\"age\":2}]" , str )
assertEquals ( RequestResult . FAILURE , requestResult )
assertEquals ( 0 , Context . countActive ( ) )
assertThat ( formatterOutput , containsString ( "" + "  Given first step      # path/step_definitions.java:3\n" + "      the stack trace\n" ) )
assertNotNull ( result )
Assert . assertEquals ( true , connected )
login . assertIsConnectedAs ( "test1" )
assertEquals ( p . format ( new Date ( 1 ) ) , "Jetzt" )
assertFalse ( filter . matches ( operation , poolInfoMap ) )
Assert . assertEquals ( dialect . getURL ( conn ) , "jdbc:hive2://null:null/null" )
assertThat ( getTemplateLabel ( jobSpec , LabelConstants . CREATEDBYOPERATOR_LABEL ) , equalTo ( "true" ) )
assertThat ( UNIT . render ( context ) , anyOf ( is ( "key1=value1,key2=value2" ) , is ( "key2=value2,key1=value1" ) ) )
Assert . assertNull ( busca )
Assert . assertEquals ( "did not count two replicas" , 2 , replicas )
Assert . assertEquals ( 4 , operation . operations . size )
assertThat ( ts , not ( nullValue ( ) ) )
assertEquals ( 0 , values . size ( ) )
Assert . assertTrue ( Arrays . equals ( data , xdata ) )
assertThat ( jsonViewAnnotation . value ( ) [ 0 ] . getSimpleName ( ) , equalTo ( "MyJsonViewClass" ) )
Assert . assertEquals ( IrodsRuleInvocationTypeEnum . PYTHON , actual )
AssertionUtils . multiAssertEquals ( createAsDocument10 , response6 . getResponseObject ( ) )
assertEquals ( testData , invoke ( testResponseData , "getResponseData" ) )
assertLine ( " bar" , b , false )
assertEquals ( 401 , r . getStatus ( ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( thrown )
assertEquals ( expected , actual )
assertEquals ( - 123456789012L , ConfigUtils . getLong ( config , 0 , "some-long" ) )
Assert . assertEquals ( expected , actual )
assertEquals ( result , event )
assertEquals ( "immediateResume" , str )
assertTemplateEvaluatesTo ( "1, 2, 4" )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( component ) instanceof WPartialDateFieldRenderer )
Assert . assertNotNull ( file )
Assert . assertEquals ( new DateTime ( "2014-03-01" ) , spec . extractTimestamp ( ImmutableMap . < String , Object > of ( "TIMEstamp" , "2014-03-01" ) ) )
assertNotEquals ( insertPerson , insertDifferentPerson )
assertEquals ( true , classUnderTest . getCommitOnClosingConnection ( ) )
Assert . assertEquals ( "randomUser" , UserGroupInformation . getLoginUser ( ) . getUserName ( ) )
assertEquals ( 0 , array . length )
assertTrue ( "1.2.0.0 <= 1.2.x" , ruleEvaluator . evaluateBooleanRule ( rule , values ) )
Assert . assertNotNull ( instance . getAllAtomMapping ( ) )
assertTrue ( BufferedImageComparer . isSame ( originalImage , copyImage ) )
assertPowerToughness ( playerA , "Jace's Phantasm" , 1 , 1 )
assertTrue ( sameElts ( x1 , x2 ) )
assertThat ( getCreatedPod ( ) . getSpec ( ) . getVolumes ( ) , allOf ( hasVolume ( "volume1" , "/source-path1" ) , hasVolume ( "volume2" , "/source-path2" ) ) )
Assert . fail ( )
assertArrayEquals ( original , ArrayUtils . nullToEmpty ( original ) )
Assert . assertEquals ( "moduleA" , foundModule )
assertEquals ( StringUtils . getHexString ( buf ) , StringUtils . getHexString ( output ) )
assertThat ( encryptor . checkPassword ( testPassword , null ) , is ( false ) )
assertTrue ( ai . isAsserted ( ) )
Assert . assertEquals ( "<table border=\"1\" cellspacing=\"0\">\n" + "<tr>\n" + "<th class=\"pass\">Col 1</th>\n" + "<th class=\"pass multi\" title=\"2 matched columns\">...</th>\n" + "</tr>\n" + "<tr>\n" + "<td class=\"pass\">A</td>\n" + "<td class=\"pass\"> </td>\n" + "</tr>\n" + "</table>" , TableTestUtils . getHtml ( this . tableVerifier , "table" ) )
Assert . assertNotNull ( "Interceptor was not created." , interceptor )
assertArrayEquals ( NOT_DECODED , data , object . getData ( ) )
assertNotNull ( response )
Assert . assertEquals ( "Fail find by LastName" , userExist . getLastName ( ) , list . get ( 0 ) . getLastName ( ) )
assertions . isNotEqualTo ( null )
assertSame ( theOwner , theInstance . getOwnerGameObject ( ) )
assertEquals ( TAGS [ i ] , ElementDictionary . tagForKeyword ( KEYWORDS [ i ] , null ) )
assertFalse ( etlKeyA . hashCode ( ) == etlKeyB . hashCode ( ) )
assertNull ( result )
assertThat ( generatedReportText , isSimilarTo ( expectedReport , "timestamp" ) )
assertEquals ( set . size ( ) , 2 )
assertThat ( outputDirectory . getPath ( ) , is ( changeSeparatorIfRequired ( "build/site/thucydides" ) ) )
assertEquals ( 0 , result . size ( ) )
assertEquals ( id , "1" )
assertEquals ( idWithSlash , responseUpdate . getId ( ) )
assertThat ( thrown , instanceOf ( MaximumTimeLimitExceededException . class ) )
assertFalse ( skillConstraint . fulfilled ( insertionContext ) )
assertFalse ( processedResponse )
assertEquals ( expectedQuery . get ( 0 ) , sql [ 0 ] . toSql ( ) )
assertThat ( newShare . getHours ( ) , equalTo ( 15 ) )
Assert . assertEquals ( tree . ret . skip , 42 )
assertTrue ( s . isSentToRawPubKey ( ) )
assertNotNull ( "Social Profile (JSON):\n" , profile )
assertLazyFieldIsJavaUtilOptionalWithValue ( this . resourceTargetedByMapping )
assertNumberOfViolations ( constraintViolations , 2 )
assertThat ( f . format ( ) , containsString ( "12" ) )
assertEquals ( m1 , m2 )
assertEquals ( JulianDate . of ( 2012 , 2 , 29 ) , test )
assertEquals ( expectedSource , instrumentedSource )
assertEquals ( a + b , question . add ( a , b ) )
assertFalse ( "disabled row should not be selected" , row . isSelected ( ) )
assertThatAcceptorWasNotStarted ( )
Assert . assertEquals ( "host should be set" , hostError . getDescription ( ) )
assertThat ( CollectionNumbers . doubleArrayCopyOf ( rescaled ) , equalTo ( new double [ ] { - 5.0 , - 2.5 , 0 , 2.5 , 5.0 , 7.5 } ) )
assertSkipped ( myTasks , 2 , 3 )
assertEquals ( 1 , candidates . size ( ) )
assertEquals ( "</6>,</6/0>,</6/0/0>,</6/0/1>,</6/0/2>,</6/0/3>,</6/0/4>,</6/0/5>,</6/0/6>" , strLinks )
assertEquals ( HardActivityConstraint . ConstraintsStatus . NOT_FULFILLED_BREAK , status )
assertEquals ( adminProperties . getKill ( ) , commandArgumentCaptor . getValue ( ) )
Assert . assertEquals ( Integer . valueOf ( 1 ) , result )
Assert . assertEquals ( 1 , loggerCount . getWarningCount ( ) )
Assert . assertTrue ( result . getExecutedCmds ( ) . isEmpty ( ) )
assertFalse ( out1 instanceof Serializable )
assertThat ( response . isEmpty ( ) )
assertTarget ( "[['a', 'b'], ['  ', 'c']]" )
assertTrue ( latch . await ( 4 , SECONDS ) )
assertEquals ( searchScroll1 , searchScroll1Duplicate )
assertThat ( students . size ( ) , is ( 1 ) )
this . assertOneMatcher ( is ( instanceOf ( ParameterRequestMatcher . class ) ) )
assertEquals ( "Result should be null" , null , result )
assertContentSame ( rs , rc , columnParam1 )
Assert . assertTrue ( isAdmin )
Verify . assertSize ( 6 , petPeople )
assertTrue ( "No TikaConfigException" , ex )
assertEquals ( "[[10, 10, 10], [10, 100, 60], [5, 5, 3600], [10, 10, 3600], [15, 15, 3600], [20, 20, 3600], [25, 25, 3600]]" , result . toString ( ) )
assertEquals ( 60 , max )
assertThat ( result , is ( outbound ) )
assertEquals ( "Invalid type" , Schema . Type . BOOLEAN , schema . getType ( ) )
Assert . assertTrue ( returnedLevels . isEmpty ( ) )
Assert . assertEquals ( "[1]" , small )
Assert . assertEquals ( 0 , violations . size ( ) )
assertEquals ( 3d , e . evaluate ( ) , 0d )
ImgLib2Assert . assertIntervalEquals ( expected , result )
assertFalse ( object . isReleased ( ) )
Assert . assertEquals ( "test" , tagManager . getTag ( entity ) )
assertEquals ( expected , service . getSignatureMethod ( ) )
assertEquals ( 100 * 1000 , results . size ( ) )
assertEquals ( nn . getLabel ( ) , "TestNetLabel" )
context . assertIsSatisfied ( )
Assert . assertTrue ( secure )
assertTrue ( CompilationUtil . memberMatchesMethodID ( member , "823" , parseDictionary ) )
assertDefaultContactPoints ( "foo" , "bar" )
assertThat ( execreport , is ( not ( nullValue ( ) ) ) )
assertThat ( Functions . bondBasedDBStereo ( g ) . toSmiles ( ) , is ( "CC=[C@]=CC" ) )
assertNotNull ( member )
objects . assertIsIn ( info , "Luke" , values )
Assert . assertFalse ( engines . get ( "localhost" ) . areAllPollersPolling ( ) )
assertEquals ( "column 0" , getGridElement ( ) . getHeaderCell ( 0 , 0 ) . getText ( ) . toLowerCase ( Locale . ROOT ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertEquals ( argumentCaptor . getValue ( ) . getLabels ( ) , expectedLabels )
assertArrayEquals ( expectedQp , qp , delta )
assertThat ( underTest . thenApply ( fn ) , is ( expected ( ) ) )
assertThat ( partitionKeyValue . toJson ( ) , equalTo ( mapper . writeValueAsString ( Collections . singletonList ( Collections . EMPTY_MAP ) ) ) )
assertNotNull ( getEditor ( ) )
assertSame ( cglibProxyObject . getClass ( ) , ClassHelper . getRealClassFromClass ( cglibProxyObject . getClass ( ) ) )
Assert . assertEquals ( expResult , result )
Assert . assertEquals ( driver ( ) . getTitle ( ) , "We Arrive Here" )
assertEquals ( config . getMinReadBufferSize ( ) , acceptedConfig . getMinReadBufferSize ( ) )
assertEquals ( DataTypeManager . DefaultDataClasses . BIG_DECIMAL , f . getType ( ) )
assertEquals ( 30112 , person . get ( "id" ) )
assertNotNull ( action )
Assert . assertEquals ( xmlEsperado , FabricaDeObjetosFake . getNFNotaInfoFatura ( ) . toString ( ) )
Assert . assertThat ( "ReponseList.size" , responseList . size ( ) , lessThanOrEqualTo ( 2 ) )
Assert . fail ( "IllegalArgumentException should occur but didn't!" )
Assert . assertEquals ( false , fastqBuilder . sequenceAndQualityLengthsMatch ( ) )
Asserts . check ( headerKeySize > 0 , " Fail to extract http header" )
assertEquals ( "PONG" , status )
assertTrue ( ferp . isReadable ( MultivaluedMap . class , null , null , null ) )
assertEquals ( "Only two sets of metrics should be visible." , 1 , httpOutput . getResults ( ) . size ( ) )
assertNoSpans ( )
assertNotNull ( accounts )
assertEquals ( expResult , result )
assertEquals ( "(a = 1) and (b = 2) and (c = \"C\")" , e . toString ( ) )
assertEquals ( NOT_DECODED , SERIAL_NUMBER , object . getNumber ( ) )
assertTrue ( ExceptionTestUtility . sameMembers ( expectedRep , Collections . EMPTY_SET , unitAnalysis . mightThrow ( s ) ) )
assertEquals ( true , result )
assertEquals ( false , result )
assertEquals ( 0.6065 , value , EPSILON )
Assert . assertTrue ( "Continuous scheduling should be disabled." , ! scheduler . isContinuousSchedulingEnabled ( ) )
assertEquals ( 99.0 , series . getY ( 1 ) )
assertEquals ( lineSeparator , new String ( data ) )
assertEquals ( 2 , names . size ( ) )
assertFeatureValues ( expected , testQuery , testText , getChain ( new OrderedSequentialPairsFeatureExtractor ( 1 ) ) )
assertSame ( test , base )
assertThat ( result . toString ( ) , is ( "test.ripe.net" ) )
iterablesWithCaseInsensitiveComparisonStrategy . assertDoesNotContainSequence ( info , actual , sequence )
assertFalse ( isCalled [ 0 ] )
Assert . assertEquals ( "Content-Type: multipart/form-data; " + "boundary=\"testFileByteArrayBodyPartPayloadMultipartPayload boundary\"\r\n" + "\r\n" + "\r\n" + "--testFileByteArrayBodyPartPayloadMultipartPayload boundary\r\n" + "Content-Disposition: form-data; name=\"name\"; filename=\"filename.ext\"\r\n" + "\r\n" + "fileContent" + "\r\n" + "--testFileByteArrayBodyPartPayloadMultipartPayload boundary--\r\n" , sb . toString ( ) )
assertEquals ( 1L , result )
assertThat ( result , is ( true ) )
assertThat ( result . getResultCode ( ) , is ( ResetPasswordResultCode . SUCCESS ) )
assertThatXmlIsReadable ( writeIn )
this . assertVerification ( )
Assert . assertEquals ( "" , result )
assertEquals ( result , Boolean . TRUE )
assertEquals ( targetTTL . toString ( ) , targetTTLFromTTL . toString ( ) )
assertThat ( selectRandomly . selectSolution ( Arrays . asList ( sol1 , sol2 ) ) , is ( sol1 ) )
Assert . assertTrue ( actual . isEmpty ( ) )
assertEquals ( 1 , cnt )
assertTrue ( consumerPrefetch . closed )
assertNotNull ( Transcription . reader ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "REXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertEquals ( true , isGood )
assertThat ( eqlTranService . queryDataCount ( ) , is ( 0 ) )
assertNotNull ( deregRequest )
assertThat ( connection . getResponseCode ( ) , is ( HttpURLConnection . HTTP_NOT_FOUND ) )
Assert . assertTrue ( HasTopLevelNegationVisitor . hasTopLevelNegation ( script ) )
assertSame ( result , this . logger )
Assert . assertEquals ( expectedIds , actual )
assertTrue ( volume . equivalentFileSystems ( other ) )
assertEquals ( "Unexpected primary style name" , state . primaryStyleName , table . getPrimaryStyleName ( ) )
assertNull ( container . child . get ( ) )
assertEquals ( outputFile , sink . getSink ( ) )
assertThat ( g . toSmiles ( ) , is ( "C(C)=[C@@]=CC" ) )
Assert . assertEquals ( "did not get expected xml" , expected , collInp . getParsedTags ( ) )
assertEquals ( expectedMap , map )
assertEquals ( HttpStatus . INTERNAL_SERVER_ERROR_500 , resp . getStatus ( ) )
assertEquals ( workflowBundle . getWorkflows ( ) . size ( ) , 1 )
assertEquals ( expectedValue , result )
assertEquals ( expected , uri )
Assert . assertFalse ( valid )
assertEquals ( "echo:" , result )
Assert . assertEquals ( statusCode , 307 )
assertThat ( result , is ( page ) )
Assert . assertEquals ( nodes . size ( ) , 2 )
assertThat ( outputDirectory . getPath ( ) , is ( changeSeparatorIfRequired ( "build/site/thucydides" ) ) )
assertNull ( request . getAuthToken ( ) )
assertCheckScopesFailForOtherScopes ( ScopePathType . READ_PUBLIC , ScopePathType . AFFILIATIONS_UPDATE )
assertTrue ( "Oh no! No mapped object! " , store . size ( ) > 0 )
assertTrue ( MultiParts . hasMultiPart ( metaDatas ) )
assertEquals ( STATIC , CorrectEquals . staticValue )
Assert . assertEquals ( "SELECT 'A' LIKE CONVERT(blob_col USING latin1) COLLATE latin1_german1_ci\nFROM tbl_name;" , text )
Assert . assertTrue ( errors . hasGlobalErrors ( ) && errors . getGlobalError ( ) . getCode ( ) . equals ( TenantPermissionValidator . ERROR_CODE_EMPTY_SELECTED_IDS ) )
assertThat ( response , is ( QueryMessages . primaryKeysOnlyNotice ( ) + "\n" ) )
assertEquals ( key . getIdField ( ) . toString ( ) , "test.id.key.field" )
assertArrayEquals ( result , new byte [ ] { 0 , 1 , 2 , 3 , 4 , 5 , 6 } )
Assert . assertFalse ( resultado )
assertThat ( mfp . getProperty ( ) , equalTo ( "production" ) )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
Assert . assertEquals ( "[\"a\",\"b\",\"c\",\"d\"]" , jsonArray2 . toString ( ) )
assertEquals ( 4 , jobExecutor . getJobsAdded ( ) )
assertThat ( parameters , is ( "?searchView=own&orderBy=createdNewest&show=waiting&minSupportCount=0" ) )
assertTrue ( theSelectedPoolsWere ( allAvailablePools ( ) ) )
JSONAssert . assertNotEquals ( "Message" , "{id:1234}" , actual , false )
assertEquals ( Integer . of ( 7 + 7 ) , result )
assertSame ( rootSchemaJson , actual )
assertThat ( interval , is ( ser ) )
assertEquals ( expected , json )
arrays . assertContainsOnly ( someInfo ( ) , actual , arrayOf ( 6 , 8 , 10 ) )
Assert . assertTrue ( service . load ( ".\\..\\data.txt" ) )
Assert . assertEquals ( 2 , counter . get ( ) )
assertEquals ( "Index = " + i , ModisDaacUtils . extractProductType ( toTest ) , type )
assertFalse ( obs . isDirty ( ) )
assertViewName ( mav , "editProfile" )
Assert . assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertEquals ( 1.1 , ( Double ) result , 0.000001 )
assertThat ( runtime . exitStatus ( ) , is ( equalTo ( ( byte ) 0x0 ) ) )
assertEquals ( ByteString . decodeHex ( "74c999cb8872616ec999cb8c73c3b472" ) , data . readByteString ( ) )
assertThat ( definition . tableEntryByTypeTransformer ( ) . transform ( fromValue , String . class , cellTransformer ) , is ( "key=value" ) )
assertThat ( result , is ( true ) )
Assert . assertFalse ( policy . canRetry ( context ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 02" ) )
Assert . assertEquals ( expResult , result )
assertTrue ( emptyList . isEmpty ( ) )
Assert . assertEquals ( "Hello " , output )
Assert . assertNotNull ( a )
assertEqualToResource ( file , resultReport )
assertEquals ( "[]" , toString )
assertNull ( result )
assertOut ( "/**\n * @interface\n */\nIA = function() {\n};\n\n\n/**\n * Prevent renaming of class. Needed for reflection.\n */\ngoog.exportSymbol('IA', IA);\n/**  * @type {Object}\n */IA.prototype.foo1;\n/**\n * @export\n * @return {Object}\n */\nIA.prototype.baz1 = function() {\n};\n/**\n * @export\n * @param {Object} value\n */\nIA.prototype.baz2 = function(value) {\n};" )
assertThat ( result , equalTo ( 31 ) )
Assert . assertTrue ( success )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( "the one" , node . getProperty ( "occupation" ) )
Assert . assertTrue ( areFilesEqual ( url . openStream ( ) , page . getWebResponse ( ) . getContentAsStream ( ) ) )
assertEquals ( String . format ( "{\"now\":\"%s\"}" , now . toString ( ) ) , gson . toJson ( new Holder ( now ) ) )
assertTrue ( proxy . isStopped ( ) , "Listener didn't exit" )
assertEquals ( 0 , elements . size ( ) )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertCheckClientAccessAndScopesFailForOtherScopes ( ORCID_1 , ScopePathType . READ_PUBLIC , ScopePathType . PEER_REVIEW_READ_LIMITED )
assertEquals ( "0.022" , event . stripUnit ( "0.022 sec." ) )
assertEquals ( 4 , BufferTools . indexOfTerminator ( buffer , 0 , 1 ) )
assertEquals ( "Got wrong answer for supports" , false , actual )
assertObjectEquals ( "{}" , p . run ( bs , in , sa ) )
assertEquals ( ReadConcern . MAJORITY , parsedReadConcern )
Assert . assertNotNull ( blogEntry )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( query , expectedQuery ) )
assertTrue ( success )
assertEquals ( ComponentElementGetValue . FIELD_VALUES [ 1 ] , labelChangeValue . getText ( ) )
assertOut ( "private static const foo:int = 420" )
context . assertTrue ( storage . getMockData ( ) . containsKey ( resourceURI ) )
Assert . assertTrue ( item . matches ( divNode ) )
assertArrayEquals ( encodeASCII ( "18 bytes test data (not anymore)" ) , channel . getBytes ( ) )
assertEquals ( 3 , types . size ( ) )
assertions . doesNotContainKey ( key )
assertTrue ( "Can't find statement" , m . contains ( expectedStatement ( HTTP_BASE ) ) )
Assert . assertNotNull ( foundPaths )
assertTrue ( correlatedExecutions . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
assertThat ( result , is ( true ) )
assertEquals ( "abaac\n" , found )
assertNull ( setupPostData ( "PUT" ) . get ( ) )
assertThat ( source . getName ( ) , is ( nullValue ( ) ) )
assertThat ( found . getClass ( ) , is ( typeCompatibleWith ( MySecondConverter . class ) ) )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertNull ( victim . get ( 1 ) )
assertEquals ( "{\"telefone\":\"4440529211\"}" , writer . toString ( ) )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . APPLICATION_XML ) . get ( ) . getStatus ( ) )
assertTrue ( "Didn't see new information in page!" , ! page1 . asText ( ) . equals ( page . asText ( ) ) )
assertEquals ( "3 喔о副喔� 喔�喙�喔�喔�喔侧�喔�喔掂�喔掂�" , t . format ( new Date ( 1000 * 60 * 60 * 24 * 3 ) ) )
assertNotNull ( reporter )
assertNotNull ( classLoader . loadClass ( DelegatingClassLoaderTest . class . getName ( ) ) )
assertTrue ( r . isMatch ( request ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff54_" ) )
assertTrue ( rrc . calculate ( series , new BaseTradingRecord ( ) ) . isNaN ( ) )
assertEquals ( expResult , result )
assertArrayEquals ( NAME . getBytes ( "UTF-8" ) , a . getBytes ( Tag . PatientName ) )
assertThat ( result . size ( ) , is ( 1 ) )
assertThat ( target , notNullValue ( ) )
assertThat ( estimator . estimate ( renderingContext ) , equalTo ( 0f ) )
Assert . assertEquals ( FastMath . PI , x , 1.0e-4 )
Assert . assertEquals ( "Failure expected the name to be the same" , "MessageDTO" , MHRDTO . getDTOName ( ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
Assert . assertNull ( identifierType )
Assert . assertArrayEquals ( evaluation . getResiduals ( ) . toArray ( ) , new double [ ] { 2 , - 3 } , Precision . EPSILON )
Assert . assertEquals ( "Components missing" , MicroPipelineValidationResult . MISSING_COMPONENTS , new MicroPipelineValidator ( ) . validate ( mockCfg ) )
assertEquals ( "!key:foo" , xform . getTag ( ) )
assertEquals ( expectedQuery , actualQuery )
assertTrue ( literals . get ( 0 ) . isLongLiteral ( ) )
assertEquals ( "Simple - Log message" , msg . toString ( ) )
Assert . assertEquals ( 0 , violations . size ( ) )
assertThat ( StreamUtils . ofNullable ( array ) . collect ( Collectors . toList ( ) ) , hasItems ( "hello" , "world" ) )
assertEquals ( 10 * Constants . DAY , mConfiguration . getMs ( PropertyKey . PROXY_STREAM_CACHE_TIMEOUT_MS ) )
Assert . assertEquals ( expectedCities , customerCities )
Assert . assertEquals ( "Copy of Sample Sheet" , sheets . getData ( ) . get ( 0 ) . getName ( ) )
Assert . assertFalse ( validator . isValid ( array , context ) )
assertEquals ( "Expected 100 results!" , 100 , n )
assertThat ( set . size ( ) , is ( 0 ) )
Assert . assertEquals ( "id2 [" + id2 + "] - id [" + id + "]" , ( id2 - id ) , ( long ) MIN_BLK_SIZE )
assertTrue ( enabled )
assertThat ( result , is ( equalTo ( expected ) ) )
assertEquals ( LONGHIERARCHICAL_METADATA_SERVICE_URI , conf . getMetadataServiceUri ( ) )
assertEquals ( "Person(age < 42 || age < 43 || age < 44)" , builder . getResult ( ) )
assertFalse ( list . contains ( 0 ) )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . toList ( ) . size ( ) )
assertEquals ( result , 1 )
assertNotNull ( runtimeService . startProcessInstanceByKey ( "TestProcess" , variables ) )
assertEquals ( "simple" , s )
assertPattern ( info , "/api/list-endpoint-api-controller/getList" )
assertNotNull ( context . getProperty ( "CANONICAL_HOST_NAME" ) )
assertThat ( num , is ( 3L ) )
assertNotNull ( instance . getMappainter ( ) )
assertEquals ( LocalDate . of ( 2012 , 6 , 23 ) , test )
Assert . assertEquals ( 4 , result )
assertEquals ( builder . build ( ) , myCollection . findOne ( builder . build ( ) ) )
assertEquals ( mWorkerInfos , options . getBlockWorkerInfos ( ) )
assertEquals ( "java.util.List" , info . getName ( ) . getFullyQualifiedName ( ) )
assertDoesNotCreateDisabledDir ( tmpDirFile , DirType . LOGS_DIR )
Assert . assertTrue ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredVersion ) )
assertEquals ( numInsertions , TestUtils . checkMatch ( p , "f0" , "f0_value_10" , "c" ) )
assertUpdateRecord ( "*.c1.name,*.c1.active" , objId , obj , updateObj , PATCH , expected )
assertEquals ( "com.alibaba.dubbo.rpc.protocol.dubbo.support.DemoService -> dubbo://127.0.0.1:" + port + "/demo" , result )
assertSame ( result , instance . getConnection ( ) )
assertEquals ( "myTestId" , history . getId ( ) . getIdPart ( ) )
Assert . assertEquals ( expectedResult , resultString )
assertEquals ( 0 , result . size ( ) )
assertEqualsWithoutWhiteSpaces ( "(model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 1 ) . exclude ( 12 ) . create ( ) ) )
Assert . fail ( "DependencyException should have thrown" )
assertEquals ( "http://x.y/z#zzz" , actual . toString ( ) )
assertEquals ( expected , result )
assertEquals ( HAServiceState . ACTIVE , svc1 . state )
assertEquals ( ans [ i ] , val )
assertEquals ( "new java.lang.annotation.Target() { " + "public Class annotationType() { " + " return java.lang.annotation.Target.class; " + "} " + "public String toString() { " + " return \"@java.lang.annotation.Target(value=[METHOD])\"; " + "} " + "public java.lang.annotation.ElementType[] value() { " + " return new java.lang.annotation.ElementType[] { " + " java.lang.annotation.ElementType.METHOD }; " + "} " + "}" , enc )
assertThat ( timer . elapsedTime ( ) , is ( equalTo ( millis ( 5 ) ) ) )
Assert . assertEquals ( "{\"alice\":{\"edgar\":[\"bob\"],\"charlie\":[\"bob\"]}}" , writer . toString ( ) )
assertThat ( "Cloned builder changed after creating new one" , builder . build ( ) . toString ( ) , equalTo ( clonedBuilder . build ( ) . toString ( ) ) )
assertThat ( interceptor , accepts ( method ) )
Assert . assertFalse ( "Model should contain RDF types" , rdfTypes . isEmpty ( ) )
assertNotNull ( getProxy ( ) . notifyRulesReady ( ObjectMapperHelpers . JsonToObject ( json , Agreement . class ) ) )
assertInvalid ( nameField , "size must be between 3 and 16" )
approver . assertApproved ( "Deliberate failure - Jackdaws peck my big sphincter of quartz" )
Assert . assertEquals ( "1" , entregaComHoraDefinida . getTipoPrazoHoraEntrega ( ) . getCodigo ( ) )
assertEquals ( contentExpected , contentReturned )
assertTrue ( String . format ( "Expected error to contain string [%s]. Actual error: %s" , expected , ex . getMessage ( ) ) , ex . getMessage ( ) . contains ( expected ) )
assertTrue ( entity . equals ( entity2 ) )
assertEquals ( "headerHtmlWithMacros" , Functions . getPageHeaderHtml ( PROJECT , BRANCH , PAGE ) )
assertSame ( realObjectInternalSpring . getClass ( ) , ClassHelper . getRealClassFromClass ( springAopObject . getClass ( ) ) )
assertNull ( value )
assertArrayEquals ( new Item [ ] { SECOND_ITEM , FIRST_ITEM } , actual . toArray ( new Item [ 2 ] ) )
assertNotNull ( wikiDashlet )
assertArrayEquals ( new int [ ] { 1 , 2 , 3 } , newArray )
assertEquals ( "53" , content )
assertFalse ( optionalDependencyNode . getArtifact ( ) . isOptional ( ) )
assertThat ( columnCombination . getSetBits ( ) , IsIterableContainingInAnyOrder . containsInAnyOrder ( fixture . getExpectedBits1 ( ) ) )
assertEquals ( expected , actual )
assertEquals ( MediaType . APPLICATION_JSON_TYPE , response . getType ( ) )
Assert . assertEquals ( xmlEsperado , icms60 . toString ( ) )
assertEquals ( Byte . valueOf ( "3" ) . intValue ( ) , result . getValue ( ) . intValue ( ) )
assertEquals ( "Exp. the visitor to be visited" , 1 , visited . size ( ) )
assertTrue ( true )
Assert . assertNotNull ( exception )
assertEquals ( 0 , numberOfDocumentsIn ( index ) )
Assert . assertTrue ( isValid , "PollItems have correct names length, so they must be valid" )
assertEquals ( "aa" , Futures . transform ( future , s -> s + s , MoreExecutors . directExecutor ( ) ) . get ( ) )
assertEquals ( 1 , ( ( Number ) o ) . intValue ( ) )
assertEquals ( true , result )
assertEquals ( events . size ( ) + 1 , size ( stream ) )
assertEquals ( 1 , observation . getStatusElement ( ) . getExtension ( ) . size ( ) )
assertEquals ( "100" , result )
assertEquals ( 0.0 , result . getLeft ( ) , EPSILON )
Assert . assertEquals ( role , real )
Assert . assertEquals ( 2 , resources )
Assert . assertEquals ( 2 , myActivities . size ( ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertNull ( token . getRefreshToken ( ) )
assertTrue ( startsWithHttp )
assertEquals ( "Locally updated value" , ( Integer ) 100 , localState . commit ( globalState ) . deref ( ) )
assertResponseContains ( httpResponse , "com.qmetric.spark.metrics.MetricSetupTest$1.timer" , "com.qmetric.spark.metrics.RouteTimerWrapper.meter" )
assertNull ( obj )
assertEquals ( object , result . get ( 0 ) )
getStream ( streamId ) . statusCode ( 200 ) . assertThat ( )
assertThat ( drawingMotion . getStart ( ) , equalTo ( drawingMotion . getEnd ( ) ) )
assertTrue ( features . noneMatch ( f -> f . getId ( ) . startsWith ( "spring/" ) && ! f . isBlacklisted ( ) ) )
assertGroups ( ldapUserInfo , false , false , false , false )
assertEquals ( TEXT , s )
assertTrue ( suspendables . contains ( method ) )
Assert . assertNotNull ( "Problem loading configuration from " + REL_PATH , appender )
assertTrue ( date != null )
Assert . assertEquals ( 0 , getAddressDao ( ) . getAll ( ) . size ( ) )
assertEquals ( MESSAGE , ex . getMessage ( ) )
assertThat ( built . getAge ( ) , is ( 16 ) )
assertTrue ( ax . toString ( ) , ax instanceof OWLObjectPropertyDomainAxiom )
assertEquals ( generatedJavascript , expectedJavascript )
Assert . assertNull ( filteredMap )
assertNotNull ( manager . getRoster ( handler ) )
Assert . assertTrue ( result )
Assert . assertTrue ( "This should overflow to negative" , unprocessedSize + hugeLength < bufferSize )
assertThat ( updateSuccessful , equalTo ( true ) )
assertEquals ( "axyz" + OptionHelper . _IS_UNDEFINED , result )
Assert . assertEquals ( CatalogResponseMessage . OK , response . getCode ( ) )
assertThat ( n , anyOf ( instanceOf ( Byte . class ) , instanceOf ( Short . class ) ) )
Assert . assertTrue ( contains )
assertEquals ( 3 , map . size ( ) )
assertEquals ( ( float ) 8 , result . getFloatValue ( ) , 0.0 )
assertThat ( joined , containsInAnyOrder ( "a c" , "a d" , "b c" , "b d" ) )
arrays . assertContains ( description , actual , other )
assertThat ( new String ( buffer . toByteArray ( ) ) , is ( "{" + "\"data\":{" + "\"name\":\"bob\"," + "\"age\":12," + "\"favorite_numbers\":[1,2,3]" + "}," + "\"self\":\"/db/data/node/0\"," + "\"extensions\":{}" + "}" ) )
assertTrue ( count ( c , tableName ) < 10 )
assertEquals ( "treeTable autoCreateRowSorter must be false" , false , table . getAutoCreateRowSorter ( ) )
assertEquals ( "Long arguments did not split as expected" , expected , sw . toString ( ) )
Assert . assertTrue ( etagHeaderValue . matches ( "\".*?\"" ) )
assertTrue ( diff < visHash . maxThreshold )
assertEquals ( MICRO ( GRAM ) , u )
assertThat ( javaDocComment , containsString ( "A title for this type" ) )
assertTrue ( sds . getDatabaseType ( ) instanceof H2DatabaseType )
runner . assertAllFlowFilesTransferred ( PublishKafka_2_0 . REL_FAILURE , 2 )
assertEquals ( result1 , result2 )
assertThat ( result , is ( jsonRecord ) )
assertEquals ( ctx . makePoint ( - 160 , 30 ) , s )
Assert . assertTrue ( redisSlave . isOpen ( ) )
Assert . assertTrue ( files . get ( 0 ) . contains ( "filesample.txt" ) )
assertEquals ( AuthorizationStatus . EXPIRED , response . getIdTagInfo ( ) . getStatus ( ) )
Assert . assertEquals ( 0 , parse ( batch ) . size ( ) )
assertEquals ( 2 , traceBuilder . size ( ) )
assertEquals ( expectedJson , actualJson )
Assert . assertEquals ( expected , actual )
assertThat ( IOUtils . toByteArray ( req . getBodyAsStream ( ) ) , is ( BINARY_BODY ) )
assertEquals ( "/db/code/b.xqm" , absoluteModulePath )
assertEquals ( void . class , r . resolve ( "void" ) )
assertNotNull ( response )
assertTrue ( resultFromJPQL . size ( ) > 0 )
assertOut ( "this.a.child('child').removeChild('grandchild')" )
assertTrue ( "Logger should not be removed" , ops . exists ( TEST_LOGGER_ADDRESS ) )
assertEquals ( "https://www.google.com/apis/ads/publisher" , config . getNamespacePrefix ( ) )
assertDecorate ( serviceProps , EMPTY , RES_SD0 )
assertEquals ( inputString , outputString )
Assert . assertEquals ( 1 , result . getEntities ( ) . size ( ) )
Assert . assertArrayEquals ( coh_EXPECTED . toArray ( ) , coh_ACTUAL . toFloat ( ) . toArray ( ) , ( float ) DELTA_04 )
assertNull ( buffer . getBuffer ( ) )
Assert . assertEquals ( i , transactionId . getTransactionSequence ( ) )
Assert . assertFalse ( "Method supported" , adapter . supportsInternal ( new MethodEndpoint ( this , unsupported ) ) )
Assert . assertEquals ( "Method: doTestGetPrinterBasedOnId \nMessage: ID of the retrieved printer " + "doesn't match the search value" , "P01" , printer . id )
assertEquals ( "Wrong escaped object" , value , handler . escape ( value , ListDelimiterHandler . NOOP_TRANSFORMER ) )
surefireLauncher . executeTest ( ) . assertTestSuiteResults ( 2 , 0 , 0 , 0 )
assertEquals ( asList ( MapUtil . map ( "person.type" , "hero" , "person.name" , "Thomas Anderson" ) , MapUtil . map ( "person.type" , "hero" , "person.name" , "Trinity" ) ) , result )
assertTimerWithDuration ( "boundary" , TIMER_DURATION )
assertThat ( actual , is ( ioException ) )
assertCompareToOrder ( comparator , a , b )
assertTrue ( featuresService . isInstalled ( featuresService . getFeature ( "pax-http-undertow" ) ) )
Assert . assertEquals ( "涓�|瑗夸集�╀�" , words )
assertThat ( id , greaterThan ( 0 ) )
Assert . assertEquals ( expectedPaddedHexes [ i ] , datapathIdHex )
assertEquals ( "case when (cat.toes = ?1) then (cat.id * ?1) when (cat.toes = ?2) then (cat.id * ?2) else 4 end" , serializer . toString ( ) )
assertEquals ( "it's a dummy test!" , emf . format ( new Object [ ] { "DUMMY" } ) )
assertThat ( listener . toString ( ) , allOf ( containsString ( "step_with_parameter" ) , containsString ( "Joe" ) ) )
assertThat ( future , completesTo ( "abc" ) )
assertFalse ( "property not cleared" , config . containsKey ( "key1" ) )
TestUtil . assertEquals ( exp , spans )
assertThat ( output , containsString ( "DICOM store retrieved:" ) )
assertEquals ( 1 , iData . getDeliveryInsertionIndex ( ) )
Assert . assertEquals ( "Test-29" , list . get ( 0 ) . getTitle ( ) )
Assert . assertThat ( result . get ( 0 ) . getUsername ( ) , is ( "mick" ) )
assertThat ( configuration . skipInstrumentation ( "production/code.js" ) , is ( false ) )
Assert . assertEquals ( 201 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
TestCase . assertTrue ( result )
assertThat ( copy ( ints ) , is ( equalTo ( ints ) ) )
assertThat ( result , is ( "{\"message\":\"hello world!\"}" ) )
Assert . assertNotNull ( addressResultsDto )
Assert . assertFalse ( "Requests with different order of URI path options must not equal!" , coapRequest1 . equals ( coapRequest2 ) )
assertEquals ( 1 , t . foo ( ) )
assertThat ( result , equalTo ( URL_WITH_ARCHETYPE_CATALOG ) )
AssertiveInstance . init ( )
Assert . assertTrue ( ExpectedConditions . textToBePresentInElement ( By . id ( "indexPage" ) , "You arrived at index page" ) . apply ( driver ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff20_" ) )
assertSame ( binding , uriTools . resolveUri ( PROFILE_URI . resolve ( "processorbinding/Hello/in/name" ) , wfBundle ) )
assertFalse ( fs . unlink ( "foo" ) )
assertTrue ( getTaskWorkers ( 1 , 2 , job , GridProcessState . RUNNING ) . size ( ) == 2 )
assertThat ( output . format ( "notPerformed" , "" , "not performed" ) , Matchers . is ( "\033[35mnot performed\033[0m" ) )
assertEquals ( "20887" , result )
assertThat ( result , contains ( URI . create ( uris . get ( 0 ) ) , URI . create ( uris . get ( 1 ) ) ) )
assertEquals ( "[]" , CollectionUtils . trim ( list , 2 ) . toString ( ) )
assertThat ( url , is ( "https://www.google.com" ) )
assertEquals ( request . getResponseParser ( ) . parse ( null ) , responseParser . parse ( null ) )
assertArrayEquals ( expected , actual , 1E-8 )
assertTrue ( "Exception raised" , exceptionRaised )
assertTrue ( "No maximum length reached exception was thrown!" , exception )
Assert . assertEquals ( 1 , changedModel . getGroups ( ) . size ( ) )
assertThat ( processor , instanceOf ( SuiteFinishedProcessor . class ) )
assertThat ( html , is ( "" ) )
assertEquals ( "{successRecordCount=0, rejectRecordCount=0, totalRecordCount=0}" , wop . finalize ( wr , null ) . toString ( ) )
assertThat ( module . getAdvicePoints ( ) , is ( equalTo ( Collections . EMPTY_LIST ) ) )
assertEquals ( diff , obj . toString ( ) )
assertThat ( testExpiryTimeStr , is ( expectedExpiryTimeStr ) )
Assert . assertEquals ( constraintViolations . size ( ) , 0 , "Validation errors" )
assertTrue ( result . getErrors ( ) . size ( ) > 0 )
assertEquals ( value , literal . getValue ( ) . longValue ( ) )
assertThat ( actual , containsString ( "[07/02/1991:01:02:03Z]" ) )
assertEquals ( expected , reference . get ( ) )
assertEquals ( "OK" , response . getTitle ( ) )
assertEquals ( DROP_STATEMENT , statement )
assertNotNull ( SyncMap . fetcher ( "ISXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "MPXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( result , true )
assertThat ( repository . getUserActivityRecord ( userId ) , is ( Optional . of ( record ) ) )
assertEquals ( oid , getOidFromVirtualServerName ( baseOid , vsName ) )
assertTrue ( Arrays . deepEquals ( new byte [ ] [ ] { BaseEncoding . base64 ( ) . decode ( "BaS" ) , BaseEncoding . base64 ( ) . decode ( "e6" ) , BaseEncoding . base64 ( ) . decode ( "" ) , BaseEncoding . base64 ( ) . decode ( "4+" ) , BaseEncoding . base64 ( ) . decode ( "padding" ) , BaseEncoding . base64 ( ) . decode ( "more" ) , BaseEncoding . base64 ( ) . decode ( "" ) } , values ) )
assertTrue ( "Asynchronous call was synchronous?" , duration < 100 )
TestCase . assertEquals ( ECHO_STRING , outMessage )
assertTrue ( LibUsb . getDeviceList ( null , deviceList ) >= 0 )
assertThat ( CalendarQuarter . from ( cq . toProlepticNumber ( ) ) , is ( cq ) )
assertEquals ( target . transformResolved ( context ) . getSourceCard ( ) . getCardId ( ) , "minion_chromatic_vohlok" )
assertEquals ( "foo" , result )
assertEquals ( aNumber , result , 1E32 )
assertEquals ( "GS*GS01*GS02*GS03" , x12 . getSegment ( 1 ) . toString ( ) )
assertThat ( cut . apply ( pageObject ) , is ( true ) )
assertEquals ( expResult , result )
assertEquals ( "STR_TO_DATE('1.1.2011', '%d.%m.%Y')" , DaoUtil . fillUpValue ( cal . getTime ( ) ) )
assertEquals ( 12 , metadata )
getRunner . assertAllFlowFilesTransferred ( AbstractDynamoDBProcessor . REL_FAILURE , 1 )
assertCreatedRight ( client , "iem://test:123/Event" )
Assert . assertTrue ( proxy . testRequestScopeActive ( ) )
Assert . fail ( "Expected exception, IllegalStateException was not thrown" )
assertSelectResultKeySizeIsZero ( selector )
assertTrue ( RootRecordUtils . isRootRecord ( record ) )
assertEquals ( "No error listener registered" , 1 , config . getEventListeners ( ConfigurationErrorEvent . ANY ) . size ( ) )
Assert . assertEquals ( "" , WebUtil . getContextPath ( ) )
assertEquals ( "{ \"field name\" : { \"$bitsAnyClear\" : \"?\" } }" , filterParameters . toString ( ) )
assertEquals ( "-1" , result )
assertEquals ( "Wrong string" , "EventType [ TEST ]" , s )
assertEquals ( "Expecting identical pedigree" , 0 , result )
assertEquals ( expected , arguments . profilers )
assertThat ( result , is ( false ) )
assertEquals ( "<p id=\"�\">Blah  </p>" , doc . body ( ) . html ( ) )
assertNull ( cause )
assertThat ( "Button location has changed after table refresh, window has scrolled and it shouldn't have" , newButtonLocation , is ( buttonLocation ) )
assertNotNull ( IndexWriter . getFailurePolicy ( env ) )
assertEquals ( tpv1 , tpv2 )
assertEquals ( "\"NAME\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertEquals ( "response body should be " + expected , expected , response . getResponseBody ( ) )
assertEquals ( "Expected 4 results!" , 4 , count )
assertThat ( ShortTypeValidator . INSTANCE . validate ( parameters , "aaa" ) , is ( nullValue ( ) ) )
assertEquals ( MESSAGE , result )
assertTrue ( path == null )
assertTrue ( "Failed to fill Object array correctly" , d [ i ] == val )
assertNotNull ( walletInfo )
assertEquals ( expectedQuery , actualQuery )
assertEquals ( "Übersicht" , content )
assertWaitUntil ( ( ) -> cnt . get ( ) == 3 )
assertEquals ( Integer . valueOf ( 67 ) , resultMap . get ( "Age" ) )
assertEquals ( "Wrong number of warnings detected." , 3 , warnings . size ( ) )
Truth . assert_ ( )
assertThat ( str , equalTo ( "hihi" ) )
assertEquals ( 401 , post . getStatus ( ) )
assertNull ( message )
assertTrue ( result . matches ( "\\(function\\(\\)\\{.*\\}\\)\\(\\);" ) )
assertXMLEqual ( getExpectedString ( ) , stringWriter . toString ( ) )
assertEquals ( 64 , subject . getMaxCapacity ( ) )
assertEquals ( sanitized , rewrite ( gadget , markup , set ( "p" , "b" , "style" ) , set ( ) ) )
Assert . assertEquals ( 3 , analyser . getNumberOfPickups ( route ) , 0.01 )
assertNotNull ( sqsClient )
Assert . assertArrayEquals ( new String [ ] { "org" , "websocket" , "echo" , "8001" , ";e" , "cb" } , toStringArray ( tokens ) )
assertEquals ( false , options . isRecursive ( ) )
assertTrue ( r5 . getNextRoads ( ) . contains ( r6 ) )
assertNull ( emoji )
assertTrue ( "Option 'list-inventory' not found in " + Arrays . deepToString ( optionSet . specs ( ) . toArray ( ) ) , optionSet . has ( "list-inventory" ) )
assertNotNull ( Level . get ( "test" ) )
assertEquals ( 1 , allObjects . size ( ) )
assertEquals ( "scheduleUpdateTwin" , Deencapsulation . getField ( jobsParser , "jobType" ) )
assertEquals ( "" , query . toString ( ) )
assertFalse ( controller . getNode ( "/subnet" ) . hasPublishedInput ( "n" ) )
assertEquals ( ( Integer ) 3 , Collections . min ( list ) )
assertThat ( this . dataModel . isRowAvailable ( ) , is ( true ) )
assertEquals ( JSON_CONTENT_RGBA , stringWriter . toString ( ) )
Assert . assertEquals ( MSG , "x_1" , nameGen . getName ( "x" ) )
assertThat ( actualPerMinuteValue , is ( 13 ) )
assertTrue ( ( ( String ) result . get ( "_xml" ) . get ( 0 ) ) . length ( ) > 0 )
Assert . assertNotNull ( addressResultsDto )
Assert . noNullElements ( results , "Failure!" )
Assert . assertEquals ( Schema . Type . FIXED , subSchema . getType ( ) )
result . assertIsSatisfied ( )
assertEquals ( expected , actual )
Assert . assertArrayEquals ( new Result [ ] { Result . createVoidResult ( ) , Result . createValueResult ( 1 ) , Result . createExceptionResult ( NoSuchElementException . class ) , Result . createExceptionResult ( NoSuchElementException . class ) } , ex . call ( ) )
assertEquals ( data , TestFileUtils . readString ( file ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "xfdfAnnotationLinkAllParams.pdf" , sourceFolder + "cmp_xfdfAnnotationLinkAllParams.pdf" , destinationFolder , "diff_" ) )
assertEquals ( expecteds , actuals )
assertThat ( result , is ( 3 ) )
assertEquals ( "EXEC pm1.sq3b(\"in\" => 'xyz', in2 => 666)" , sp . toString ( ) )
assertThat ( remoteAddress , is ( "9.9.9.9" ) )
assertEquals ( expResult , result )
assertNull ( taskService . createTaskQuery ( ) . singleResult ( ) )
assertNotNull ( result )
Assert . assertTrue ( readable )
assertEquals ( 1 , out . list ( ) . length )
assertEquals ( 2 , engineRule . getFormService ( ) . getTaskFormVariables ( task . getId ( ) ) . size ( ) )
assertEquals ( 0 , compare )
assertEquals ( "str 0:str 1" , res . join ( ) )
Assert . assertTrue ( ArgumentParser . validateArguments ( args , AllOptionalArguments . class ) )
Assert . notNull ( grade )
assertArrayEquals ( new byte [ ] { 2 , 3 , 4 , ( byte ) 128 } , bos . toByteArray ( ) )
assertThat ( bomb . state ( ) , is ( "kaboom!" ) )
Assert . assertTrue ( file . getAbsolutePath ( ) . contains ( localRepo . getAbsolutePath ( ) ) )
assertEquals ( expectedFont [ i ] , foInline . getAttribute ( "font-family" ) )
assertEquals ( result , 7 * varX + 3 * varY - pow ( log ( varY / varX * 12 ) , varY ) , 0.0 )
assertEquals ( 1 , TestUtils . regexCount ( pb . getContent ( ) , "<w:br w:type=\"page\" />" ) )
assertEquals ( "\"2005-05-02T00:00:00+02:00\"^^xsd:dateTime" , val )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , response . getStatus ( ) )
assertVariable ( "character_set_client" , "utf8" )
Assert . assertEquals ( VmInstanceState . Unknown , vmvo . getState ( ) )
assertNull ( valueProvider . getValue ( row ) )
assertEquals ( "job" , manager . getType ( ) )
assertEquals ( "Select one or more tags" , element . getChildMarkup ( ) )
assertLine ( " bar" , b , false )
assertEquals ( 0 , sut . computeSearchGoalBonus ( current ) )
assertNull ( log )
assertEquals ( TERM_FACTORY . getImmutableFunctionalTerm ( ExpressionOperation . DIVIDE , v , TERM_FACTORY . getConstantLiteral ( "2" , XSD . LONG ) ) , translation )
assertTrue ( match == null )
assertPermanentCount ( playerA , "Hinterland Logger" , 1 )
assertEquals ( 3 , numberOfTimesFooWasInvoked )
Assert . fail ( "Should have failed with MultiException" )
assertThat ( JobWatcher . isComplete ( cachedJob ) , is ( false ) )
assertEquals ( "(Linda, Coughlan, Ireland, Female, 22)" , person . toString ( ) )
assertTrue ( Arrays . equals ( "test" . getBytes ( "UTF-8" ) , arrayFirst ) )
assertMatch ( e , s )
assertEquals ( SymbolLookup . NOT_FOUND , ret )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" + outFileName ) )
assertTrue ( map . isEmpty ( ) )
Assert . assertTrue ( telemetryHandler . queueEvent ( te ) )
files . assertHasDigest ( INFO , actual , digest , expected )
assertEquals ( - 1 , fixture . readShort ( ) )
assertEquals ( 100 , getInt ( System . getProperties ( ) , "demo.count" ) )
iterables . assertIsSubsetOf ( someInfo ( ) , actual , newArrayList ( "Luke" , "Yoda" ) )
this . context . assertIsSatisfied ( )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + "<w:document xmlns:wpc=\"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:m=\"http://schemas.openxmlformats.org/officeDocument/2006/math\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:wp14=\"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\" xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\" xmlns:w10=\"urn:schemas-microsoft-com:office:word\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" xmlns:w14=\"http://schemas.microsoft.com/office/word/2010/wordml\" xmlns:wpg=\"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\" xmlns:wpi=\"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\" xmlns:wne=\"http://schemas.microsoft.com/office/word/2006/wordml\" xmlns:wps=\"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\" mc:Ignorable=\"w14 wp14\">" + "<w:body>" + "<w:r w:rsidR=\"00314C57\">" + "<w:rPr>" + "<w:noProof/>" + "</w:rPr>" + "<w:t>#end</w:t>" + "</w:r>" + "<w:r w:rsidR=\"00E359EA\">" + "<w:rPr>" + "<w:noProof/>" + "</w:rPr>" + "<w:t></w:t>" + "</w:r>" + "</w:body>" + "</w:document>" , writer . toString ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertEquals ( getCreationFactoryUri ( FAKE_SERVICE , substitutedURI ) , creationFactory . getCreation ( ) . toString ( ) )
assertThat ( actualExceptionCode , is ( "defaultExceptionCode003" ) )
assertResultIs ( "path%5Belement%5D" )
assertPermanentCount ( playerA , "Hinterland Logger" , 1 )
Assert . assertEquals ( "did not get expected data length" , testLen , result . length ( ) )
assertEquals ( null , response )
assertEquals ( aplicacionWS , aplicacion )
Assert . fail ( "Missing required input" )
assertEquals ( expected , actualQuery )
assertEquals ( "Hello World" , ret )
assertFalse ( r . equals ( r2 ) )
assertThat ( manager . overrideVote ( "foo" ) , is ( true ) )
Assert . assertEquals ( "(nt_point_location (nt_base_location - (nt_number 123)))" , loc . toStringTree ( parser ) )
assertThat ( milliseconds , is ( EXPECTED_VALUE ) )
context . assertIsSatisfied ( )
Assert . assertEquals ( fullName , CallerLoggerUtil . getName ( fullName ) )
assertEquals ( "recoveredResult must be Success(42)" , recoveredResult , new Try . Success < > ( 42 ) )
Assert . assertEquals ( chromosome . getFitness ( ) , copy . getFitness ( ) , 0.0 )
assertEquals ( 0 , count ( elements ) )
assertEquals ( average . getValue ( i ) , result )
descriptor . assertValid ( )
assertEquals ( ds + bs + cs , target . readUtf8 ( ) )
assertEquals ( true , result )
assertTrue ( memoryLoaded . equals ( readStatus ) )
assertFalse ( exist )
assertNotNull ( factory . getModuleName ( Object . class ) )
assertEquals ( 4 , requirements . size ( ) )
assertEquals ( 1 , map . get ( "test" ) . intValue ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + "datasheet_mode.pdf" , sourceFolder + "cmp_datasheet_mode.pdf" , destinationFolder , "diff_" ) )
assertEquals ( getScrollTop ( ) , 1000 )
assertTrue ( "Immediate trigger did not fire within a reasonable amount of time." , ( fTime - sTime < 7000L ) )
assertTrue ( computer . needsProcessing ( context ) )
assertThat ( config . getIndexProviders ( ) , is ( notNullValue ( ) ) )
assertThat ( component . execute ( ) , is ( expected ) )
assertTrue ( "DOI is supported" , result )
assertEquals ( "{\"field\":\"value\"}" , json )
assertEquals ( "<input type='hidden' name='ACCEPTURL' value='http://mydomain.com/result?hint=ok'>\n" + "<input type='hidden' name='AMOUNT' value='800'>\n" + "<input type='hidden' name='CANCELURL' value='http://mydomain.com/result?hint=ca'>\n" + "<input type='hidden' name='CATALOGURL' value='http://mydomain.com/result'>\n" + "<input type='hidden' name='CN' value='holder  name'>\n" + "<input type='hidden' name='COM' value='bob@doe.com, 1234'>\n" + "<input type='hidden' name='CURRENCY' value='USD'>\n" + "<input type='hidden' name='DECLINEURL' value='http://mydomain.com/result?hint=de'>\n" + "<input type='hidden' name='EMAIL' value='bob@doe.com'>\n" + "<input type='hidden' name='EXCEPTIONURL' value='http://mydomain.com/result?hint=ex'>\n" + "<input type='hidden' name='HOMEURL' value='http://mydomain.com/result'>\n" + "<input type='hidden' name='ITEMID1' value='code2'>\n" + "<input type='hidden' name='ITEMID2' value='ship2'>\n" + "<input type='hidden' name='ITEMNAME1' value='name2'>\n" + "<input type='hidden' name='ITEMNAME2' value='ship2'>\n" + "<input type='hidden' name='ITEMPRICE1' value='4.0000'>\n" + "<input type='hidden' name='ITEMPRICE2' value='0.0000'>\n" + "<input type='hidden' name='ITEMQUANT1' value='2'>\n" + "<input type='hidden' name='ITEMQUANT2' value='1'>\n" + "<input type='hidden' name='ITEMVATCODE1' value='25.0'>\n" + "<input type='hidden' name='ITEMVATCODE2' value='0.0'>\n" + "<input type='hidden' name='LANGUAGE' value='en'>\n" + "<input type='hidden' name='OPERATION' value='SAL'>\n" + "<input type='hidden' name='ORDERID' value='234-1324-1324-1324sdf-sdf'>\n" + "<input type='hidden' name='PSPID' value='ID0001'>\n" + "<input type='hidden' name='SHASIGN' value='DA59B8F8D3E9585588E8BB54DA175970124DF442'>\n" + "<input type='hidden' name='TAXINCLUDED1' value='1'>\n" + "<input type='hidden' name='TAXINCLUDED2' value='1'>\n" + "<input type='hidden' name='USERID' value='bob@doe.com'>\n" , htmlFormPart )
assertEquals ( "'abc''''def'" , serializer . toString ( ) )
assertEquals ( null , result )
assertFalse ( sut . purgeCalled )
assertEquals ( p , s )
assertEquals ( 1 , rowCount )
assertArrayEquals ( new Integer [ ] { 0 , 1 , 2 , 3 } , Iterators . toArray ( evens , Integer . class ) )
assertEquals ( value , evaluated )
assertFalse ( "Accepted value outside range of int" , accepted )
assertThat ( this . appRegistryService . find ( "log1" , ApplicationType . sink ) . getUri ( ) . toString ( ) , is ( "maven://org.springframework.cloud.stream.app:log-sink-rabbit:1.2.0.RELEASE" ) )
Assert . assertTrue ( ! ( ( BasicDecider ) instance ) . isToRunContained ( metadata . getWorkflowRun ( workflowRunAcc ) . getInputFileAccessions ( ) , filesToRun ) )
assertEquals ( "foo" , expression . getValue ( elContext ) )
assertAllGuardsExists ( )
Assert . assertEquals ( "test" , var . toString ( ) )
assertReference ( reference , "referent" , null , null )
assertThat ( description . toString ( ) , is ( "to have global error of code 'error.null'" ) )
assertNull ( v8 . getData ( "foo" ) )
assertEquals ( "2.3.4.5" , context . getUserIp ( ) )
assertEquals ( input , txt )
assertTrue ( "permission was not granted to admin." , updateUserPermission . isAllowed ( auth , 1L ) )
assertTrue ( result )
assertEquals ( name , keeper . findDefault ( ) )
Assert . assertEquals ( "��" , HtmlToXMLUtil . unescapeToXML ( testString ) )
assertNotNull ( actual )
assertEvidence ( evidence , 0 , 0 , 0 , 0 , 0 )
assertEquals ( expResult , result , Constants . DOUBLE_ACCURACY_HIGH )
assertEquals ( "SRID=4326;POINT (-12 11)" , internalResultSet . getString ( 1 ) )
assertTrue ( ext instanceof HasAdaptiveExt_ManualAdaptive )
assertGenerators ( result , AnInt . class , ZilchGenerator . class )
assertThat ( response , containsString ( "% Abuse contact for '19.0.0.0 - 19.255.255.255' is 'more_abuse@ripe.net'" ) )
assertThat ( converter . toWritableObject ( 1.0D ) , is ( ( Object ) new DoubleWritable ( 1.0D ) ) )
assertFalse ( leaseRefresher . takeLease ( leaseCopy , newOwner ) )
assertEquals ( expected , bytesUsed )
assertFalse ( sta . validateGraphic ( new PieChart ( ) ) )
assertEquals ( "maprfs://" + testUrlTransformed , namedClusterBridge . processURLsubstitution ( testUrl , null , null ) )
assertTrue ( "The recreated syntax-tree did not match the input syntax-tree." , pennOriginal . equals ( pennFromRecreatedTree ) )
assertPermanentCount ( playerA , "Gray Ogre" , 1 )
assertEquals ( "[message: hello0, message: hello1]" , broadcasts . toString ( ) )
assertEquals ( "value" , store . get ( "key" ) )
assertEquals ( 1 , table . getCounter ( ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertEquals ( "incorrect value" , result , aNumber . doubleValue ( ) , 0 )
assertThat ( description . toString ( ) , is ( "row <3> is missing in sheet \"Sheet1\"" ) )
assertEquals ( Paths . get ( "/some/folder/file.txt" ) , result )
assertEquals ( "MediaFeed [data=[], meta=Meta [code=0, errorMessage=null, errorType=null], pagination=Pagination [depreciationWarning=null, minTagId=null, nextMaxId=null, nextMaxTagId=null, nextMinId=null, nextUrl=null]]" , result )
assertThat ( originalSession , not ( equalTo ( newSession ) ) )
assertTrue ( res )
Assert . assertEquals ( DFUnidadeFederativa . SC , retornoConsultaCadastroDados . getUf ( ) )
Assert . assertEquals ( 18 , psRes . length ( ) )
assertTrue ( updates . isEmpty ( ) )
assertNotNull ( consumable )
assertEquals ( "{\"test\":[{\"OK\":\"200\"},{\"REDIREDT\":[{\"CREATED\":\"201\"}]}]}" , result . toString ( ) )
assertEquals ( 10 , success [ 0 ] )
assertEquals ( "%d{ISO8601} [%t][%c] %-5p: %m%n" , layout . getConversionPattern ( ) )
Assert . assertEquals ( "-setOne-setTwo.Failed" , result )
assertFalse ( resultMessage ( result , POST ) , result . passedValidation ( ) )
assertEquals ( ConnectionSchema . DEFAULT_FLOWFILE_EXPIRATION , createSchema ( map , 0 ) . convert ( ) . getFlowfileExpiration ( ) )
assertThat ( any . contains ( MILLI_OF_DAY ) , is ( true ) )
assertEquals ( 56 , header . getNumSamples ( ) )
assertEquals ( expected , doc . toString ( ) )
assertEquals ( 10. , stateManager . getRouteState ( route , vehicle , id , Double . class ) , 0.01 )
Assert . assertEquals ( "ProtocolId" , consumer . getConsumerKey ( ) )
assertThat ( "without trigger" , withTrigger ( GitHubPushTrigger . class ) . apply ( prj ) , is ( false ) )
assertShapeCoordinates ( boundaryEventBounds , 343 , 200 )
assertArrayEquals ( new int [ ] { - 1 } , matrix [ 0 ] )
Assert . assertEquals ( vroffering1 . getUuid ( ) , apvm . getInstanceOfferingUuid ( ) )
assertEquals ( "[inflectedform121, inflectedform122]" , Arrays . toString ( state . toFinalString ( null ) ) )
assertLife ( playerA , 18 )
assertThat ( metaStore . getMappedDatabases ( ) , is ( mappedDatabases ) )
assertNotEquals ( insertPerson , insertDifferentPerson )
assertEquals ( 1 * 2 * 3 * 4 , IntStream . range ( 1 , 5 ) . reduce ( lambda ) . getAsInt ( ) )
assertEquals ( 0 , attr . size ( ) )
assertEquals ( "[2147483644, 2147483645, 2147483646]" , IteratorToGeneratorAdapter . adapt ( range ) . toCollection ( ) . toString ( ) )
assertThat ( result , is ( true ) )
assertEquals ( "" , path . toString ( ) )
assertEquals ( "public static final SetProperty<TargetEntity> SET_REL = PropertyFactory.createSet(\"set_rel\", TargetEntity.class);" , definition )
Assert . assertEquals ( infoForward . getSequence ( ) , resultTranscript )
assertEquals ( BaseAction . INPUT , action . doDefault ( ) )
assertThat ( $ . url ( ) , endsWith ( "WithoutJSTest_2.html?aName=aValue" ) )
assertEquals ( BPResultType . PASS , testResult . getResultType ( ) )
Assert . assertEquals ( Score . NEGATIVE , score )
Assert . assertEquals ( localDate . toString ( ddMMMyyyy , Locale . ENGLISH ) , "17-Jun-2013" )
assertEquals ( 123.5 , hdm . getHeading ( ) , 0.1 )
assertTrue ( ! nnList . isEmpty ( ) )
assertTrue ( driver . findElement ( By . name ( "_TRANSACTION_TOKEN" ) ) . getAttribute ( "value" ) . matches ( "transactiontoken~[0-9a-z]{32}~[0-9a-z]{32}" ) )
assertTrue ( "Header on exchange should indicate failure" , exchange . getIn ( ) . getBody ( WorkNote . class ) . hasErrors ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( expected , result )
assertEquals ( 401 , response . getStatus ( ) )
Assert . assertEquals ( "bob" , token . getUserName ( ) )
assertFalse ( printer . toString ( ) . isEmpty ( ) )
assertThat ( service . getDefaults ( ) , equalTo ( defaults ) )
Assert . assertEquals ( expResult , result )
assertEquals ( Byte . MAX_VALUE , i )
assertEquals ( mockResponse , testResponse )
assertEquals ( "Incorrect value" , map ( DATE_STRING , "test" ) , value )
assertThat ( codes , containsInAnyOrder ( "43343-3" , "43343-4" , "47239-9" ) )
Assert . assertNotNull ( cu )
assertThat ( keys . size ( ) , is ( 1 ) )
assertOut ( "goog.provide('com.example.components.TestInterface');\n\n/**\n * @interface\n */\ncom.example.components.TestInterface = function() {\n};" )
assertThatNothingHappened ( jobExecution , lastCreatedJobId , 1 )
Assert . assertEquals ( 40. , solution . getCost ( ) )
Assert . assertEquals ( 1 , issues . length )
assertEquals ( "hello world" , list . get ( 0 ) )
TestCase . assertFalse ( matcher . match ( "Hello, World" ) )
assertThat ( response , is ( HttpStatus . SC_BAD_REQUEST ) )
assertEquals ( new BigInteger ( 1 , input ) , Base58 . decodeToBigInteger ( "129" ) )
assertThat ( rendered , is ( test [ 1 ] ) )
assertThat ( testOutcome . get ( ) . getTitle ( ) , is ( "Should do this" ) )
assertEquals ( "#VALUE!" , A1 . getCellData ( ) . getFormatText ( ) )
Assert . assertEquals ( newSubscription . getInvitedBy ( ) , membership . getInvitedBy ( ) )
assertEquals ( "1..10\n" , sw . toString ( ) )
Assert . assertEquals ( "Link: <http://example.com/things>; rel=\"next\"" , affordance . toString ( ) )
assertArrayEquals ( data , baos . toByteArray ( ) )
assertEquals ( 0 , settings . getSysColor ( ) )
Assert . assertEquals ( 1 , obss . size ( ) )
Assert . assertEquals ( 0L , actualResult )
TestCase . assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertTrue ( "Parameter was " + result + " instead of username" , "username" . equals ( result ) )
assertEquals ( HttpStatus . SC_OK , response . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( HttpStatusCodes . NOT_ACCEPTABLE . getStatusCode ( ) , response . getStatusLine ( ) . getStatusCode ( ) )
validator . assertValid ( value )
assertEquals ( expected , e . setVariable ( "x" , x ) . evaluate ( ) , 0.0 )
assertTrue ( result . equals ( Arrays . asList ( "d" , "c" , "b" , "a" ) ) || result . equals ( Arrays . asList ( "d" , "b" , "c" , "a" ) ) )
assertEquals ( ( int ) 8 , result . getIntValue ( ) )
Assert . assertEquals ( "right clicked" , ( new Element ( "//div[@id='content']" ) ) . getText ( ) )
Assert . assertTrue ( JexlASTHelper . equals ( one , two ) )
assertTrue ( acl . hasPermission ( authenticationToken , Hudson . READ ) )
Assert . assertEquals ( "AIAIAIAIAIAIA" , s )
assertEquals ( "<a><b><d>1</d><d>2</d><d>3</d></b></a>" , projector . asString ( emptyProjection ) )
assertNull ( MCRHIBConnection . instance ( ) . getSession ( ) . get ( MCRACCESS . class , new MCRACCESSPK ( permission , objID ) ) )
assertEquals ( .875d , mdd . calculate ( series , tradingRecord ) , TATestsUtils . TA_OFFSET )
assertEquals ( result . getContent ( ) , Subscribe_msg )
assertEquals ( "{\"d\":{\"__metadata\":{\"id\":\"" + getEndpoint ( ) + "Employees('3')\"," + "\"uri\":\"" + getEndpoint ( ) + "Employees('3')\",\"type\":\"RefScenario.Employee\"," + "\"content_type\":\"image/jpeg\",\"media_src\":\"Employees('3')/$value\"," + "\"edit_media\":\"" + getEndpoint ( ) + "Employees('3')/$value\"}," + "\"Age\":56,\"EntryDate\":null," + "\"ne_Team\":{\"__deferred\":{\"uri\":\"" + getEndpoint ( ) + "Employees('3')/ne_Team\"}}}}" , getBody ( response ) )
MatcherAssert . assertThat ( Tracee . getBackend ( ) . copyToMap ( ) , hasEntry ( "testId" , "TestValueFromRemoteEndpoint" ) )
assertEquals ( getFormatter ( ) . toString ( ) , "Pad('Y',5,'-')" )
this . assertGet ( "policytemplates/http%253A%252F%252Fplain.winery.opentosca.org%252Fpolicytemplates/PolicyWithIcon_w1-wip1/appearance" , "entitytemplates/policytemplates/visualappearance_icon.json" )
assertTrue ( anc . isEmpty ( ) )
assertMatchIs ( matcher , false )
assertThat ( result , is ( Optional . empty ( ) ) )
assertTrue ( Pattern . matches ( "(?s).*<html>\\s*<head>\\s*<title>\\s*autocomplete.jsp\\s*</title>\\s*</head>\\s*<body>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"a\"\\s*type=\"password\"\\s*name=\"a\"\\s*value=\"\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"b\"\\s*type=\"password\"\\s*name=\"b\"\\s*autocomplete=\"off\"\\s*value=\"\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"c\"\\s*type=\"password\"\\s*name=\"c\"\\s*value=\"\"/>\\s*autocomplete\\s*on\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"d\"\\s*type=\"text\"\\s*name=\"d\"/>\\s*autocomplete\\s*off\\s*.*\\s*attribute\\s*rendered:\\s*<input\\s*id=\"e\"\\s*type=\"text\"\\s*name=\"e\"\\s*autocomplete=\"off\"/>\\s*no\\s*autocomplete\\s*defined\\s*.*\\s*no\\s*attribute\\s*rendered:\\s*<input\\s*id=\"f\"\\s*type=\"text\"\\s*name=\"f\"/>\\s*</body>\\s*</html>.*" , page . asXml ( ) ) )
assertNotEquals ( right , left )
Assert . assertNull ( result )
assertions . isNotGreaterThan ( 2 )
assertThat ( text ( contents ) , is ( "\"a\",\"b\"\r\nA,B\r\n" ) )
assertEquals ( filterClause , " AND \"fieldName\" = 3" )
assertEquals ( json , BsonCodec . bsonObjectToJsonObject ( bson ) )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( "SELECT 3 + 5;" , text )
assertFalse ( cli . isConnected ( ) )
assertNotNull ( registry . createConsumer ( i ) )
Assert . assertEquals ( subject , service . getAuthenticationFromToken ( privateKeyJWT . getClientAssertion ( ) . serialize ( ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , testName + "_diff" ) )
Assert . assertNull ( mLB . getLoadBalancerUsage ( ) )
assertEquals ( new FilterCoefficients ( pythonB , pythonA ) , coeffs , 1e-3 )
assertEquals ( 0 , admin . getTransactions ( ) . size ( ) )
assertEquals ( "1 a 2 3\n" , found )
assertEquals ( expected , x )
assertEqualsWithoutWhiteSpaces ( "difference() {rotate([10,20,30]) difference() {(model1) (model2)} (model3)}" , difference )
assertFF4j . assertThatFeatureFlipped ( "D" )
assertEquals ( Collections . singleton ( michael ) , group . getPersons ( ) )
Assert . assertEquals ( 3 , size )
assertEquals ( 0.0 , c . getFitness ( ) , 0.001 )
assertNotNull ( head )
assertEquals ( 0 , bytes . readRemaining ( ) )
Assert . assertEquals ( "${missing}" , readProperties ( basedir ) . get ( "custom" ) )
assertEquals ( "void f(void* target, void* p0) {\n" + "    struct f_0001_0001 {int m0;};\n" + "    struct f_0001_0000 {int m0;};\n" + "    struct f_0001 {struct f_0001_0000 m0;struct f_0001_0001 m1;};\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\n" + "}\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertEquals ( null , file . get ( "key" ) )
assertTrue ( set . contains ( m_libraryName ) )
assertTrue ( Arrays . equals ( s , multiEntry ) )
assertThat ( pgpSignedMessage . verify ( getPublicKey_5763950D ( ) ) , is ( true ) )
assertEquals ( "read_string of size 1" , "" , stream . read_string ( ) )
assertEquals ( "Processed: " + message , out )
assertThat ( result , is ( nullValue ( ) ) )
assertThat ( serverHelper . establishedServerSession . getCipherSuite ( ) , is ( CipherSuite . TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 ) )
assertEquals ( "[{\"name\":\"table 1\",\"pkPolicy\":\"user_generated_value\",\"fields\":[{\"name\":\"id\",\"type\":\"string\",\"isPrimaryKey\":true},{\"name\":\"column 1\",\"nullable\":true}]}]" , content )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
Assert . assertEquals ( "Charset " + entry . getKey ( ) + " impl broken" , expectedString , actualString )
assertEquals ( expectedMessage , actualMessage )
assertNull ( pointSymbolizer . getGraphic ( ) )
assertArrayEquals ( new int [ ] { 0 } , ArraysUtil . quickSortP ( target ) )
assertTrue ( isValid )
assertNotNull ( result )
files . assertIsDirectoryNotContaining ( INFO , actual , JAVA_SOURCE_PATTERN )
assertThat ( total , is ( 24 ) )
assertThat ( axioms . isEmpty ( ) , is ( true ) )
assertThat ( connection . getConnectTimeout ( ) , is ( 0 ) )
assertThat ( subject . getFilename ( ObjectType . MNTNER ) , is ( "ripe.db.mntner" ) )
assertEquals ( " --vanilla " , rProcessStartUpOptions . getStartUpOptionsAsCommand ( ) )
Assert . assertNotNull ( cookie . getExpiryDate ( ) )
assertEquals ( expected , query . n1ql ( ) )
assertEquals ( "String" , decl . getTypeImage ( ) )
connection . assertBufferEndsWith ( "Sum of high and low must be over 42!" + Config . getLineSeparator ( ) )
assertTrue ( "Oh, validation was successful without any warnings." , result == GUIInvokerResult . WARNING )
assertTrue ( capacity . allowsWorking ( ) )
Assert . assertEquals ( d2 , d , 0 )
assertEquals ( expectedValue , expression . evaluate ( record ) )
assertEquals ( lastValue , "EndNode1" )
assertEquals ( 2 , rte . getSentenceIndex ( ) )
assertTrue ( entity . getId ( ) > 0L && entity . getSex ( ) == null )
assertThat ( frank . accessibilityCheck ( ) , is ( true ) )
assertEquals ( Collections . emptyMap ( ) , gaz . getAdditionalData ( HELLO ) )
assertEquals ( "abcdefghijklmnopqrstuvwxyzXYZ" , x )
assertEquals ( TranspositionTableStatus . sufficientSeedMoveList , eval . status )
Assert . assertEquals ( vector . magnitudeSquared ( ) , 300 , 1 )
assertThat ( selected [ 0 ] , is ( editableInfo ) )
assertTrue ( "Cassandra ordering is not preserved" , compare < 0 )
assertGalleryDetail ( gallery )
assertEquals ( ImportConfirmAction . STATUS , action . execute ( ) )
assertTrue ( IQSyntacticEquivalenceChecker . areEquivalent ( optimizedQuery , expectedQuery ) )
assertEquals ( languagesSeperatedByComma , elementsJoined )
assertThat ( "response contains a non-empty fullName" , StringUtils . isNotBlank ( response . getFullName ( ) ) )
assertThat ( count , is ( 1L ) )
assertThat ( target . parse ( ) , is ( false ) )
assertThatSql ( query , is ( "SELECT nodes.col1, nodes.col2 FROM table1 AS nodes INTERSECT ALL SELECT edges.col3, edges.col4 FROM table2 AS edges" ) )
Assert . assertEquals ( value , 600.0 )
assertEquals ( JSON , json )
Assert . assertEquals ( new Long ( Long . MAX_VALUE ) , _c . convert ( "9223372036854775807" ) )
assertEquals ( expected , actual )
assertThat ( fetchedUuid , is ( equalTo ( uuid ) ) )
assertNotNull ( handler . getSchemaLocation ( "http://cxf.apache.org/binding/coloc" ) )
assertOut ( "do\n  a++;\nwhile (a > b);" )
assertFalse ( valid )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 08" ) )
tester . assertInfoMessages ( "Username and password are correct!" )
assertOut ( "var /** @type {Array.<string>} */ a = new (org.apache.royale.utils.Language.synthVector('String'))('Hello', 'World')" )
assertThat ( mean , is ( 2.0 ) )
assertEquals ( expected , sendAndCaptureBatch ( batch ) . getPoints ( ) . get ( 0 ) )
Assert . assertEquals ( "SELECT CURDATE();" , text )
assertEquals ( expected , actual )
Assert . assertTrue ( "Incorrect renderer supplied" , getWebXmlRenderer ( component ) instanceof WButtonRenderer )
assertEquals ( "Message: [some.value]" , ResponseBodyInterpolator . interpolate ( "Message: [some.value]" , req ) )
Assert . assertEquals ( protocolo , consultaRetorno . getProtocolo ( ) )
assertEquals ( "bla" . hashCode ( ) + 31 , ( new ProjectCouch ( "1" , "1-234" , "bla" ) ) . hashCode ( ) )
assertTrue ( result . length ( ) > 0 )
Assert . assertNull ( filteredMap )
assertEquals ( "Generated inclusion term should match 'term'" , inclusionTerms . get ( 0 ) , "term" )
assertNotNull ( testCollection )
Assert . assertTrue ( validator . validSequence ( 1 , inputSequence , outcomesSequence , outcome ) )
assertEquals ( "-RL_mKk0GQ==" , KeyPairUtil . base64UrlEncode ( data ) )
assertEquals ( salmon , parsed . get ( KEY_STREAMED ) )
assertThat ( subStr . contains ( testString , testSubString ) , is ( false ) )
assertTrue ( equal )
assertTrue ( subject . isLoadSettings ( ) )
assertEquals ( 1 , rules )
assertThat ( "cron is not null" , cron != null )
assertThat ( result , contains ( v_131 , v_132 , v_133 , v_121 , v_122 , v_11 ) )
lists . assertEndsWith ( description , actual , null )
scope . assertMetrics ( TestHelper . constructDatum ( "name" , StandardUnit . COUNT , 3.0 , 2.0 , 5.0 , 2 ) )
assertEquals ( NoProcessorsWroManagerFactory . class , actual . getClass ( ) )
assertSendBodyReceivesCorrectPayload ( new ByteArrayInputStream ( data ) , expectedBody )
assertEquals ( 204 , response . getStatus ( ) )
assertTrue ( isEqual )
assertEquals ( "Hello" , ( ( BizExceptionNoDefaultConstructor ) read ) . getMessage ( ) )
assertEquals ( "foo" , result )
assertThat ( b . getValue ( ) , equalTo ( "Value" ) )
Assert . assertEquals ( 27. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 3 ) , route ) , 0.01 )
Assert . assertNotNull ( tx . ready ( ) )
assertPorts ( "specific-ports" , 1 + offset , 5 + offset , 6 + offset )
Assert . assertFalse ( ret . isEmpty ( ) )
Assert . assertFalse ( "Authenticated" , authenticated )
assertEquals ( message , MessageType . CON , receivedMessage . getMessageType ( ) )
assertNotNull ( typeList )
assertEquals ( 4 , count )
assertTrue ( Collections . nonNullElementsIn ( c ) . isEmpty ( ) )
assertSame ( expected , toTest . asStream ( ) )
assertDirectories ( fsRootPath , new File ( fsRootPath , "custominternaldir" ) , new File ( fsRootPath , "custominternaldir/logs" ) , new File ( fsRootPath , "custominternaldir/jarCache" ) )
assertEqualHQL ( "allen OR AGE" , sb . toString ( ) )
assertEquals ( 3 , entriesBeforeRemove . size ( ) )
assertNotNull ( result )
Assert . fail ( "Should have thrown exception" )
assertEquals ( displayer . isRefreshOn ( ) , true )
assertEquals ( "Translation failed" , UnavailableException . class , pelopsException . getClass ( ) )
assertEquals ( 200 , page . getWebResponse ( ) . getStatusCode ( ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertThat ( new String ( decrypt ) , is ( TEST_STRING ) )
assertEquals ( "dois decilh玫es de inteiros" , actual )
assertIsOnlyOneElementWithDetails ( elements , "div" , "d1" , "clz" )
assertThat ( actual , is ( equalTo ( expected ) ) )
Assert . assertTrue ( future . get ( 200 , TimeUnit . MILLISECONDS ) )
assertEquals ( params , params . clone ( ) )
context . assertEquals ( ERROR , replyBody . getString ( STATUS ) )
assertNull ( conf . get ( MRJobConfig . MAPREDUCE_JOB_CREDENTIALS_BINARY ) )
assertNull ( value )
assertNotSame ( originalClass , copiedClass )
assertNonNullTaint ( taintedInt )
assertEquals ( "http://gatherer.wizards.com/Handlers/Image.ashx?multiverseid=94&type=card" , testCardList . get ( 0 ) . getImageUrl ( ) )
assertNotNull ( getLoggingContextHostnameProperty ( ) )
assertEquals ( "Hello Camel Rocks" , response )
assertFalse ( fixture . hasSubscriptionId ( ) )
assertTrue ( matcher . match ( msg , rule ) )
assertEquals ( expecting , found )
assertEquals ( "geo point mapper serialization is wrong" , expected , actual )
assertEquals ( in , out )
assertTrue ( v instanceof PactString )
Assert . assertEquals ( 6 , doc . get ( new Path ( "test.arr" ) ) . size ( ) )
assertNotNull ( object )
assertThat ( filled , is ( "/clients/my/path/to/file" ) )
Assert . assertEquals ( word , d_dict . sequence ( i ) )
assertResult ( 0 )
assertThat ( markdown , containsString ( tableEntry ( "`simpleArray`" , "array of " + linkTo ( "Simple Object" , "#simple-object" ) , "An array" ) ) )
assertThat ( cut . apply ( pageObject ) , is ( false ) )
assertEquals ( Status . FAILED , result . getStatus ( ) )
assertThat ( "null should be replaced" , set , hasSize ( 0 ) )
Assert . assertTrue ( checkForSymbolicLink ( target ) )
Assert . assertEquals ( CheckResult . TIMEOUT , checkResult )
assertEquals ( "limit=10" , query . toString ( ) )
Assert . assertEquals ( expectedPeriod , period )
assertEquals ( 0 , compare )
assertTrue ( GenericTypeReflector . equals ( expected , ClassUtils . getCommonSuperType ( Arrays . asList ( t1 , t2 ) ) ) )
assertEquals ( " Actual doesn't match with expected. " , new Integer ( 0 ) , new Integer ( cs . getRow ( ) ) )
assertEquals ( "[INFLECTEDFORM121, INFLECTEDFORM122]" , Arrays . toString ( state . toFinalString ( null ) ) )
assertThat ( calvalusProcessor . getTitle ( ) , equalTo ( "dummyProcessorName" ) )
assertFalse ( hasPermission )
Assert . assertNotNull ( result )
context . assertNotNull ( ip )
assertFalse ( loader . load ( "scrypt" , true ) )
assertEquals ( 200 , response . getStatusLine ( ) . getStatusCode ( ) )
assertNotNull ( down . getException ( ) )
assertEquals ( "Deltas do not match" , deltaBefore , deltaAfter )
Assert . assertFalse ( dataVersion . equals ( other ) )
assertAnnotationCompletions ( "@Value(value=\"${data.prop2}\"<*>)" , "@Value(value=\"${else.prop3}\"<*>)" , "@Value(value=\"${spring.prop1}\"<*>)" )
Assert . assertEquals ( IRestConnection . defaultApiEndpoint , restConnection . getBaseUrl ( ) )
assertEquals ( expResult , result )
assertEquals ( 1 , filteredTables . size ( ) )
assertThat ( digit , matchesRegularExpression ( "[0-9]" ) )
assertNull ( result )
context . assertIsSatisfied ( )
assertEquals ( "1 value1 value2\n\n" , drl )
assertThat ( arguments . getResources ( ) , hasSize ( 1 ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
Assert . assertEquals ( 2L , this . sqlgGraph . traversal ( ) . E ( ) . count ( ) . next ( ) , 0 )
Assert . assertNull ( userId )
Assert . assertEquals ( "branch1" , Iterables . get ( branches , 0 ) )
assertThat ( errors , not ( hasFieldErrors ( "givenName" ) ) )
assertEquals ( 3 , result . intValue ( ) )
assertTrue ( StoreParams . sameValues ( p , pLoc ) )
assertEquals ( Arrays . asList ( "ok" ) , list )
assertTrue ( response . getGeneratedKeys ( ) . size ( ) == 5 )
assertEquals ( 2 , saga . getState ( ) )
assertFalse ( server . isAlive ( ) )
assertEquals ( new Integer ( 1 ) , cf . getSegmentQualPos ( ) )
arrays . assertEndsWith ( description , actual , sequence )
assertThat ( "pattern=" + pattern + " matches string=" + string , pattern . matches ( string ) , is ( false ) )
assertEquals ( jq ( ".zswidget-chart" ) . length ( ) , 1 )
assertions . isNullOrEmpty ( )
assertEquals ( combinationsExpected , result )
Assert . assertTrue ( testBean . getResult ( new MockObject ( true ) ) )
assertNotNull ( Deencapsulation . getField ( job , "jobClient" ) )
Assert . assertTrue ( Math . abs ( now . getTime ( ) - n . getTime ( ) ) < 500 * 1000 )
assertEquals ( description , male1 . getDescription ( ) )
Assert . assertNotNull ( accounts )
assertTest1 ( )
TestUtils . assertEquals ( interesado , interesadoModificado )
Assert . assertEquals ( Integer . class , clazz )
assertEquals ( "Wrong number of warnings detected." , 3 , warnings . size ( ) )
assertEquals ( 0 , tasks . size ( ) )
assertEquals ( filemask , instance . getFilemask ( ) )
assertThat ( "event with empty header" , event , nullValue ( ) )
Assert . assertTrue ( errors . hasFieldErrors ( "brandName" ) )
assertThat ( transformed , equalTo ( tableAsString ) )
assertEquals ( expected , actual )
assertThat ( $ . url ( ) , endsWith ( "WithoutJSTest_2.html?aName=aValue" ) )
assertEquals ( value , returned )
assertTrue ( matcher . matches ( context ) )
assertTrue ( objects . contains ( object . name ( ) , withoutContext ( ) ) )
compiler . assertErrorsOnLines ( "example/Test.java" , diagnostics , 6 , 7 )
assertEquals ( expected , actual )
assertTrue ( setCommands . isMember ( NAMESPACE1 , key1 , message1 ) )
Assert . assertTrue ( responses . size ( ) == 40 )
Assert . assertEquals ( "hello" , bean . hello ( ) )
assertEquals ( input , output )
assertEquals ( "浣�濂�" , firstStatus . getText ( ) )
assertTrue ( drl . contains ( "timer (cron:0/5 * * * * ?)" ) )
assertThat ( xmlResult , CompareMatcher . isSimilarTo ( out . toString ( ) ) . ignoreWhitespace ( ) . withNodeMatcher ( new DefaultNodeMatcher ( ElementSelectors . byNameAndText ) ) )
assertTrue ( "Failed to match with compatible IPv6 address." , match )
assertEquals ( Collections . singletonList ( author3 ) , docEntry . getAuthors ( ) )
assertTrue ( status . isOk ( ) )
assertEquals ( withLabel , pd1 )
assertTrue ( Files . isDirectory ( other ) )
assertEquals ( expected , result )
assertThat ( duration . minus ( Duration . ofMillis ( 1300 ) ) , equalTo ( TimeDuration . ofSeconds ( - 0.5 ) ) )
Assert . assertTrue ( "Should be displaying an error page" , driver . getPageSource ( ) . contains ( ERROR_STRING ) )
assertNotEquals ( b2a , b2b )
Assert . assertTrue ( tags . size ( ) >= 1 )
assertThat ( sb . toString ( ) , is ( "1,2" ) )
assertEquals ( DataStatus . VOID , empty . getStatus ( ) )
assertTrue ( visitor . matching )
assertEquals ( "a        - desc" + System . lineSeparator ( ) + "b        - desc" , output . toString ( ) . trim ( ) )
Assert . assertArrayEquals ( TEST_BYTES1 , copyArray )
assertTrue ( hrip . compareTo ( hric ) > 0 )
assertEquals ( item . getType ( ) , result )
assertNotNull ( "First gene exists and it must be returned" , gene )
assertThat ( result , is ( "123" ) )
assertSame ( row , rowSet . getRowWait ( 1 , TimeUnit . SECONDS ) )
assertNotNull ( processInstance )
assertSame ( url2 , url1 )
assertEquals ( "001" , this . banco . geraCodigoDeBarrasPara ( this . boleto ) . substring ( 0 , 3 ) )
runner . assertNotValid ( service )
assertThat ( cal , instanceOf ( Calendar . class ) )
Assert . assertTrue ( cmd . apply ( bkFlags , new String [ ] { } ) )
assertNotNull ( regions )
assertEquals ( factor * index , sum )
assertObjectEquals ( "{type:'array',items:{type:'array',items:{type:'integer',format:'int32'}}}" , s . getSchema ( Simple2dList . class ) )
assertSame ( fieldVar , result )
assertEquals ( false , result )
assertEquals ( "6 jam yang lalu" , t . format ( new Date ( 0 ) ) )
Assert . assertNotNull ( asiento )
assertEquals ( "foo" , result )
assertTrue ( tasks . size ( ) == 10 && tasks . get ( 0 ) . getId ( ) == 5 && tasks . get ( tasks . size ( ) - 1 ) . getId ( ) == 50 )
Assert . assertFalse ( irodsFile . exists ( ) )
Assert . assertEquals ( "hello from anonymous POJO" , result )
assertEquals ( mockedListener , actualListener )
assertTrue ( defaultInstance == AuditDurationImpl . defaultInstance ( ) )
assertTrue ( model . getGroups ( ) . isEmpty ( ) )
assertFalse ( PojomatorFactory . makePojomator ( Simple . class ) . doEquals ( instance , null ) )
Assert . assertEquals ( password , expected , computed , 0.000000000000001 )
assertEquals ( path , "/Users/anyang/Desktop/jacoco/sum/jboss-5.0.1.GA\\rasp\\..\\bin\\run.bat" )
assertNotNull ( solver )
assertEquals ( filteredValues , output )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Siprec>" + "<Parameter name=\"name\" value=\"value\"/>" + "</Siprec>" , elem . toXml ( ) )
assertTrue ( response . getPersonInformationStructure ( ) . isEmpty ( ) )
assertThat ( effect , is ( 1 ) )
assertSame ( expected , result )
Assert . assertEquals ( "selenium.open(\"login.html\",\"\");" , result )
assertEquals ( Arrays . asList ( 5 ) , numbers )
assertEquals ( hash , "" )
assertThat ( testOutcome . getSuccessCount ( ) , is ( 3 ) )
assertEquals ( actual . getSchemaDependencies ( ) . get ( "foo" ) , TrueSchema . builder ( ) . build ( ) )
assertEquals ( svgResource , defaultEditorAdapter . getTitleSVGImage ( ) )
Assert . assertNotNull ( registry )
Assert . assertEquals ( 30 , count )
assertEquals ( uri . toString ( ) , expected )
assertEquals ( dir , repo . getDirectory ( ) )
assertions . isNotLessThan ( expected )
assertEquals ( expectedScript , observedScript )
assertNotNull ( taskService . createTaskQuery ( ) . taskDefinitionKey ( "userTask2" ) . singleResult ( ) )
assertTrue ( share . toString ( ) . contains ( "133" ) )
assertThat ( testee . getBeanValue ( ) , is ( "testing with stress : 09" ) )
assertEquals ( 28 , cal . get ( Calendar . DATE ) )
assertEquals ( signInUser . getUsername ( ) , user . getUsername ( ) )
assertEquals ( 1000.0 , vRoute . getDepartureTime ( ) , 0.01 )
assertThat ( violations . size ( ) , is ( 0 ) )
Assert . assertEquals ( mysqlAffectRow , andorAffectRow )
Assert . assertEquals ( Boolean . TRUE , JsfUtils . isNewMessage ( existingFacesMessage , messageToCheck ) )
Assert . assertEquals ( "[Key1, Key2]" , resultList . toString ( ) )
assertEquals ( goldenResponse , responseObserver . firstValue ( ) . get ( ) )
assertEquals ( null , actual . getDisplayName ( ) )
assertEquals ( "3" , r )
context . assertIsSatisfied ( )
Assert . assertTrue ( FastMath . abs ( error ) > 0.1 )
assertEquals ( NOT_DECODED , object , new CoordTransform ( decoder ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numSlices , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertEquals ( expected , actual )
assertEquals ( expected , key . toString ( ) )
assertInRange ( b , BigInteger . ZERO , limit )
assertEquals ( 0 , aNumber . bitCount ( ) )
assertThat ( restService . getSearchHandler ( "v1/order" , parameters ) , is ( nullValue ( ) ) )
assertMessages ( "println" , 1 , "print_printf_locale" )
assertNotEquals ( pan1 , pan2 )
assertThat ( context . getFile ( "test" ) . getCanonicalPath ( ) , containsString ( ".............../001.test.gz" ) )
assertTrue ( model . containsAttribute ( "remoteApi" ) )
Assert . assertNotNull ( searchDashlet )
assertEquals ( "SELECT g1.e2 FROM g1 WHERE g1.e1 = 'a\\'b\\\\c'" , sqlVisitor . toString ( ) )
assertDatasetOk ( ds )
assertEquals ( evt , EventHelper . extract ( any ) )
assertTrue ( "basicInterval1 should be less than basicInterval2." , bstc . compare ( basicInterval1 , basicInterval2 ) < 0 )
assertEquals ( 200 , response . getStatus ( ) )
Assert . assertEquals ( ECHO_STRING , outMessage )
assertArrayEquals ( objects , recordList . toArray ( ) )
assertEquals ( expected , result , .000001 )
assertTrue ( requestOk )
assertTrue ( v8 . getBoolean ( "caught" ) )
assertThat ( sentGetRequest ( "http://127.0.0.1:19000/api/job/events/executions" ) , is ( GsonFactory . getGson ( ) . toJson ( new JobEventRdbSearch . Result < > ( 0 , Collections . < JobExecutionEvent > emptyList ( ) ) ) ) )
assertNotNull ( dw . getAndTag ( mongoQuery ) )
Assert . assertEquals ( "Value is incorrect" , map ( DATE_TIME_1_STRING , "test" ) , value )
Assert . assertEquals ( "SELECT 3 * 5;" , text )
assertions . isNotEqualByComparingTo ( actual )
assertEquals ( 1 , findings . size ( ) )
assertEquals ( "Locator is initialized" , FileLocatorUtils . fileLocator ( ) . create ( ) , fileLocator )
assertEquals ( "Select statement with qualified field names" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
Assert . assertEquals ( expectedValue ( ) , copy . evaluate ( testArray ) , getTolerance ( ) )
assertEquals ( expectedJavaHome , actualJavaHome )
assertOneSpan ( )
assertEquals ( tail . getMissing ( 6 ) , new HashSet < Long > ( Arrays . asList ( 3l , 4l , 5l ) ) )
assertEquals ( 0 , app . executeApplication ( args ) )
assertTrue ( parameters . doHelp ( ) )
assertEquals ( new JSONArray ( "[\"a\",\"b\",\"c\"]" ) . toString ( ) , obj . getJSONArray ( "arrayDefault" ) . toString ( ) )
assertEquals ( op , DeviceOperations . DEVICE_OPERATION_TWIN_UPDATE_REPORTED_PROPERTIES_RESPONSE )
assertEquals ( "select cat_\nfrom Cat cat_\n  inner join cat_.mate on cat_.mate.alive" , serializer . toString ( ) )
assertEquals ( getSettings1 , getSettings1Duplicate )
assertEquals ( f . getCanonicalPath ( ) , new Parser ( "http:" + f . getCanonicalPath ( ) ) . getDirectory ( ) . getAbsolutePath ( ) )
Assert . assertEquals ( resultExpected , result )
Assert . assertEquals ( 10 , result . size ( ) )
arrays . assertContainsExactlyInAnyOrder ( info , actual , arrayOf ( 'a' , 'c' , 'b' ) )
assertResultSet ( res )
assertSame ( expected , actual )
assertThat ( representation . getName ( ) , is ( "attachment" ) )
Assert . assertEquals ( "select STUDENT.ID,STUDENT.NAME,STUDENT.SCHOOL from student group by STUDENT.NAME asc ,STUDENT.ID asc ,STUDENT.SCHOOL asc " , getSql0 ( node ) )
assertEquals ( "" , result )
assertThat ( PrettyTime . of ( Locale . FRANCE ) . print ( dur , TextWidth . WIDE , true , 8 ) , is ( "1 jour, 0 heure, 4 minutes, 0 seconde et 123 microsecondes" ) )
assertEquals ( p . parse ( "-1/2*3/5*9*9/3^2/4/6*7 + 1^2/3 - 3 - 2*3*5/8*9/6*9/3^2/4*7*6^2" ) , new Rational < > ( Z , Z . valueOf ( - 85879 ) , Z . valueOf ( 240 ) ) )
assertEquals ( "\"\"" , builder . toString ( ) )
assertTrue ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
Assert . assertEquals ( 16 , i )
assertThat ( result , is ( jsonBoolean ( false ) ) )
assertEquals ( DummyDrawHandler . drawCircleToString ( 10 , 10 , 10 , null , null , null , null ) , drawHandler . getLastDrawCall ( ) )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertTrue ( newSize > storeSize )
assertEquals ( 1 , externalTasks . size ( ) )
assertEquals ( "at 16:00:00pm, on the 2nd day in March, May and December" , descriptor . describe ( cron ) )
assertFalse ( settings . checkRestrictionWithGET ( "http://example.net" ) )
assertThat ( retrieveSize , is ( numberOfPipelines ) )
Assert . assertEquals ( "stuff and some more stuff" , result )
assertTrue ( actual . isEmpty ( ) )
assertEquals ( "Failed to generate if-else-if-else block using no rhs" , IF_ELSEIF_ELSE_BLOCK_NO_RHS_NESTED , s )
assertThat ( result . statusCode , is ( Response . OK ) )
assertThat ( this . library . getClassLoaderFactory ( ) , is ( ComponentLibrary . DEFAULT ) )
assertEquals ( expected , actual )
assertMockEndpointsSatisfied ( )
Assert . fail ( "Was able to set properties when referencing sensitive parameter from within EL" )
assertEquals ( expectedResult , result )
mock . assertIsNotSatisfied ( )
assertEquals ( "Test if value red from file equals value stored" , mlDouble , mlArrayRetrived )
assertEquals ( "" , val )
assertEquals ( expectedNames , actualNames )
Assert . assertTrue ( isEqual ( d1 , d2 ) )
assertEquals ( this . view , view )
assertEquals ( HouseColor . BLUE , house . getHouseColor ( ) )
Assert . assertTrue ( IntrospectUtil . hasCollectionType ( typeClass ) )
assertOut ( "/**\n * @export\n * @param {number} p1\n * @param {number} p2\n * @param {number=} p3\n * @param {number=} p4\n * @return {number}\n */\n" + "foo.bar.RoyaleTest_A.prototype.method1 = function(p1, p2, p3, p4) {\n" + "  p3 = typeof p3 !== 'undefined' ? p3 : 3;\n" + "  p4 = typeof p4 !== 'undefined' ? p4 : 4;\n" + "  return p1 + p2 + p3 + p4;\n}" )
assertThat ( db1 , is ( not ( sameInstance ( db2 ) ) ) )
assertEquals ( "{22=a, 11=bb, 231=cc, 1231=cc}" , res . toString ( ) )
assertions . startsWith ( sequence )
assertNotPresent ( session , RETIRED_STATE )
assertEquals ( "param1=" , encodedParams )
assertEquals ( Boolean . TRUE , result )
Assert . assertEquals ( "2008|骞�|搴�|��|浜�|璧���|��" , words )
assertTrue ( rule . isVersionValid ( null ) )
assertThat ( found , equalTo ( expected ) )
assertEquals ( "http://example.com/fhir/Patient?_revinclude=Provenance%3Atarget&_format=json" , capt . getValue ( ) . getURI ( ) . toString ( ) )
assertEquals ( 1 , Owner . count ( ) )
assertNotNull ( register )
assertThat ( ( Long ) ms . get ( "aaa" ) , is ( 1L ) )
Assert . assertTrue ( lastElementIsSame ( store , new WeightedObservedPoint ( w , x , y ) ) )
assertNotNull ( password )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Task priority=\"1\" timeout=\"1\">body</Task>" , elem . toXml ( ) )
assertEquals ( expected . build ( ) , doc )
Assert . assertEquals ( "The spanish fox" , shell . expandVariableSubstitutes ( "The ${hiveconf:origin} fox" ) )
JSONAssert . assertEquals ( expected , result . getResponse ( ) . getContentAsString ( ) , false )
Assert . assertEquals ( expected , udf . evaluate ( args ) )
Assert . assertEquals ( gen . generateInchi ( ac ) . getInChI ( ) , "InChI=1S/Cl/i1+2" )
Assert . assertTrue ( returnT . getCode ( ) == ReturnT . SUCCESS_CODE )
Assert . assertNotNull ( trainer . train ( eventStream ) )
assertEquals ( book , otherBook )
Assert . assertNotNull ( registerResponse )
Assert . assertEquals ( defaultProducts . length - 1 , selector . getProductCount ( ) )
assertEquals ( expected , service . getSignatureMethod ( ) )
assertNotNull ( resultMap )
Assert . fail ( "GMException should have been thrown." )
assertAccessorsCorrect ( collapsible , "margin" , null , new Margin ( 1 ) , new Margin ( 2 ) )
assertThat ( defaultName , is ( "Hillegom (Zuid-Holland, Netherlands)" ) )
assertNotNull ( getEditor ( ) )
assertTrue ( Arrays . equals ( cipherSuites , configurable . getEnabledCipherSuites ( ) ) )
assertEqualDoubleArrays ( pyplus , plus , epsilon )
assertEquals ( "straks" , t . format ( date ) )
Assert . assertEquals ( 2 , elements . size ( ) )
assertThat ( output , containsString ( "Templates found:" ) )
assertEquals ( CodeableConcept . class , roleField . getClass ( ) )
Assert . assertEquals ( job , RandomUtils . nextItem ( jobs , RandomNumberGeneration . getRandom ( ) ) )
assertEquals ( "" , result )
assertEquals ( "High-Performance Java Persistence" , properties . get ( "title" ) . asText ( ) )
assertTrue ( true )
assertMediaFolderEquals ( mediaFolder , newMediaFolder )
assertEqualsWithoutWhiteSpaces ( "(model11)" , testSubject . subModel ( new ScadGenerationContextFactory ( ) . include ( 1 ) . exclude ( 12 ) . create ( ) ) )
assertThat ( converter . toJavaObject ( new Text ( "x" ) ) , is ( ( Object ) "x" ) )
assertEquals ( String . valueOf ( new BigInteger ( String . valueOf ( Integer . MIN_VALUE ) ) ) , bd . toString ( ) )
assertEquals ( "GBP 7.02" , test . toString ( ) )
assertEquals ( " = " , sqlComperator )
assertEquals ( "annotation:hello" , hello )
assertNotNull ( client . create ( Ingredient ) . getId ( ) )
assertEquals ( 0 , messageLatch . getCount ( ) )
assertNotNull ( pais )
assertOut ( "return true" )
assertTrue ( httpRequestMethod . getFollowContentRedirects ( ) )
assertIsAborted ( tx )
assertResultsEqual ( results , 6L )
assertXMLEqual ( new ResourceUtil ( STAR ) . getContent ( ) , sw . getBuffer ( ) . toString ( ) )
Assert . assertNull ( result )
Assert . assertEquals ( person . getId ( ) , ( ( Person ) beanConverter . convert ( null , person . getId ( ) , Person . class , null ) ) . getId ( ) )
assertEquals ( 255 , mask [ indY ] [ indX ] )
assertThat ( sut . getImage ( ) , equalTo ( "bar@sha256:12345" ) )
assertEquals ( 0 , indexEntries . size ( ) )
assertThat ( lastEntry . isAlarm ( ) , is ( true ) )
assertNull ( principal )
Assert . assertEquals ( "�戒�灞�" , words )
assertThat ( testContext , id , isIn ( ids ) )
assertEquals ( WRONG_NUMBER_OF_ANNOTATIONS_PARSED , computeTotalNumberOfWarnings ( createJavaParsers ( ) ) - excludedNumberOfWarnings , annotations . size ( ) )
assertEquals ( "/project/index" , view )
assertThat ( time . getFutureTimeRelativeTo ( timeRelativeTo ) , equalTo ( dateFormat . parse ( "2013-Jan-18 4:55:12.27" ) . getTime ( ) ) )
Assert . assertEquals ( SIMPLE_RETURN_CODE . FAIL , check . getErrorType ( ) )
assertDateEquals ( r , t . plus ( d ) )
assertThat ( result , contains ( "Hel" , "lo " , "wor" , "ld" ) )
assertFalse ( underTest . validate ( "student" , idsToValidate ) . containsAll ( idsToValidate ) )
assertNull ( returnedEntity )
assertNotNull ( p . getTitle ( ) )
assertTrue ( "Included JARs as native dependencies, but shouldn't" , nativeDependencies . isEmpty ( ) )
Assert . isTrue ( true )
assertOut ( "/**\n * @export\n */\nB.prototype.http_$$ns_apache_org$2017$custom$namespace__b = function() {\n  var self = this;\n  function c(f) {\n  };\n  var /** @type {Function} */ f = org.apache.royale.utils.Language.closure(this.http_$$ns_apache_org$2017$custom$namespace__b, this, 'http://ns.apache.org/2017/custom/namespace::b');\n  c(f);\n}" )
Assert . assertEquals ( 12. * 2. , analyser . getVariableTransportCostsAtActivity ( route . getActivities ( ) . get ( 1 ) , route ) , 0.01 )
assertEquals ( 401 , resGetAll . getStatus ( ) )
assertEquals ( expected , result )
assertEquals ( 2 , testParseJsonArray . getValue ( context ) )
assertNotNull ( m . toString ( ) )
assertJson ( "{'values': {'foo': 'bar'}}" , serialize ( bean ) )
assertEquals ( 1 , results . length )
assertTrue ( true )
assertThat ( slider . getValue ( ) , is ( 1.2 ) )
assertTrue ( "The second component of the split panel should be a label" + " containing the text 'Label 2.2'. Actual text: " + labelText , "Label 2.2" . equals ( labelText ) )
Assert . assertEquals ( "[{\"name\":\"name1\",\"age\":1},{\"name\":\"name2\",\"age\":2}]" , str )
assertArrayEquals ( expected , encoder . getEncoded ( ) )
assertEquals ( expResult , result )
assertTrue ( "child not in subtree" , _guide . isInSubtree ( child ) )
assertNotNull ( underTest . validateGroupDoesNotContainItself ( "repositoryUnderTest" , config ) )
assertTrue ( "Entries found: " + entries , entries . isEmpty ( ) )
assertThat ( toUnqualifiedVersionlessIds ( myAppointmentDao . search ( params ) ) , containsInAnyOrder ( patId , apptId ) )
assertNull ( result . get ( RETURN_RESULT ) )
assertRequest ( "POST" , "Conference/%s/Member/%s/Play/" , confId , memberId )
assertIncluded ( node )
assertEquals ( mailboxSize , actor . highest . get ( ) )
assertThat ( datePeriod . toString ( ) , is ( "P4{WEEK_BASED_YEARS}1M" ) )
get ( "" ) . assertSuccess ( )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertThat ( actual , is ( "ABC" ) )
assertTrue ( SpriteUtils . isAliasSprite ( sprite1 , sprite2 ) )
assertThat ( c . body ( ) , is ( equalTo ( "report:<div><a href='http://localhost'>text</a></div>" ) ) )
assertEquals ( 2 , position )
Assert . assertTrue ( pss . toString ( ) . contains ( "<http://example>" ) )
assertEquals ( true , dt1 . intValue ( ) == 10 && dt2 . intValue ( ) == 20 )
assertReflectionEquals ( draft , result )
runner . assertAllFlowFilesTransferred ( ParseSyslog5424 . REL_SUCCESS , 1 )
Assert . assertEquals ( dim . batchSize ( ) , 100 * 200 )
Assert . assertEquals ( OBJECT , clone )
assertThat ( sampledValue . getMeasurand ( ) , equalTo ( measurand ) )
assertEquals ( true , actual )
assertTrue ( lambdaFunctions . size ( ) == 2 )
assertEquals ( testData , result )
assertFalse ( violation )
assertTrue ( message != null )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( "No tests ran." , content )
assertNotNull ( result )
assertOut ( "var /** @type {boolean} */ a = false" )
assertThat ( target . matchExactly ( flow ) , is ( false ) )
assertEquals ( 0 , pageService . findMaxApiPageOrderByApi ( API_ID ) )
assertNull ( MultiParts . getContentType ( paramConfig ) )
assertNotNull ( result )
assertEquals ( 1.0 , Capacity . divide ( cap1 , cap2 ) , 0.001 )
testRunner . assertAllFlowFilesTransferred ( PutParquet . REL_FAILURE , 1 )
assertEquals ( 1 , rules )
assertThat ( response . toString ( ) , is ( "" + "inetnum:        10.0.0.0\n" + "abuse-mailbox:  abuse@me.now\n" ) )
assertObject ( args )
assertTrue ( result . getErrorMessage ( ) , result . isSucceeded ( ) )
assertSame ( authenticated , helperSpy . getAuthObj ( ) )
assertEquals ( "ATS03F=0\r\n" , intArrayToString ( command . serialize ( ) ) )
assertCounterCount ( "Chronozoa" , CounterType . TIME , 1 )
assertEquals ( Arrays . asList ( "A" , "B" , "C" , "D" ) , results )
assertEquals ( "http://pac4j.com:8080/cas/login" , result )
assertNotNull ( result )
assertTrue ( Arrays . equals ( expected , actual ) )
assertEquals ( sc , actualConfig . getSamplerConfiguration ( ) )
Assert . fail ( "Xfdf files are not equal" )
assertEquals ( "foo" , foo . get ( ) )
assertObject ( args )
Assert . assertTrue ( "The test file " + out + " is different from the baseline." , TestFileUtils . compareFileToResource ( out , baseline ) )
assertThat ( query . getEncodedFilter ( ) , is ( encodedFilter ) )
assertSanctionMatched ( match )
Assert . assertNotNull ( chf1 )
assertArrayEquals ( expected , IOUtils . toByteArray ( new ARC4Engine ( ) . encryptStream ( new ByteArrayInputStream ( "ChuckNorris" . getBytes ( StandardCharsets . UTF_8 ) ) , "ABCDE" . getBytes ( StandardCharsets . UTF_8 ) ) ) )
assertObjects ( RoleType . class , NUMBER_OF_GENERATED_EMPTY_ROLES + NUMBER_OF_GENERATED_DUMMY_ROLES + NUMBER_OF_ORDINARY_ROLES )
assertNotNull ( result )
assertNotNull ( result )
Helpers . assertJson ( json . toString ( ) , "{\"key1\":\"value1\",\"key2\":10,\"key3\":true}" )
assertEquals ( 20 , read )
Assert . assertTrue ( "XML are similar " + myDetailedDiff , myDetailedDiff . similar ( ) )
assertEquals ( normalUser , returnedUser . get ( ) )
assertEquals ( "X" , output )
Assert . assertEquals ( new HashSet < String > ( Arrays . asList ( "lea1" , "lea2" , "lea3" ) ) , resolver . findGoverningEdOrgs ( gradebookEntry ) )
assertDtoAndMapConstructorAreSame ( 0 )
assertSame ( t . toLocalTime ( ) , LocalTime . MIDNIGHT )
assertEquals ( "https://api.test.com/myapi?first_name=Humle%2FDumle" , expanded . toString ( ) )
assertEquals ( "test" , echo . echo ( "test" ) )
Assert . assertEquals ( CatalogResponseMessage . OK , response . getCode ( ) )
Assert . assertEquals ( String . format ( DEFAULT_MESSAGE , numThreads , numRows , numCols ) + ", rmse = " + rmse , 0.0 , rmse , EPS )
assertNotNull ( result )
assertTrue ( existingContactPersons . size ( ) == 1 )
assertEquals ( PERFECT , new ClassArrayMatcher ( classes ) . match ( classes ) )
assertEquals ( 12 , jpegBitsPerSample ( "MR2_UNC-JPLL.dcm" ) )
assertThat ( new PullRequestApproval ( Config . builder ( ) . requiredReviewers ( newArrayList ( "user1" , "user2" , "user3" ) ) . requiredReviews ( 1 ) . build ( ) , utils ) . missingRevieiwers ( pr ) . size ( ) , is ( 2 ) )
assertEquals ( "Agents Rebooted" , result )
assertThat ( domain . endsWithDomain ( ciString ( "n.s.0.200.193.193.in-addr.arpa" ) ) , is ( false ) )
assertThat ( converter , instanceOf ( EnumConverter . class ) )
assertEquals ( 4 , ex . getMax ( 4 , 4 ) )
assertEquals ( Content . COMPANY , contentStore . getContent ( ) )
assertEquals ( "Type_factory__j_l_Object__quals__j_e_i_Any_j_e_i_Default" , generated )
Assert . assertNotNull ( antennae )
assertEquals ( expecting , found )
assertEquals ( prettyPrintJson ( readContent ( EXPECTED_ERROR_RESPONSE_WITH_TARGET_PATH ) ) , prettyPrintJson ( json ) )
assertTrue ( organizationResponse . object . getName ( ) . equals ( name ) )
Assert . assertEquals ( 1 , dashboardHistories . size ( ) )
assertNotNull ( connection )
assertFalse ( userCanBuildProject )
assertThat ( randomProxy , instanceOf ( ProxyObject . class ) )
assertEquals ( false , bm . isBitSet ( bitNumber ) )
assertEquals ( "Wrong source" , config , cc . getSource ( TEST_KEY ) )
Assert . assertFalse ( "Stopping a non-existing run should have failed" , pcClient . stopRun ( Integer . parseInt ( PcTestBase . RUN_ID ) ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFileName , cmpFileName , destinationFolder , "diff" ) )
assertEquals ( assertion , test )
assertThat ( subject . shouldProcess ( message ) , is ( false ) )
assertEquals ( "(12 (abc 34))\n" , found )
assertEquals ( Collections . emptyList ( ) , grid . getColumns ( ) )
assertFalse ( filter . shouldInclude ( source , "some.property" ) )
assertEquals ( expected , mergeAclEntries ( existing , aclSpec ) )
ctx . assertEquals ( "password authentication failed for user \"postgres\"" , conn . getMessage ( ) )
assertTrue ( descriptor . isBeanConstrained ( ) )
assertNotNullOrEmpty ( "Questions should never be null." , questions )
assertEquals ( Response . Status . NO_CONTENT . getStatusCode ( ) , resource . deleteConnection ( "Name" ) . getStatus ( ) )
assertEquals ( "Google" , iface . wd . getTitle ( ) )
assertEquals ( "{\"resourceType\":\"Patient\",\"meta\":{\"tag\":[{\"system\":\"scheme\",\"code\":\"term\",\"display\":\"display\"}]},\"identifier\":[{\"system\":\"sys\",\"value\":\"val\"}]}" , enc )
assertFalse ( result . isEmpty ( ) )
Assert . assertThat ( "response.statusCode" , response . getStatusCode ( ) , is ( 200 ) )
assertEquals ( correctAnswer , something )
assertTrue ( topic . getSubscribers ( ) . contains ( user ) )
assertFalse ( existentFile . exists ( ) )
assertFalse ( filter . getExpr ( ) instanceof ExprInfo )
assertEquals ( "name" , cInfo . getName ( ) )
assertThat ( cut . isEmpty ( ) , is ( false ) )
assertThat ( instance . matches ( message , matchers ) , is ( false ) )
assertThat ( other , LocalTimeMatchers . sameSecondOfMinute ( date ) )
Truth . assert_ ( )
assertNull ( polygonSymbolizer . getStroke ( ) )
assertThat ( output ( outputDirectory , outputPath ) , equalTo ( resource ( outputPath ) ) )
assertEquals ( 4 , size )
Assert . assertEquals ( 0L , actual )
assertEquals ( expected , actual )
assertThat ( getterMethod . getReturnType ( ) . getName ( ) , is ( "java.lang.Object" ) )
assertEquals ( 98 , dataCharacter . getValue ( ) )
assertSame ( name + " - mismatched enum values" , expected , actual )
assertEquals ( "(table empty)" , x )
assertEquals ( direct . length ( ) , proxied . length ( ) )
Assert . assertNull ( person . getPersonDateVoided ( ) )
assertEquals ( false , options . isRecursive ( ) )
assertThat ( webServer . getAddress ( ) . getHostName ( ) , equalTo ( "localhost" ) )
assertFalse ( capabilityMatcher . matches ( nodeCapabilities , requestedCapabilities ) )
assertEquals ( text , reply )
assertTrue ( contains ( "jcr:all" , privileges ) )
assertEquals ( "<h1>Head</h1><table><tbody><tr><td>One</td><td>Two</td></tr></tbody></table>" , TextUtil . stripNewlines ( cleanHtml ) )
assertEmptyLinksOk ( linkNames )
assertEquals ( "Not NodeValue.equals()" , nv1 , nv2 )
assertEquals ( node , r . get ( "node" ) )
assertEquals ( "Novy|Nova|home,mobile|home" , mustache . render ( loadJsonData ( ) ) )
assertEquals ( OutputChangeEvent . OUTPUT_EVENT . OUTPUT_ADDED , outputEvent [ 0 ] . getEvent ( ) )
ctx . assertTrue ( asyncResult1 . result ( ) . containsKey ( topicName ) )
assertEquals ( createContainerCaptor . getValue ( ) . getHostConfig ( ) . getMemorySwap ( ) , - 1 )
assertCorrectness ( rowDataset , transformer )
Assert . assertNull ( testSubject . subModel ( new ScadGenerationContextFactory ( ) . exclude ( 11 ) . create ( ) ) )
assertThat ( "each extension should get event" , asList ( pullRequestSubscriber . lastEvent ( ) , throwablePullRequestSubscriber . lastEvent ( ) ) , everyItem ( equalTo ( GHEvent . PULL_REQUEST ) ) )
assertTrue ( "Credentials were supposed to be valid." , jiraTracker . hasValidCredentials ( ) )
assertNotNull ( Balance . fetcher ( "ACXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertEquals ( response . getStatus ( ) , STATUS200 )
assertSame ( element , node . getElement ( ) )
assertEquals ( "Expected 0 results!" , 0 , count )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destFilename , sourceFolder + "cmp_copyFields07.pdf" , destinationFolder , "diff_" ) )
assertSingleGruxAlbum ( build )
assertNotNull ( PhoneNumber . fetcher ( "TRXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" , "PNXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
Assert . assertTrue ( response . getAttachments ( ) . hasNext ( ) )
Assert . assertFalse ( isElementConsented )
Assert . assertEquals ( Either . right ( Optional . < BigDecimal > absent ( ) ) , res )
assertEquals ( "some-file.txt" , result . getName ( ) )
assertEquals ( "test" . hashCode ( ) , id . hashCode ( ) )
Assert . fail ( )
assertThat ( mediums . get ( 0 ) . getPosition ( ) , is ( lessThan ( mediums . get ( 1 ) . getPosition ( ) ) ) )
assertThat ( StringUtils . trimToEmpty ( response . getPayloadAsString ( ) ) , is ( "TEST PAYLOAD" ) )
assertThat ( rendered , is ( "a..\r\n....\r\nb\r\n..c" ) )
assertNull ( newForbid )
assertNull ( route )
assertThat ( plugin . arg , is ( equalTo ( "defaultValue" ) ) )
assertFalse ( "Got a location" , detector . getFileHandler ( ) . isLocationDefined ( ) )
Assert . assertTrue ( InstanceValidationUtil . hasValidConfig ( mock . dataAccessor , TEST_CLUSTER , TEST_INSTANCE ) )
assertFalse ( diskInfo . isPresent ( ) )
assertEquals ( Status . OK , result )
files . assertHasContent ( someInfo ( ) , actual , expected , charset )
assertEquals ( "Testing rho: " , expectedRhoTwoStep , rho , 1E-3 )
assertThat ( pickupTruck , hasProperty ( "model" , equalTo ( "Big 10" ) ) )
assertThat ( underTest . read ( inputStream ) . size ( ) , is ( 0 ) )
assertThat ( actual , is ( expected ) )
assertNull ( "Integer is not null" , integer )
assertEquals ( "test/repo" , metadatas . get ( "/test/repo.metadata" ) . getName ( ) )
assertTrue ( isModifiable )
assertNull ( schemaManager . getPropertyDefinition ( ElementType . VERTEX , "property" ) )
assertEquals ( "Output order: " + outputOrder , exp , out )
assertEquals ( expectedAddress , gotAddress )
assertTrue ( Bytes . equals ( bytes1 , bytes2 ) )
assertEquals ( SampleLocations . STOCKHOLM , cargo . getDelivery ( ) . getLastKnownLocation ( ) )
assertThat ( actual . get ( "latest" ) , containsString ( "1.0.1" ) )
assertTrue ( 5.0f == d . asFloat4 ( ) )
assertEquals ( "" , result )
assertEquals ( "SQL92" , rootNode . getProperty ( StandardDdlLexicon . PARSER_ID ) )
assertFalse ( validator . validate ( certificateMapping , PUT ) . passedValidation ( ) )
assertEquals ( "Wrong key for root attribute" , "@child" , engine . attributeKey ( null , "child" ) )
assertResultSet ( res )
assertEquals ( template , test . build ( ) )
assertThat ( persons , equalTo ( expectedPersons ) )
assertThat ( results , hasItems ( 9 , 10 ) )
assertTrue ( job . waitForCompletion ( true ) )
assertThat ( examplesTable . asString ( ) , equalTo ( TABLE_AS_STRING ) )
assertEquals ( klass , Video . class )
assertFalse ( UrlUtils . isMatch ( consumerUrl , providerUrl ) )
assertThat ( classOfDeferred , equalTo ( String . class ) )
Assert . fail ( "missing transformer class should result in SwitchYardException" )
assertThat ( f . toString ( ) , is ( "function fred()" ) )
assertThat ( result . replaceAll ( "\\s+" , "" ) , equalTo ( expectedOutput . replaceAll ( "\\s+" , "" ) ) )
assertEquals ( "Parsing of integer option does not match expected result." , PROPERTY_INT_EXPECTED , parseResult )
ReaderAssert . assertThat ( Conll2006Reader . class , Conll2006Reader . PARAM_SOURCE_ENCODING , "UTF-8" )
assertThat ( constant ( Descriptions . valueOf ( array ) ) , equalTo ( ( Object ) array ) )
assertTrue ( params . isEmpty ( ) )
assertThat ( auth . getMechanism ( ) , is ( ScramSaslClient . MECHANISM ) )
assertThat ( whoisObject . getAttributes ( ) , hasItems ( new Attribute ( "auth" , "MD5-PW $1$d9fKeTr2$Si7YudNf4rUGmR71n/cqk/" , "test" , null , null , null ) , new Attribute ( "auth" , "SSO person@net.net" ) , new Attribute ( "source" , "TEST" ) ) )
assertFalse ( processor . process ( entry ) )
assertThat ( activity . isFinishing ( ) , equalTo ( true ) )
assertEquals ( nativeToAscii ( ENCODED ) , nativeToAscii ( nvEncoded ) )
assertEquals ( documentId , options . documentId ( ) )
assertEquals ( expectedFeatures , tokens . get ( 0 ) . getAllFeatures ( ) )
Assert . assertEquals ( hash , 1930113384 )
assertTrue ( "should receive messages" , handler . isCalledOnce ( ) )
assertEquals ( mockedMessageCallback , actualMessageCallback )
assertEquals ( "something == x && something == y" , result )
Assert . assertEquals ( "{\"PropertyInt16\":111,\"PropertyString\":\"TEST A\"}" , resultString )
assertEquals ( 14 , test . sumAllowed ( 5 , 9 ) )
Assert . fail ( "Cannot create metablocks with the same name." )
assertEquals ( 3 , packages . size ( ) )
Assert . assertEquals ( count + 1 , conectores . size ( ) )
assertFalse ( kbuilder . hasErrors ( ) )
assertEquals ( 0 , searcher . search ( query , 100 ) . totalHits )
arrays . assertEndsWith ( description , null , array ( "Yoda" ) )
Assert . assertEquals ( 4 , result )
assertEquals ( "Wrong ID." , p . getPersistentState ( ) . getId ( ) , p . getId ( ) )
assertEquals ( columnInfoActualValue . toString ( ) , columnInfo . toString ( ) )
assertThat ( Visitors . readable ( query ) , is ( "SELECT * FROM A EXCEPT ALL SELECT * FROM B" ) )
assertEquals ( "Base value is not properly parsed" , Long . valueOf ( 3 ) , parsed )
Assert . fail ( "Invalid entity type was accepted by the system" )
assertStatus ( 2 , expectedNumRows , expectedNumBytes , expectedReadBytes )
assertFalse ( rule . isVersionValid ( "1.2.3" ) )
assertEquals ( entry , result )
assertThat ( rs , equalTo ( expected ) )
assertOkAndNotNullResult ( resp )
assertFalse ( b )
assertLayerRefinedObjectClass ( objectClass , RESOURCE_DUMMY_PRIVILEGE_OBJECTCLASS_QNAME , ShadowKindType . ENTITLEMENT , "privilege" , LayerType . MODEL )
assertEquals ( TEST_REPORT_NAME , result . name )
assertFalse ( androidImpl . isSDCardAttached ( device ) )
validator . assertTestSuiteResults ( 2 , 0 , 0 , 0 )
assertThat ( CountingIntervalJob . ourCount , lessThan ( 6 ) )
assertHelpLines ( "Option        Description" , "------        -----------" , "-a <String>              " , EMPTY )
assertResultIs ( 1F )
assertTrue ( "Path for removed property is wrong: actual=" + listener . getEvents ( ) . get ( 0 ) . getPath ( ) + ", expected=" + propPath , containsPath ( listener , propPath ) )
assertEquals ( "void blah(int count, MyThing t) throws FishException, FruitException" , signature )
assertThat ( clause . toString ( ) , is ( "(person)<-[:members]-(group)" ) )
Assert . assertTrue ( "Stub exception was not forwarded." , stubFailed )
Assert . assertTrue ( result . next ( ) )
Assert . assertEquals ( 1 , count )
assertThat ( infos , hasSize ( 0 ) )
assertEquals ( factIdentifier . getClassNameWithoutPackage ( ) , "Test" )
assertThat ( path . getString ( NO_OP_ENCODER ) , is ( "/{http://www.modeshape.org/1.0}a/{}b/{http://www.modeshape.org/1.0}c/../{}d/./{http://www.modeshape.org/1.0}e/../.." ) )
assertEquals ( count + 2 , session . from ( restriction ) . list ( restriction ) . size ( ) )
assertThat ( tokens , equalTo ( Arrays . < Object > asList ( "A" , 0.234 , 1.0 ) ) )
assertArrayEquals ( data , bb )
Assert . assertEquals ( Integer . valueOf ( cap ) , dbq . take ( ) )
assertEquals ( result , found )
assertOut ( "var a:Object = Object(\"1\")" )
assertTrue ( serializedDevice . contains ( certificateAuthoritySignedDeviceAuthenticationJson ) )
assertTrue ( dest . get ( 0 ) )
assertTrue ( SolutionListUtils . solutionListsAreEquals ( list1 , list2 ) )
assertThat ( MissingNode . getInstance ( ) , is ( sut ) )
assertEquals ( BUNDLE_URI + "profile/tavernaWorkbench/" + "processorbinding/Hello/" , uri . toASCIIString ( ) )
Assert . assertTrue ( statusId > 1 )
Assert . assertEquals ( 1 , lambda . testCatchingException ( ) )
assertEquals ( expected , SOME_LONG_TYPETAG . getGenericTypes ( ) )
assertEquals ( builder . toString ( ) , "post-List" )
assertEquals ( "Bob" , CollQueryFactory . from ( cat , data ) . where ( cat . name . eq ( name ) ) . set ( name , "Bob" ) . select ( cat . name ) . fetchOne ( ) )
Assert . assertEquals ( count , countStructure . get ( ) )
assertResult ( session )
assertTrue ( returnedValue )
assertTrue ( container . children . isEmpty ( ) )
assertTrue ( pa . getId ( ) != null )
assertEquals ( assertion , log )
assertEquals ( 20 , rowCount )
assertFalse ( Files . exists ( child ) )
assertEquals ( p , writeAndReadFields ( PropertyValue . class , p ) )
assertThat ( map . keySet ( ) , hasItems ( "ID" , "SortAs" , "GlossTerm" , "Acronym" , "Abbrev" ) )
assertThat ( underTest . passwordsMatch ( password , shiro1Hash ) , is ( false ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertEquals ( expected , actual )
assertSame ( dataSource , factory . getDataSource ( descriptor ) )
assertEquals ( "123" , rp . toStringParam ( ourCtx ) . getValue ( ) )
assertTrue ( p . getContent ( ) . size ( ) > 0 )
assertTrue ( getNoErrorMsg ( ) , result )
assertEquals ( service . postProcess ( "<pre>int good=2;[-code][-code]</pre>" ) , "<pre>int good=2;[-code][-code]</pre>" )
assertEquals ( multiEncodedKVFilter ( columnComparison ( CompareOp . EQUAL , A_STRING , B_STRING ) , TWO_BYTE_QUALIFIERS ) , filter )
Assert . assertTrue ( retMap . get ( "TestStream" ) . size ( ) == 4 )
Assert . assertNotNull ( "userAO is null" , userAO )
assertThat ( "Color" , nodeData1 . getValue ( TermColor . class , "color" ) , is ( tf . createColor ( 0 , 128 , 0 ) ) )
Assert . assertEquals ( "matched the stored value with retrieved value" , new String ( b ) , new String ( tempData ) )
assertIndexedRecord ( typeDesc , indexedRecord )
assertFailure ( subject , new HostnameFormatValidator ( ) , "[" + subject + "] is not a valid hostname" )
Assert . assertTrue ( roleBoList . size ( ) > 0 )
Assert . assertTrue ( rend instanceof DummyProcessableSvgNodeRenderer )
assertThat ( "without trigger" , withTrigger ( GitHubPushTrigger . class ) . apply ( prj ) , is ( false ) )
assertThat ( verifyModelVersionsSaved ( ) , is ( upgradedVersions ) )
assertEquals ( "" , result )
assertEquals ( expected , e . evaluate ( ) , 0.0 )
assertThat ( properties . getProperty ( "transformer" ) , equalTo ( "FROM_LANDSCAPE" ) )
assertEquals ( inputString , outputString )
assertEquals ( "Code{code='0', label='Issue number'}" , code . toString ( ) )
assertEquals ( expResults , results )
assertTrue ( result . length ( ) == 0 )
Assert . assertEquals ( 0 , norm , 1.0e-15 )
assertEquals ( 10 , content . split ( "\n" ) . length )
Assert . assertNotNull ( addressResultsDto )
Assert . assertEquals ( "23452350" , randomans . toString ( ) )
assertEquals ( "The strings should remain the same" , "qQV" , diacriticsString )
Assert . assertEquals ( ( double ) repetitions , res )
assertEquals ( 0 , byteBufResultCaptor . getResult ( ) . refCnt ( ) )
assertThat ( runs , contains ( asList ( 1 , 1 ) , asList ( 2 , 2 ) , Collections . singletonList ( 3 ) , Collections . singletonList ( 4 ) , asList ( 5 , 5 ) ) )
assertThat ( objectMapper . fromJson ( objectMapper . toJson ( map ) ) , is ( objectMapper . fromJson ( "{\"typeName\":\"Processes\",\"fields\":[{\"name\":\"process\",\"type\":\"ConversionRateProcess[]\",\"properties\":[\"REQUIRED\"]}]}" ) ) )
assertEquals ( "-something" , commandLine . getOptionValue ( 't' ) )
assertThat ( result , equalTo ( true ) )
Assert . assertArrayEquals ( new byte [ ] { ( byte ) 0 , ( byte ) 0 , ( byte ) 0 , ( byte ) 0 } , actual )
assertEquals ( controllerName , "io.swagger.oas.sample.controllers.MyTag" )
Assert . assertEquals ( 204 , res . getStatus ( ) )
assertEquals ( timeInstant . getIntervalType ( ) , DateIntervalType . MINUTE )
Assert . assertTrue ( "Verify log message" , LogUtils . awaitLogMessage ( ".*simple-log.*Hello Kermit]$" , 5000 ) )
assertTrue ( resource + " is not valid" , result . isValid ( ) )
assertThat ( graham . get ( city ) , is ( nullValue ( ) ) )
assertTrue ( jarRuntimeInfo . isClassLoaderReusable ( ) )
assertTrue ( Cells . isEmpty ( cell ) )
assertEquals ( "<script>\n" + "  <!--\n" + "    document.write('</scr' + 'ipt>');\n" + "  // -->\n" + "</script>" , node . body ( ) . html ( ) )
assertEquals ( "asd" , t . getType ( ) )
Assert . assertFalse ( matcher . match ( rule , testNode2 , parent ) )
assertEquals ( "There should be 3 lights" , 3 , lights . size ( ) )
FixtureAsserts . assertStringMatchesJsonFixture ( "DeleteRole by admin response render to HAL+JSON" , actualResponse , "/fixtures/hal/role/expected-admin-delete-role.json" )
assertFalse ( "BloomFilter#not should have inverted all bits" , bf . bits . intersects ( origBitSet ) )
arrays . assertNotEmpty ( description , actual )
Assert . assertNotNull ( pi )
assertIAEWhenAccessingResult ( service . prepare ( query ) )
assertEquals ( 200 , response . getStatus ( ) )
assertThat ( escaped , is ( "\\thello\\nworld\\x" ) )
assertVersions ( ctx , "9" )
assertEquals ( 42 , result )
assertEquals ( "Conversion did not match" , value , to )
assertFalse ( underTest . isPrerelease ( component , emptyList ( ) ) )
Assert . assertNotNull ( outStream )
bytes . assertNotGreaterThan ( description , null , ( byte ) 6 )
assertEquals ( "" , result )
assertTrue ( saveOntology ( o , new LatexDocumentFormat ( ) ) . toString ( ) . contains ( "C\\_Test" ) )
assertEquals ( testneuron3 , lst . get ( 1 ) )
Assert . assertEquals ( rtpPacket . getTimestamp ( ) , 0xF0DF , "Timestamp should be 0xF0DF." )
assertThat ( iconCaptor . getValue ( ) , is ( "http://github.com/i/am/sorry.png" ) )
assertArrayEquals ( new double [ ] { 1 , 2 , 3 , 4 } , result , .01 )
assertThat ( limboPlayer . getTimeoutTask ( ) , equalTo ( bukkitTask ) )
assertEquals ( 1 , a . getSix ( ) . intValue ( ) )
assertThat ( uris , is ( asList ( new URI ( "http://baseurl/static/rapture/baseapp-debug.js" ) , new URI ( "http://baseurl/static/rapture/extdirect-debug.js" ) , new URI ( "http://baseurl/static/rapture/bootstrap.js" ) , new URI ( "http://baseurl/static/rapture/d3.v4.min.js" ) , new URI ( "http://baseurl/extjs-script-1-test-1.js" ) , new URI ( "http://baseurl/extjs-script-2-test-1.js" ) , new URI ( "http://baseurl/extjs-script-1-test-2.js" ) , new URI ( "http://baseurl/extjs-script-2-test-2.js" ) , new URI ( "http://baseurl/react-script-1-test-debug.js" ) , new URI ( "http://baseurl/react-script-2-test-debug.js" ) , new URI ( "http://baseurl/static/rapture/app.js" ) ) ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( expected , actual )
assertThat ( period , equalTo ( new TimePeriod ( SECOND , 30.0 ) ) )
assertions . doesNotContain ( entries )
assertEquals ( test , aDeserialized )
assertEquals ( "yes" , html )
assertArrayEquals ( one . toArray ( ) , betaGrad2 . toArray ( ) , 0.01 )
assertTrue ( s . execute ( "select 1" ) )
assertThat ( supported , is ( true ) )
assertEquals ( replyObject . getReplyUuid ( ) , replyUuid )
assertEquals ( expectedURI , uninstallRequest . getUri ( baseURI ) )
assertThat ( Certificates . getOperatorExternalCertificateData ( ) , nullValue ( ) )
assertEquals ( pluginMock , contentSupplier . get ( ) )
assertNull ( props . toString ( ) , props . get ( "old" ) )
assertTrue ( "Unexpected data" , buffer . readableBytes ( ) == 0 )
Assert . assertEquals ( new Float ( 1 ) , _c . convert ( "1.0" ) )
assertTrue ( references . isEmpty ( ) )
Assert . assertNotNull ( classUnderTest . getHint ( ) )
assertEquals ( 2 , retDepartments . size ( ) )
assertThat ( graham . get ( city ) , is ( nullValue ( ) ) )
assertEquals ( TestClass2 . class . getName ( ) , service . injectedLogger . getName ( ) )
assertThat ( I18nUtil . pre ( TEST_STRING ) , is ( TEST_STRING ) )
assertEquals ( dateType . compare ( date , date ) , 0 )
assertThat ( lines , hasSize ( 3 ) )
assertTrue ( isEqual ( mockStopPoint , actualStopPoint ) )
assertThat ( address . get ( Address . houseNumber ) , is ( 42 ) )
assertEquals ( Status . NOT_FOUND , response . getClientResponseStatus ( ) )
Asserts . check ( targetHosts . size ( ) > 0 , "fail test" )
Assert . assertEquals ( "(1=100,2=200,3=300)" , map . toString ( ) )
Assert . fail ( "createDNASequenceWithQualityScoresAndErrorProbabilities(null) expected IllegalArgumentException" )
Assert . assertNotNull ( "No se ha generado el CSV" , infoDocumento )
assertEquals ( frameData1 , frameData2 )
assertEquals ( R . style . Theme_Default_Dialog , themeResId )
Assert . assertEquals ( "SELECT INTERVAL '6-11' YEAR TO MONTH\nFROM DUAL;\n" , text )
assertThat ( listOfInteger , contains ( new Integer ( 1 ) , new Integer ( 2 ) , new Integer ( 3 ) , new Integer ( 4 ) , new Integer ( 5 ) , new Integer ( 6 ) ) )
assertEquals ( 5 , passingCars . solution ( array ) )
assertTrue ( expectedFilteredRecommendedItems . containsAll ( actualFilteredRecommendedItems ) )
assertEquals ( asList ( trace ( mdcValues , throwable , message , args ) ) , testLogger . getLoggingEvents ( ) )
assertEquals ( "select entity_0 from Entity entity_0 inner join entity_0.subEntity subEntity_1 where subEntity_1.code = :code_2" , select . getQuery ( ) )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Refer/>" , elem . toXml ( ) )
assertFalse ( SUT . isQuiescent ( ) )
assertEquals ( Result . FAIL , type . apply ( item ) )
assertTrue ( params == null )
assertSame ( list , bound . list ( ) )
assertThat ( jsonGeneratorParser . value ( ) , is ( jsonResource ( "/io/sentry/marshaller/json/Exception1.json" ) ) )
assertEquals ( RdfTestHelpers . parseRdf ( RdfTestHelpers . getResourceFromFile ( "BasicDeclarations.rdf" ) ) , model )
this . assertTokenizesTo ( _t , json , jsonGen . images . toArray ( new String [ jsonGen . images . size ( ) ] ) , jsonGen . types . toArray ( new String [ jsonGen . types . size ( ) ] ) , jsonGen . datatypes . toArray ( new String [ jsonGen . datatypes . size ( ) ] ) , incr , jsonGen . nodes . toArray ( new IntsRef [ jsonGen . nodes . size ( ) ] ) )
assertEquals ( response . getContentAsByteArray ( ) , validImage )
assertArrayEquals ( new Item [ ] { FOURTH_ITEM , THIRD_ITEM } , actual . toArray ( new Item [ 2 ] ) )
assertCentroid ( polygon , new Point2D ( - 8406364 , 560828 ) )
Assert . assertEquals ( "file is not in new resource" , testingProperties . getProperty ( TestingPropertiesHelper . IRODS_SECONDARY_RESOURCE_KEY ) , actual . getResourceName ( ) )
assertThat ( ids , containsInAnyOrder ( patId , medId , moId ) )
this . assertAnalyzesTo ( _a , "<http://dbpedia.org/resource/The_Kingston_Trio>" , new String [ ] { "kingston" , "trio" , "the_kingston_trio" , "http://dbpedia.org/resource/the_kingston_trio" } , new String [ ] { "word" , "word" , "word" , "word" } , new int [ ] { 2 , 1 , 0 , 0 } )
assertNull ( selector . getProxy ( repo ) )
assertThat ( driver . findElement ( By . cssSelector ( "h2" ) ) . getText ( ) , is ( "System Error..." ) )
assertArrayEquals ( getPixels ( expected , 0 , 0 , expected . getWidth ( ) , expected . getHeight ( ) , null ) , getPixels ( actual , 0 , 0 , actual . getWidth ( ) , actual . getHeight ( ) , null ) )
assertEquals ( "Should return path specified" , PATH_TEST , route . getPath ( ) )
assertThat ( XMLAdapter . XML_TIME . from ( time ) , is ( expected ) )
assertTrue ( stack2 . isEmpty ( ) )
Assert . assertEquals ( "Hello, " + name , greeter . greet ( name ) )
Assert . fail ( "Should throw BadRequestException" )
assertSame ( copy , copy . getEntityAProperty ( ) . getParentProperty ( ) )
assertEquals ( expResult , result )
assertEquals ( playerProperties . getPlay ( ) , stringArgumentCaptor . getValue ( ) )
Assert . fail ( "The request to finish application master should have failed" )
assertEquals ( np . getNumberOfLinks ( lowerLayer ) , 0 )
Assert . assertTrue ( orPredicate . test ( null ) )
assertEquals ( expResult , result )
assertNotNull ( options )
assertTrue ( SolutionListUtils . solutionListsAreEquals ( list1 , list2 ) )
assertSame ( resp , result )
assertEquals ( isTouched , true )
assertThat ( name . getSegments ( ) , contains ( "type" , "name" ) )
assertThat ( javaDocComment , not ( containsString ( "(Required)" ) ) )
assertNotNull ( instance . getFirstAtomMapping ( ) )
assertEquals ( expect , parser . parse ( "token1 = true" ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( filename , sourceFolder + "cmp_" + file , destinationFolder , "diff_" ) )
assertTrue ( "getName should return the metric value passed in." , Objects . equal ( basicName , victim . getName ( ) ) )
assertFalse ( organizationalUnitController . canDeleteOrgUnit ( mock ( OrganizationalUnit . class ) ) )
Assert . assertEquals ( 0 , sync ( cache . size ( ) ) . intValue ( ) )
Assert . assertEquals ( ColorConstants . GREEN , p . getRenderer ( ) . < TransparentColor > getProperty ( Property . FONT_COLOR ) . getColor ( ) )
assertEquals ( "unexpected version change" , versionBefore , versionAfter )
Assert . assertTrue ( fsView . getFileStatus ( new Path ( "/" ) ) . isDirectory ( ) )
assertEquals ( "urn:nfc:example.com" , uriRecord . getUri ( ) )
assertEquals ( 1 , countValue )
assertions . containsSequence ( sequence )
assertThat ( text , is ( "label" ) )
assertOut ( "color=\"16711680\"" )
assertParseTree ( rootNode ( "12" , node ( "digits" , Arrays . asList ( "1" , "2" ) , "12" , stringNode ( "d" , "1" ) , stringNode ( "d" , "2" ) ) ) , tree )
assertTrue ( Arrays . equals ( imageByteArray . get ( f . getName ( ) ) , bos . toByteArray ( ) ) )
assertThat ( "when not allowed" , withUserRestriction ( tlRule . getListener ( ) , uRestr ) . apply ( new GHPullRequest ( ) ) , is ( false ) )
Assert . assertNotNull ( doc )
assertEquals ( expResult , result )
assertEquals ( new Locale ( "en" , "GB" ) , response . getLanguage ( ) )
assertLookup ( breaks , values , srcImg , DataBuffer . TYPE_FLOAT )
assertTrue ( defaultCondition . isDefault ( ) )
assertEquals ( 10.78f , doc . field ( "firstNumber" ) )
outputValidator . assertTestSuiteResults ( 1 , 0 , 0 , 0 )
assertContentType ( person )
assertThat ( changeScript . getContent ( ) , is ( "Hello\nThere!\n" ) )
assertEquals ( expectedFiles , files )
assertThat ( tuple . getIntegerOrDefault ( "field" , 2 ) , equalTo ( 2 ) )
Assert . assertNotNull ( defaultFiles )
assertTrue ( query . getIndexConstraints ( SPATIAL_INDEX ) . isEmpty ( ) )
assertThat ( results , contains ( ( Matcher ) hasEntry ( "code" , "WGT234" ) ) )
assertTrue ( stmt instanceof DropTableNode )
Assert . assertTrue ( count > 0 && count <= runs )
assertAplicacion ( aplicacion )
assertEquals ( NO_ARG_TO_STRING , sink . result ( ) )
assertIsGreenwich ( pm )
assertThat ( target . parse ( ) , is ( false ) )
assertEquals ( "Hi testAnnotated" , result )
assertThat ( result , is ( "123" ) )
assertThat ( the ( name , be ( equalTo ( "Alex" ) ) . and ( be ( startsWith ( "B" ) ) ) ) , is ( false ) )
assertThat ( table , is ( newTable ( ) ) )
assertEquals ( "<bar>value</bar>" , projection . asString ( ) . trim ( ) )
assertTrue ( mrbResponse . equals ( mrbRequest ) )
Assert . assertEquals ( 1 , s , Math . ulp ( 1d ) )
assertThrows ( ( ) -> instance . matcherFor ( matcher ) )
assertThat ( ( double ) stopwatch . getMaximumDuration ( ) . getDuration ( TimeUnit . MILLISECONDS ) , is ( closeTo ( 150 , 50 ) ) )
Assert . assertTrue ( tempFontFile . exists ( ) )
assertTrue ( Modifier . isPrivate ( constructor . getModifiers ( ) ) )
Assert . assertEquals ( "TEST1234" , text )
Assert . assertEquals ( "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<Pause>" + "<genericTag>" + "Some text" + "</genericTag>" + "</Pause>" , elem . toXml ( ) )
assertEquals ( 1 , throughputStatistics . getUpdatesCount ( ) )
assertEquals ( 10 , list . size ( ) )
assertNotNull ( "ClientContact is null" , entity )
assertTrue ( "there are scenario failures" , results . getFailCount ( ) == 0 )
assertTrue ( processor . getResourcesMap ( ) != null )
assertOut ( "var /** @type {Array} */ a = org.apache.royale.utils.Language.arrayAsVector(['Hello', 'World'], 'String')" )
assertEquals ( VALUE_A . add ( VALUE_B ) , client . getValueOfAllFunds ( ) )
assertEquals ( "{\"a\":\"b\"}" , JsonbProvider . provider ( ) . create ( ) . build ( ) . toJson ( map ) )
assertEquals ( false , result )
assertArrayEquals ( TestVectors . REGISTRATION_RESPONSE_DATA , encodedBytes )
assertThat ( isExpectedData , is ( true ) )
assertEquals ( io . motown . domain . api . chargingstation . ReservationStatus . REJECTED , reservationStatus )
assertFalse ( stringBuffer . toString ( ) . equals ( "" ) )
assertEquals ( 265463 + 13 , executeTestMethod ( test , Integer . class , null , 265463 ) . longValue ( ) )
assertTrue ( copy . getAreNodeLabelsAcceptedByRM ( ) )
Assert . assertEquals ( "Found wrong id on the " + i + " record" , 1L , vLookUp . getUserID ( ) )
assertEquals ( counter . getValue ( ) , 1 )
assertArrayEquals ( new Class < ? > [ ] { Boolean . TYPE } , cons . getParameterTypes ( ) )
assertEquals ( "Expected 2 results!" , 2 , n )
assertThat ( actual , is ( equalTo ( n ) ) )
assertEquals ( 2 , post . getComments ( ) . size ( ) )
Assert . assertEquals ( 4.0 , a . infinityNorm ( ) , Matrices . EPS )
assertTrue ( future . isDone ( ) )
Assert . assertEquals ( configuration . getIntField ( ) , result . getIntField ( ) )
assertNull ( data )
assertEquals ( 0 , cities . size ( ) )
assertNotNull ( resolved )
assertTrue ( sipPhoneSender . register ( requestURI , "no_user" , "no_password" , "sip:sender@127.0.0.1:5080;transport=udp;lr" , TIMEOUT , TIMEOUT ) )
assertArrayEquals ( data , ( double [ ] ) deserialize . readObject ( double [ ] . class ) , 0.0001 )
assertThat ( mapFrom ( format ( cpc , makeEvent ( TEST_MSG_NO_ARGS , NO_ARGS ) ) ) , is ( mdcMap ( ) ) )
assertions . isNotEqualTo ( expected )
assertNotNull ( result )
Assert . assertTrue ( myRecordList . size ( ) == 2 )
Assert . assertTrue ( subscriber . checkUpdate ( new EndpointTitle ( testEndpoints . get ( 0 ) , HUB_SUBSCRIPTION_UPDATE_ENDPOINT_ADDED ) ) )
assertEquals ( 108 , buffer . get ( ) )
Assert . assertFalse ( ModuleUtil . matchRequiredVersions ( openmrsVersion , requiredOpenmrsVersion ) )
assertEquals ( 1 , eventRealPaths . size ( ) )
assertEquals ( COPY2_HELLO , generated )
assertEquals ( TaxonomyPrinter . getHashString ( taxonomy1 ) , TaxonomyPrinter . getHashString ( taxonomy2 ) )
assertThat ( repository , notNullValue ( ) )
assertThat ( getValues ( query ( "mIxeD" , "mntner" ) , "key" ) , contains ( "MiXEd-MNT" ) )
assertEquals ( 1 , value )
assertThat ( eventCaptor . getValue ( ) . getConfiguration ( ) , is ( storeConfigCopy ) )
assertEquals ( userListToPersist . size ( ) , userFromDatastoreList . size ( ) )
Assert . assertEquals ( 1 , statementList . size ( ) )
assertThat ( replication , is ( instanceOf ( PartitionedTableMetadataUpdateReplication . class ) ) )
assertNull ( options . objectFactory ( ) )
assertEquals ( "5" , new String ( value . asBytes ( ) ) )
assertEquals ( body . toString ( ) , "operation _timeout" )
assertEquals ( true , compareTwoArrays ( input [ i ] , output ) )
assertNull ( req . getOptions ( ) . getUriHost ( ) )
assertEquals ( 200 , response . getStatus ( ) )
assertNotNull ( externalId )
assertFalse ( "Did not create DatagramSocket" , socket == null || socket instanceof MulticastSocket )
assertEquals ( 2 , postComments . size ( ) )
assertTrue ( "Expected null result" , result == null )
assertEquals ( String . valueOf ( ReturnCode . DIGIT_PATTERN_NOT_MATCHED . code ( ) ) , eventCaptor . getValue ( ) . getParameter ( "rc" ) )
assertThat ( errors . toString ( ) , containsString ( "No issues" ) )
assertions . isNotEmpty ( )
assertNotNull ( foo )
assertTrue ( ca . getFallbackParameters ( ) . equals ( ap2 ) )
assertEquals ( 0 , branch_conditions . size ( ) )
Assert . assertNull ( session . getClassLoader ( NAME1 ) )
assertThat ( info . getServerPod ( SERVER ) , nullValue ( ) )
Assert . assertTrue ( "world,peace" . equals ( join ) )
Assert . assertEquals ( JSONNaN , result )
assertTrue ( d1 instanceof PublicCloneable )
assertionErrorCreator . multipleSoftAssertionsError ( errors )
assertEquals ( "{\"version\": \"3.0.0\", \"gauges\": {\"foobar\": {\"value\": 5}}, \"counters\": {}, \"histograms\": {}, \"meters\": {}, \"timers\": {}}" , bson . toJson ( writerSettings ) )
assertEquals ( "void f(void* target, void* p0) {\n" + "    struct f_0001 {int m1;};\n" + "    ((void (*)(struct f_0001)) target)(*((struct f_0001*)p0));\n" + "}\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertThat ( "Output model created" , testResources_ . readJson ( outFile ) , is ( notNullValue ( ) ) )
assertEquals ( 8 , encounters . size ( ) )
Assert . assertEquals ( json , writer . toString ( ) )
assertTrue ( "Caught unexpected exception : " + e . getMessage ( ) , e . getMessage ( ) . indexOf ( expected ) > - 1 )
assertEquals ( yes , shouldILiveForever . getSolution ( ) )
assertFalse ( c . isValidForSqlQuery ( ) )
assertNotNull ( snk )
assertNotNull ( entity . point . geoDistance ( new Point ( ) ) )
assertNull ( "Expected no output message" , outMessage )
Assert . assertEquals ( "OK" , result )
assertThat ( testStatus , is ( expectedStatus ) )
assertTrue ( instance . isClosed ( ) )
assertNotNull ( testVehicle )
assertNotNull ( PublicKey . reader ( ) . read ( ) )
Assert . assertNull ( actual )
assertEquals ( Arrays . asList ( "A" , "B" , "C" , "D" ) , results )
assertNotNull ( entity . getId ( ) )
Assert . assertEquals ( ServerParse . SAVEPOINT , sqlType )
Assert . fail ( "Unexpected acquired write lock" )
assertEquals ( object2 , actualObjects . get ( 0 ) )
assertEquals ( expected , actualQuery )
assertThat ( module . getRequiredModulesMap ( ) , is ( equalTo ( Collections . EMPTY_MAP ) ) )
Assert . assertEquals ( "Hello Kermit!" , response . getOut ( ) . getBody ( String . class ) )
assertEquals ( System . currentTimeMillis ( ) / 1000 + 500 , subscription . getExpirationTime ( ) , 10.0 )
assertThat ( formatter . format ( PlainDate . of ( 1700 , 1 , 30 ) ) , is ( "AD-1698/1700-01-30" ) )
assertEquals ( 0 , response . getBody ( ) . getEntities ( ) . size ( ) )
assertThat ( flights , hasSize ( 0 ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertUserPropertyFile ( USER_NAME )
Assert . assertEquals ( expected , actual )
Assert . assertEquals ( expectedNode . toString ( ) , pdoc . toString ( ) )
assertEquals ( "{\"name\":\"test\",\"data\":{\"heart\":\"ace\"}}" , gson . toJson ( aiEvent ) )
assertEquals ( valorTest , valor )
assertTrue ( "Key manager should be created" , ops . exists ( TEST_KEY_MNGR_ADDRESS ) )
assertResultSet ( res )
assertEquals ( "unexpected number of expected problems" , 0 , equeue . size ( ) )
assertResult ( session )
assertEquals ( "99646259" , orderId )
Assert . assertFalse ( StraightOrder . is ( p1 , p2 , p3 , IntegerNumberSystem . getInstance ( ) ) )
assertThat ( result . size ( ) , is ( 0 ) )
observer . assertObservations ( "@Initialized HttpSession" , session )
Assert . assertSame ( COLLABORATOR , c . getUser ( ) )
assertEqualsRQ ( A , c . factor ( new DenseMatrix ( A ) ) )
assertEquals ( expecteds , actuals )
assertEquals ( 80 , toTest )
assertTrue ( emptyList . isEmpty ( ) )
assertEquals ( expResult , result )
assertTrue ( result . isResultOK ( ) )
context . assertTrue ( res . failed ( ) )
assertEquals ( setOf ( "ashlux@gmail.com" , "mickeymouse@disney.com" ) , internetAddresses )
assertEquals ( description , field . getDescription ( ) )
assertEquals ( NOT_DECODED , map , object . getObjects ( ) )
assertEquals ( d_oa . getDescription ( ) , d_dm . getValue ( ) )
assertFailureLogPresent ( instance , "failingTask" )
assertEquals ( expectedPolicy , builtPolicy )
assertTrue ( isCaughtException )
assertNotNull ( simple . getId ( ) )
Assert . assertEquals ( 403 , response . getStatus ( ) )
testHelper . assertTaskListenerTimerJobCreated ( "userTask" )
assertEquals ( "/component=myComp/version=1.2" , dispatchCriteria )
Assert . assertTrue ( "Did not expect optimal coverage: " , best . getCoverage ( ) < 1d )
Assert . assertEquals ( "select babyfish_shared_alias_0 " + "from org.babyfishdemo.jpacriteria.entities.Employee babyfish_shared_alias_0" , createQueryTemplate ( cq ) . toString ( ) )
assertEquals ( 4 , JedisURIHelper . getDBIndex ( uri ) )
assertContentSame ( rs , rc , columnParam1 )
assertThat ( result , is ( nullValue ( ) ) )
assertSame ( expected , actual )
assertDocumento ( documento )
assertThat ( result , is ( a * b ) )
assertEquals ( 1 , p . getThisPage ( ) )
assertThat ( future , is ( not ( DisabledFuture . INSTANCE ) ) )
assertEquals ( expectedQuery , actualQuery )
Assert . assertEquals ( Lists . newArrayList ( s ) , Promoter . listOfOne ( s ) )
assertThat ( FileUtils . readFileToString ( new File ( tempCopyFile ) ) , CoreMatchers . is ( cp_file . asText ( ) ) )
assertNotNull ( id )
assertTrue ( defaultCondition . isDefault ( ) )
Assert . assertEquals ( ScoreLangConstants . SUCCESS_RESULT , result )
assertEquals ( VAR_VALUE , ctx . getVariable ( VAR_NAME ) )
assertEquals ( "abc, 34\n" , found )
Assert . assertEquals ( "Invalid HUs retrieved" , Collections . emptyList ( ) , huSelectModel . createHUQueryBuilder ( ) . setErrorIfNoHUs ( false , null ) . list ( ) )
assertThat ( spiralOrder ( matrix ) , Matchers . is ( Lists . newArrayList ( 1 , 2 , 3 , 6 , 9 , 8 , 7 , 4 , 5 ) ) )
assertThat ( result , is ( "0FFFFFFF2" ) )
assertThat ( build , is ( notNullValue ( ) ) )
assertEqualsIgnoreLineEnding ( output , "{\n" + "  \"id\" : 42,\n" + "  \"name\" : \"Arthur Dent\"\n" + "}" )
assertEquals ( "(foo void ;)\n" , found )
assertEquals ( 400 , response . getStatus ( ) )
Assert . assertTrue ( results . isEmpty ( ) )
assertTrue ( isSuc )
assertUFTFields ( fields )
assertFalse ( dm . isIriInOntology ( iri ) )
assertThat ( dispatcher . dispatchQueues . keySet ( ) , is ( empty ( ) ) )
assertEquals ( "LOCAL: \nName1\nName2\nUserFN UserLN\naddr2\naddr1\n121212 City1\nGermany" , bpartnerBL . mkFullAddress ( bPartner , bpLocation , user , null ) )
Assert . assertEquals ( 43 , a . getAge ( ) )
assertEquals ( 1 , sink . getTotalGroups ( ) )
mockEndpoint . assertIsSatisfied ( )
assertEquals ( "urn:cxf" , action )
assertEquals ( 1 , urls . length )
assertNotNull ( netrc )
Assert . assertEquals ( StatusCodes . BAD_REQUEST , result . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( webSocketHandler . calculateHeaderSize ( WebSocketHeader . PAYLOAD_MEDIUM_MAX ) , WebSocketHeader . MED_HEADER_LENGTH_MASKED )
assertNotNull ( geomConverter )
assertFalse ( s instanceof Cloneable )
assertEquals ( "Strategy decision not expected" , NodeProvisioner . StrategyDecision . PROVISIONING_COMPLETED , decision )
assertThat ( DataenumUtils . equal ( o , o ) , is ( true ) )
assertEquals ( packageMainResourcesPath , resolver . resolveDefaultPath ( pkg ) )
Assert . assertEquals ( false , handler . getAcceptAnonymous ( ) )
assertEquals ( false , options . isRecursive ( ) )
Assert . assertEquals ( "C7 (indexPath = 1, namePath = C7)\n" + "    O1 (indexPath = 1.1, namePath = C7->O1)\n" + "    O2 (indexPath = 1.2, namePath = C7->O2)\n" + "    C6 (indexPath = 1.3, namePath = C7->C6)\n" + "        Na1 (indexPath = 1.2.2, namePath = C7->O2->Na1)\n" + "        C5 (indexPath = 1.3.1, namePath = C7->C6->C5)\n" + "        C1 (indexPath = 1.3.2, namePath = C7->C6->C1)\n" + "            C4 (indexPath = 1.3.1.1, namePath = C7->C6->C5->C4)\n" + "            H5 (indexPath = 1.3.1.3, namePath = C7->C6->C5->H5)\n" + "            C2 (indexPath = 1.3.2.1, namePath = C7->C6->C1->C2)\n" + "            H1 (indexPath = 1.3.2.3, namePath = C7->C6->C1->H1)\n" + "                C3 (indexPath = 1.3.1.1.1, namePath = C7->C6->C5->C4->C3)\n" + "                H4 (indexPath = 1.3.1.1.3, namePath = C7->C6->C5->C4->H4)\n" + "                H2 (indexPath = 1.3.2.1.3, namePath = C7->C6->C1->C2->H2)\n" + "                    H3 (indexPath = 1.3.1.1.1.3, namePath = C7->C6->C5->C4->C3->H3)\n" , builder . toString ( ) )
assertTrue ( matcher . matches ( mockElement ) )
Assert . assertEquals ( "value of one" , one , value )
assertThat ( DateInterval . parseISO ( "P13D/2012-01-14" ) , is ( expected ) )
assertThat ( irsApplicable , equalTo ( true ) )
assertEquals ( "master" , payload . getBranch ( ) )
assertEquals ( HttpStatus . NO_CONTENT , responseEntity . getStatusCode ( ) )
assertEquals ( 404 , status )
assertEquals ( "BCD" , t . getObject ( ) . getBlankNodeLabel ( ) )
assertEquals ( "<div id=\"product-2\"><h2>Detail of 1952 ALPINE RENAULT 1300</h2><p>Year: 1952, price: 98.58��</p><p>Turnable front wheels; steering function; detailed interior; detailed engine; opening hood; opening trunk; opening doors; and detailed chassis.</p><p>漏 Copyright Renault</p></div>" , new String ( response . content ( ) , "UTF-8" ) )
assertEquals ( context . getBean ( SingleBean . class ) , builder . build ( ) )
assertThat ( I18nUtil . getLocale ( ) , is ( Locale . CHINA ) )
Assert . assertEquals ( "shrinkwrap" , value )
assertThat ( actualElements . size ( ) , greaterThan ( 0 ) )
assertEquals ( "string[]" , param . getRuntimeType ( ) )
assertEquals ( 1 , ls . getLocationsHavingAllTags ( list1 ) . size ( ) )
assertTrue ( "Byte range from " + i + " to " + j , Arrays . equals ( expected , result ) )
assertThat ( infos . length , is ( 0 ) )
arrays . assertDoesNotContain ( description , actual , value , Index . atIndex ( 0 ) )
assertSqlCanBeParsedAndDeparsed ( stmt )
assertTrue ( output , output . matches ( "(?s).*execute a script.*" ) )
XMLAssert . assertXMLEqual ( baseDocument . asXML ( ) , result . asXML ( ) )
assertSame ( result1 , future . get ( ) )
assertNotNull ( result )
assertEquals ( 1 , tableDesc . getIdTableDescList ( ) . size ( ) )
assertArrayEquals ( "The branch name array is incorrect" , new String [ ] { "branchone" , "branchtwo" } , scm . getBranchNames ( EMPTY_VARIABLE_RESOLVER ) )
assertTrue ( TypeUtils . shouldCreateNewClass ( property , null ) )
assertEquals ( BPResultType . PASS , testResult . getResultType ( ) )
Assert . assertNotNull ( version )
assertEquals ( expResult , result )
Assert . assertTrue ( handler . disconnectCount > 0 )
assertFalse ( room . containsKey ( "etag" ) )
assertValid ( DocType . XHTML10_STRICT )
assertSameOrEqual ( newValue , property . getValue ( ) , wrapsPrimitive ( ) )
assertThat ( actual , is ( nullValue ( ) ) )
assertEquals ( arr , resultArr )
builderUnderTest . recorder . assertInvocation ( "addPropertyFilters" , Arrays . asList ( testFilter1 , testFilter2 ) )
assertEquals ( "TWFu" , BeamRowToBigtableFn . primitiveFieldToString ( TypeName . BYTES , bytes ) )
assertNotNull ( m )
assertThat ( result , is ( true ) )
assertThat ( target , notNullValue ( ) )
assertEquals ( NL + "  Pre[1] xmlns=\"A\"" + NL + "    Pre[4] xmlns=\"D\"" + NL + "      Pre[5] xmlns=\"G\"" + NL + "    Pre[7] xmlns=\"F\"" , context . data ( ) . nspaces . toString ( ) )
assertTrue ( expectedOutput . compare ( output , TOLERANCE ) )
assertObjectEquals ( "{foo:'b'}" , x . getExamples ( ) )
Assert . assertEquals ( "A \nB \nC \nD" , text )
assertNotNull ( "Obfuscated data null" , obfuscatedDataWrapper )
assertParseTree ( rootNode ( "hello" , node ( "hi" , null , "hello" ) ) , tree )
assertEquals ( "ab��猫�����������盲枚眉�cdEf" , returnValue )
assertMatch ( e , s )
Assert . assertEquals ( "dXNlcnBhc3M=" , actual )
assertEquals ( "Should be a 201 Created!" , CREATED . getStatusCode ( ) , getStatus ( method ) )
assertEquals ( newLexicalCategory , withLexicalCategory . getLexicalCategory ( ) )
Assert . assertEquals ( ManagedCloudSdk . newManagedSdk ( new Version ( "191.0.0" ) ) . getSdkHome ( ) , sdk . getSdkHome ( ) )
Assert . assertTrue ( deleted . isVoided ( ) )
assertEquals ( e , r )
assertThat ( result , hasSize ( 1 ) )
assertEquals ( "shard_1" , dbs )
assertEquals ( map1 , map2 )
assertThat ( this . converter . matches ( this . sourceType , targetType ) , is ( true ) )
assertTrue ( result . size ( ) > 0 )
assertEquals ( true , passedWaitForStartCall . await ( 10 , TimeUnit . SECONDS ) )
assertEquals ( "Method descriptors should be identical" , desc1 , desc2 )
assertThat ( newArrayList ( emptyIntermediate . materialize ( ) ) . size ( ) , is ( 0 ) )
assertEquals ( true , CollectionUtils . isEmpty ( c ) )
assertEquals ( "Privacy policy inferred not equals to the exepcted empty one" , expected . toXMLString ( ) , actual . toXMLString ( ) )
assertEquals ( pp . getValue ( ) , new Payload < > ( "error 4 test error" ) . getValue ( ) )
assertThat ( encryptor . checkPassword ( testPassword , null ) , is ( false ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE DEPTH(nodes) <= CAST('3' AS LONG)" ) )
assertEquals ( false , result )
assertEquals ( getLoggingEvent ( ) . getFormattedMessage ( ) , "test; key=\"value\"; otherKey=\"otherValue\"" )
Assert . assertEquals ( expectedStringLast , resultString )
assertFalse ( underTest . validate ( "student" , idsToValidate ) . containsAll ( idsToValidate ) )
assertThat ( event . isCancelled ( ) , equalTo ( true ) )
assertEquals ( "Invalid argument passed" , value , supportedArgument )
assertEquals ( expected , builder . toString ( ) )
TestCase . assertTrue ( matcher . match ( new C ( 1 , 2 , 3 , 4 ) ) )
assertNotNull ( result )
Assert . fail ( "It succeeded while an Exception is expected: " + msg . getContent ( ) )
Assert . assertEquals ( vXLong . getValue ( ) , vXLong1 . getValue ( ) )
assertEquals ( Timestamp . valueOf ( "1970-01-01 00:00:00" ) , ts )
assertEquals ( "Base for longs is wrong" , "3" , parsed )
assertEquals ( set . size ( ) , n * nThreads )
assertEquals ( "Base for longs is wrong" , "3" , parsed )
assertFalse ( this . it . hasNext ( ) )
assertThatSql ( query , is ( "SELECT * FROM table AS nodes " + "WHERE NAME(nodes) > $literal" ) )
assertEquals ( "Select with exists check" , expectedSql , testDialect . convertStatementToSQL ( stmt ) )
assertTrue ( true )
Assert . assertEquals ( "SELECT s1\nFROM t1\nWHERE s1 = ANY (SELECT s1\n\tFROM t2);" , text )
assertThat ( instance . getDateOfDay ( ) , is ( localDate ) )
classes . assertContainsAnnotations ( someInfo ( ) , actual )
assertEquals ( 2 , pojo . val )
Assert . assertArrayEquals ( new String [ ] { "*" , "*" } , toStringArray ( tokens ) )
assertTrue ( rs . next ( ) )
assertThat ( text ( contents ) , is ( "HELLO\thello\n" ) )
Assert . assertEquals ( 2 , arrays . size ( ) )
assertEquals ( userDao . getUsernames ( usernamePattern , resultCount ) . size ( ) , 2 )
assertEquals ( Response . Status . OK . getStatusCode ( ) , target . request ( MediaType . TEXT_PLAIN ) . get ( ) . getStatus ( ) )
Assert . assertTrue ( contains )
assertEquals ( DockerConnectorConfiguration . UNIX_SOCKET_URI , uri )
assertEquals ( 2 , removeAllEmpty . size ( ) )
assertThat ( value , is ( valueOfDesc2 ) )
Assert . assertTrue ( "expected for sortForward" , foundSortForward )
Assert . assertEquals ( 412 , stringResponse . getStatus ( ) )
assertListTEquals ( listOneTwo , 1 , 2 , 3 , 4 , 5 )
assertEquals ( "fa 3 dies 15 hores 38 minuts" , t . format ( durations ) )
assertEquals ( o , result . getValue ( ) )
assertTokensEqual ( of ( INCREMENT , PLUS ) , tokens )
assertEquals ( eAdded , eRetrievedAgain )
assertThat ( factory . create ( value ) , is ( Long . valueOf ( value . getTimeInMillis ( ) ) ) )
assertTrue ( h . getNewURL ( ) . equals ( "/NewSimpleUrl" ) )
assertTrue ( cut . getAttributes ( ) . isEmpty ( ) )
Assert . assertNotNull ( registry )
assertEquals ( bestIndividual . toString ( ) , bicf . getChromosome ( ) . toString ( ) )
assertEquals ( 0 , ebXML . getSlots ( ) . size ( ) )
assertFalse ( validAnagram . isAnagram ( s , t ) )
assertEquals ( IP_10_123_1_54_80 , StringUtils . formatSocketAddress ( inetSocketAddress ) )
assertThat ( supplier . authForSwarm ( ) , is ( nullValue ( ) ) )
Assert . assertTrue ( ArrayUtils . equals ( a1 , a2 ) )
assertEquals ( "1.2." + part , cfBundleShortVersionStringTransformer . transform ( "1.2." + part ) )
assertTrue ( "i=" + i + " d=" + d , ! nnList . isEmpty ( ) )
assertEquals ( 1 , x . size ( ) )
Assert . assertTrue ( pss . toString ( ) . contains ( "123" ) )
assertEquals ( expectedBindingString , relativizedVolumeString )
assertThat ( authorizationRequest1 , is ( not ( authorizationRequest2 ) ) )
Assert . assertEquals ( 0.0 , correlation . correlation ( xArray , yArray ) , Double . MIN_VALUE )
_mock . assertIsSatisfied ( )
Assert . assertEquals ( "Connect to http://localhost timed out" , ctx . getMessage ( ) )
assertEquals ( "unexpected number of expected problems" , 0 , equeue . size ( ) )
Assert . assertThat ( list , Is . is ( Arrays . asList ( "1" , "1_1" , "1_2" , "1_3" , "1_4" , "2_1" , "2_2" , "2_3" , "2_4" , "3" , "4" , "5" , "6" , "7" ) ) )
assertAlias ( sql , columnParam , "nor" , param )
Assert . assertEquals ( expectedMap , filtered )
assertThat ( ages . size ( ) , greaterThanOrEqualTo ( 3 ) )
assertEquals ( "HSIH7" , builder . buildLocalSymbol ( "HSI" , 3 , 2017 ) )
assertArrayEquals ( expected , coeffs )
assertEquals ( builder . learningCurveLimit , 3 )
this . assertIndices ( im ( 0 , 0 ) , im ( 1 , 1 ) , im ( - 1 , 2 ) , im ( 2 , 3 ) , im ( 3 , 4 ) )
Assert . assertEquals ( 4 , result . getTotalHits ( ) )
assertThat ( spec , is ( 0 ) )
assertOut ( "for (var /** @type {*} */ p in a.propertyNames())\n  a.deleteProperty(p);" )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( destinationFolder + filename , sourceFolder + "cmp_" + filename , destinationFolder , "diff_" ) )
assertFalse ( client . getSessionFactory ( ) . isConnected ( ) )
assertEquals ( "Resolved string form was incorrect " , sql , resolvedQuery . toString ( ) )
Assert . assertEquals ( - 1 , entity . getContentLength ( ) )
assertThat ( event , is ( expected ) )
assertThat ( url1 . toFullString ( ) , anyOf ( equalTo ( "dubbo://admin:hello1234@10.20.130.230:20880/context/path?version=1.0.0&application=morgan" ) , equalTo ( "dubbo://admin:hello1234@10.20.130.230:20880/context/path?application=morgan&version=1.0.0" ) ) )
Assert . assertTrue ( checked . get ( ) )
assertEquals ( "Hello there world" , doc . select ( "div > *" ) . text ( ) )
assertEquals ( 9.0060123 , ceosReader . readFn ( 16 ) , 1E-10 )
assertTrue ( delete . isSuccessful ( ) )
assertTrue ( Collections . nonNullElementsIn ( c ) . isEmpty ( ) )
assertHelpLines ( "Option                   Description        " , "------                   -----------        " , "-a <Integer: numerical>  some value you need" , EMPTY )
assertSame ( procBind , uriTools . resolveUri ( PROFILE_URI . resolve ( "processorbinding/Hello/" ) , wfBundle ) )
assertEquals ( encoded . length , fixture . prepareToEncode ( context ) )
assertTrue ( field . isASingleValue ( ) )
assertEquals ( inputformat , pipes . getInputformat ( ) )
Assert . fail ( "Unterminated value accepted" )
assertProject ( workspaceProject )
assertEquals ( VALUE , jwt2 . getJWTClaimsSet ( ) . getSubject ( ) )
assertTrue ( token . equals ( token ) )
assertThat ( isValid , is ( false ) )
Assert . assertThat ( existing , CoreMatchers . nullValue ( ) )
assertEquals ( "Test message {}a b" , result )
assertEquals ( 0 , tasks . size ( ) )
Assert . assertEquals ( Status . NOT_FOUND . getStatusCode ( ) , resp . getStatus ( ) )
Assert . assertTrue ( readable )
Assert . fail ( e . getMessage ( ) )
assertTrue ( EqualsBuilder . reflectionEquals ( config , config2 , "keyStore" , "ourCertificate" ) )
assertEquals ( 123L , book . getId ( ) )
Assert . assertEquals ( "Setting a null expand mode should default to Client" , WTree . ExpandMode . CLIENT , tree . getExpandMode ( ) )
assertUsers ( ldapUserInfo , false , false , false , false )
assertTrue ( page . asText ( ) . contains ( "must be a number consisting of one or more digits" ) )
Assert . assertFalse ( policy . isResponseCacheable ( request , response ) )
assertThat ( building . isPresent ( ) , is ( false ) )
Assert . assertEquals ( range . getQualifyingPageNums ( 16 ) , Arrays . asList ( 11 , 12 , 13 , 14 , 15 , 16 ) )
TestUtils . assertInvalidParameters ( victim )
assertEquals ( "null driver config means astyanax" , IOContainer . DriverType . ASTYANAX , driver )
Assert . assertFalse ( result )
assertEquals ( shexc . getExitCode ( ) , 0 )
assertEquals ( "VOID" , verifyType )
mock . assertIsNotSatisfied ( )
assertEquals ( "b" , mat . group ( ) )
assertArrayEquals ( TEObjectUtil . TE_LSP_REQUIRED_ATTRIBUTES , ByteArray . getAllBytes ( output ) )
assertThat ( new PullRequestApproval ( Config . builder ( ) . requiredReviewers ( newArrayList ( "user1" , "user2" , "user3" ) ) . requiredReviews ( 2 ) . build ( ) , utils ) . isPullRequestApproved ( pr ) , is ( false ) )
assertThat ( "String" , object , is ( value ) )
assertNotNull ( Command . reader ( ) . read ( ) )
assertFalse ( result . passedValidation ( ) )
assertProxy ( entityCaptor . getValue ( ) )
Assert . assertArrayEquals ( hashes , results )
assertEquals ( Preconditions . class , type )
assertEquals ( DemoConnection . class , connectionClass )
Assert . assertEquals ( "Incorrect file types returned" , Arrays . asList ( types1 ) , widget . getFileTypes ( ) )
assertToStringJoinEquals ( "" , x )
assertEquals ( expected , reference . get ( ) )
assertNotNull ( getControl ( mock ) )
assertEquals ( ( long ) 8 , result . getLongValue ( ) )
assertTrue ( "correct vocab not found" , test )
assertTrue ( e instanceof E_StrEndsWith )
assertEquals ( "Six rules are set" , 6 , ss . size ( ) )
assertThat ( results , is ( new String [ ] [ ] { { "A" , "B" } , { "C" , "D" } } ) )
assertEquals ( 2 , jobsToSubmit . size ( ) )
assertNotNull ( annotator . getMonitor ( ) )
assertNotNull ( Service . reader ( ) . read ( ) )
assertEquals ( new TypeTag ( String [ ] . class ) , actual )
assertThat ( threadCount , is ( AVAILABLE_PROCESSORS * 2 ) )
Assert . assertEquals ( "Hash is invalid" , TestVectors . SHA512_DIGEST_EMPTY_STRING , result )
assertEquals ( "Wrong count zeros" , count , bitseq . countZeros ( ) )
assertEquals ( 1 , reportResults . size ( ) )
assertThat ( managementService . getJobExceptionStacktrace ( timerJobId ) , notNullValue ( ) )
assertThatReassembledMessageEqualsOriginalMessage ( result )
Assert . assertEquals ( 4 , collector . actualResults . size ( ) )
assertEquals ( 1 , sut . size ( ) )
Assert . assertTrue ( queueResponse . isOk ( ) )
Assert . assertEquals ( employee4 . getId ( ) , q . getSingleResult ( ) )
assertEquals ( 15 , result )
assertNull ( retrievedState )
assertEquals ( 3 , counter . getBeforeFileTreeWalkCount ( ) )
assertTrue ( barrier . isClosed ( ) )
assertTrue ( _receiver . isEventHandled ( ) )
assertEquals ( "testDesc" , trace . getDescription ( ) )
assertEquals ( var1 , "test" )
assertEquals ( witnessList , partList )
Assert . assertEquals ( "4=4(2=2,5=5)" , tree . toString ( ) )
assertEquals ( "TokenValue passed into constructor not returned by getTokenValue()" , "imsurethiswillwork" , sut . getTokenValue ( ) )
Assert . assertEquals ( 1 , deviceGroupRegistry . getAllGroupIds ( ) . size ( ) )
assertEquals ( "x y + ; x y -" , this . codeGenerator . getPostFixExpression ( ) )
assertEquals ( obj2 , obj1 )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( - 1 , decoder . read ( cbuf , 0 , cbuf . length ) )
assertEquals ( 0 , values . get ( new MultivectorComponent ( "out" , 0 ) ) , 10E-3 )
assertEquals ( "Input value json should match output value json" , inputJson , outputJson )
assertNotNull ( processInstance . getId ( ) )
assertEquals ( 84L , x . value )
assertObject ( args )
assertTrue ( true )
assertTrue ( issues . size ( ) > 0 )
assertEquals ( expResult , result , 0.001 )
Assert . assertFalse ( faceted . install ( facet ) )
assertThat ( backingMap . values ( ) , contains ( axiom ) )
Assert . assertArrayEquals ( REDIRECT_IPV4 , output . array ( ) )
assertEquals ( "Hello ÿþü\n" + "H e l l o   每 镁眉\n" + " " , new String ( bytes , "ISO-8859-1" ) )
ITUtils . assertReceivingDifferentRows ( proxy , key , ROW_COUNT + 2 )
assertEquals ( BPResultType . PASS , testResult . getResultType ( ) )
Assert . assertTrue ( IntrospectUtil . hasCollectionType ( typeClass ) )
assertEquals ( "/events/" + "bar/group/id" , result )
assertTrue ( result [ 0 ] != result [ 1 ] )
assertThat ( eventsFired . size ( ) , equalTo ( 1 ) )
assertEquals ( StatusCode . NAMESPACE_NOT_FOUND , response . getCode ( ) )
assertFalse ( indexFilterHook . indexIsApplicable ( indexRecordFilter , Table . RECORD . name , oldRecord , null ) )
assertThat ( result . toString ( ) , is ( equalTo ( "H" ) ) )
Assert . fail ( e . getMessage ( ) )
Assert . assertEquals ( "size()" , testBuffer . result )
assertEquals ( 1 , executor . getNoTimesExecuted ( ) )
assertEquals ( DEFAULT_GRAPHITE_IPPORT , backendAlarm . getGraphiteBaseUrl ( ) )
assertEquals ( 42 , task . getPriority ( ) )
assertEquals ( "none condition serialization is wrong" , expected , actual )
assertEquals ( ok , result )
Assert . assertEquals ( 3 , E . withComponent ( Basic . class ) . size ( ) )
assertEquals ( annotations , annotationsOnMethod )
assertTrue ( result . isEmpty ( ) )
assertEquals ( results , linkedLists )
assertTrue ( file . getName ( ) . endsWith ( ".class" ) )
assertEquals ( - 1 , resultComparator . compare ( fd1 , fd2 ) )
Assert . fail ( "create bucket under non-mount-point directory should fail" )
Assert . assertEquals ( bean . getDataSource5 ( ) . getConnection ( ) . nativeSQL ( "dse" ) , "dse" )
assertEquals ( expected , actual )
assertEquals ( "Inputstream to string" , fileContent )
Assert . assertEquals ( obj , o )
Assert . assertTrue ( result . getNumElementsProcessed ( ) == 0 )
assertEquals ( expResult , stringBuilder . toString ( ) )
assertTrue ( PureEvaluator . isUnpureCacheEmpty ( ) )
assertNotEquals ( feather . instance ( Plain . class ) , feather . instance ( Plain . class ) )
assertThat ( testProps . getDefinitionRegistry ( ) , equalTo ( registry ) )
assertEquals ( AuthorizationResult . denied ( ) . getResult ( ) , result . getResult ( ) )
assertEquals ( new int [ ] { 1 , 1 , 1 } , res , 3 , "address='CTRIP'" )
assertTrue ( getExpectedErrorMsg ( ) , result )
Assert . assertEquals ( "[foobar1, foobar2, foobar3]" , Arrays . toString ( foobars . toArray ( ) ) )
assertArrayEquals ( resultAddress , address )
assertEquals ( expectedQuery , query )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertThat ( converted , is ( notNullValue ( ) ) )
assertFalse ( result )
assertThat ( initiativeInfo . isVotingStarted ( TODAY ) , is ( true ) )
Assert . assertEquals ( XMLStreamConstants . COMMENT , reader . nextEvent ( ) . getEventType ( ) )
assertNotNull ( result )
assertNotNull ( post )
Assert . assertNull ( test . merge ( ) )
assertThat ( results . isEmpty ( ) , is ( true ) )
assertEquals ( "In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf." , p . text ( ) )
assertThat ( basicDBObject . get ( "dateOfDay" ) , is ( ( Object ) now . toDateTimeAtStartOfDay ( ) . getMillis ( ) ) )
arrays . assertContainsSequence ( someInfo ( ) , actual , emptyArray ( ) )
assertThat ( html , is ( "" ) )
assertThat ( config . get ( propertyKey ) , is ( propertyValue ) )
Assert . fail ( "exception condition expected" )
assertEquals ( "wrong field name" , "Currency" , dd . getFieldName ( 15 ) )
assertNull ( x . f1 )
assertThat ( mentions , hasItem ( mentionedRevision ( 0 , 3 , 33L ) ) )
assertTrue ( "Result XML does not match expected" , monitoring . matches ( "(?s).*<SituationExchangeDelivery><Situations><PtSituationElement><SituationNumber>1_1</SituationNumber><Summary xml:lang=\"EN\">summary</Summary><Description xml:lang=\"EN\">description</Description><Affects><VehicleJourneys><AffectedVehicleJourney><LineRef>1_100277</LineRef><DirectionRef>0</DirectionRef></AffectedVehicleJourney><AffectedVehicleJourney><LineRef>1_100277</LineRef><DirectionRef>1</DirectionRef></AffectedVehicleJourney><AffectedVehicleJourney><LineRef>1_100194</LineRef><DirectionRef>0</DirectionRef></AffectedVehicleJourney><AffectedVehicleJourney><LineRef>1_100194</LineRef><DirectionRef>1</DirectionRef></AffectedVehicleJourney></VehicleJourneys></Affects></PtSituationElement></Situations></SituationExchangeDelivery></ServiceDelivery></Siri>.*" ) )
assertEquals ( false , service . processMessage ( null , message . getBytes ( ) ) )
assertEquals ( "Expected 6 results!" , 6 , n )
assertNotNull ( e )
assertEquals ( "<span>Hello <div>there</div> <span>now</span></span>" , TextUtil . stripNewlines ( doc . body ( ) . html ( ) ) )
Assert . assertNotNull ( registry )
assertNotNull ( Build . reader ( "ZSXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . read ( ) )
assertThat ( dummyConfigurationConfigLoader . getTestConfig ( ) . getSomeDummyEnvAttribute ( ) , CoreMatchers . is ( "defaultValue" ) )
assertTrue ( firstResult . equals ( lastResult ) )
assertThat ( other , DateMatchers . sameMillisecondOfSecond ( date ) )
assertEquals ( expected , cls )
assertTrue ( isOpened )
assertThat ( result . statusCode , is ( Response . OK ) )
assertThat ( factory . getProblems ( ) . isEmpty ( ) , is ( true ) )
assertNotNull ( Flow . fetcher ( "FWXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" ) . fetch ( ) )
assertThat ( called , is ( equalTo ( Arrays . asList ( "ExecuteTestSuite1" , "ExecuteTestCase1" , "DoCommand1" , "DoCommand2" , "ExecuteTestCase2" , "ExecuteTestSuite2" ) ) ) )
assertThat ( start . until ( end , Duration . in ( YEARS , MONTHS ) ) , is ( Duration . ofCalendarUnits ( 4 , 11 , 0 ) ) )
Assert . assertNull ( session , "No session should have been created when proxy set is empty" )
Assert . assertFalse ( currentUser . hasRole ( "Game Overall Director" ) )
assertTrue ( dto . getProductId ( ) > 0 )
assertEquals ( "bar" , rs . getString ( 1 ) )
Assert . assertEquals ( DECEASED , json . get ( DATA_NAME ) )
assertEquals ( Integer . valueOf ( 2 ) , result )
Assert . assertTrue ( value )
assertEquals ( 23 , adapter . classify ( "23" ) . intValue ( ) )
assertTrue ( SamplesParser . getSamples ( sampleFile ) . isEmpty ( ) )
Assert . assertEquals ( expected , actual )
Assert . assertNotNull ( r )
assertTrue ( CycleDetection . hasCycle ( TestGraphFactory . createDirectedNew ( data ) ) )
Assert . assertSame ( elem , mergeElem )
assertThat ( Latin1Conversion . convertString ( control ) , is ( " " ) )
assertTrue ( acl . hasPermission ( ANONYMOUS_USER , Item . READ ) )
assertEquals ( "No errors should be registered" , 0 , errors . getErrorCount ( ) )
assertTrue ( result . size ( ) > 0 )
Assert . assertEquals ( 2000 , duration , 100 )
assertEquals ( ImmutableList . of ( person ) , found )
Assert . assertTrue ( mapping . get ( "test.dictionary" ) instanceof DictionarySerializer )
assertEquals ( 1 , entities . size ( ) )
assertEquals ( "x.a = enum:org.apache.cayenne.exp.ExpEnum1.THREE" , ejbql )
org . junit . Assert . assertEquals ( 200 , response . getStatus ( ) )
assertEquals ( custom . getGap ( ) , ( ( VerticalLayout ) container . getLayout ( ) ) . getGap ( ) )
assertThat ( tz . getOffset ( utc ) . canonical ( ) , is ( "UTC+01:00" ) )
assertEquals ( initialHashCode , pm . getHash ( ) )
assertEquals ( expected , cat . getValue ( ) )
assertNull ( parsedArg )
assertEquals ( "3" , person . order ( ) )
assertEquals ( "/component=myComp/version=1.2" , dispatchCriteria )
assertEquals ( 2 , accounts . size ( ) )
assertTrue ( s . isRequired ( ) )
Assert . assertEquals ( expResult , result )
assertEquals ( expected , out )
assertEquals ( "\"NAME\" LIKE ?" , QueryBuilder . getWhereStringForFilter ( f , sh ) )
assertArrayEquals ( expected , service . getDomainsForServer ( handle ) )
assertEquals ( DataTypeManager . DefaultDataClasses . STRING , command . getProjectedSymbols ( ) . get ( 0 ) . getType ( ) )
assertEquals ( "Local lookup was not inherited" , "(x)" , subset . getString ( "var" , "" ) )
Assert . assertEquals ( 2 , iinv . getBackupStorageRefs ( ) . size ( ) )
assertEquals ( 5. , start . getTheoreticalLatestOperationStartTime ( ) , 0.01 )
getStream ( streamId ) . statusCode ( 200 ) . assertThat ( )
assertNotNull ( inverseCheck . getOwner ( ) )
assertSame ( expectedOS , resultingOS )
Assert . assertEquals ( "{ 1 -> one , 2 -> two , 3 -> three , 4 -> four }" , MapUtils . toString ( map ) )
assertEquals ( "" , nameField . getValue ( ) )
assertEquals ( expectedContentRange , uploader . constructContentRangeHeaderValue ( requestLength , false , status ) )
assertNotNull ( info )
Assert . assertEquals ( 42L , rs . getInt ( 1 ) )
Assert . assertEquals ( result , record )
assertThat ( result , equalTo ( Result . NEUTRAL ) )
assertTrue ( Arrays . equals ( expected , sink . resolutions ) )
assertThat ( "Issues detected in a valid VM instance" , validation . pass ( Report . WITHOUT_WARNING ) )
assertTrue ( resolved . matches ( "tcp://\\d+\\.\\d+\\.\\d+\\.\\d+:90" ) )
assertTrue ( field . isRequiredIndicatorVisible ( ) )
assertEquals ( event . getRootNode ( ) , RootNode . ROOT )
assertEquals ( "No test cases should fail" , 0 , runTestsResults . getFailedTests ( ) . size ( ) )
assertThat ( actual . matches ( "x" ) , is ( true ) )
assertTrue ( revisions . isEmpty ( ) )
assertThat ( MomentInterval . between ( start , end ) . contains ( PlainTimestamp . of ( 2014 , 5 , 14 , 0 , 0 , 1 ) . atUTC ( ) ) , is ( false ) )
assertEquals ( expResult . trim ( ) , result . trim ( ) )
assertNotSame ( fixture , copy )
assertEquals ( "a b\n" , found )
assertThat ( cache . get ( "key1" ) , is ( "alex" ) )
assertEquals ( "10" , groupId )
assertEquals ( HttpStatusCode . NO_CONTENT . code , response . getStatus ( ) )
assertTrue ( calledExceptionHandler . isProtectedHandlerCalled ( ) )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm:ss" , result ) )
assertTrue ( "Accepts a method that returns a Page" , interceptor . accepts ( resourceMethodThatReturnsPage ) )
assertSame ( "Cloned instance" , TimeoutNow . INSTANCE , cloned )
assertEquals ( actual , expected )
Assert . areEqual ( IllegalArgumentException . class , ex . getClass ( ) , "出现异常" )
Assert . assertNotNull ( pi )
assertThat ( read ( format , written ) , contains ( 100d ) )
assertEquals ( statisticsService . getPostsOnForumCount ( ) , expectedCount )
assertObjectEquals ( "{}" , t )
assertNumEquals ( numOf ( Math . log ( 99d / 100 ) ) , varCriterion . calculate ( series , trade ) )
assertEquals ( asList ( new LoginAccepted ( 1 ) ) , clientEvents . collect ( ) )
Assert . fail ( "Should not have succeeded" )
assertTrue ( isGroebnerBasis ( gens , gb , GREVLEX ) )
assertEquals ( cut . createTask ( beforeSave ) , afterSave )
assertFalse ( new PetFilter ( ) . dogsOnly ( payload ) )
Assert . assertFalse ( reflect . isSuperClass ( genericType ) )
assertEquals ( "12 屑懈薪���邪薪 泻械泄�薪" , t . format ( new Date ( 1000 * 60 * 12 ) ) )
assertTrue ( list . isEmpty ( ) )
assertThat ( subjectOf ( axiom ) , isOptionalOf ( dataPropertyExpression ) )
Assert . assertEquals ( 100 , cache . size ( ) )
shorts . assertNotLessThan ( description , actual , expected )
assertThat ( numbersList , contains ( 0 , 3 , 6 , 9 , 12 , 15 , 18 , 21 , 24 , 27 ) )
assertSame ( listOfTodos , retList )
assertEquals ( numbers , this . model . getNumbers ( ) )
assertThat ( b1 , is ( b2 ) )
assertThat ( dump , is ( "[0,0,0,0,0,0,0,0,0,0,]" ) )
assertQuery ( true , query )
assertThatReadableIs ( true )
Assert . assertEquals ( expected , compoundWrite . apply ( baseNode ) )
assertFalse ( ByteBufferUtils . isEmpty ( bb ) )
assertEquals ( expected , actual )
assertEquals ( 201 , status . getStatusLine ( ) . getStatusCode ( ) )
assertEquals ( true , classUnderTest . isFileOpenInSpecifiedDir ( ) )
assertEquals ( helloWorld . helloMessage ( ) , "Well hi there" )
assertThat ( actual , is ( equalTo ( expected ) ) )
assertFalse ( throttled )
assertThat ( extractedLines . size ( ) , equalTo ( 0 ) )
assertEquals ( EXPECTED_DELETE_WORKSPACE_PATH , path )
Assert . assertTrue ( result . getCode ( ) != HttpStatus . SC_PARTIAL_CONTENT || result . getFirstHeader ( "Date" ) != null )
assertTrue ( stats . getReceivedMessageGaps ( ) . isEmpty ( ) )
Assert . assertTrue ( groupManager . isInGroup ( entity , "test" ) )
Assert . assertEquals ( dialect . getURL ( conn ) , "jdbc:hive2://null:null/null" )
assertNull ( s )
assertThat ( request . validate ( ) , equalTo ( false ) )
assertThat ( testColor . name + " on " + serialized , base , is ( deserialized . getColor ( "color" ) ) )
assertionHelper . assertIrodsFileMatchesLocalFileChecksum ( getIRODSFile . getAbsolutePath ( ) , getLocalFile . getAbsolutePath ( ) , irodsFileSystem . getIRODSAccessObjectFactory ( ) , secondaryAccount )
assertThat ( isValid , is ( true ) )
assertEquals ( false , log . hasEvents ( ) )
assertTrue ( ex . isOddNumber ( 3 ) )
Assert . assertFalse ( errors . hasErrors ( ) )
assertNull ( "index not present" , ais ( ) . getTable ( SCHEMA , T1_NAME ) . getIndex ( "x" ) )
assertEquals ( "void f(void* target) {\n" + "    ((void (*)(void)) target)();\n" + "}\n" , BridgeMethodCompiler . createBridgeCWrapper ( functionType . getReturnType ( ) , functionType . getParameterTypes ( ) , functionType . getParameterTypes ( ) , "f" ) )
assertEquals ( ParseIssue . UNSPECIFIED , exception . getParseIssue ( ) )
assertThat ( responseStep . callResponse . getResult ( ) . getItems ( ) , containsInAnyOrder ( s1 , s2 ) )
assertXpathExists ( "//h1[not(@id)][text() = 'My Title']" , html )
assertions . doesNotContainValue ( value )
assertSuccess ( new FailingWorkerListener ( ) , JOB_SUCCESS )
assertNotNull ( data . getString ( 0 , data . length ( ) ) )
assertNotNull ( request . getSession ( ) . getAttribute ( Constants . PREFERRED_LOCALE_KEY ) )
assertNotNull ( "submission was not properly returned" , submission )
assertTrue ( getNoErrorMsg ( ) , result )
assertThat ( IntraDayDate . toList ( days ) , delimitedBy ( start , middle , end ) )
Assert . assertEquals ( 100. , time , 0.01 )
assertArrayEquals ( "The branch name array is incorrect" , new String [ ] { "override-branch" } , scm . getBranchNames ( EMPTY_VARIABLE_RESOLVER ) )
assertEquals ( true , result )
assertEquals ( read ( pom ) , "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" + "<project>\n" + "    <modelVersion>4.0.0</modelVersion>\n" + "    <artifactId>artifact-id</artifactId>\n" + "    <groupId>group-id</groupId>\n" + "    <version>x.x.x</version>\n" + "</project>" )
assertEquals ( "job" , manager . getType ( ) )
Assert . assertEquals ( FastMath . PI , solver . solve ( 100 , f , 3.0 , 3.2 , 3.1 ) , solver . getAbsoluteAccuracy ( ) )
assertFalse ( quota . check ( blobStore ) . isViolation ( ) )
assertEquals ( expected , expression . toString ( ) )
Assert . assertEquals ( XML_STRING , result )
assertThat ( domain . getServer ( "server1" , "cluster1" ) . shouldStart ( 0 ) , is ( false ) )
assertNotNull ( version )
assertEquals ( formatted , "235:03:57.55100" )
assertNull ( bucket )
assertDegenerate ( scan )
assertEquals ( "Expected 10 results!" , 10 , n )
assertNotNull ( mds )
Assert . assertEquals ( 0 , this . sqlgGraph . traversal ( ) . E ( ) . has ( T . label , "friendXXX" ) . count ( ) . next ( ) , 0 )
assertFalse ( strings . hasNext ( ) )
assertThat ( infos , hasSize ( 0 ) )
assertTrue ( voter . voteMatch ( affiliation , organization ) )
assertEquals ( "TYPE_STRING" , ModisFileReader . getTypeString ( "TYPE_STRING" , product ) )
Assert . assertEquals ( 0.8683 , pValue , 0.09 )
assertEquals ( expected , getString ( TestGroupByImpl . example ( ) ) )
assertEquals ( 1 , artist . getPaintingArray ( ) . size ( ) )
assertEquals ( "TestSetMap 0" , map , entityTypeToFilterQueryService . getMap ( ) )
assertTrue ( urlWithPathAndParam . equals ( urlString ) || urlWithPathAndParam1 . equals ( urlString ) )
assertThat ( invocationCtx . getInputCount ( ) , equalTo ( 1 ) )
assertEquals ( vars ( "a" ) , getNonPseudoVars ( csv , true ) )
assertTrue ( rank < 2 )
assertMockEndpointsSatisfied ( )
assertEquals ( "Wrong # of objects returned" , 1 , list . size ( ) )
assertVisitorSatisfied ( )
assertTrue ( initSuccessful )
assertEquals ( "date must not be changed in isSelected" , copy , today )
assertThat ( exitValue , is ( 0 ) )
Assert . assertNotNull ( addressResultsDto )
assertEquals ( 1 , testDescriptor . getChildren ( ) . size ( ) )
assertTrue ( humanName . hasGiven ( "test" ) )
assertMockEndpointsSatisfied ( )
Assert . assertEquals ( false , retval )
assertEquals ( expResult , result )
assertThat ( sql , equalTo ( "update UserInfo set name = case id when 77 then '����' when 88 then name when 99 then '姊�' else name end,age = case id when 77 then '18' when 88 then age when 99 then '16' else age end where id in(77,88,99)" ) )
Assert . fail ( "NullPointerException should have been thrown" )
assertFalse ( controller . isLoggedOn ( ) )
assertNull ( c . get ( ) )
arrays . assertEndsWith ( description , null , newArray ( true ) )
assertThat ( content . get ( 0 ) , containsString ( "No action in agent argument, do nothing!" ) )
assertEquals ( 0 , mockResult . included ( "totalPostReports" ) )
assertMockEndpointsSatisfied ( )
context . assertIsSatisfied ( )
assertTrue ( resultMessage ( result , PUT ) , result . passedValidation ( ) )
assertEquals ( 1 , result . getQueueID ( ) )
assertEquals ( "(a + b).toLowerCase()" , str )
assertNotNull ( doc )
assertEquals ( obj , result )
assertEquals ( 2 , rpt . size ( ) )
Assert . fail ( "get non-existent object should fail" )
assertSame ( "Should be same JClass" , codeModel . ref ( "org.test.ClassNotOnClasspath" ) , codeModel . ref ( "org.test.ClassNotOnClasspath" ) )
assertEquals ( "LIMIT 5 RETURNING foo" , statement . toString ( ) )
Assert . assertEquals ( 3 , jobs . size ( ) )
Assert . assertArrayEquals ( ENCODED_VALUE , byteOutputStream . toByteArray ( ) )
assertTrue ( Cells . isEmpty ( cell ) )
assertTrue ( repository . getFeatureState ( DummyFeature . TEST ) . isEnabled ( ) )
assertEquals ( String . format ( "{\"now\":\"%s\"}" , now . toString ( ) ) , gson . toJson ( new Holder ( now ) ) )
Assert . assertFalse ( context . getResult ( ) )
assertNotNull ( "CopticChronology not found" , chronos . get ( "Coptic" ) )
assertMockEndpointsSatisfied ( )
assertEquals ( original , restored )
assertions . contains ( null , index )
Assert . assertEquals ( 0 , repository . size ( ) )
assertEquals ( expectedDate , formatDate ( "yyyy-MM-dd HH:mm" , result ) )
assertEquals ( ( short ) 8 , result . getShortValue ( ) )
assertEquals ( "ei" , ce . getId ( ) )
assertOutMXMLPostProcess ( outTemplate . replaceAll ( "AppName" , appName ) , true )
assertThat ( calvalusDataInputs . toString ( ) , equalTo ( "calvalus.wps.remote.ref : 1738ad7b-534e-4aca-9861-b26fb9c0f983\n" + "minDate : 2016-01-01T01:00:00+01:00\n" + "calvalus.output.compression : none\n" + "processorBundleLocation : hdfs://calvalus/calvalus/software/1.0/beam-buildin-1.0\n" + "calvalus.wps.remote.user : dummyRemoteUser\n" + "productionType : L2Plus\n" + "inputDataSetName : MERIS RR  r03 L1b 2002-2012\n" + "processorBundleVersion : null\n" + "calvalus.calvalus.bundle : calvalus-2.0b411\n" + "inputPath : /calvalus/eodata/MER_RR__1P/r03/${yyyy}/${MM}/${dd}/.*.N1\n" + "minDateSource : 2016-01-01T01:00:00+01:00\n" + "quicklooks : true\n" + "autoStaging : true\n" + "calvalus.snap.bundle : snap-3.0.0\n" + "processorName : null\n" + "maxDate : 2017-01-01T01:00:00+01:00\n" + "processorBundleName : null\n" + "processorParameters : null\n" + "productionName : dummyProductionName\n" + "maxDateSource : 2017-01-01T01:00:00+01:00\n" + "calvalus.system.snap.dataio.bigtiff.support.pushprocessing : false\n" ) )
Assert . assertEquals ( 2 , resultList . size ( ) )
assertFalse ( registryService . doesKeyExist ( "HKLM" , null ) )
assertThat ( fe , notNullValue ( ) )
Assert . assertEquals ( 3 , visitor . getBindVarConditions ( ) . size ( ) )
Assert . assertTrue ( jsonEqual ( expResult , EntityFormatter . writeEntity ( entity ) ) )
assertEquals ( "TextBuilder String Is 1" , _textBuilder . toString ( ) , "1" )
assertEquals ( 1 , cache . listPrivileges ( null , null , null ) . size ( ) )
Assert . assertEquals ( SpringContainer . class , container . context . getBean ( "container" ) . getClass ( ) )
Assert . fail ( "This should have failed due to a circular reference" )
assertThat ( collection . getDocument ( externalDoc . getKey ( ) , BaseDocument . class , new DocumentReadOptions ( ) . streamTransactionId ( tx . getId ( ) ) ) , is ( nullValue ( ) ) )
assertThat ( sentGetRequest ( "http://127.0.0.1:19000/api/job/jobs/test_job" ) , is ( CloudJsonConstants . getJobJson ( ) ) )
assertToken ( expectedTokens , select ( jcas , Token . class ) )
assertEquals ( "No tests ran." , content )
assertThat ( evaluator . evaluate ( corc ) , is ( TruthValue . YES ) )
Assert . assertEquals ( expected , actual )
assertEquals ( 3 , maxConsequetiveOnes . findMaxConsecutiveOnes ( numbers ) )
assertEquals ( 5 , context . select ( q1 ) . size ( ) )
assertEquals ( "incorrect_client_credentials" , res . cause ( ) . getMessage ( ) )
assertTrue ( metricsByCategory . isEmpty ( ) )
assertNoneEqual ( otherGroupFqans )
assertSet ( queryReturns ( kate , ashley ) , whenFilteringBy ( IN , Arrays . asList ( "Kate" , "Ashley" ) ) )
assertEquals ( t , new LeadChangeRecord ( ) . toString ( ) )
assertThat ( isEqual , is ( true ) )
assertNotNull ( response )
assertThat ( "bob.fred[2].george" , equalTo ( m . m_fieldPath ) )
assertTrue ( aggregate . isEmpty ( ) )
assertEquals ( "003522" , String . format ( "%#6s" , agencia ) )
Assert . assertArrayEquals ( ( Object [ ] ) input . canBeAnything , ( Object [ ] ) output . canBeAnything )
assertNull ( System . getProperty ( PROPERTY_NAME_SANDBOX_NAME ) )
assertThat ( resultIds , containsInAnyOrder ( "DiagnosticReport/DR" , "Observation/parentObs" , "Observation/childObs" ) )
Assert . assertEquals ( MessageFormatUtil . format ( com . itextpdf . io . IOException . _1IsNotAnAfmOrPfmFontFile , font ) , message )
assertEquals ( 5. , Solutions . bestOf ( solutions ) . getCost ( ) , 0.01 )
Assert . assertTrue ( "Log content should match" , "1. UserOriginated: true" . equals ( getLogRow ( 0 ) ) )
assertEquals ( "h1:lang(or){line-height:1.2em}" , writer . getCSSAsString ( cascadingStyleSheet ) )
assertTrue ( "Logger should not be removed" , ops . exists ( TEST_LOGGER_ADDRESS ) )
assertEquals ( map , actual )
assertEquals ( "{\"d\":{\"EntryDate\":\"\\/Date(-42)\\/\"}}" , StringHelper . inputStreamToString ( ( InputStream ) response . getEntity ( ) ) )
assertEquals ( "5:10000000000:1.5:3.5:zzz:true" , res . join ( ) )
assertTrue ( "Oh no! No mapped object! " , store . size ( ) > 0 )
Assert . assertTrue ( isEqual ( distance , 1.0 ) )
assertThat ( chksumChannel . getChecksums ( ) , contains ( expectedChecksum ) )
assertThat ( waggleDanceConfiguration . getThriftServerStopTimeoutValInSeconds ( ) , is ( timeout ) )
Assert . fail ( )
assertThat ( schema , containsString ( "}\n\ntype TypeMutations {\n" + "  create(uri: String! entity: TypeCreateInput!): Type @createMutation(dataSet: \"rootType\" typeUri: \"" + TYPE_URI + "\")\n" + "  edit(uri: String! entity: TypeEditInput!): Type @editMutation(dataSet: \"rootType\")\n" + "  delete(uri: String! entity: TypeDeleteInput): RemovedEntity! @deleteMutation(dataSet: \"rootType\")\n" ) )
assertNotNull ( clz )
assertThat ( iterationState . next ( ) . getChangeType ( ) , is ( ASSERTED ) )
assertThat ( result . getPayload ( ) , is ( equalTo ( JSON_STRING_RECORD ) ) )
assertEquals ( 2 , list . size ( ) )
assertEquals ( "High" , filterResult . getValue ( ) )
Assert . assertTrue ( ecohImpl . dealWithAuthenticationDataEnable ( echoInfo ) . getMessage ( ) . length ( ) < response . getMessage ( ) . length ( ) )
assertThat ( collect ( userDAO . find ( ) . asList ( ) , on ( UserMongo . class ) . getId ( ) ) , contains ( user1 . getId ( ) ) )
assertNull ( "Duplicate revision" , duplicate [ 0 ] )
assertEquals ( expected , actual )
assertEquals ( firstId , secondId )
assertTrue ( v1 . getVehicleTypeIdentifier ( ) . equals ( v2 . getVehicleTypeIdentifier ( ) ) )
assertEquals ( "<!--?xml encoding='UTF-8' ?--> <html> <head></head> <body> One </body> </html>" , StringUtil . normaliseWhitespace ( doc . outerHtml ( ) ) )
assertEquals ( "no gain" , storage . read ( "no pain" ) )
assertFalse ( problem )
assertNotNull ( myService . getEm ( ) )
Assert . assertEquals ( "content" , result . getBody ( ) )
assertThat ( annotation , notNullValue ( ) )
Assert . assertEquals ( expected , testIndex . findConc ( "a:[] 'aap' b:[] :: a.word = b.lemma & a.word = b.pos" ) )
assertEquals ( 10 , all . size ( ) )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outPath , cmpPath , destinationFolder , diff ) )
assertEquals ( err , "File, 'EasyMock for class java.io.File' does not exist." )
assertTrue ( "Failed authentication was not logged" , loggedFailedAuth ( AUDIT_LOG_FILE , UNKNOWN_USER ) )
assertThat ( response , hasStatus ( HttpStatus . OK ) )
assertEquals ( "Print" , shortDescription )
assertContains ( e . getMessage ( ) , "'last'" )
assertThat ( kvStore . getCollection ( "field" ) , equalTo ( value ) )
assertThat ( dog . name , equalTo ( "Brutus" ) )
assertThat ( conceptMap . getConceptReferenceTerm ( ) . getUuid ( ) , is ( RestTestConstants1_9 . CONCEPT_REFERENCE_TERM_UUID ) )
assertThat ( isValid , is ( false ) )
assertEquals ( r , resultRA . get ( ) . get ( ) )
assertFalse ( QueryIterator . isDocumentSpecificRange ( shardRange ) )
assertTrue ( result . equals ( expected ) )
assertEquals ( "I see an elephant." , this . realiser . realise ( completeSen ) . getRealisation ( ) )
assertEqualsWithoutWhiteSpaces ( "text(text=\"test text\", size=10, halign=\"center\", valign=\"center\");" , scad . getScad ( ) )
assertNotNull ( appInitializer . getRootConfigClasses ( ) )
assertThat ( arguments . resolve ( null , null ) , contains ( "1" , "2" , "3" , "4" ) )
assertEquals ( expected , transformed )
assertEquals ( 91 , highest )
assertThat ( PlainDate . MAX . getMinimum ( model . weekOfYear ( ) ) , is ( 1 ) )
assertTrue ( component . getText ( ) . startsWith ( "Widgetset 'com.vaadin.DefaultWidgetSet' does not contain an implementation for com.vaadin.tests.widgetset.server.MissingFromDefaultWidgetsetComponent." ) )
assertThat ( tester . count ( "Hoge" ) , is ( 1 ) )
Assert . assertEquals ( 7 , response . split ( "\n" ) . length )
assertEquals ( "http://foo.org/fhir/Profile/PatientSansProfile" , def . getResourceProfile ( "http://foo.org/fhir" ) )
assertEquals ( "cfquery" , parserTag . getName ( ) )
assertThat ( hijri . with ( CommonElements . localDayOfWeek ( HijriCalendar . family ( ) , model ) . incremented ( ) ) , is ( hijri . nextDay ( ) ) )
assertThat ( allUserPermissions , hasItem ( permission ) )
assertTrue ( randomNumber <= 10 )
this . assertGet ( "policytemplates/http%253A%252F%252Fplain.winery.opentosca.org%252Fpolicytemplates/PolicyWithIcon_w1-wip1/appearance" , "entitytemplates/policytemplates/visualappearance_icon.json" )
assertEquals ( "org.test.Hello" , new ImportsToFQCN ( imports ) . resolveFQCN ( "Hello" ) )
assertAnnotations ( 1 , MilitaryPlatform . class , new TestMilitaryPlatform ( 0 , "tanks" , "GROUND" ) )
assertEquals ( 0 , classUnderTest . getNumDiagonalSquaresAvailable ( Position . d5 ) )
assertEquals ( PRICE , b . getPrice ( ) )
Assert . assertEquals ( dataset . getName ( ) + ", parameter #" + i , expected [ i ] , actual , 1e-6 * expected [ i ] )
assertThat ( readBytes ( testee ) , is ( "" ) )
assertEquals ( "JPEG" , sink . preferredOutputFormatName ( ) )
Assert . fail ( )
assertEquals ( "12.3" , converter . getAsString ( facesContext , new UIPanel ( ) , "12.3" ) )
Assert . assertEquals ( "overridden" , descriptor . getMethodPrefix ( ) )
Assert . assertFalse ( handler . managementOperation ( null , request , response ) )
Assert . assertEquals ( 2 , result . intValue ( ) )
assertTimerWithDuration ( "boundary" , TIMER_DURATION )
Assert . assertEquals ( 1 , an . analyze ( new CandidateNode ( new CandidateRule ( "test" , rule ) , nnode ) , results ) . size ( ) )
assertFalse ( wouldFire )
assertUnusedTagInSetTaggingRequest ( setTaggingRequest , String . valueOf ( false ) )
assertCardLuhnDigit ( creditCard )
assertNull ( resource )
assertThat ( supplier . authForSwarm ( ) , matchesAccessToken ( accessToken ) )
assertThat ( actual , is ( expected ) )
assertFalse ( filter . allow ( event , listener ) )
Assert . assertEquals ( "Failure expected the name to be the same" , "MessageDTO" , MHRDTO . getDTOName ( ) )
assertArrayEquals ( new String [ ] { "*" , "1" , "2" , "3" , "a" , "b" } , list . toArray ( new String [ 0 ] ) )
Assert . assertEquals ( pullRequestChange , pullRequestChangeRequest )
assertionHelper . assertTwoFilesAreEqualByRecursiveTreeComparison ( localFile , returnCompareLocalFile )
Assert . assertEquals ( AbstractClientHistory . State . CLOSED , object ( ) . state ( ) )
assertThat ( parameters . isProjectDownload ( ) , is ( false ) )
assertTrue ( organizationResponse . object . getName ( ) . equals ( name ) )
Assert . assertEquals ( "Images are not similar enough for " + name + " (" + base + ")." , 1.0 , sim , 0.01 )
assertThat ( result . statusCode , is ( Response . OK ) )
assertEquals ( 0 , throwables . size ( ) )
assertArrayEquals ( intData , getImgAsInts ( cell ) )
assertEquals ( density , 1.0 )
Assert . assertNull ( new CompareTool ( ) . compareByContent ( outFile , cmpFileName , destinationFolder , "diff36_" ) )
assertEquals ( "There should be 3 lights" , 3 , lights . size ( ) )
Assert . assertEquals ( expected , actual )
assertEquals ( value , ( Double ) subject . value ( ) , 0.01 )
assertions . doesNotContain ( entries )
assertThat ( command . getMaximumTimeMilliseconds ( ) , is ( value ) )
assertThat ( component . execute ( ) , is ( expected ) )
arrays . assertContainsOnly ( description , new short [ 1 ] , new short [ 0 ] )
assertEquals ( expectedAvro . get ( 0 ) . getSchema ( ) , schema )
Assert . fail ( "Xfdf files are not equal" )
assertThat ( CalendarQuarter . from ( cq . toProlepticNumber ( ) ) , is ( cq ) )
assertNull ( attrs . getList ( "x" , Long . class ) )
assertEquals ( ius , st )
assertNotEquals ( circle1 , circle2 )
Assert . assertTrue ( ! result1 . equals ( result2 ) )
assertEquals ( "��浠�Hash�￠����璇�" , "4FE6FF69F7257F2E8C36B0752B5393BF" , FileUtil . fileMD5 ( new File ( file ) ) . toUpperCase ( ) )
assertTrue ( taxonomy . getNode ( a ) . getDirectSuperNodes ( ) . contains ( taxonomy . getNode ( e ) ) )
Assert . assertEquals ( this . privateVisibility , this . component . getVisibility ( this . entity1 ) )
assertTrue ( thrown )
assertNotNull ( spanEvent )
assertEquals ( e . getFreeVars ( ) , "i" , "b" )
assertEquals ( expected , contentSummary . toString ( false , true ) )
Assert . assertNull ( "Entity should be null" , result )
assertEquals ( Result . STOP , and . apply ( pathData ) )
Assert . assertTrue ( namesvrAddrList . contains ( TestConstant . NAME_SERVER_ADDRESS ) )
assertResultSet ( res )
assertThat ( prop . satisfiesConstraints ( value , session ) , is ( false ) )
assertTrue ( info . remove ( ) )
Assert . assertEquals ( "�垮���″��浣��℃������" , FreeMarkerUtils . format ( tpl , args ) )
assertNotNull ( resource )
Assert . assertFalse ( result )
assertThat ( requestBody ( mockMatcher ) . retrieveValue ( req ) , is ( "" ) )
assertNotNull ( exception )
assertThat ( formatter . parse ( "70-01-01" ) , is ( PlainDate . of ( 2070 , 1 , 1 ) ) )
assertArrayEquals ( bytes , x )
Assert . assertFalse ( pg1 . intersects ( pg2 ) )
Assert . assertEquals ( "RAND" , actual )
assertEquals ( 0 , content . refCnt ( ) )
assertMockEndpointsSatisfied ( )
assertEquals ( "Link1 (" + BASE_URL + "#dest1)Link2 (http://xyz/abc)" , result )
assertTrue ( msg , dynAny . equal ( dynAny2 ) )
Assert . assertEquals ( "SELECT 3 * 5;" , text )
assertEquals ( 0.8 , val , 1e-5 )
Assert . assertEquals ( 24 , concept . getId ( ) . intValue ( ) )
Assert . fail ( "NullPointerException should have been thrown" )
assertEquals ( ExchangeKeys . TYPE . FILES_BUCKET , BsonRequest . selectRequestType ( pathTokens ) )
assertEquals ( 1 , r1 . compareTo ( r2 ) )
Assert . isTrue ( true )
assertThat ( getConfigurationOfDmnEngine ( ) . getFeelEngineFactory ( ) , is ( feelEngineFactory ) )
assertTrue ( matches )
assertThat ( response , containsString ( "% Abuse contact for '19.0.0.0 - 19.255.255.255' is 'more_abuse@ripe.net'" ) )
assertThat ( scope1 , is ( equalTo ( scope2 ) ) )
assertEquals ( 4 , em . createQuery ( query ) . getResultList ( ) . size ( ) )
assertEquals ( g1 , g2 )
Assert . assertTrue ( true )
assertNotNull ( result )
Assert . assertEquals ( Integer . toHexString ( 38 ) , sb . toString ( ) )
assertTrue ( n1 . equals ( n2 ) )
classes . assertIsPackagePrivate ( someInfo ( ) , clazz )
assertEquals ( expectedFeatures , tokens . get ( 0 ) . getAllFeatures ( ) )
assertEquals ( "Jersey/2.0-m09 (HttpUrlConnection 1.7.0_04) from the server" , response )
Assert . assertEquals ( "number emitted tuples" , numtuples , mapSink . count )
assertEquals ( expected , actual )
assertEquals ( 10 , map . size ( ) )
arrays . assertContainsSequence ( description , null , new short [ 2 ] )
assertNull ( kieModule )
assertPlanMatches ( expected )
assertThat ( result , is ( instanceOf ( Success . class ) ) )
assertEquals ( 2 , provider . getFilters ( ) . length )
Assert . assertEquals ( 211 , action . getResponse ( ) . getStatusLine ( ) . getStatusCode ( ) )
assertThat ( result , is ( nullValue ( ) ) )
Assert . assertEquals ( gen . generateInchi ( ac ) . getInChI ( ) , "InChI=1S/Cl/i1+2" )
assertEquals ( expResult , result )
Assert . assertEquals ( "Expected null result" , null , value )
assertEquals ( 1 , builder . build ( ) . getElementValues ( ) . size ( ) )
assertTrue ( or . isDefined ( ) )
assertions . containsSequence ( ( short ) 6 , ( short ) 6 , ( short ) 8 , ( short ) 10 , ( short ) 10 )
assertEquals ( Lists . newArrayList ( DefaultDistance . of ( 400 , DistanceUnit . METERS ) ) , Lists . newArrayList ( Distances . distanceIterator ( upto ) ) )
assertThat ( tuple . getShort ( "field" ) , equalTo ( val ) )
assertSame ( buf . array ( ) , result )
assertThat ( stringArgumentCaptor . getAllValues ( ) , containsInAnyOrder ( stringContainsInOrder ( Lists . newArrayList ( "Edge" , REL_1_ID . toString ( ) , "1" ) ) , stringContainsInOrder ( Lists . newArrayList ( "Edge" , REL_1_ID . toString ( ) , "2" ) ) ) )
assertTrue ( "Focus should be in the Grid" , getFocusedElement ( ) . getAttribute ( "class" ) . contains ( "v-grid" ) )
assertEquals ( actionA . hashCode ( ) , actionB . hashCode ( ) )
assertThat ( applied , is ( RuntimeContext . DEFAULT ) )
assertTrue ( emptyMap . isEmpty ( ) )
assertNull ( result )
Assert . assertNull ( result )
assertThat ( list . strList , hasSize ( 2 ) )
assertEquals ( "bar" , response . getHeaderString ( "foo" ) )
Assert . assertTrue ( isOk )
assertEquals ( 0 , trace . allProperties ( ) . size ( ) )
assertThat ( codes , containsInAnyOrder ( "50015-7" , "47239-9" ) )
assertThat ( msg . data ( ) , is ( new byte [ ] { 10 , 11 } ) )
assertFalse ( valid )
Assert . assertEquals ( HttpStatus . SC_UNAUTHORIZED , response . getCode ( ) )
assertThat ( restored . get ( ) , is ( option . get ( ) ) )
assertNotEquals ( clearCache1 , clearCache2 )
Assert . assertEquals ( "Session Application-Id should be the same as indicated." , BASE_AUTH_APPID , sessionAppId )
assertEquals ( 1540 , elements )
assertEquals ( 10 , b . size ( ) )
assertEquals ( withLabel , pd1 )
assertNull ( actionOut . getSdid ( ) )
assertNull ( x1 )
assertEquals ( "The first state on last page is not correct" , FIRST_STATE_LAST_PAGE , actual )
assertEquals ( expected , result )
assertThat ( rollup . isFreshEnough ( ) , is ( true ) )
assertEquals ( p1 , p2 )
Assert . assertEquals ( "true" , p . getProperty ( PseudoAuthenticationHandler . ANONYMOUS_ALLOWED ) )
assertThat ( mentions , hasItem ( mentionedEntity ( 0 , mention . length ( ) , EntityType . OBJECT_PROPERTY , iri ) ) )
assertObject ( list , gtype )
Assert . assertEquals ( 8 , service . getSalt ( ) . length ( ) )
assertEquals ( "Junit error" , normalize ( expectedString ) , normalize ( chart . toURLString ( ) ) )
assertEquals ( 500 , response . getStatus ( ) )
assertNull ( parsedArg )
assertTrue ( s . getName ( ) . equals ( "cleaning" ) )
assertTrue ( "CompressionMethods setter is not working correctly" , delegate . getCompressionMethods ( ) . equals ( supportedCompressions ) )
assertTrue ( value . isReplaceableBy ( 99L , 11 , ComparableComparator . INSTANCE ) )
assertThat ( result , Matchers . contains ( keys . toArray ( new Integer [ 0 ] ) ) )
assertEquals ( "1.17549E-38" , sb . toString ( ) )
assertOut ( "a = b" )
assertThat ( s , is ( "0600F" ) )
assertArrayEquals ( expected , actual )
this . assertScriptReturnsTrue ( "" + "String s = \"g\";\n" + "\n" + "switch (s) {\n" + "case \"a\": case \"b\": case \"c\":\n" + "    return false;\n" + "case \"d\": case \"e\": case \"f\":\n" + "    return false;\n" + "}\n" + "return true;" )
assertEquals ( expected , actual )
assertTrue ( verifyProps ( a , LIST_A ) )
assertThat ( xPath , is ( "(.//*[@id = 'idz']//*[self::a and ../*[last() = 1]])" ) )
assertTrue ( "Should have thrown exception of MyException class" , exception instanceof MyException )
assertEquals ( "Unsupported parameter test for pwd." , result )
assertEquals ( expected , result )
assertEquals ( 0 , errors . size ( ) )
assertTrue ( new String ( out . toByteArray ( ) ) . contains ( "[[NAME] VALUE]" ) )
assertNull ( expr . exec ( new PmExprExecCtxt ( pmConversation ) ) )
Assert . assertEquals ( "Missing component version" , MicroPipelineValidationResult . MISSING_COMPONENT_VERSION , new MicroPipelineValidator ( ) . validateComponent ( cfg , queues , Collections . < String > emptySet ( ) ) )
Assert . assertEquals ( result . getResultSize ( ) , 1 )
assertThat ( matcher . matches ( "<some xml=\"true\" />" ) , is ( false ) )
assertTrue ( "No similar movies found" , ! result . isEmpty ( ) )
Assert . assertEquals ( testEntry . f1 , extension )
assertEquals ( txt , new Text ( "updated node" ) )
Assert . assertEquals ( "RAND" , actual )
assertEquals ( ResetContent . MESSAGE , ri . getDescription ( ) )
assertEquals ( "2h2m2.500s" , s )
assertEquals ( NODE + '@' + DOMAIN , bareJID )
Assert . assertFalse ( "Config contains null" , sw . toString ( ) . contains ( "null" ) )
Assert . assertFalse ( provider . isValidField ( content , field ) )
assertTrue ( line . contains ( "2 live servers, 0 dead servers" ) )
assertEquals ( 1 , ksession . fireAllRules ( ) )
assertNull ( CommitUtils . getLatestFileRevision ( "/non_existent_file.txt" , "test_branch" , repo ) )
assertDestinationFileContentIsMultiPartContent ( )
assertFalse ( arr . some ( callbackfn ) )
assertEquals ( String . format ( "INSERT INTO %s.%s (col3) VALUES (nextval('%s.%s'))" , SCHEMA_NAME , TABLE_NAME , SCHEMA_NAME , SEQUENCE_NAME ) , theSql )
Assert . assertTrue ( "No metrics should be registered" , this . metricRegistry . getNames ( ) . isEmpty ( ) )
Assert . assertEquals ( aString , sut . getInstance ( ) )
Assert . assertNotNull ( tasks )
Assert . assertEquals ( 16 * iterations , lockedCounter . get ( ) )
assertEquals ( Arrays . asList ( "bar_1" , "bar_2" ) , json . getList ( "foo" ) )
assertNull ( factory . getBaseSkin ( facesContext ) . getParameter ( facesContext , Skin . GENERAL_BACKGROUND_COLOR ) )
assertEquals ( map1 , map2 )
Assert . assertTrue ( fastMergerDecisionMaker . isFastMergePossible ( fileMetadata ) )
assertThat ( e . getStatus ( ) , equalTo ( Status . NOT_FOUND ) )
assertTrue ( "Sun implementation took " + sunGap + " millisseconds and default implemetation took " + defaultGap + " millisseconds." , sunGap < defaultGap )
assertThat ( rowsAffected , is ( 1 ) )
Assert . assertTrue ( "Should have 0 event" , events . size ( ) == 0 )
assertTrue ( "Expected true not found" , streamOperationsService . streamExist ( StreamsHelper . STREAM_NAME ) )
assertEquals ( "Faire action sur \\*([^\\*]*)\\*" , descriptor . regex )
assertEquals ( "{a1:'v1',a2:'123',a4:'',b1:'true',b2:'123',b3:'null',c1:'v1',c2:'123',c4:''}" , r )
